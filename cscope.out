cscope 15 d:\softdevelopment\code\c\ucosii"               0000744980
	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/board/board.c

34 
	#_BOARD_C_


	)

36 
	~"bﬂrd.h
"

37 
	~"°rög.h
"

38 
	~"ªèrgë.h
"

43 
	#BOARD_LED_CNT
 8

	)

50 c⁄° 
uöt32_t
 
	gOscR©eIn
 = 
MAIN_OSC_XTAL_FREQ_HZ
;

51 c⁄° 
uöt32_t
 
	gExtR©eIn
 = 
EXT_CLOCK_IN_FREQ_HZ
;

56 
	$Bﬂrd_Key_Inô
()

58 
i
;

59 
LPC_IOCON_T
 *
pIOCON
 = 
LPC_IOCON
;

60 
i
 = 0; i < 
BOARD_KEY_CNT
; i++) {

61 
	`Chù_GPIO_PöSëDIR
(
LPC_GPIO_PORT
, 0, 
cs_keyBôs
[
i
], 0);

62 
pIOCON
->
PIO0
[
cs_keyIoC⁄Nd˚
[
i
]] = 0x80;

64 
	}
}

67 
	$Bﬂrd_LED_Inô
()

69 
i
;

71 
i
 = 0; i < 
BOARD_LED_CNT
; i++) {

72 
	`Chù_GPIO_PöSëDIR
(
LPC_GPIO_PORT
, 0, 
ÀdBôs
[
i
], 1);

73 
	`Chù_GPIO_PöSëSèã
(
LPC_GPIO_PORT
, 0, 
ÀdBôs
[
i
], 
åue
);

75 
	}
}

77 
uöt32_t
 
	$Bﬂrd_Key_GëKeyDown
(
uöt32_t
 
keyNdx
)

79 
LPC_GPIO_T
 *
pGP
 = 
LPC_GPIO_PORT
;

80  
pGP
->
W
[0][
cs_keyBôs
[
keyNdx
]] == 0 ? 1 : 0;

81 
	}
}

84 
STATIC
 
	$Bﬂrd_UART_Inô
()

87 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

93 
	`Chù_SWM_DißbÀFixedPö
(
SWM_FIXED_ACMP_I1
);

94 
	`Chù_SWM_DißbÀFixedPö
(
SWM_FIXED_ADC11
);

97 
	`Chù_Clock_SëUARTClockDiv
(1);

100 i‡(
DEBUG_UART
 =
LPC_USART0
) {

102 
	`Chù_SWM_MovabÀPöAssign
(
SWM_U0_TXD_O
, 4);

103 
	`Chù_SWM_MovabÀPöAssign
(
SWM_U0_RXD_I
, 0);

104 } i‡(
DEBUG_UART
 =
LPC_USART1
) {

105 
	`Chù_SWM_MovabÀPöAssign
(
SWM_U1_TXD_O
, 4);

106 
	`Chù_SWM_MovabÀPöAssign
(
SWM_U1_RXD_I
, 0);

108 
	`Chù_SWM_MovabÀPöAssign
(
SWM_U2_TXD_O
, 4);

109 
	`Chù_SWM_MovabÀPöAssign
(
SWM_U2_RXD_I
, 0);

113 
	`Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

114 
	}
}

118 
	$Inô_SPI_PöMux
()

121 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

122 
	`Chù_SWM_MovabÀPöAssign
(
SWM_SPI1_SSEL0_IO
, 15);

123 
	`Chù_SWM_MovabÀPöAssign
(
SWM_SPI1_SCK_IO
, 24);

124 
	`Chù_SWM_MovabÀPöAssign
(
SWM_SPI1_MISO_IO
, 25);

125 
	`Chù_SWM_MovabÀPöAssign
(
SWM_SPI1_MOSI_IO
, 26);

126 
	`Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

128 
	}
}

131 
	$Inô_I2C_PöMux
()

134 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

135 
	`Chù_SWM_E«bÀFixedPö
(
SWM_FIXED_I2C0_SDA
);

136 
	`Chù_SWM_E«bÀFixedPö
(
SWM_FIXED_I2C0_SCL
);

139 
	`Chù_IOCON_PöSëI2CMode
(
LPC_IOCON
, 
IOCON_PIO10
, 
PIN_I2CMODE_FASTPLUS
);

140 
	`Chù_IOCON_PöSëI2CMode
(
LPC_IOCON
, 
IOCON_PIO11
, 
PIN_I2CMODE_FASTPLUS
);

143 
	`Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

144 
	}
}

150 
	$Bﬂrd_LED_Së
(
uöt8_t
 
LEDNumbî
, 
boﬁ
 
On
)

152 i‡(
LEDNumbî
 < 
BOARD_LED_CNT
) {

153 
	`Chù_GPIO_PöSëSèã
(
LPC_GPIO_PORT
, 0, 
ÀdBôs
[
LEDNumbî
], (
boﬁ
Ë!
On
);

155 
	}
}

158 
boﬁ
 
	$Bﬂrd_LED_Te°
(
uöt8_t
 
LEDNumbî
)

160 
boﬁ
 
°©e
 = 
Ál£
;

162 i‡(
LEDNumbî
 < 
BOARD_LED_CNT
) {

163 
°©e
 = (
boﬁ
Ë!
	`Chù_GPIO_PöGëSèã
(
LPC_GPIO_PORT
, 0, 
ÀdBôs
[
LEDNumbî
]);

166  
°©e
;

167 
	}
}

170 
	$Bﬂrd_LED_ToggÀ
(
uöt8_t
 
LEDNumbî
)

172 i‡(
LEDNumbî
 < 
BOARD_LED_CNT
) {

173 
	`Chù_GPIO_PöToggÀSèã
(
LPC_GPIO_PORT
, 0, 
ÀdBôs
[
LEDNumbî
]);

175 
	}
}

178 *
	$Bﬂrd_ôﬂ
(
vÆue
, *
ªsu…
, 
ba£
)

180 * 
±r
 = 
ªsu…
, *
±r1
 =Ñesu…, 
tmp_ch¨
;

181 
tmp_vÆue
;

183 i‡(
ba£
 < 2 || ba£ > 36Ë{ *
ªsu…
 = '\0'; Ñesult; }

185 
tmp_vÆue
 = 
vÆue
;

186 
vÆue
 /
ba£
;

187 *
±r
++ = "zyxwvut§qp⁄mlkjihg„dcba9876543210123456789abcdefghijklmn›qr°uvwxyz" [35 + (
tmp_vÆue
 - 
vÆue
 * 
ba£
)];

188 }  
vÆue
 );

190 i‡(
tmp_vÆue
 < 0Ë*
±r
++ = '-';

191 *
±r
-- = '\0';

192 
±r1
 < 
±r
) {

193 
tmp_ch¨
 = *
±r
;

194 *
±r
--*
±r1
;

195 *
±r1
++ = 
tmp_ch¨
;

197  
ªsu…
;

198 
	}
}

201 
	$Bﬂrd_UARTPutCh¨
(
ch
)

203 #i‡
	`deföed
(
DEBUG_UART
)

204 
	`Chù_UART_SídBlockög
(
DEBUG_UART
, &
ch
, 1);

206 
	}
}

208 
	$Bﬂrd_UARTPutTextCh¨
(
ch
)

210 #i‡
	`deföed
(
DEBUG_UART
)

211 
¥evCh¨
 = 0;

212 i‡(
ch
 ='\n' && 
¥evCh¨
 != '\r')

214 
¥evCh¨
 = '\r';

215 
	`Chù_UART_SídBlockög
(
DEBUG_UART
, &
¥evCh¨
, 1);

216 
	`Chù_UART_SídBlockög
(
DEBUG_UART
, &
ch
, 1);

218 
	`Chù_UART_SídBlockög
(
DEBUG_UART
, &
ch
, 1);

219 
¥evCh¨
 = 
ch
;

222 
	}
}

226 
	$Bﬂrd_UARTGëCh¨
()

228 #i‡
	`deföed
(
DEBUG_UART
)

229 
uöt8_t
 
d©a
;

231 i‡(
	`Chù_UART_RódBlockög
(
DEBUG_UART
, &
d©a
, 1) == 1) {

232 
	`Bﬂrd_UARTPutCh¨
(
d©a
);

233  (Ë
d©a
;

236  
EOF
;

237 
	}
}

240 
	$Bﬂrd_UARTPutSTR
(c⁄° *
°r
)

242 #i‡
	`deföed
(
DEBUG_UART
)

243 *
°r
 != '\0') {

244 
	`Bﬂrd_UARTPutTextCh¨
(*
°r
++);

247 
	}
}

250 
	$Bﬂrd_Debug_Inô
()

252 #i‡
	`deföed
(
DEBUG_UART
)

253 
	`Bﬂrd_UART_Inô
();

254 
	`Chù_UART_Inô
(
DEBUG_UART
);

255 
	`Chù_UART_C⁄figD©a
(
DEBUG_UART
, 
UART_CFG_DATALEN_8
 | 
UART_CFG_PARITY_NONE
 | 
UART_CFG_STOPLEN_1
);

256 
	`Chù_Clock_SëUSARTNBa£ClockR©e
((115200 * 6 * 16), 
åue
);

257 
	`Chù_UART_SëBaud
(
DEBUG_UART
, 115200);

258 
	`Chù_UART_E«bÀ
(
DEBUG_UART
);

259 
	`Chù_UART_TXE«bÀ
(
DEBUG_UART
);

261 
	}
}

265 
	$Bﬂrd_Inô
()

267 
LPC_SWM_T
 *
pSWM
 = 
LPC_SWM
;

269 #i‡
	`deföed
(
DEBUG_ENABLE
)

270 
	`DEBUGINIT
();

272 #ifde‡
USE_IRC_AS_ROOT_CLOCK


273 
pSWM
->
PINENABLE0
 |1UL<<
SWM_FIXED_XTALIN
 | 1UL<<
SWM_FIXED_XTALOUT
;

277 
	`Chù_GPIO_Inô
(
LPC_GPIO_PORT
);

280 
	`Bﬂrd_LED_Inô
();

282 
	`Inô_SPI_PöMux
();

283 
	`Inô_I2C_PöMux
();

284 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/board/board.h

32 #i‚de‡
__BOARD_H_


33 
	#__BOARD_H_


	)

35 
	~"chù.h
"

38 #ifde‡
__˝lu•lus


58 
	#MAIN_OSC_XTAL_FREQ_HZ
 12000000

	)

62 
	#EXT_CLOCK_IN_FREQ_HZ
 0

	)

66 
	#BOARD_LED_CNT
 8

	)

67 
	#BOARD_KEY_CNT
 3

	)

69 
	e_íum_bﬂrdKeys


71 
BOARD_KEY_0
 = 0,

72 
BOARD_KEY_1
 = 1,

73 
BOARD_KEY_2
 = 2,

74 }
	tíum_bﬂrdKeys
;

77 #ifde‡ 
_BOARD_C_


78 c⁄° 
uöt8_t
 
ÀdBôs
[
BOARD_LED_CNT
] = {7, 13, 16, 17, 19, 27, 28, 18};

79 c⁄° 
uöt8_t
 
cs_keyBôs
[
BOARD_KEY_CNT
] = {12, 4 , 1};

80 c⁄° 
uöt8_t
 
cs_keyIoC⁄Nd˚
[
BOARD_KEY_CNT
] = {
IOCON_PIO12
, 
IOCON_PIO4
, 
IOCON_PIO1
};

87 
	#DEBUG_ENABLE


	)

101 
	#DEBUG_UART
 
LPC_USART1


	)

108 
	#BOARD_NXP_LPCXPRESSO_824


	)

111 
	~"bﬂrd_≠i.h
"

113 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/board/board_api.h

32 #i‚de‡
__BOARD_API_H_


33 
	#__BOARD_API_H_


	)

35 
	~"Õc_ty≥s.h
"

36 
	~<°dio.h
>

38 #ifde‡
__˝lu•lus


58 
Bﬂrd_Sy°emInô
();

66 
Bﬂrd_SëupMuxög
();

73 
Bﬂrd_SëupClockög
();

82 
Bﬂrd_SëupExtMem‹y
();

88 
Bﬂrd_Inô
();

94 
Bﬂrd_Debug_Inô
();

101 
Bﬂrd_UARTPutCh¨
(
ch
);

108 
Bﬂrd_UARTPutTextCh¨
(
ch
);

118 *
Bﬂrd_ôﬂ
(
vÆue
, *
ªsu…
, 
ba£
);

124 
Bﬂrd_UARTGëCh¨
();

131 
Bﬂrd_UARTPutSTR
(c⁄° *
°r
);

138 
uöt32_t
 
Bﬂrd_Key_GëKeyDown
(uöt32_à
keyIndex
);

146 
Bﬂrd_LED_Së
(
uöt8_t
 
LEDNumbî
, 
boﬁ
 
Sèã
);

153 
boﬁ
 
Bﬂrd_LED_Te°
(
uöt8_t
 
LEDNumbî
);

160 
Bﬂrd_LED_ToggÀ
(
uöt8_t
 
LEDNumbî
);

171 
Bﬂrd_SëLCDBacklight
(
uöt8_t
 
I¡ísôy
);

177 (*
p_msDñay_func_t
)(
	tuöt32_t
);

182 #i‡
deföed
(
DEBUG_ENABLE
)

183 #i‡
deföed
(
DEBUG_SEMIHOSTING
)

184 
	#DEBUGINIT
()

	)

185 
	#DEBUGOUT
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

186 
	#DEBUGSTR
(
°r
Ë
	`¥ötf
(°r)

	)

187 
	#DEBUGIN
(Ë(Ë
EOF


	)

190 
	#DEBUGINIT
(Ë
	`Bﬂrd_Debug_Inô
()

	)

191 
	#DEBUGOUT
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

192 
	#DEBUGSTR
(
°r
Ë
	`Bﬂrd_UARTPutSTR
(°r)

	)

193 
	#DEBUGIN
(Ë
	`Bﬂrd_UARTGëCh¨
()

	)

197 
	#DEBUGINIT
()

	)

198 
	#DEBUGOUT
(...)

	)

199 
	#DEBUGSTR
(
°r
)

	)

200 
	#DEBUGIN
(Ë(Ë
EOF


	)

207 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/board/retarget.h

45 
	~"bﬂrd.h
"

48 #i‡
deföed
(
__CC_ARM
)

50 
	~<°dio.h
>

51 
	~<π_misc.h
>

53 #i‡
deföed
(
DEBUG_ENABLE
)

54 #i‡
deföed
(
DEBUG_SEMIHOSTING
)

55 
	#ITM_P‹t8
(
n
Ë(*((vﬁ©ûê*Ë(0xE0000000 + 4 *Ç)))

	)

56 
	#ITM_P‹t16
(
n
Ë(*((vﬁ©ûê*Ë(0xE0000000 + 4 *Ç)))

	)

57 
	#ITM_P‹t32
(
n
Ë(*((vﬁ©ûê*Ë(0xE0000000 + 4 *Ç)))

	)

59 
	#DEMCR
 (*((vﬁ©ûê*Ë(0xE000EDFC)))

	)

60 
	#TRCENA
 0x01000000

	)

63 
	$_âywrch
(
ch
)

65 i‡(
DEMCR
 & 
TRCENA
) {

66 
	`ITM_P‹t32
(0) == 0) {}

67 
	`ITM_P‹t8
(0Ë
ch
;

69 
	}
}

72 
INLINE
 
	$BﬂrdOutCh¨
(
ch
)

74 
	`Bﬂrd_UARTPutTextCh¨
(
ch
);

75 
	}
}

80 
	s__FILE
 {

81 
	mh™dÀ
;

84 
FILE
 
	g__°dout
;

85 
FILE
 
	g__°dö
;

86 
FILE
 
	g__°dîr
;

88 *
	$_sys_›í
(c⁄° *
«me
, 
›ímode
)

91 
	}
}

93 
	$Âutc
(
c
, 
FILE
 *
f
)

95 #i‡
	`deföed
(
DEBUG_ENABLE
)

96 #i‡
	`deföed
(
DEBUG_SEMIHOSTING
)

97 
	`_âywrch
(
c
);

99 
	`BﬂrdOutCh¨
((Ë
c
);

103 
	}
}

105 
	$fgëc
(
FILE
 *
f
)

107 #i‡
	`deföed
(
DEBUG_ENABLE
Ë&& !deföed(
DEBUG_SEMIHOSTING
)

108  
	`Bﬂrd_UARTGëCh¨
();

112 
	}
}

114 
	$„º‹
(
FILE
 *
f
)

116  
EOF
;

117 
	}
}

119 
	$_sys_exô
(
ªtu∫_code
)

121 
œbñ
:

122 
	`__WFI
();

123 
œbñ
;

124 
	}
}

129 #i‡
deföed
(
__ICCARM__
)

154 
	~<yfuns.h
>

156 #i‡
deföed
(
DEBUG_ENABLE
Ë&& !deföed(
DEBUG_SEMIHOSTING
)

158 
	g_STD_BEGIN


160 #¥agm®
moduÀ_«me
 = "?__write"

166 
size_t
 
	$__wrôe
(
h™dÀ
, c⁄° *
buf„r
, 
size_t
 
size
)

168 #i‡
	`deföed
(
DEBUG_ENABLE
)

169 
size_t
 
nCh¨s
 = 0;

171 i‡(
buf„r
 == 0) {

182 i‡(–
h™dÀ
 !
_LLIO_STDOUT
Ë&& ( h™dÀ !
_LLIO_STDERR
) ) {

183  
_LLIO_ERROR
;

186  ; 
size
 != 0; --size) {

187 
	`Bﬂrd_UARTPutTextCh¨
(*
buf„r
++);

188 ++
nCh¨s
;

191  
nCh¨s
;

193  
size
;

195 
	}
}

197 
	g_STD_END


202 #i‡
deföed
–
__GNUC__
 )

204 
	~<°dio.h
>

206 #i‡
deföed
(
__NEWLIB__
)

207 
	#WRITEFUNC
 
_wrôe


	)

208 
	#READFUNC
 
_ªad


	)

210 #i‡(
__REDLIB_INTERFACE_VERSION__
 >= 20000)

212 
	#WRITEFUNC
 
__sys_wrôe


	)

213 
	#READFUNC
 
__sys_ªadc


	)

216 
	#WRITEFUNC
 
__wrôe


	)

217 
	#READFUNC
 
__ªadc


	)

221 #i‡
deföed
(
DEBUG_ENABLE
)

222 #i‡
deföed
(
DEBUG_SEMIHOSTING
)

227 #i‡!
deföed
(
DEBUG_SEMIHOSTING
)

228 
	$WRITEFUNC
(
iFûeH™dÀ
, *
pcBuf„r
, 
iLígth
)

230 #i‡
	`deföed
(
DEBUG_ENABLE
)

231 
i
;

232 
i
 = 0; i < 
iLígth
; i++) {

233 
	`Bﬂrd_UARTPutTextCh¨
(
pcBuf„r
[
i
]);

237  
iLígth
;

238 
	}
}

240 #i‡!
deföed
(
__NEWLIB__
)

245 
	$READFUNC
()

247 #i‡
	`deföed
(
DEBUG_ENABLE
)

248 
c
 = 
	`Bﬂrd_UARTGëCh¨
();

249  
c
;

254 
	}
}

262 
	$READFUNC
(
iFûeH™dÀ
, *
pcBuf„r
, 
iLígth
)

264 
idx
;

265 
idx
 = 0; idx < 
iLígth
; idx++) {

266 
c
 = 
	`Bﬂrd_UARTGëCh¨
();

267 i‡(
c
 =
EOF
) ;

268 
pcBuf„r
[
idx
] = 
c
;

270  
idx
;

271 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/chip.h

32 #i‚de‡
__CHIP_H_


33 
	#__CHIP_H_


	)

35 
	~"Õc_ty≥s.h
"

36 
	~"cmsis.h
"

38 #ifde‡
__˝lu•lus


42 #i‚de‡
CORE_M0PLUS


43 #îr‹ 
CORE_M0PLUS
 
is
 
nŸ
 
deföed
 
the
 
LPC8xx
 
¨chôe˘uª


44 #îr‹ 
CORE_M0PLUS
 
should
 
be
 
deföed
 
as
 
∑π
 
of
 
your
 
compûî
 
deföe
 
li°


47 #i‚de‡
CHIP_LPC8XX


48 #îr‹ 
The
 
LPC8XX
 
Chù
 
ö˛ude
 
∑th
 
is
 
u£d
 
this
 
buûd
, 
but


49 #îr‹ 
CHIP_LPC8XX
 
is
 
nŸ
 
deföed
!

58 
	#LPC_FLASH_BASE
 (0x00000000UL)

	)

59 
	#LPC_RAM_BASE
 (0x10000000UL)

	)

60 
	#LPC_ROM_BASE
 (0x1FFF0000UL)

	)

61 
	#LPC_APB0_BASE
 (0x40000000UL)

	)

62 
	#LPC_AHB_BASE
 (0x50000000UL)

	)

65 
	#LPC_WWDT_BASE
 (0x40000000UL)

	)

66 
	#LPC_MRT_BASE
 (0x40004000UL)

	)

67 
	#LPC_WKT_BASE
 (0x40008000UL)

	)

68 
	#LPC_SWM_BASE
 (0x4000C000UL)

	)

69 
	#LPC_ADC_BASE
 (0x4001C000ULË

	)

70 
	#LPC_PMU_BASE
 (0x40020000UL)

	)

71 
	#LPC_CMP_BASE
 (0x40024000UL)

	)

72 
	#LPC_DMATIRGMUX_BASE
 (0x40028000ULË

	)

73 
	#LPC_INMUX_BASE
 (0x4002C000ULË

	)

75 
	#LPC_FMC_BASE
 (0x40040000UL)

	)

76 
	#LPC_IOCON_BASE
 (0x40044000UL)

	)

77 
	#LPC_SYSCTL_BASE
 (0x40048000UL)

	)

78 
	#LPC_I2C0_BASE
 (0x40050000UL)

	)

79 
	#LPC_I2C1_BASE
 (0x40054000ULË

	)

80 
	#LPC_SPI0_BASE
 (0x40058000UL)

	)

81 
	#LPC_SPI1_BASE
 (0x4005C000UL)

	)

82 
	#LPC_USART0_BASE
 (0x40064000UL)

	)

83 
	#LPC_USART1_BASE
 (0x40068000UL)

	)

84 
	#LPC_USART2_BASE
 (0x4006C000UL)

	)

85 
	#LPC_I2C2_BASE
 (0x40070000ULË

	)

86 
	#LPC_I2C3_BASE
 (0x40074000ULË

	)

89 
	#LPC_CRC_BASE
 (0x50000000UL)

	)

90 
	#LPC_SCT_BASE
 (0x50004000UL)

	)

91 
	#LPC_DMA_BASE
 (0x50008000ULË

	)

93 
	#LPC_GPIO_PORT_BASE
 (0xA0000000UL)

	)

94 
	#LPC_PIN_INT_BASE
 (0xA0004000UL)

	)

96 
	#LPC_WWDT
 ((
LPC_WWDT_T
 *Ë
LPC_WWDT_BASE
)

	)

97 
	#LPC_SPI0
 ((
LPC_SPI_T
 *Ë
LPC_SPI0_BASE
)

	)

98 
	#LPC_SPI1
 ((
LPC_SPI_T
 *Ë
LPC_SPI1_BASE
)

	)

99 
	#LPC_USART0
 ((
LPC_USART_T
 *Ë
LPC_USART0_BASE
)

	)

100 
	#LPC_USART1
 ((
LPC_USART_T
 *Ë
LPC_USART1_BASE
)

	)

101 
	#LPC_USART2
 ((
LPC_USART_T
 *Ë
LPC_USART2_BASE
)

	)

102 
	#LPC_WKT
 ((
LPC_WKT_T
 *Ë
LPC_WKT_BASE
)

	)

103 
	#LPC_PMU
 ((
LPC_PMU_T
 *Ë
LPC_PMU_BASE
)

	)

104 
	#LPC_CRC
 ((
LPC_CRC_T
 *Ë
LPC_CRC_BASE
)

	)

105 
	#LPC_SCT
 ((
LPC_SCT_T
 *Ë
LPC_SCT_BASE
)

	)

106 
	#LPC_GPIO_PORT
 ((
LPC_GPIO_T
 *Ë
LPC_GPIO_PORT_BASE
)

	)

107 
	#LPC_PININT
 ((
LPC_PININT_T
 *Ë
LPC_PIN_INT_BASE
)

	)

108 
	#LPC_IOCON
 ((
LPC_IOCON_T
 *Ë
LPC_IOCON_BASE
)

	)

109 
	#LPC_SWM
 ((
LPC_SWM_T
 *Ë
LPC_SWM_BASE
)

	)

110 
	#LPC_SYSCTL
 ((
LPC_SYSCTL_T
 *Ë
LPC_SYSCTL_BASE
)

	)

111 
	#LPC_CMP
 ((
LPC_CMP_T
 *Ë
LPC_CMP_BASE
)

	)

112 
	#LPC_FMC
 ((
LPC_FMC_T
 *Ë
LPC_FMC_BASE
)

	)

113 
	#LPC_MRT
 ((
LPC_MRT_T
 *Ë
LPC_MRT_BASE
)

	)

114 
	#LPC_I2C0
 ((
LPC_I2C_T
 *Ë
LPC_I2C0_BASE
)

	)

116 #ifde‡
CHIP_LPC82X


118 
	#LPC_ADC
 ((
LPC_ADC_T
 *Ë
LPC_ADC_BASE
)

	)

119 
	#LPC_I2C1
 ((
LPC_I2C_T
 *Ë
LPC_I2C1_BASE
)

	)

120 
	#LPC_I2C2
 ((
LPC_I2C_T
 *Ë
LPC_I2C2_BASE
)

	)

121 
	#LPC_I2C3
 ((
LPC_I2C_T
 *Ë
LPC_I2C3_BASE
)

	)

122 
	#LPC_DMA
 ((
LPC_DMA_T
 *Ë
LPC_DMA_BASE
)

	)

123 
	#LPC_DMATRIGMUX
 ((
LPC_DMATRIGMUX_T
 *Ë
LPC_DMATIRGMUX_BASE
)

	)

124 
	#LPC_INMUX
 ((
LPC_INMUX_T
 *Ë
LPC_INMUX_BASE
)

	)

128 
	#LPC_I2C_BASE
 
LPC_I2C0_BASE


	)

129 
	#LPC_I2C
 
LPC_I2C0


	)

130 
	#LPC_SYSCON
 
LPC_SYSCTL


	)

133 #ifde‡
CHIP_LPC82X


134 
	#I2C_IRQH™dÀr
 
I2C0_IRQH™dÀr


	)

135 
	#PININT0_IRQH™dÀr
 
PIN_INT0_IRQH™dÀr


	)

136 
	#PININT1_IRQH™dÀr
 
PIN_INT1_IRQH™dÀr


	)

137 
	#PININT2_IRQH™dÀr
 
PIN_INT2_IRQH™dÀr


	)

138 
	#PININT3_IRQH™dÀr
 
PIN_INT3_IRQH™dÀr


	)

139 
	#PININT4_IRQH™dÀr
 
PIN_INT4_IRQH™dÀr


	)

140 
	#PININT5_IRQH™dÀr
 
PIN_INT5_IRQH™dÀr


	)

141 
	#PININT6_IRQH™dÀr
 
PIN_INT6_IRQH™dÀr


	)

142 
	#PININT7_IRQH™dÀr
 
PIN_INT7_IRQH™dÀr


	)

159 c⁄° 
uöt32_t
 
OscR©eIn
;

167 c⁄° 
uöt32_t
 
ExtR©eIn
;

174 
	~"sysc⁄_8xx.h
"

175 
	~"˛ock_8xx.h
"

176 
	~"fmc_8xx.h
"

177 
	~"ioswm_8xx.h
"

179 #i‚de‡
_CHIP_COMMON_


180 
	~"../../≥ri_drivî/≥ri_drivî.h
"

191 
uöt32_t
 
Sy°emC‹eClock
;

198 
Sy°emC‹eClockUpd©e
();

206 
Chù_Sy°emInô
();

214 
Chù_SëupXèlClockög
();

220 
Chù_SëupIrcClockög
();

226 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/clock_8xx.c

31 
	#_CHIP_COMMON_


	)

32 
	~"chù.h
"

40 c⁄° 
uöt32_t
 
	gwdtOSCR©e
[
WDTLFO_OSC_4_60
 + 1] = {

60 
uöt16_t
 
	m‰eq_maö
;

61 
uöt16_t
 
	m‰eq_sys
;

62 
uöt16_t
 
	m‰eq_fcco
;

63 
uöt16_t
 
	mm£l
;

64 
uöt16_t
 
	mp£l
;

65 
uöt16_t
 
	mdividî
;

66 } 
	tLPC_8XX_PLL_T
;

87 c⁄° 
LPC_8XX_PLL_T
 
	gc⁄fig_èb
[] = {

160 c⁄° 
uöt16_t
 
	gc⁄fig_èb_˘
 = (
c⁄fig_èb
Ë/ (
LPC_8XX_PLL_T
);

161 
uöt16_t
 
	gc⁄fig_èb_idx
 = 0;

166 
uöt32_t
 
	gSy°emC‹eClock
;

172 
	$∂l_c⁄fig
(c⁄° 
LPC_8XX_PLL_T
* 
∂l_cfg
)

174 
	`Chù_SYSCTL_PowîUp
(
SYSCTL_SLPWAKE_IRC_PD
);

175 
	`Chù_Clock_SëSy°emPLLSour˚
(
SYSCTL_PLLCLKSRC_IRC
);

176 
	`Chù_Clock_SëMaöClockSour˚
(
SYSCTL_MAINCLKSRC_IRC
);

177 
	`Chù_FMC_SëFLASHAc˚ss
(
FLASHTIM_30MHZ_CPU
);

178 
	`Chù_SYSCTL_PowîDown
(
SYSCTL_SLPWAKE_SYSPLL_PD
);

179 
	`Chù_Clock_SëupSy°emPLL
(
∂l_cfg
->
m£l
,ÖŒ_cfg->
p£l
);

180 
	`Chù_SYSCTL_PowîUp
(
SYSCTL_SLPWAKE_SYSPLL_PD
);

181 !
	`Chù_Clock_IsSy°emPLLLocked
()) {}

182 
	`Chù_Clock_SëSysClockDiv
(
∂l_cfg
->
dividî
);

183 
	`Chù_Clock_SëMaöClockSour˚
(
SYSCTL_MAINCLKSRC_PLLOUT
);

184 
	}
}

187 
uöt32_t
 
	$Chù_Clock_GëWDTLFOR©e
(
uöt32_t
 
ªg
)

189 
uöt32_t
 
div
;

190 
CHIP_WDTLFO_OSC_T
 
˛k
;

193 
˛k
 = (
CHIP_WDTLFO_OSC_T
Ë((
ªg
 >> 5) & 0xF);

194 
div
 = 
ªg
 & 0x1F;

197  
wdtOSCR©e
[
˛k
] / ((
div
 + 1) << 1);

198 
	}
}

201 
uöt32_t
 
	$Chù_Clock_GëPLLFªq
(
uöt32_t
 
PLLReg
, uöt32_à
öputR©e
)

203 
uöt32_t
 
m_vÆ
 = ((
PLLReg
 & 0x1F) + 1);

205  (
öputR©e
 * 
m_vÆ
);

206 
	}
}

212 
boﬁ
 
	$Chù_IRC_SëFªq
(
uöt32_t
 
maö
, uöt32_à
sys
)

214 
uöt16_t
 
‰eq_m
 = 
maö
/1000000;

215 
uöt16_t
 
‰eq_s
 = 
sys
/1000000;

216 
boﬁ
 
found
 = 
Ál£
;

217 
uöt32_t
 
i
 = 0;

219 i‡(
‰eq_s
 > 30)

220  
Ál£
;

221 i‡(
‰eq_m
 > 96)

222  
Ál£
;

224 
i
=0; i<
c⁄fig_èb_˘
; i++) {

225 i‡((
‰eq_m
 =
c⁄fig_èb
[
i
].
‰eq_maö
Ë&& (
‰eq_s
 =c⁄fig_èb[i].
‰eq_sys
)) {

226 
c⁄fig_èb_idx
 = 
i
;

227 
found
 = 
åue
;

231 i‡(
found
 =
åue
) {

232 
	`∂l_c⁄fig
(&
c⁄fig_èb
[
c⁄fig_èb_idx
]);

235  
found
;

236 
	}
}

239 #ifde‡
LPC_PWRD_API


240 
	$Chù_IRC_SëFªq_ROM
(
uöt32_t
 
sys
)

242 
uöt32_t
 
cmd
[4], 
ª•
[2];

244 
	`Chù_SYSCTL_PowîUp
(
SYSCTL_SLPWAKE_IRC_PD
);

245 
	`Chù_Clock_SëSy°emPLLSour˚
(
SYSCTL_PLLCLKSRC_IRC
);

246 
	`Chù_FMC_SëFLASHAc˚ss
(
FLASHTIM_30MHZ_CPU
);

248 
cmd
[0] = 
	`Chù_Clock_GëI¡OscR©e
() / 1000;

249 
cmd
[1] = 
sys
 / 1000;

250 
cmd
[2] = 
CPU_FREQ_EQU
;

251 
cmd
[3] = 
sys
 / 10000;

252 
LPC_PWRD_API
->
	`£t_∂l
(
cmd
, 
ª•
);

254 
ª•
[0] !
PLL_CMD_SUCCESS
) {}

255 
	}
}

262 
	$Sy°emC‹eClockUpd©e
()

265 
Sy°emC‹eClock
 = 
	`Chù_Clock_GëSy°emClockR©e
();

266 
	}
}

268 
	$Chù_Clock_SëSy°emPLLSour˚
(
CHIP_SYSCTL_PLLCLKSRC_T
 
§c
)

270 
LPC_SYSCTL
->
SYSPLLCLKSEL
 = (
uöt32_t
Ë
§c
;

273 
LPC_SYSCTL
->
SYSPLLCLKUEN
 = 0;

274 
LPC_SYSCTL
->
SYSPLLCLKUEN
 = 1;

275 
	}
}

278 
	$Chù_Clock_SëPLLBy∑ss
(
boﬁ
 
by∑ss
, boﬁ 
high‰
)

280 
uöt32_t
 
˘æ
 = 0;

282 i‡(
by∑ss
) {

283 
˘æ
 |= (1 << 0);

285 i‡(
high‰
) {

286 
˘æ
 |= (1 << 1);

289 
LPC_SYSCTL
->
SYSOSCCTRL
 = 
˘æ
;

290 
	}
}

293 
	$Chù_Clock_SëMaöClockSour˚
(
CHIP_SYSCTL_MAINCLKSRC_T
 
§c
)

295 
LPC_SYSCTL
->
MAINCLKSEL
 = (
uöt32_t
Ë
§c
;

298 
LPC_SYSCTL
->
MAINCLKUEN
 = 0;

299 
LPC_SYSCTL
->
MAINCLKUEN
 = 1;

300 
	}
}

303 
	$Chù_Clock_SëCLKOUTSour˚
(
CHIP_SYSCTL_CLKOUTSRC_T
 
§c
, 
uöt32_t
 
div
)

305 
LPC_SYSCTL
->
CLKOUTSEL
 = (
uöt32_t
Ë
§c
;

308 
LPC_SYSCTL
->
CLKOUTUEN
 = 0;

309 
LPC_SYSCTL
->
CLKOUTUEN
 = 1;

310 
LPC_SYSCTL
->
CLKOUTDIV
 = 
div
;

311 
	}
}

314 
uöt32_t
 
	$Chù_Clock_GëWDTOSCR©e
()

316  
	`Chù_Clock_GëWDTLFOR©e
(
LPC_SYSCTL
->
WDTOSCCTRL
 & ~
SYSCTL_WDTOSCCTRL_RESERVED
);

317 
	}
}

320 
uöt32_t
 
	$Chù_Clock_GëSy°emPLLInClockR©e
()

322 
uöt32_t
 
˛kR©e
;

324 (
CHIP_SYSCTL_PLLCLKSRC_T
Ë(
LPC_SYSCTL
->
SYSPLLCLKSEL
 & 0x3)) {

325 
SYSCTL_PLLCLKSRC_IRC
:

326 
˛kR©e
 = 
	`Chù_Clock_GëI¡OscR©e
();

329 
SYSCTL_PLLCLKSRC_SYSOSC
:

330 
˛kR©e
 = 
	`Chù_Clock_GëMaöOscR©e
();

333 
SYSCTL_PLLCLKSRC_EXT_CLKIN
:

334 
˛kR©e
 = 
	`Chù_Clock_GëExtClockInR©e
();

338 
˛kR©e
 = 0;

341  
˛kR©e
;

342 
	}
}

345 
uöt32_t
 
	$Chù_Clock_GëSy°emPLLOutClockR©e
()

347  
	`Chù_Clock_GëPLLFªq
((
LPC_SYSCTL
->
SYSPLLCTRL
 & ~
SYSCTL_SYSPLLCTRL_RESERVED
),

348 
	`Chù_Clock_GëSy°emPLLInClockR©e
());

349 
	}
}

352 
uöt32_t
 
	$Chù_Clock_GëMaöClockR©e
()

354 
uöt32_t
 
˛kR©e
 = 0;

356 (
CHIP_SYSCTL_MAINCLKSRC_T
Ë(
LPC_SYSCTL
->
MAINCLKSEL
 & 0x3)) {

357 
SYSCTL_MAINCLKSRC_IRC
:

358 
˛kR©e
 = 
	`Chù_Clock_GëI¡OscR©e
();

361 
SYSCTL_MAINCLKSRC_PLLIN
:

362 
˛kR©e
 = 
	`Chù_Clock_GëSy°emPLLInClockR©e
();

365 
SYSCTL_MAINCLKSRC_WDTOSC
:

366 
˛kR©e
 = 
	`Chù_Clock_GëWDTOSCR©e
();

369 
SYSCTL_MAINCLKSRC_PLLOUT
:

370 
˛kR©e
 = 
	`Chù_Clock_GëSy°emPLLOutClockR©e
();

374  
˛kR©e
;

375 
	}
}

378 
uöt32_t
 
	$Chù_Clock_GëSy°emClockR©e
()

381  
	`Chù_Clock_GëMaöClockR©e
(Ë/ (
LPC_SYSCTL
->
SYSAHBCLKDIV
 & ~
SYSCTL_SYSAHBCLKDIV_RESERVED
);

382 
	}
}

385 
uöt32_t
 
	$Chù_Clock_GëUSARTNBa£ClockR©e
()

387 
uöt64_t
 
ö˛k
;

388 
uöt32_t
 
div
;

390 
div
 = (
uöt32_t
Ë
	`Chù_Clock_GëUARTClockDiv
();

391 i‡(
div
 == 0) {

393 
ö˛k
 = 0;

396 
uöt32_t
 
mu…
, 
divf
;

399 
ö˛k
 = (
uöt64_t
Ë(
	`Chù_Clock_GëMaöClockR©e
(Ë/ 
div
);

401 
divf
 = 
	`Chù_SYSCTL_GëUSARTFRGDividî
();

402 i‡(
divf
 == 0xFF) {

404 
mu…
 = (
uöt32_t
Ë
	`Chù_SYSCTL_GëUSARTFRGMu…ùlõr
();

407 
ö˛k
 = (ö˛k * 256Ë/ (
uöt64_t
Ë(256 + 
mu…
);

411  (
uöt32_t
Ë
ö˛k
;

412 
	}
}

415 
uöt32_t
 
	$Chù_Clock_SëUSARTNBa£ClockR©e
(
uöt32_t
 
øã
, 
boﬁ
 
fE«bÀ
)

417 
uöt32_t
 
div
, 
ö˛k
;

420 
ö˛k
 = 
	`Chù_Clock_GëMaöClockR©e
();

423 
div
 = 
ö˛k
 / 
øã
;

424 i‡(
div
 == 0) {

425 
div
 = 1;

429 
	`Chù_Clock_SëUARTClockDiv
((
uöt8_t
Ë
div
);

431 i‡(
fE«bÀ
) {

432 
uöt32_t
 
u¨t_‰a_mu…ùlõr
;

435 
	`Chù_SYSCTL_PîùhRe£t
(
RESET_UARTFBRG
);

438 
	`Chù_SYSCTL_SëUSARTFRGDividî
(0xFF);

442 
u¨t_‰a_mu…ùlõr
 = ((
ö˛k
 / 
div
Ë* 256Ë/ 
øã
;

445 
	`Chù_SYSCTL_SëUSARTFRGMu…ùlõr
((
uöt8_t
Ë
u¨t_‰a_mu…ùlõr
);

449 
	`Chù_SYSCTL_SëUSARTFRGDividî
(0);

452  
	`Chù_Clock_GëUSARTNBa£ClockR©e
();

453 
	}
}

456 
uöt32_t
 
	$Chù_Clock_GëIOCONCLKDIVClockR©e
(
CHIP_PIN_CLKDIV_T
 
ªg
)

458 
uöt32_t
 
div
 = 
LPC_SYSCTL
->
IOCONCLKDIV
[
ªg
] & ~
SYSCTL_IOCONCLKDIV_RESERVED
;

459 
uöt32_t
 
maö_˛k
 = 
	`Chù_Clock_GëMaöClockR©e
();

461  (
div
 =0Ë? 0 : (
maö_˛k
 / div);

462 
	}
}

464 
	$Chù_Clock_SëIOCONCLKDIV
(
CHIP_PIN_CLKDIV_T
 
ªg
, 
uöt8_t
 
div
)

466 
t_ªg
 = 
IOCONCLK_MAX
-
ªg
;

467 
LPC_SYSCTL
->
IOCONCLKDIV
[
t_ªg
] = 
div
;

468 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/clock_8xx.h

32 #i‚de‡
__CLOCK_8XX_H_


33 
	#__CLOCK_8XX_H_


	)

35 #ifde‡
__˝lu•lus


45 
	#SYSCTL_IRC_FREQ
 (12000000)

	)

46 #i‚de‡
MAX_CLOCK_FREQ


47 
	#MAX_CLOCK_FREQ
 (30000000)

	)

53 
	eCHIP_SYSCTL_PLLCLKSRC
 {

54 
SYSCTL_PLLCLKSRC_IRC
 = 0,

55 
SYSCTL_PLLCLKSRC_SYSOSC
,

56 
SYSCTL_PLLCLKSRC_RESERVED
,

57 
SYSCTL_PLLCLKSRC_EXT_CLKIN
,

58 } 
	tCHIP_SYSCTL_PLLCLKSRC_T
;

64 
	eCHIP_WDTLFO_OSC
 {

65 
WDTLFO_OSC_ILLEGAL
,

66 
WDTLFO_OSC_0_60
,

67 
WDTLFO_OSC_1_05
,

68 
WDTLFO_OSC_1_40
,

69 
WDTLFO_OSC_1_75
,

70 
WDTLFO_OSC_2_10
,

71 
WDTLFO_OSC_2_40
,

72 
WDTLFO_OSC_2_70
,

73 
WDTLFO_OSC_3_00
,

74 
WDTLFO_OSC_3_25
,

75 
WDTLFO_OSC_3_50
,

76 
WDTLFO_OSC_3_75
,

77 
WDTLFO_OSC_4_00
,

78 
WDTLFO_OSC_4_20
,

79 
WDTLFO_OSC_4_40
,

80 
WDTLFO_OSC_4_60


81 } 
	tCHIP_WDTLFO_OSC_T
;

86 
	eCHIP_SYSCTL_MAINCLKSRC
 {

87 
SYSCTL_MAINCLKSRC_IRC
 = 0,

88 
SYSCTL_MAINCLKSRC_PLLIN
,

89 
SYSCTL_MAINCLKSRC_WDTOSC
,

90 
SYSCTL_MAINCLKSRC_PLLOUT
,

91 } 
	tCHIP_SYSCTL_MAINCLKSRC_T
;

96 
	eCHIP_SYSCTL_CLOCK
 {

97 
SYSCTL_CLOCK_SYS
 = 0,

98 
SYSCTL_CLOCK_ROM
,

99 
SYSCTL_CLOCK_RAM
,

100 
SYSCTL_CLOCK_FLASHREG
,

101 
SYSCTL_CLOCK_FLASH
,

102 
SYSCTL_CLOCK_I2C0
,

103 
SYSCTL_CLOCK_GPIO
,

104 
SYSCTL_CLOCK_SWM
,

105 
SYSCTL_CLOCK_SCT
,

106 
SYSCTL_CLOCK_WKT
,

107 
SYSCTL_CLOCK_MRT
,

108 
SYSCTL_CLOCK_SPI0
,

109 
SYSCTL_CLOCK_SPI1
,

110 
SYSCTL_CLOCK_CRC
,

111 
SYSCTL_CLOCK_UART0
,

112 
SYSCTL_CLOCK_UART1
,

113 
SYSCTL_CLOCK_UART2
,

114 
SYSCTL_CLOCK_WWDT
,

115 
SYSCTL_CLOCK_IOCON
,

116 
SYSCTL_CLOCK_ACOMP
,

119 
SYSCTL_CLOCK_I2C1
 = 21,

120 
SYSCTL_CLOCK_I2C2
,

121 
SYSCTL_CLOCK_I2C3
,

122 
SYSCTL_CLOCK_ADC
,

123 
SYSCTL_CLOCK_MTB
 = 26,

124 
SYSCTL_CLOCK_DMA
 = 29,

125 } 
	tCHIP_SYSCTL_CLOCK_T
;

128 
	#SYSCTL_CLOCK_I2C
 
SYSCTL_CLOCK_I2C0


	)

129 
	#SYSCTL_CLOCK_ACMP
 
SYSCTL_CLOCK_ACOMP


	)

134 
	eCHIP_SYSCTL_CLKOUTSRC
 {

135 
SYSCTL_CLKOUTSRC_IRC
 = 0,

136 
SYSCTL_CLKOUTSRC_SYSOSC
,

137 
SYSCTL_CLKOUTSRC_WDTOSC
,

138 
SYSCTL_CLKOUTSRC_MAINSYSCLK
,

139 } 
	tCHIP_SYSCTL_CLKOUTSRC_T
;

148 
STATIC
 
INLINE
 
Chù_Clock_SëupSy°emPLL
(
uöt8_t
 
m£l
, uöt8_à
p£l
)

150 
LPC_SYSCTL
->
SYSPLLCTRL
 = (
m£l
 & 0x1FË| ((
p£l
 & 0x3) << 5);

157 
STATIC
 
INLINE
 
boﬁ
 
Chù_Clock_IsSy°emPLLLocked
()

159  (
boﬁ
Ë((
LPC_SYSCTL
->
SYSPLLSTAT
 & 1) != 0);

169 
STATIC
 
INLINE
 
Chù_Clock_SëWDTOSC
(
CHIP_WDTLFO_OSC_T
 
wdt˛k
, 
uöt8_t
 
div
)

171 
LPC_SYSCTL
->
WDTOSCCTRL
 = (((
uöt32_t
Ë
wdt˛k
Ë<< 5Ë| ((
div
 >> 1) - 1);

178 
STATIC
 
INLINE
 
CHIP_SYSCTL_MAINCLKSRC_T
 
Chù_Clock_GëMaöClockSour˚
()

180  (
CHIP_SYSCTL_MAINCLKSRC_T
Ë(
LPC_SYSCTL
->
MAINCLKSEL
 & ~
SYSCTL_MAINCLKSEL_RESERVED
);

190 
STATIC
 
INLINE
 
Chù_Clock_SëSysClockDiv
(
uöt32_t
 
div
)

192 
LPC_SYSCTL
->
SYSAHBCLKDIV
 = 
div
;

200 
STATIC
 
INLINE
 
Chù_Clock_E«bÀPîùhClock
(
CHIP_SYSCTL_CLOCK_T
 
˛k
)

202 
LPC_SYSCTL
->
SYSAHBCLKCTRL
 = (1 << 
˛k
Ë| (LPC_SYSCTL->SYSAHBCLKCTRL & ~
SYSCTL_SYSAHBCLKCTRL_RESERVED
);

210 
STATIC
 
INLINE
 
Chù_Clock_DißbÀPîùhClock
(
CHIP_SYSCTL_CLOCK_T
 
˛k
)

212 
LPC_SYSCTL
->
SYSAHBCLKCTRL
 &~((1 << 
˛k
Ë| 
SYSCTL_SYSAHBCLKCTRL_RESERVED
);

222 
STATIC
 
INLINE
 
Chù_Clock_SëUARTClockDiv
(
uöt32_t
 
div
)

224 
LPC_SYSCTL
->
UARTCLKDIV
 = 
div
;

232 
STATIC
 
INLINE
 
uöt32_t
 
Chù_Clock_GëUARTClockDiv
()

234  
LPC_SYSCTL
->
UARTCLKDIV
 & ~
SYSCTL_UARTCLKDIV_RESERVED
;

242 
STATIC
 
INLINE
 
Chù_SYSCTL_SëUSARTFRGDividî
(
uöt8_t
 
div
)

244 
LPC_SYSCTL
->
UARTFRGDIV
 = (
uöt32_t
Ë
div
;

251 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SYSCTL_GëUSARTFRGDividî
()

253  
LPC_SYSCTL
->
UARTFRGDIV
 & ~
SYSCTL_UARTFRGDIV_RESERVED
;

261 
STATIC
 
INLINE
 
Chù_SYSCTL_SëUSARTFRGMu…ùlõr
(
uöt8_t
 
mu…
)

263 
LPC_SYSCTL
->
UARTFRGMULT
 = (
uöt32_t
Ë
mu…
;

270 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SYSCTL_GëUSARTFRGMu…ùlõr
()

272  
LPC_SYSCTL
->
UARTFRGMULT
 & ~
SYSCTL_UARTFRGMULT_RESERVED
;

292 
uöt32_t
 
Chù_Clock_SëUSARTNBa£ClockR©e
(uöt32_à
øã
, 
boﬁ
 
fE«bÀ
);

298 
uöt32_t
 
Chù_Clock_GëUSARTNBa£ClockR©e
();

304 
STATIC
 
INLINE
 
uöt32_t
 
Chù_Clock_GëMaöOscR©e
()

306  
OscR©eIn
;

313 
STATIC
 
INLINE
 
uöt32_t
 
Chù_Clock_GëI¡OscR©e
()

315  
SYSCTL_IRC_FREQ
;

322 
STATIC
 
INLINE
 
uöt32_t
 
Chù_Clock_GëExtClockInR©e
()

324  
ExtR©eIn
;

334 
Chù_Clock_SëSy°emPLLSour˚
(
CHIP_SYSCTL_PLLCLKSRC_T
 
§c
);

345 
Chù_Clock_SëPLLBy∑ss
(
boﬁ
 
by∑ss
, boﬁ 
high‰
);

354 
Chù_Clock_SëMaöClockSour˚
(
CHIP_SYSCTL_MAINCLKSRC_T
 
§c
);

366 
Chù_Clock_SëCLKOUTSour˚
(
CHIP_SYSCTL_CLKOUTSRC_T
 
§c
, 
uöt32_t
 
div
);

373 
uöt32_t
 
Chù_Clock_GëWDTOSCR©e
();

379 
uöt32_t
 
Chù_Clock_GëSy°emPLLInClockR©e
();

385 
uöt32_t
 
Chù_Clock_GëSy°emPLLOutClockR©e
();

391 
uöt32_t
 
Chù_Clock_GëMaöClockR©e
();

397 
uöt32_t
 
Chù_Clock_GëSy°emClockR©e
();

405 
uöt32_t
 
Chù_Clock_GëIOCONCLKDIVClockR©e
(
CHIP_PIN_CLKDIV_T
 
ªg
);

414 
Chù_Clock_SëIOCONCLKDIV
(
CHIP_PIN_CLKDIV_T
 
ªg
, 
uöt8_t
 
div
);

435 
boﬁ
 
Chù_IRC_SëFªq
(
uöt32_t
 
maö
, uöt32_à
sys
);

443 
Chù_IRC_SëFªq_ROM
(
uöt32_t
 
sys
);

449 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/cmsis.h

32 #i‚de‡
__CMSIS_H_


33 
	#__CMSIS_H_


	)

35 
	~"Õc_ty≥s.h
"

38 
	#CHIP_LPC8XX


	)

39 
	#CHIP_LPC82X


	)

42 #ifde‡
__˝lu•lus


51 #i‡
deföed
(
__ARMCC_VERSION
)

53 #¥agm®
düg_suµªss
 2525

54 #¥agm®
push


55 #¥agm®
™⁄_uni⁄s


56 #ñi‡
deföed
(
__CWCC__
)

57 #¥agm®
push


58 #¥agm®
˝p_exãnsi⁄s
 
⁄


59 #ñi‡
deföed
(
__GNUC__
)

61 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
)

63 #¥agm®
œnguage
=
exãnded


65 #îr‹ 
NŸ
 
suµ‹ãd
 
compûî
 
ty≥


68 #i‡!
deföed
(
CORE_M0PLUS
)

69 
PÀa£
 #deföê
	#CORE_M0PLUS


	)

78 
	#__CM0PLUS_REV
 0x0001

	)

79 
	#__MPU_PRESENT
 0

	)

80 
	#__VTOR_PRESENT
 1

	)

81 
	#__NVIC_PRIO_BITS
 2

	)

82 
	#__Víd‹_SysTickC⁄fig
 0

	)

95 
Re£t_IRQn
 = -15,

96 
N⁄MaskabÀI¡_IRQn
 = -14,

97 
H¨dFau…_IRQn
 = -13,

98 
SVCÆl_IRQn
 = -5,

99 
PídSV_IRQn
 = -2,

100 
SysTick_IRQn
 = -1,

103 
SPI0_IRQn
 = 0,

104 
SPI1_IRQn
 = 1,

105 
Re£rved0_IRQn
 = 2,

106 
UART0_IRQn
 = 3,

107 
UART1_IRQn
 = 4,

108 
UART2_IRQn
 = 5,

109 
Re£rved1_IRQn
 = 6,

110 
I2C1_IRQn
 = 7,

111 
I2C0_IRQn
 = 8,

112 
I2C_IRQn
 = 8,

113 
SCT_IRQn
 = 9,

114 
MRT_IRQn
 = 10,

115 
CMP_IRQn
 = 11,

116 
WDT_IRQn
 = 12,

117 
BOD_IRQn
 = 13,

118 
FLASH_IRQn
 = 14,

119 
WKT_IRQn
 = 15,

120 
ADC_SEQA_IRQn
 = 16,

121 
ADC_SEQB_IRQn
 = 17,

122 
ADC_THCMP_IRQn
 = 18,

123 
ADC_OVR_IRQn
 = 19,

124 
DMA_IRQn
 = 20,

125 
I2C2_IRQn
 = 21,

126 
I2C3_IRQn
 = 22,

127 
Re£rved2_IRQn
 = 23,

128 
PININT0_IRQn
 = 24,

129 
PIN_INT0_IRQn
 = 24,

130 
PININT1_IRQn
 = 25,

131 
PIN_INT1_IRQn
 = 25,

132 
PININT2_IRQn
 = 26,

133 
PIN_INT2_IRQn
 = 26,

134 
PININT3_IRQn
 = 27,

135 
PIN_INT3_IRQn
 = 27,

136 
PININT4_IRQn
 = 28,

137 
PIN_INT4_IRQn
 = 28,

138 
PININT5_IRQn
 = 29,

139 
PIN_INT5_IRQn
 = 29,

140 
PININT6_IRQn
 = 30,

141 
PIN_INT6_IRQn
 = 30,

142 
PININT7_IRQn
 = 31,

143 
PIN_INT7_IRQn
 = 31,

144 } 
	tIRQn_Ty≥
;

150 
	~"c‹e_cm0∂us.h
"

156 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/error_8xx.h

32 #i‚de‡
__ERROR_8XX_H__


33 
	#__ERROR_8XX_H__


	)

49  
	mLPC_OK
 = 0,

50  
	mLPC_ERROR
,

53 
	mERR_ISP_BASE
 = 0x00000000,

54  
	mERR_ISP_INVALID_COMMAND
 = 
ERR_ISP_BASE
 + 1,

55  
	mERR_ISP_SRC_ADDR_ERROR
,

56  
	mERR_ISP_DST_ADDR_ERROR
,

57  
	mERR_ISP_SRC_ADDR_NOT_MAPPED
,

58  
	mERR_ISP_DST_ADDR_NOT_MAPPED
,

59  
	mERR_ISP_COUNT_ERROR
,

60  
	mERR_ISP_INVALID_SECTOR
,

61  
	mERR_ISP_SECTOR_NOT_BLANK
,

62  
	mERR_ISP_SECTOR_NOT_PREPARED_FOR_WRITE_OPERATION
,

63  
	mERR_ISP_COMPARE_ERROR
,

64  
	mERR_ISP_BUSY
,

65  
	mERR_ISP_PARAM_ERROR
,

66  
	mERR_ISP_ADDR_ERROR
,

67  
	mERR_ISP_ADDR_NOT_MAPPED
,

68  
	mERR_ISP_CMD_LOCKED
,

69  
	mERR_ISP_INVALID_CODE
,

70  
	mERR_ISP_INVALID_BAUD_RATE
,

71  
	mERR_ISP_INVALID_STOP_BIT
,

72  
	mERR_ISP_CODE_READ_PROTECTION_ENABLED
,

75 
	mERR_I2C_BASE
 = 0x00060000,

76  
	mERR_I2C_NAK
 = 
ERR_I2C_BASE
 + 1,

77  
	mERR_I2C_BUFFER_OVERFLOW
,

78  
	mERR_I2C_BYTE_COUNT_ERR
,

79  
	mERR_I2C_LOSS_OF_ARBRITRATION
,

80  
	mERR_I2C_SLAVE_NOT_ADDRESSED
,

81  
	mERR_I2C_LOSS_OF_ARBRITRATION_NAK_BIT
,

82  
	mERR_I2C_GENERAL_FAILURE
,

83  
	mERR_I2C_REGS_SET_TO_DEFAULT
,

84  
	mERR_I2C_TIMEOUT
,

87  
	mERR_NO_ERROR
 = 
LPC_OK
,

88 
	mERR_UART_BASE
 = 0x00080000,

89  
	mERR_UART_RXD_BUSY
 = 
ERR_UART_BASE
 + 1,

90  
	mERR_UART_TXD_BUSY
,

91  
	mERR_UART_OVERRUN_FRAME_PARITY_NOISE
,

92  
	mERR_UART_UNDERRUN
,

93  
	mERR_UART_PARAM
,

94 } 
	tEº‹Code_t
;

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/fmc_8xx.h

32 #i‚de‡
__FMC_8XX_H_


33 
	#__FMC_8XX_H_


	)

35 #ifde‡
__˝lu•lus


48 
__I
 
uöt32_t
 
RESERVED1
[4];

49 
__IO
 
uöt32_t
 
FLASHCFG
;

50 
__I
 
uöt32_t
 
RESERVED2
[3];

51 
__IO
 
uöt32_t
 
FMSSTART
;

52 
__IO
 
uöt32_t
 
FMSSTOP
;

53 
__I
 
uöt32_t
 
RESERVED3
;

54 
__I
 
uöt32_t
 
FMSW
[1];

55 } 
	tLPC_FMC_T
;

58 
	#FMC_FLASHCFG_RESERVED
 (~3)

	)

59 
	#FMC_FMSSTART_RESERVED
 0xff„0000

	)

60 
	#FMC_FMSSTOP_RESERVED
 0x7f„0000

	)

66 
FLASHTIM_20MHZ_CPU
 = 0,

67 
FLASHTIM_30MHZ_CPU
 = 1,

68 } 
	tFMC_FLASHTIM_T
;

77 
STATIC
 
INLINE
 
Chù_FMC_SëFLASHAc˚ss
(
FMC_FLASHTIM_T
 
˛ks
)

79 
uöt32_t
 
tmp
 = 
LPC_FMC
->
FLASHCFG
 & (~((0x3)|
FMC_FLASHCFG_RESERVED
));

82 
LPC_FMC
->
FLASHCFG
 = 
tmp
 | 
˛ks
;

86 
	#FMC_FLASHSIG_BUSY
 (1UL << 31)

	)

98 
STATIC
 
INLINE
 
Chù_FMC_CompuãSig«tuª
(
uöt32_t
 
°¨t
, uöt32_à
°›
)

100 
LPC_FMC
->
FMSSTART
 = (
°¨t
 >> 4);

101 
LPC_FMC
->
FMSSTOP
 = (
°›
 >> 4Ë| 
FMC_FLASHSIG_BUSY
;

114 
STATIC
 
INLINE
 
Chù_FMC_CompuãSig«tuªBlocks
(
uöt32_t
 
°¨t
, uöt32_à
blocks
)

116 
Chù_FMC_CompuãSig«tuª
(
°¨t
, (°¨à+ (
blocks
 * 16)));

123 
STATIC
 
INLINE
 
boﬁ
 
Chù_FMC_IsSig«tuªBusy
()

125  (
boﬁ
Ë((
LPC_FMC
->
FMSSTOP
 & 
FMC_FLASHSIG_BUSY
) != 0);

133 
STATIC
 
INLINE
 
uöt32_t
 
Chù_FMC_GëSig«tuª
(
ödex
)

135  
LPC_FMC
->
FMSW
[
ödex
];

142 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/ioswm_8xx.c

31 
	#_CHIP_COMMON_


	)

32 
	~"chù.h
"

38 
	#PINASSIGN_IDX
(
movabÀ
Ë(((movabÀË>> 4))

	)

39 
	#PINSHIFT
(
movabÀ
Ë(((movabÀË& 0xFË<< 3)

	)

54 
	$Chù_IOCON_PöSëMode
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
CHIP_PIN_MODE_T
 
mode
)

56 
uöt32_t
 
ªg
;

58 
ªg
 = 
pIOCON
->
PIO0
[
pö
] & ~(
PIN_MODE_MASK
);

59 
pIOCON
->
PIO0
[
pö
] = 
ªg
 | (
mode
 << 
PIN_MODE_BITNUM
);

60 
	}
}

63 
	$Chù_IOCON_PöSëHy°îesis
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
boﬁ
 
íabÀ
)

65 i‡(
íabÀ
 =
åue
) {

66 
	`Chù_IOCON_PöE«bÀHy°îesis
(
pIOCON
, 
pö
);

69 
	`Chù_IOCON_PöDißbÀHy°îesis
(
pIOCON
, 
pö
);

71 
	}
}

74 
	$Chù_IOCON_PöSëI≈utInvîãd
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
boﬁ
 
övît
)

76 i‡(
övît
 =
åue
) {

77 
	`Chù_IOCON_PöE«bÀI≈utInvîãd
(
pIOCON
, 
pö
);

80 
	`Chù_IOCON_PöDißbÀI≈utInvîãd
(
pIOCON
, 
pö
);

82 
	}
}

85 
	$Chù_IOCON_PöSëO≥nDøöMode
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
boﬁ
 
›í_døö
)

87 i‡(
›í_døö
 =
åue
) {

88 
	`Chù_IOCON_PöE«bÀO≥nDøöMode
(
pIOCON
, 
pö
);

91 
	`Chù_IOCON_PöDißbÀO≥nDøöMode
(
pIOCON
, 
pö
);

93 
	}
}

96 
	$Chù_IOCON_PöSëSam∂eMode
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
CHIP_PIN_SMODE_T
 
smode
)

98 
uöt32_t
 
ªg
;

100 
ªg
 = 
pIOCON
->
PIO0
[
pö
] & ~(
PIN_SMODE_MASK
);

101 
pIOCON
->
PIO0
[
pö
] = 
ªg
 | (
smode
 << 
PIN_SMODE_BITNUM
);

102 
	}
}

105 
	$Chù_IOCON_PöSëClockDivis‹
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
CHIP_PIN_CLKDIV_T
 
˛kdiv
)

107 
uöt32_t
 
ªg
;

109 
ªg
 = 
pIOCON
->
PIO0
[
pö
] & ~(
PIN_CLKDIV_MASK
);

110 
pIOCON
->
PIO0
[
pö
] = 
ªg
 | (
˛kdiv
 << 
PIN_CLKDIV_BITNUM
);

111 
	}
}

114 
	$Chù_IOCON_PöSëI2CMode
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
CHIP_PIN_I2CMODE_T
 
mode
)

116 
uöt32_t
 
ªg
;

119 
ªg
 = 
pIOCON
->
PIO0
[
pö
] & ~(
PIN_I2CMODE_MASK
);

120 
pIOCON
->
PIO0
[
pö
] = 
ªg
 | (
mode
 << 
PIN_I2CMODE_BITNUM
);

121 
	}
}

124 
	$Chù_IOCON_SëPöMuxög
(
LPC_IOCON_T
 *
pIOCON
, c⁄° 
PINMUX_GRP_T
* 
pöAºay
, 
uöt32_t
 
¨øyLígth
)

126 
uöt32_t
 
ix
;

128 
ix
 = 0; ix < 
¨øyLígth
; ix++ ) {

129 
	`Chù_IOCON_PöMuxSë
(
pIOCON
, 
pöAºay
[
ix
].
pö
,ÖöAºay[ix].
modefunc
);

131 
	}
}

134 
	$Chù_SWM_MovabÀPöAssign
(
CHIP_SWM_PIN_MOVABLE_T
 
movabÀ
, 
uöt8_t
 
pö
)

136 
uöt32_t
 
ãmp
;

137 
pöshi·
 = 
	`PINSHIFT
(
movabÀ
), 
ªgIndex
 = 
	`PINASSIGN_IDX
(movable);

139 
ãmp
 = 
LPC_SWM
->
PINASSIGN
[
ªgIndex
] & (~(0xFF << 
pöshi·
));

140 
LPC_SWM
->
PINASSIGN
[
ªgIndex
] = 
ãmp
 | (
pö
 << 
pöshi·
);

141 
	}
}

144 
	$Chù_SWM_FixedPöE«bÀ
(
CHIP_SWM_PIN_FIXED_T
 
pö
, 
boﬁ
 
íabÀ
)

146 i‡(
íabÀ
) {

147 
	`Chù_SWM_E«bÀFixedPö
(
pö
);

150 
	`Chù_SWM_DißbÀFixedPö
(
pö
);

152 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/ioswm_8xx.h

32 #i‚de‡
__IOCON_8XX_H_


33 
	#__IOCON_8XX_H_


	)

35 #ifde‡
__˝lu•lus


44 
	#NUM_IOCON_PIO
 (29)

	)

50 
uöt32_t
 
pö
:8;

51 
uöt32_t
 
modefunc
:24;

52 } 
	tPINMUX_GRP_T
;

63 
__IO
 
uöt32_t
 
PIO0
[
NUM_IOCON_PIO
 + 2];

64 } 
	tLPC_IOCON_T
;

70 
	#PIN_MODE_MASK
 (0x3 << 3)

	)

71 
	#PIN_MODE_BITNUM
 (3)

	)

74 
	#PIN_HYS_MASK
 (0x1 << 5)

	)

75 
	#PIN_HYS_BITNUM
 (5)

	)

78 
	#PIN_INV_MASK
 (0x1 << 6)

	)

79 
	#PIN_INV_BITNUM
 (6)

	)

82 
	#PIN_OD_MASK
 (0x1 << 10)

	)

83 
	#PIN_OD_BITNUM
 (10)

	)

86 
	#PIN_SMODE_MASK
 (0x3 << 11)

	)

87 
	#PIN_SMODE_BITNUM
 (11)

	)

90 
	#PIN_CLKDIV_MASK
 (0x7 << 13)

	)

91 
	#PIN_CLKDIV_BITNUM
 (13)

	)

94 
	#PIN_I2CMODE_MASK
 (0x3 << 8)

	)

95 
	#PIN_I2CMODE_BITNUM
 (8)

	)

106 
	eCHIP_PINx
 {

107 
IOCON_PIO0
 = 0x11,

108 
IOCON_PIO1
 = 0x0B,

109 
IOCON_PIO2
 = 0x06,

110 
IOCON_PIO3
 = 0x05,

111 
IOCON_PIO4
 = 0x04,

112 
IOCON_PIO5
 = 0x03,

114 
IOCON_PIO6
 = 0x10,

115 
IOCON_PIO7
 = 0x0F,

116 
IOCON_PIO8
 = 0x0E,

117 
IOCON_PIO9
 = 0x0D,

118 
IOCON_PIO10
 = 0x08,

119 
IOCON_PIO11
 = 0x07,

120 
IOCON_PIO12
 = 0x02,

121 
IOCON_PIO13
 = 0x01,

123 
IOCON_PIO14
 = 0x12,

124 
IOCON_PIO15
 = 0x0A,

125 
IOCON_PIO16
 = 0x09,

126 
IOCON_PIO17
 = 0x00,

127 
IOCON_PIO_NUL0
 = 0x0C,

130 
IOCON_PIO18
 = 0x1E,

131 
IOCON_PIO19
 = 0x1D,

132 
IOCON_PIO20
 = 0x1C,

133 
IOCON_PIO21
 = 0x1B,

134 
IOCON_PIO22
 = 0x1A,

135 
IOCON_PIO23
 = 0x19,

136 
IOCON_PIO24
 = 0x18,

137 
IOCON_PIO25
 = 0x17,

138 
IOCON_PIO26
 = 0x16,

139 
IOCON_PIO27
 = 0x15,

140 
IOCON_PIO28
 = 0x14,

141 
IOCON_PIO_NUL1
 = 0x13,

142 } 
	tCHIP_PINx_T
;

147 
	eCHIP_PIN_MODE
 {

148 
PIN_MODE_INACTIVE
 = 0,

149 
PIN_MODE_PULLDN
 = 1,

150 
PIN_MODE_PULLUP
 = 2,

151 
PIN_MODE_REPEATER
 = 3

152 } 
	tCHIP_PIN_MODE_T
;

157 
	eCHIP_PIN_SMODE
 {

158 
PIN_SMODE_BYPASS
 = 0,

159 
PIN_SMODE_CYC1
 = 1,

160 
PIN_SMODE_CYC2
 = 2,

161 
PIN_SMODE_CYC3
 = 3

162 } 
	tCHIP_PIN_SMODE_T
;

167 
	eCHIP_PIN_I2CMODE
 {

168 
PIN_I2CMODE_STDFAST
 = 0,

169 
PIN_I2CMODE_GPIO
 = 1,

170 
PIN_I2CMODE_FASTPLUS
 = 2

171 } 
	tCHIP_PIN_I2CMODE_T
;

180 
STATIC
 
INLINE
 
Chù_IOCON_PöMuxSë
(
LPC_IOCON_T
 *
pIOCON
, 
uöt8_t
 
pö
, 
uöt32_t
 
modefunc
)

182 
pIOCON
->
PIO0
[
pö
] = 
modefunc
;

192 
Chù_IOCON_SëPöMuxög
(
LPC_IOCON_T
 *
pIOCON
, c⁄° 
PINMUX_GRP_T
* 
pöAºay
, 
uöt32_t
 
¨øyLígth
);

202 
Chù_IOCON_PöSëMode
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
CHIP_PIN_MODE_T
 
mode
);

212 
Chù_IOCON_PöSëHy°îesis
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
boﬁ
 
íabÀ
);

221 
STATIC
 
INLINE
 
Chù_IOCON_PöE«bÀHy°îesis
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
)

223 
pIOCON
->
PIO0
[
pö
] |
PIN_HYS_MASK
;

233 
STATIC
 
INLINE
 
Chù_IOCON_PöDißbÀHy°îesis
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
)

235 
pIOCON
->
PIO0
[
pö
] &~
PIN_HYS_MASK
;

245 
Chù_IOCON_PöSëI≈utInvîãd
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
boﬁ
 
övît
);

253 
STATIC
 
INLINE
 
Chù_IOCON_PöE«bÀI≈utInvîãd
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
)

255 
pIOCON
->
PIO0
[
pö
] |
PIN_INV_MASK
;

264 
STATIC
 
INLINE
 
Chù_IOCON_PöDißbÀI≈utInvîãd
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
)

266 
pIOCON
->
PIO0
[
pö
] &~
PIN_INV_MASK
;

277 
Chù_IOCON_PöSëO≥nDøöMode
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
boﬁ
 
›í_døö
);

285 
STATIC
 
INLINE
 
Chù_IOCON_PöE«bÀO≥nDøöMode
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
)

287 
pIOCON
->
PIO0
[
pö
] |
PIN_OD_MASK
;

296 
STATIC
 
INLINE
 
Chù_IOCON_PöDißbÀO≥nDøöMode
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
)

298 
pIOCON
->
PIO0
[
pö
] &~
PIN_OD_MASK
;

307 
STATIC
 
INLINE
 
Chù_IOCON_PöSëToDeÁu…
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
)

309 i‡(
pö
 =
IOCON_PIO10
 ||Öö =
IOCON_PIO11
)

310 
pIOCON
->
PIO0
[
pö
] = 0x80;

312 
pIOCON
->
PIO0
[
pö
] = 0x90;

322 
Chù_IOCON_PöSëSam∂eMode
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
CHIP_PIN_SMODE_T
 
smode
);

331 
Chù_IOCON_PöSëClockDivis‹
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
CHIP_PIN_CLKDIV_T
 
˛kdiv
);

341 
Chù_IOCON_PöSëI2CMode
(
LPC_IOCON_T
 *
pIOCON
, 
CHIP_PINx_T
 
pö
, 
CHIP_PIN_I2CMODE_T
 
mode
);

357 #i‡
deföed
(
CHIP_LPC82X
)

358 
__IO
 
uöt32_t
 
PINASSIGN
[12];

359 
__I
 
uöt32_t
 
RESERVED0
[100];

361 
__IO
 
uöt32_t
 
PINASSIGN
[9];

362 
__I
 
uöt32_t
 
RESERVED0
[103];

364 
__IO
 
uöt32_t
 
PINENABLE0
;

365 } 
	tLPC_SWM_T
;

367 #i‡
deföed
(
CHIP_LPC82X
)

368 
	#SWM_PINENABLE0_RESERVED
 (~0x1ffffff)

	)

370 
	#SWM_PINENABLE0_RESERVED
 (~0x1ff)

	)

376 #i‡
deföed
(
CHIP_LPC82X
)

377 
	eCHIP_SWM_PIN_MOVABLE
 {

378 
SWM_U0_TXD_O
,

379 
SWM_U0_RXD_I
,

380 
SWM_U0_RTS_O
,

381 
SWM_U0_CTS_I
,

383 
SWM_U0_SCLK_IO
 = 0x10,

384 
SWM_U1_TXD_O
,

385 
SWM_U1_RXD_I
,

386 
SWM_U1_RTS_O
,

388 
SWM_U1_CTS_I
 = 0x20,

389 
SWM_U1_SCLK_IO
,

390 
SWM_U2_TXD_O
,

391 
SWM_U2_RXD_I
,

393 
SWM_U2_RTS_O
 = 0x30,

394 
SWM_U2_CTS_I
,

395 
SWM_U2_SCLK_IO
,

396 
SWM_SPI0_SCK_IO
,

398 
SWM_SPI0_MOSI_IO
 = 0x40,

399 
SWM_SPI0_MISO_IO
,

400 
SWM_SPI0_SSEL0_IO
,

401 
SWM_SPI0_SSEL1_IO
,

403 
SWM_SPI0_SSEL2_IO
 = 0x50,

404 
SWM_SPI0_SSEL3_IO
,

405 
SWM_SPI1_SCK_IO
,

406 
SWM_SPI1_MOSI_IO
,

408 
SWM_SPI1_MISO_IO
 = 0x60,

409 
SWM_SPI1_SSEL0_IO
,

410 
SWM_SPI1_SSEL1_IO
,

411 
SWM_SCT_IN0_I
,

413 
SWM_SCT_IN1_I
 = 0x70,

414 
SWM_SCT_IN2_I
,

415 
SWM_SCT_IN3_I
,

416 
SWM_SCT_OUT0_O
,

418 
SWM_SCT_OUT1_O
 = 0x80,

419 
SWM_SCT_OUT2_O
,

420 
SWM_SCT_OUT3_O
,

421 
SWM_SCT_OUT4_O
,

423 
SWM_SCT_OUT5_O
 = 0x90,

424 
SWM_I2C1_SDA_IO
,

425 
SWM_I2C1_SCL_IO
,

426 
SWM_I2C2_SDA_IO
,

428 
SWM_I2C2_SCL_IO
 = 0xA0,

429 
SWM_I2C3_SDA_IO
,

430 
SWM_I2C3_SCL_IO
,

431 
SWM_ADC_PINTRIG0_I
,

433 
SWM_ADC_PINTRIG1_I
 = 0xB0,

434 
SWM_ACMP_O_O
,

435 
SWM_CLKOUT_O
,

436 
SWM_GPIO_INT_BMAT_O
,

438 } 
	tCHIP_SWM_PIN_MOVABLE_T
;

440 
	eCHIP_SWM_PIN_MOVABLE
 {

441 
SWM_U0_TXD_O
 = 0x00,

442 
SWM_U0_RXD_I
 = 0x01,

443 
SWM_U0_RTS_O
 = 0x02,

444 
SWM_U0_CTS_I
 = 0x03,

445 
SWM_U0_SCLK_IO
 = 0x10,

446 
SWM_U1_TXD_O
 = 0x11,

447 
SWM_U1_RXD_I
 = 0x12,

448 
SWM_U1_RTS_O
 = 0x13,

449 
SWM_U1_CTS_I
 = 0x20,

450 
SWM_U1_SCLK_IO
 = 0x21,

451 
SWM_U2_TXD_O
 = 0x22,

452 
SWM_U2_RXD_I
 = 0x23,

453 
SWM_U2_RTS_O
 = 0x30,

454 
SWM_U2_CTS_I
 = 0x31,

455 
SWM_U2_SCLK_IO
 = 0x32,

456 
SWM_SPI0_SCK_IO
 = 0x33,

457 
SWM_SPI0_MOSI_IO
 = 0x40,

458 
SWM_SPI0_MISO_IO
 = 0x41,

459 
SWM_SPI0_SSEL_IO
 = 0x42,

460 
SWM_SPI1_SCK_IO
 = 0x43,

461 
SWM_SPI1_MOSI_IO
 = 0x50,

462 
SWM_SPI1_MISO_IO
 = 0x51,

463 
SWM_SPI1_SSEL_IO
 = 0x52,

464 
SWM_CTIN_0_I
 = 0x53,

465 
SWM_CTIN_1_I
 = 0x60,

466 
SWM_CTIN_2_I
 = 0x61,

467 
SWM_CTIN_3_I
 = 0x62,

468 
SWM_CTOUT_0_O
 = 0x63,

469 
SWM_CTOUT_1_O
 = 0x70,

470 
SWM_CTOUT_2_O
 = 0x71,

471 
SWM_CTOUT_3_O
 = 0x72,

472 
SWM_I2C_SDA_IO
 = 0x73,

473 
SWM_I2C_SCL_IO
 = 0x80,

474 
SWM_ACMP_O_O
 = 0x81,

475 
SWM_CLKOUT_O
 = 0x82,

476 
SWM_GPIO_INT_BMAT_O
 = 0x83,

477 } 
	tCHIP_SWM_PIN_MOVABLE_T
;

483 #i‡
deföed
(
CHIP_LPC82X
)

484 
	eCHIP_SWM_PIN_FIXED
 {

485 
SWM_FIXED_ACMP_I1
 = 0,

486 
SWM_FIXED_ACMP_I2
 = 1,

487 
SWM_FIXED_ACMP_I3
 = 2,

488 
SWM_FIXED_ACMP_I4
 = 3,

489 
SWM_FIXED_SWCLK
 = 4,

490 
SWM_FIXED_SWDIO
 = 5,

491 
SWM_FIXED_XTALIN
 = 6,

492 
SWM_FIXED_XTALOUT
 = 7,

493 
SWM_FIXED_RST
 = 8,

494 
SWM_FIXED_CLKIN
 = 9,

495 
SWM_FIXED_VDDCMP
 = 10,

496 
SWM_FIXED_I2C0_SDA
 = 11,

497 
SWM_FIXED_I2C0_SCL
 = 12,

498 
SWM_FIXED_ADC0
 = 13,

499 
SWM_FIXED_ADC1
 = 14,

500 
SWM_FIXED_ADC2
 = 15,

501 
SWM_FIXED_ADC3
 = 16,

502 
SWM_FIXED_ADC4
 = 17,

503 
SWM_FIXED_ADC5
 = 18,

504 
SWM_FIXED_ADC6
 = 19,

505 
SWM_FIXED_ADC7
 = 20,

506 
SWM_FIXED_ADC8
 = 21,

507 
SWM_FIXED_ADC9
 = 22,

508 
SWM_FIXED_ADC10
 = 23,

509 
SWM_FIXED_ADC11
 = 24,

510 } 
	tCHIP_SWM_PIN_FIXED_T
;

512 
	eCHIP_SWM_PIN_FIXED
 {

513 
SWM_FIXED_ACMP_I1
 = 0,

514 
SWM_FIXED_ACMP_I2
 = 1,

515 
SWM_FIXED_SWCLK
 = 2,

516 
SWM_FIXED_SWDIO
 = 3,

517 
SWM_FIXED_XTALIN
 = 4,

518 
SWM_FIXED_XTALOUT
 = 5,

519 
SWM_FIXED_RST
 = 6,

520 
SWM_FIXED_CLKIN
 = 7,

521 
SWM_FIXED_VDDCMP
 = 8

522 } 
	tCHIP_SWM_PIN_FIXED_T
;

530 
STATIC
 
INLINE
 
Chù_SWM_Inô
()

532 
Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

540 
STATIC
 
INLINE
 
Chù_SWM_Deöô
()

542 
Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

551 
Chù_SWM_MovabÀPöAssign
(
CHIP_SWM_PIN_MOVABLE_T
 
movabÀ
, 
uöt8_t
 
assign
);

559 
Chù_SWM_FixedPöE«bÀ
(
CHIP_SWM_PIN_FIXED_T
 
pö
, 
boﬁ
 
íabÀ
);

566 
STATIC
 
INLINE
 
Chù_SWM_E«bÀFixedPö
(
CHIP_SWM_PIN_FIXED_T
 
pö
)

568 
LPC_SWM
->
PINENABLE0
 &~((1 << (
uöt32_t
Ë
pö
Ë| 
SWM_PINENABLE0_RESERVED
);

576 
STATIC
 
INLINE
 
Chù_SWM_DißbÀFixedPö
(
CHIP_SWM_PIN_FIXED_T
 
pö
)

578 
LPC_SWM
->
PINENABLE0
 = (1 << (
uöt32_t
Ë
pö
Ë| (LPC_SWM->PINENABLE0 & ~
SWM_PINENABLE0_RESERVED
);

586 
STATIC
 
INLINE
 
boﬁ
 
Chù_SWM_IsE«bÀd
(
CHIP_SWM_PIN_FIXED_T
 
pö
)

588  (
boﬁ
Ë((
LPC_SWM
->
PINENABLE0
 & (1 << (
uöt32_t
Ë
pö
)) == 0);

596 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/lpc_types.h

32 #i‚de‡
__LPC_TYPES_H_


33 
	#__LPC_TYPES_H_


	)

35 
	~<°döt.h
>

36 
	~<°dboﬁ.h
>

50 íum {
	mFALSE
 = 0, 
	mTRUE
 = !
FALSE
} 
	tBoﬁ
;

55 #i‡!
deföed
(
__˝lu•lus
)

62 íum {
	mRESET
 = 0, 
	mSET
 = !
RESET
} 
	tFœgSètus
, 
	tI¡Sètus
, 
	tSëSèã
;

63 
	#PARAM_SETSTATE
(
Sèã
Ë((Sèã =
RESET
Ë|| (Sèã =
SET
))

	)

68 íum {
	mDISABLE
 = 0, 
	mENABLE
 = !
DISABLE
} 
	tFun˘i⁄ÆSèã
;

69 
	#PARAM_FUNCTIONALSTATE
(
Sèã
Ë((Sèã =
DISABLE
Ë|| (Sèã =
ENABLE
))

	)

74 íum {
	mERROR
 = 0, 
	mSUCCESS
 = !
ERROR
} 
	tSètus
;

80 
	mNONE_BLOCKING
 = 0,

81 
	mBLOCKING
,

82 } 
	tTRANSFER_BLOCK_T
;

85 (*
	gPFV
)();

88 
öt32_t
 (*
	tPFI
)();

102 #unde‡
_BIT


104 
	#_BIT
(
n
Ë(1 << (n))

	)

110 #unde‡
_SBF


112 
	#_SBF
(
f
, 
v
Ë((vË<< (f))

	)

127 #unde‡
_BITMASK


129 
	#_BITMASK
(
fõld_width
Ë–
	`_BIT
(fõld_widthË- 1)

	)

132 #i‚de‡
NULL


133 
	#NULL
 ((*Ë0)

	)

137 
	#NELEMENTS
(
¨øy
Ë(◊ºayË/ ◊ºay[0]))

	)

140 
	#STATIC
 

	)

142 
	#EXTERN
 

	)

144 #i‡!
deföed
(
MAX
)

145 
	#MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

147 #i‡!
deföed
(
MIN
)

148 
	#MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

161 
	tCHAR
;

164 
uöt8_t
 
	tUNS_8
;

167 
öt8_t
 
	tINT_8
;

170 
uöt16_t
 
	tUNS_16
;

173 
öt16_t
 
	tINT_16
;

176 
uöt32_t
 
	tUNS_32
;

179 
öt32_t
 
	tINT_32
;

182 
öt64_t
 
	tINT_64
;

185 
uöt64_t
 
	tUNS_64
;

187 #ifde‡
__CODE_RED


188 
	#BOOL_32
 
boﬁ


	)

189 
	#BOOL_16
 
boﬁ


	)

190 
	#BOOL_8
 
boﬁ


	)

193 
boﬁ
 
	tBOOL_32
;

196 
boﬁ
 
	tBOOL_16
;

199 
boﬁ
 
	tBOOL_8
;

202 #ifde‡
__CC_ARM


203 
	#INLINE
 
__ölöe


	)

205 
	#INLINE
 
ölöe


	)

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/swm_8xx.c

32 
	~"chù.h
"

38 
	#PINASSIGN_IDX
(
movabÀ
Ë(((movabÀË>> 4))

	)

39 
	#PINSHIFT
(
movabÀ
Ë(((movabÀË& 0xFË<< 3)

	)

54 
	$Chù_SWM_MovabÀPöAssign
(
CHIP_SWM_PIN_MOVABLE_T
 
movabÀ
, 
uöt8_t
 
pö
)

56 
uöt32_t
 
ãmp
;

57 
pöshi·
 = 
	`PINSHIFT
(
movabÀ
), 
ªgIndex
 = 
	`PINASSIGN_IDX
(movable);

59 
ãmp
 = 
LPC_SWM
->
PINASSIGN
[
ªgIndex
] & (~(0xFF << 
pöshi·
));

60 
LPC_SWM
->
PINASSIGN
[
ªgIndex
] = 
ãmp
 | (
pö
 << 
pöshi·
);

61 
	}
}

64 
	$Chù_SWM_FixedPöE«bÀ
(
CHIP_SWM_PIN_FIXED_T
 
pö
, 
boﬁ
 
íabÀ
)

66 i‡(
íabÀ
) {

67 
	`Chù_SWM_E«bÀFixedPö
(
pö
);

70 
	`Chù_SWM_DißbÀFixedPö
(
pö
);

72 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/syscon_8xx.c

31 
	#_CHIP_COMMON_


	)

32 
	~"chù.h
"

39 
	#PDSLEEPWRMASK
 (0x0000FFB7)

	)

40 
	#PDSLEEPDATMASK
 (0x00000048)

	)

42 #i‡
deföed
(
CHIP_LPC82X
)

44 
	#PDWAKEUPWRMASK
 (0x00006D00)

	)

45 
	#PDWAKEUPDATMASK
 (0x000080FF)

	)

49 
	#PDWAKEUPWRMASK
 (0x00006D10)

	)

50 
	#PDWAKEUPDATMASK
 (0x000080EF)

	)

66 
	$Chù_SYSCTL_SëDìpSÀïPD
(
uöt32_t
 
¶ìpmask
)

69 
LPC_SYSCTL
->
PDSLEEPCFG
 = 
PDSLEEPWRMASK
 | (
¶ìpmask
 & 
PDSLEEPDATMASK
);

70 
	}
}

73 
	$Chù_SYSCTL_SëWakeup
(
uöt32_t
 
wakeupmask
)

76 
LPC_SYSCTL
->
PDAWAKECFG
 = 
PDWAKEUPWRMASK
 | (
wakeupmask
 & 
PDWAKEUPDATMASK
);

77 
	}
}

80 
	$Chù_SYSCTL_PowîDown
(
uöt32_t
 
powîdownmask
)

82 
uöt32_t
 
pdrun
;

85 
pdrun
 = 
LPC_SYSCTL
->
PDRUNCFG
 & 
PDWAKEUPDATMASK
;

88 
pdrun
 |(
powîdownmask
 & 
PDWAKEUPDATMASK
);

91 
LPC_SYSCTL
->
PDRUNCFG
 = (
PDWAKEUPWRMASK
 | 
pdrun
);

92 
	}
}

95 
	$Chù_SYSCTL_PowîUp
(
uöt32_t
 
powîupmask
)

97 
uöt32_t
 
pdrun
;

100 
pdrun
 = 
LPC_SYSCTL
->
PDRUNCFG
 & 
PDWAKEUPDATMASK
;

103 
pdrun
 &~(
powîupmask
 & 
PDWAKEUPDATMASK
);

106 
LPC_SYSCTL
->
PDRUNCFG
 = (
PDWAKEUPWRMASK
 | 
pdrun
);

107 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/syscon_8xx.h

32 #i‚de‡
__SYSCTL_8XX_H_


33 
	#__SYSCTL_8XX_H_


	)

35 #ifde‡
__˝lu•lus


47 
	#SYSCTL_RST_POR
 (1 << 0Ë

	)

48 
	#SYSCTL_RST_EXTRST
 (1 << 1Ë

	)

49 
	#SYSCTL_RST_WDT
 (1 << 2Ë

	)

50 
	#SYSCTL_RST_BOD
 (1 << 3Ë

	)

51 
	#SYSCTL_RST_SYSRST
 (1 << 4Ë

	)

56 
	#SYSCTL_WAKEUP_SPI0TINT
 (1 << 0Ë

	)

57 
	#SYSCTL_WAKEUP_SPI1INT
 (1 << 1Ë

	)

58 
	#SYSCTL_WAKEUP_USART0INT
 (1 << 3Ë

	)

59 
	#SYSCTL_WAKEUP_USART1INT
 (1 << 4Ë

	)

60 
	#SYSCTL_WAKEUP_USART2INT
 (1 << 5Ë

	)

61 
	#SYSCTL_WAKEUP_I2C0INT
 (1 << 8Ë

	)

62 
	#SYSCTL_WAKEUP_I2C1INT
 (1 << 7Ë

	)

63 
	#SYSCTL_WAKEUP_I2C2INT
 (1 << 21Ë

	)

64 
	#SYSCTL_WAKEUP_I2C3INT
 (1 << 22Ë

	)

65 
	#SYSCTL_WAKEUP_WWDTINT
 (1 << 12Ë

	)

66 
	#SYSCTL_WAKEUP_BODINT
 (1 << 13Ë

	)

67 
	#SYSCTL_WAKEUP_WKTINT
 (1 << 15Ë

	)

68 
	#SYSCTL_WAKEUP_I2CINT
 
SYSCTL_WAKEUP_I2C0INT


	)

73 
	#SYSCTL_DEEPSLP_BOD_PD
 (1 << 3Ë

	)

74 
	#SYSCTL_DEEPSLP_WDTOSC_PD
 (1 << 6Ë

	)

79 
	#SYSCTL_SLPWAKE_IRCOUT_PD
 (1 << 0Ë

	)

80 
	#SYSCTL_SLPWAKE_IRC_PD
 (1 << 1Ë

	)

81 
	#SYSCTL_SLPWAKE_FLASH_PD
 (1 << 2Ë

	)

82 
	#SYSCTL_SLPWAKE_BOD_PD
 (1 << 3Ë

	)

83 
	#SYSCTL_SLPWAKE_ADC_PD
 (1 << 4Ë

	)

84 
	#SYSCTL_SLPWAKE_SYSOSC_PD
 (1 << 5Ë

	)

85 
	#SYSCTL_SLPWAKE_WDTOSC_PD
 (1 << 6Ë

	)

86 
	#SYSCTL_SLPWAKE_SYSPLL_PD
 (1 << 7Ë

	)

87 
	#SYSCTL_SLPWAKE_ACMP_PD
 (1 << 15Ë

	)

92 
	#SYSCTL_NMISRC_ENABLE
 ((
uöt32_t
Ë1 << 31Ë

	)

98 
__IO
 
uöt32_t
 
SYSMEMREMAP
;

99 
__IO
 
uöt32_t
 
PRESETCTRL
;

100 
__IO
 
uöt32_t
 
SYSPLLCTRL
;

101 
__IO
 
uöt32_t
 
SYSPLLSTAT
;

102 
uöt32_t
 
RESERVED0
[4];

103 
__IO
 
uöt32_t
 
SYSOSCCTRL
;

104 
__IO
 
uöt32_t
 
WDTOSCCTRL
;

105 
__IO
 
uöt32_t
 
IRCCTRL
;

106 
uöt32_t
 
RESERVED1
[1];

107 
__IO
 
uöt32_t
 
SYSRSTSTAT
;

108 
uöt32_t
 
RESERVED2
[3];

109 
__IO
 
uöt32_t
 
SYSPLLCLKSEL
;

110 
__IO
 
uöt32_t
 
SYSPLLCLKUEN
;

111 
uöt32_t
 
RESERVED3
[10];

112 
__IO
 
uöt32_t
 
MAINCLKSEL
;

113 
__IO
 
uöt32_t
 
MAINCLKUEN
;

114 
__IO
 
uöt32_t
 
SYSAHBCLKDIV
;

115 
uöt32_t
 
RESERVED4
[1];

116 
__IO
 
uöt32_t
 
SYSAHBCLKCTRL
;

117 
uöt32_t
 
RESERVED5
[4];

118 
__IO
 
uöt32_t
 
UARTCLKDIV
;

119 
uöt32_t
 
RESERVED6
[18];

120 
__IO
 
uöt32_t
 
CLKOUTSEL
;

121 
__IO
 
uöt32_t
 
CLKOUTUEN
;

122 
__IO
 
uöt32_t
 
CLKOUTDIV
;

123 
uöt32_t
 
RESERVED7
;

124 
__IO
 
uöt32_t
 
UARTFRGDIV
;

125 
__IO
 
uöt32_t
 
UARTFRGMULT
;

126 
uöt32_t
 
RESERVED8
[1];

127 
__IO
 
uöt32_t
 
EXTTRACECMD
;

128 
__IO
 
uöt32_t
 
PIOPORCAP0
;

129 
uöt32_t
 
RESERVED9
[12];

130 
__IO
 
uöt32_t
 
IOCONCLKDIV
[7];

131 
__IO
 
uöt32_t
 
BODCTRL
;

132 
__IO
 
uöt32_t
 
SYSTCKCAL
;

133 
uöt32_t
 
RESERVED10
[6];

134 
__IO
 
uöt32_t
 
IRQLATENCY
;

135 
__IO
 
uöt32_t
 
NMISRC
;

136 
__IO
 
uöt32_t
 
PINTSEL
[8];

137 
uöt32_t
 
RESERVED11
[27];

138 
__IO
 
uöt32_t
 
STARTERP0
;

139 
uöt32_t
 
RESERVED12
[3];

140 
__IO
 
uöt32_t
 
STARTERP1
;

141 
uöt32_t
 
RESERVED13
[6];

142 
__IO
 
uöt32_t
 
PDSLEEPCFG
;

143 
__IO
 
uöt32_t
 
PDAWAKECFG
;

144 
__IO
 
uöt32_t
 
PDRUNCFG
;

145 
uöt32_t
 
RESERVED14
[111];

146 
__I
 
uöt32_t
 
DEVICEID
;

147 } 
	tLPC_SYSCTL_T
;

153 
	eCHIP_PIN_CLKDIV
 {

154 
IOCONCLKDIV0
 = 0,

155 
IOCONCLKDIV1
,

156 
IOCONCLKDIV2
,

157 
IOCONCLKDIV3
,

158 
IOCONCLKDIV4
,

159 
IOCONCLKDIV5
,

160 
IOCONCLKDIV6
,

161 
IOCONCLK_MAX
 = 
IOCONCLKDIV6


162 } 
	tCHIP_PIN_CLKDIV_T
;

165 
	#SYSCTL_SYSMEMREMAP_RESERVED
 (~3)

	)

166 
	#SYSCTL_SYSPLLCTRL_RESERVED
 (~0x7f)

	)

167 
	#SYSCTL_SYSPLLSTAT_RESERVED
 (~1)

	)

168 
	#SYSCTL_SYSOSCCTRL_RESERVED
 (~3)

	)

169 
	#SYSCTL_WDTOSCCTRL_RESERVED
 (~0x1ff)

	)

170 
	#SYSCTL_SYSRSTSTAT_RESERVED
 (~0x1f)

	)

171 
	#SYSCTL_SYSPLLCLKSEL_RESERVED
 (~3)

	)

172 
	#SYSCTL_SYSPLLCLKUEN_RESERVED
 (~1)

	)

173 
	#SYSCTL_MAINCLKSEL_RESERVED
 (~3)

	)

174 
	#SYSCTL_MAINCLKUEN_RESERVED
 (~1)

	)

175 
	#SYSCTL_SYSAHBCLKDIV_RESERVED
 (~0xff)

	)

176 
	#SYSCTL_UARTCLKDIV_RESERVED
 (~0xff)

	)

177 
	#SYSCTL_CLKOUTSEL_RESERVED
 (~3)

	)

178 
	#SYSCTL_CLKOUTUEN_RESERVED
 (~1)

	)

179 
	#SYSCTL_CLKOUTDIV_RESERVED
 (~0xff)

	)

180 
	#SYSCTL_UARTFRGDIV_RESERVED
 (~0xff)

	)

181 
	#SYSCTL_UARTFRGMULT_RESERVED
 (~0xff)

	)

182 
	#SYSCTL_EXTTRACECMD_RESERVED
 (~3)

	)

183 
	#SYSCTL_IOCONCLKDIV_RESERVED
 (~0xff)

	)

184 
	#SYSCTL_BODCTRL_RESERVED
 (~0x1f)

	)

185 
	#SYSCTL_SYSTCKCAL_RESERVED
 0xfc000000

	)

186 
	#SYSCTL_IRQLATENCY_RESERVED
 (~0xff)

	)

187 
	#SYSCTL_NMISRC_RESERVED
 (~(0x1f|(1u<<31)))

	)

188 
	#SYSCTL_PINTSEL_RESERVED
 (~0x3f)

	)

189 
	#SYSCTL_STARTERP0_RESERVED
 (~0xff)

	)

190 #i‡
deföed
(
CHIP_LPC82X
)

191 
	#SYSCTL_PRESETCTRL_RESERVED
 0xff„2000

	)

192 
	#SYSCTL_SYSAHBCLKCTRL_RESERVED
 0xda100000

	)

193 
	#SYSCTL_PIOPORCAP0_RESERVED
 0xfffc0000

	)

194 
	#SYSCTL_STARTERP1_RESERVED
 ((1<<2)|(1<<6)|(7<<9)|(1<<14)|0xff9f0000)

	)

196 
	#SYSCTL_PRESETCTRL_RESERVED
 0xfff„000

	)

197 
	#SYSCTL_SYSAHBCLKCTRL_RESERVED
 0xfff00000

	)

198 
	#SYSCTL_PIOPORCAP0_RESERVED
 0xffffc000

	)

199 
	#SYSCTL_STARTERP1_RESERVED
 ((1<<2)|(3<<6)|(7<<9)|(1<<14)|(0x1f<<16)|0xff800000)

	)

209 
	eCHIP_SYSCTL_BOOT_MODE_REMAP
 {

210 
REMAP_BOOT_LOADER_MODE
,

211 
REMAP_USER_RAM_MODE
,

212 
REMAP_USER_FLASH_MODE


213 } 
	tCHIP_SYSCTL_BOOT_MODE_REMAP_T
;

219 
RESET_SPI0
,

220 
RESET_SPI1
,

221 
RESET_UARTFBRG
,

222 
RESET_USART0
,

223 
RESET_USART1
,

224 
RESET_USART2
,

225 
RESET_I2C0
,

226 
RESET_MRT
,

227 
RESET_SCT
,

228 
RESET_WKT
,

229 
RESET_GPIO
,

230 
RESET_FLASH
,

231 
RESET_ACMP
,

232 
RESET_I2C1
 = 14,

233 
RESET_I2C2
,

234 
RESET_I2C3
,

235 } 
	tCHIP_SYSCTL_PERIPH_RESET_T
;

238 
	#RESET_I2C
 
RESET_I2C0


	)

243 
	eCHIP_SYSCTL_BODRSTLVL
 {

244 
SYSCTL_BODRSTLVL_0
,

245 
SYSCTL_BODRSTLVL_1
,

246 
SYSCTL_BODRSTLVL_2
,

247 
SYSCTL_BODRSTLVL_3
,

248 } 
	tCHIP_SYSCTL_BODRSTLVL_T
;

253 
	eCHIP_SYSCTL_BODRINTVAL
 {

254 
SYSCTL_BODINTVAL_LVL0
,

255 
SYSCTL_BODINTVAL_LVL1
,

256 
SYSCTL_BODINTVAL_LVL2
,

257 
SYSCTL_BODINTVAL_LVL3
,

258 } 
	tCHIP_SYSCTL_BODRINTVAL_T
;

265 
STATIC
 
INLINE
 
Chù_SYSCTL_M≠
(
CHIP_SYSCTL_BOOT_MODE_REMAP_T
 
ªm≠
)

267 
LPC_SYSCTL
->
SYSMEMREMAP
 = (
uöt32_t
Ë
ªm≠
;

277 
STATIC
 
INLINE
 
Chù_SYSCTL_As£πPîùhRe£t
(
CHIP_SYSCTL_PERIPH_RESET_T
 
≥rùh
)

279 
LPC_SYSCTL
->
PRESETCTRL
 &~((1 << (
uöt32_t
Ë
≥rùh
Ë| 
SYSCTL_PRESETCTRL_RESERVED
);

287 
STATIC
 
INLINE
 
Chù_SYSCTL_Dós£πPîùhRe£t
(
CHIP_SYSCTL_PERIPH_RESET_T
 
≥rùh
)

289 
LPC_SYSCTL
->
PRESETCTRL
 = (1 << (
uöt32_t
Ë
≥rùh
Ë| (LPC_SYSCTL->PRESETCTRL & ~
SYSCTL_PRESETCTRL_RESERVED
);

297 
STATIC
 
INLINE
 
Chù_SYSCTL_PîùhRe£t
(
CHIP_SYSCTL_PERIPH_RESET_T
 
≥rùh
)

299 
Chù_SYSCTL_As£πPîùhRe£t
(
≥rùh
);

300 
Chù_SYSCTL_Dós£πPîùhRe£t
(
≥rùh
);

308 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SYSCTL_GëSy°emRSTSètus
()

310  
LPC_SYSCTL
->
SYSRSTSTAT
 & ~
SYSCTL_SYSRSTSTAT_RESERVED
;

319 
STATIC
 
INLINE
 
Chù_SYSCTL_CÀ¨Sy°emRSTSètus
(
uöt32_t
 
ª£t
)

321 
LPC_SYSCTL
->
SYSRSTSTAT
 = 
ª£t
;

329 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SYSCTL_GëPORPIOSètus
()

331  
LPC_SYSCTL
->
PIOPORCAP0
 & ~
SYSCTL_PIOPORCAP0_RESERVED
;

342 
STATIC
 
INLINE
 
Chù_SYSCTL_SëBODLevñs
(
CHIP_SYSCTL_BODRSTLVL_T
 
r°lvl
,

343 
CHIP_SYSCTL_BODRINTVAL_T
 
öévl
)

345 
LPC_SYSCTL
->
BODCTRL
 = ((
uöt32_t
Ë
r°lvl
Ë| (((uöt32_tË
öévl
) << 2);

352 
STATIC
 
INLINE
 
Chù_SYSCTL_E«bÀBODRe£t
()

354 
LPC_SYSCTL
->
BODCTRL
 = (1 << 4Ë| (LPC_SYSCTL->BODCTRL & ~
SYSCTL_BODCTRL_RESERVED
);

361 
STATIC
 
INLINE
 
Chù_SYSCTL_DißbÀBODRe£t
()

363 
LPC_SYSCTL
->
BODCTRL
 &~((1 << 4Ë| 
SYSCTL_BODCTRL_RESERVED
);

371 
STATIC
 
INLINE
 
Chù_SYSCTL_SëSYSTCKCAL
(
uöt32_t
 
sysCÆVÆ
)

373 
LPC_SYSCTL
->
SYSTCKCAL
 = 
sysCÆVÆ
;

383 
STATIC
 
INLINE
 
Chù_SYSCTL_SëIRQL©ícy
(
uöt32_t
 
œãncy
)

385 
LPC_SYSCTL
->
IRQLATENCY
 = 
œãncy
;

392 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SYSCTL_GëIRQL©ícy
()

394  
LPC_SYSCTL
->
IRQLATENCY
 & ~
SYSCTL_IRQLATENCY_RESERVED
;

404 
STATIC
 
INLINE
 
Chù_SYSCTL_SëNMISour˚
(
uöt32_t
 
öt§c
)

407 
LPC_SYSCTL
->
NMISRC
 &~(
SYSCTL_NMISRC_ENABLE
 | 
SYSCTL_NMISRC_RESERVED
);

410 
LPC_SYSCTL
->
NMISRC
 = 
öt§c
;

417 
STATIC
 
INLINE
 
Chù_SYSCTL_E«bÀNMISour˚
()

419 
LPC_SYSCTL
->
NMISRC
 = 
SYSCTL_NMISRC_ENABLE
 | (LPC_SYSCTL->NMISRC & ~
SYSCTL_NMISRC_RESERVED
);

426 
STATIC
 
INLINE
 
Chù_SYSCTL_DißbÀNMISour˚
()

428 
LPC_SYSCTL
->
NMISRC
 &~(
SYSCTL_NMISRC_ENABLE
 | 
SYSCTL_NMISRC_RESERVED
);

440 
STATIC
 
INLINE
 
Chù_SYSCTL_SëPöI¡îru±
(
uöt32_t
 
ötIndex
, uöt32_à
pöNum
)

442 
LPC_SYSCTL
->
PINTSEL
[
ötIndex
] = (
uöt32_t
Ë
pöNum
;

452 
STATIC
 
INLINE
 
Chù_SYSCTL_E«bÀPINTWakeup
(
uöt32_t
 
pö
)

454 
LPC_SYSCTL
->
STARTERP0
 = (1 << 
pö
Ë| (LPC_SYSCTL->STARTERP0 & ~
SYSCTL_STARTERP0_RESERVED
);

463 
STATIC
 
INLINE
 
Chù_SYSCTL_DißbÀPINTWakeup
(
uöt32_t
 
pö
)

465 
LPC_SYSCTL
->
STARTERP0
 &~((1 << 
pö
Ë| 
SYSCTL_STARTERP0_RESERVED
);

473 
STATIC
 
INLINE
 
Chù_SYSCTL_E«bÀPîùhWakeup
(
uöt32_t
 
≥rùhmask
)

475 
LPC_SYSCTL
->
STARTERP1
 = 
≥rùhmask
 | (LPC_SYSCTL->
STARTERP0
 & ~
SYSCTL_STARTERP0_RESERVED
);

483 
STATIC
 
INLINE
 
Chù_SYSCTL_DißbÀPîùhWakeup
(
uöt32_t
 
≥rùhmask
)

485 
LPC_SYSCTL
->
STARTERP1
 &~(
≥rùhmask
 | 
SYSCTL_STARTERP1_RESERVED
);

493 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SYSCTL_GëDìpSÀïPD
()

495  
LPC_SYSCTL
->
PDSLEEPCFG
;

503 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SYSCTL_GëWakeup
()

505  
LPC_SYSCTL
->
PDAWAKECFG
;

513 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SYSCTL_GëPowîSèãs
()

515  
LPC_SYSCTL
->
PDRUNCFG
;

522 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SYSCTL_GëDevi˚ID
()

524  
LPC_SYSCTL
->
DEVICEID
;

537 
Chù_SYSCTL_SëDìpSÀïPD
(
uöt32_t
 
¶ìpmask
);

549 
Chù_SYSCTL_SëWakeup
(
uöt32_t
 
wakeupmask
);

556 
Chù_SYSCTL_PowîDown
(
uöt32_t
 
powîdownmask
);

563 
Chù_SYSCTL_PowîUp
(
uöt32_t
 
powîupmask
);

569 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/sysinit_8xx.c

31 
	#_CHIP_COMMON_


	)

32 
	~"bﬂrd.h
"

45 
	#CONFIG_MAIN_FREQ
 60000000

	)

46 
	#CONFIG_SYS_FREQ
 
MAX_CLOCK_FREQ


	)

53 
	$Chù_SëupXèlClockög
()

56 
	`Chù_Clock_SëPLLBy∑ss
(
Ál£
, false);

59 
	`Chù_SYSCTL_PowîUp
(
SYSCTL_SLPWAKE_SYSOSC_PD
);

62 
	`Chù_Clock_SëSy°emPLLSour˚
(
SYSCTL_PLLCLKSRC_SYSOSC
);

65 
	`Chù_FMC_SëFLASHAc˚ss
(
FLASHTIM_30MHZ_CPU
);

68 
	`Chù_SYSCTL_PowîDown
(
SYSCTL_SLPWAKE_SYSPLL_PD
);

72 
	`Chù_Clock_SëupSy°emPLL
(4, 1);

75 
	`Chù_SYSCTL_PowîUp
(
SYSCTL_SLPWAKE_SYSPLL_PD
);

78 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

81 !
	`Chù_Clock_IsSy°emPLLLocked
()) {}

83 
	`Chù_Clock_SëSysClockDiv
(2);

87 
	`Chù_Clock_SëMaöClockSour˚
(
SYSCTL_MAINCLKSRC_PLLOUT
);

88 
	}
}

91 
	$Chù_SëupIrcClockög
()

93 
	`Chù_IRC_SëFªq
(
CONFIG_MAIN_FREQ
, 
CONFIG_SYS_FREQ
);

94 
	}
}

98 
	$Sy°emInô
()

100 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_IOCON
);

101 #ifde‡
USE_IRC_AS_ROOT_CLOCK


103 
	`Chù_SëupIrcClockög
();

106 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

107 
	`Chù_SWM_E«bÀFixedPö
(
SWM_FIXED_XTALIN
);

108 
	`Chù_SWM_E«bÀFixedPö
(
SWM_FIXED_XTALOUT
);

110 
	`Chù_IOCON_PöSëMode
(
LPC_IOCON
, 
IOCON_PIO8
, 
PIN_MODE_INACTIVE
);

111 
	`Chù_IOCON_PöSëMode
(
LPC_IOCON
, 
IOCON_PIO9
, 
PIN_MODE_INACTIVE
);

113 
	`Chù_SëupXèlClockög
();

115 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/acmp/acmp_8xx.c

29 
	~"chù.h
"

48 
	$Chù_ACMP_Inô
(
LPC_CMP_T
 *
pACMP
)

50 
	`Chù_SYSCTL_PowîUp
(
SYSCTL_SLPWAKE_ACMP_PD
);

51 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_ACOMP
);

52 
	}
}

55 
	$Chù_ACMP_Deöô
(
LPC_CMP_T
 *
pACMP
)

57 
	`Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_ACOMP
);

58 
	`Chù_SYSCTL_PowîDown
(
SYSCTL_SLPWAKE_ACMP_PD
);

59 
	}
}

62 
	$Chù_ACMP_EdgeCÀ¨
(
LPC_CMP_T
 *
pACMP
)

64 
uöt32_t
 
ªg
 = 
pACMP
->
CTRL
 & ~
ACMP_CTRL_RESERVED
;

67 
pACMP
->
CTRL
 = 
ªg
 | 
ACMP_EDGECLR_BIT
;

68 
pACMP
->
CTRL
 = 
ªg
 & ~
ACMP_EDGECLR_BIT
;

69 
	}
}

72 
	$Chù_ACMP_SëEdgeSñe˘i⁄
(
LPC_CMP_T
 *
pACMP
, 
ACMP_EDGESEL_T
 
edgeSñ
)

74 
uöt32_t
 
ªg
 = 
pACMP
->
CTRL
 & ~(
ACMP_EDGESEL_MASK
 | 
ACMP_CTRL_RESERVED
);

77 
pACMP
->
CTRL
 = 
ªg
 | (
uöt32_t
Ë
edgeSñ
;

78 
	}
}

81 
	$Chù_ACMP_SëPosVﬁtRef
(
LPC_CMP_T
 *
pACMP
, 
ACMP_POS_INPUT_T
 
Posöput
)

83 
uöt32_t
 
ªg
 = 
pACMP
->
CTRL
 & ~(
ACMP_COMPVPSEL_MASK
 | 
ACMP_CTRL_RESERVED
);

86 
pACMP
->
CTRL
 = 
ªg
 | (
uöt32_t
Ë
Posöput
;

87 
	}
}

90 
	$Chù_ACMP_SëNegVﬁtRef
(
LPC_CMP_T
 *
pACMP
, 
ACMP_NEG_INPUT_T
 
Negöput
)

92 
uöt32_t
 
ªg
 = 
pACMP
->
CTRL
 & ~(
ACMP_COMPVMSEL_MASK
 | 
ACMP_CTRL_RESERVED
);

95 
pACMP
->
CTRL
 = 
ªg
 | (
uöt32_t
Ë
Negöput
;

96 
	}
}

99 
	$Chù_ACMP_SëHy°îesis
(
LPC_CMP_T
 *
pACMP
, 
ACMP_HYS_T
 
hys
)

101 
uöt32_t
 
ªg
 = 
pACMP
->
CTRL
 & ~(
ACMP_HYSTERESIS_MASK
 | 
ACMP_CTRL_RESERVED
);

104 
pACMP
->
CTRL
 = 
ªg
 | (
uöt32_t
Ë
hys
;

105 
	}
}

108 
	$Chù_ACMP_SëupAMCPRefs
(
LPC_CMP_T
 *
pACMP
, 
ACMP_EDGESEL_T
 
edgeSñ
,

109 
ACMP_POS_INPUT_T
 
Posöput
, 
ACMP_NEG_INPUT_T
 
Negöput
,

110 
ACMP_HYS_T
 
hys
)

112 
uöt32_t
 
ªg
 = 
pACMP
->
CTRL
 & ~(
ACMP_HYSTERESIS_MASK
 | 
ACMP_CTRL_RESERVED
 |

113 
ACMP_COMPVMSEL_MASK
 | 
ACMP_COMPVPSEL_MASK
 | 
ACMP_EDGESEL_MASK
);

116 
pACMP
->
CTRL
 = 
ªg
 | (
uöt32_t
Ë
edgeSñ
 | (uöt32_tË
Posöput
 |

117 (
uöt32_t
Ë
Negöput
 | (uöt32_tË
hys
;

118 
	}
}

121 
	$Chù_ACMP_SëupVﬁtLaddî
(
LPC_CMP_T
 *
pACMP
, 
uöt32_t
 
œd£l
, 
boﬁ
 
œdªfVDDCMP
)

123 
uöt32_t
 
ªg
 = 
pACMP
->
LAD
 & ~(
ACMP_LADSEL_MASK
 | 
ACMP_LADREF_MASK
 | 
ACMP_LAD_RESERVED
);

126 i‡(
œdªfVDDCMP
) {

127 
ªg
 |
ACMP_LADREF_MASK
;

129 
pACMP
->
LAD
 = 
ªg
 | (
œd£l
 << 1);

130 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/acmp/acmp_8xx.h

32 #i‚de‡
__ACMP_8XX_H_


33 
	#__ACMP_8XX_H_


	)

35 #ifde‡
__˝lu•lus


48 
__IO
 
uöt32_t
 
CTRL
;

49 
__IO
 
uöt32_t
 
LAD
;

50 } 
	tLPC_CMP_T
;

53 
	#ACMP_CTRL_RESERVED
 (7|(1<<5)|(1<<7)|(0x3f<<14)|(1<<22)|(1<<24)|(0x1fu<<27))

	)

54 
	#ACMP_LAD_RESERVED
 (~0x7f)

	)

56 
	#ACMP_COMPSA_BIT
 (1 << 6Ë

	)

57 
	#ACMP_COMPSTAT_BIT
 (1 << 21Ë

	)

58 
	#ACMP_COMPEDGE_BIT
 (1 << 23Ë

	)

59 
	#ACMP_LADENAB_BIT
 (1 << 0Ë

	)

62 
	#ACMP_EDGECLR_BIT
 (1 << 20)

	)

63 
	#ACMP_EDGESEL_MASK
 (0x3 << 3)

	)

64 
	#ACMP_COMPVPSEL_MASK
 (0x7 << 8)

	)

65 
	#ACMP_COMPVMSEL_MASK
 (0x7 << 11)

	)

66 
	#ACMP_HYSTERESIS_MASK
 (0x3 << 25)

	)

67 
	#ACMP_LADSEL_MASK
 (0x1F << 1)

	)

68 
	#ACMP_LADREF_MASK
 (0x1 << 6)

	)

72 
ACMP_EDGESEL_FALLING
 = (0 << 3),

73 
ACMP_EDGESEL_RISING
 = (1 << 3),

74 
ACMP_EDGESEL_BOTH
 = (2 << 3)

75 } 
	tACMP_EDGESEL_T
;

79 
ACMP_HYS_NONE
 = (0 << 25),

80 
ACMP_HYS_5MV
 = (1 << 25),

81 
ACMP_HYS_10MV
 = (2 << 25),

82 
ACMP_HYS_20MV
 = (3 << 25)

83 } 
	tACMP_HYS_T
;

88 
	eCHIP_ACMP_POS_INPUT
 {

89 
ACMP_POSIN_VLO
 = (0 << 8),

90 
ACMP_POSIN_ACMP_I1
 = (1 << 8),

91 
ACMP_POSIN_ACMP_I2
 = (2 << 8),

92 
ACMP_POSIN_ACMP_I3
 = (3 << 8),

93 
ACMP_POSIN_ACMP_I4
 = (4 << 8),

94 #i‡
deföed
(
CHIP_LPC82X
)

95 
ACMP_POSIN_INT_REF
 = (5 << 8),

96 
ACMP_POSIN_ADC_0
 = (6 << 8),

98 
ACMP_POSIN_INT_REF
 = (6 << 8),

100 } 
	tACMP_POS_INPUT_T
;

105 
	eCHIP_ACMP_NEG_INPUT
 {

106 
ACMP_NEGIN_VLO
 = (0 << 11),

107 
ACMP_NEGIN_ACMP_I1
 = (1 << 11),

108 
ACMP_NEGIN_ACMP_I2
 = (2 << 11),

109 
ACMP_NEGIN_ACMP_I3
 = (3 << 11),

110 
ACMP_NEGIN_ACMP_I4
 = (4 << 11),

111 #i‡
deföed
(
CHIP_LPC82X
)

112 
ACMP_NEGIN_INT_REF
 = (5 << 11),

113 
ACMP_NEGIN_ADC_0
 = (6 << 11),

115 
ACMP_NEGIN_INT_REF
 = (6 << 11)

117 } 
	tACMP_NEG_INPUT_T
;

124 
Chù_ACMP_Inô
(
LPC_CMP_T
 *
pACMP
);

131 
Chù_ACMP_Deöô
(
LPC_CMP_T
 *
pACMP
);

138 
STATIC
 
INLINE
 
uöt32_t
 
Chù_ACMP_GëCompSètus
(
LPC_CMP_T
 *
pACMP
)

140  
pACMP
->
CTRL
 & (
ACMP_COMPSTAT_BIT
 | 
ACMP_COMPEDGE_BIT
);

148 
Chù_ACMP_EdgeCÀ¨
(
LPC_CMP_T
 *
pACMP
);

156 
Chù_ACMP_SëEdgeSñe˘i⁄
(
LPC_CMP_T
 *
pACMP
, 
ACMP_EDGESEL_T
 
edgeSñ
);

163 
STATIC
 
INLINE
 
Chù_ACMP_E«bÀSyncCompOut
(
LPC_CMP_T
 *
pACMP
)

165 
pACMP
->
CTRL
 = 
ACMP_COMPSA_BIT
 | (pACMP->CTRL & ~
ACMP_CTRL_RESERVED
);

173 
STATIC
 
INLINE
 
Chù_ACMP_DißbÀSyncCompOut
(
LPC_CMP_T
 *
pACMP
)

175 
pACMP
->
CTRL
 &~(
ACMP_COMPSA_BIT
 | 
ACMP_CTRL_RESERVED
);

184 
Chù_ACMP_SëPosVﬁtRef
(
LPC_CMP_T
 *
pACMP
, 
ACMP_POS_INPUT_T
 
Posöput
);

192 
Chù_ACMP_SëNegVﬁtRef
(
LPC_CMP_T
 *
pACMP
, 
ACMP_NEG_INPUT_T
 
Negöput
);

200 
Chù_ACMP_SëHy°îesis
(
LPC_CMP_T
 *
pACMP
, 
ACMP_HYS_T
 
hys
);

211 
Chù_ACMP_SëupAMCPRefs
(
LPC_CMP_T
 *
pACMP
, 
ACMP_EDGESEL_T
 
edgeSñ
,

212 
ACMP_POS_INPUT_T
 
Posöput
, 
ACMP_NEG_INPUT_T
 
Negöput
,

213 
ACMP_HYS_T
 
hys
);

223 
Chù_ACMP_SëupVﬁtLaddî
(
LPC_CMP_T
 *
pACMP
, 
uöt32_t
 
œd£l
, 
boﬁ
 
œdªfVDDCMP
);

230 
STATIC
 
INLINE
 
Chù_ACMP_E«bÀVﬁtLaddî
(
LPC_CMP_T
 *
pACMP
)

232 
pACMP
->
LAD
 = 
ACMP_LADENAB_BIT
 | (pACMP->LAD & ~
ACMP_LAD_RESERVED
);

240 
STATIC
 
INLINE
 
Chù_ACMP_DißbÀVﬁtLaddî
(
LPC_CMP_T
 *
pACMP
)

242 
pACMP
->
LAD
 &~(
ACMP_LADENAB_BIT
 | 
ACMP_LAD_RESERVED
);

249 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/adc/adc_8xx.c

32 
	~"chù.h
"

33 
	~"adc_8xx.h
"

51 
	$Chù_ADC_Inô
(
LPC_ADC_T
 *
pADC
, 
uöt32_t
 
Êags
)

54 
	`Chù_SYSCTL_PowîUp
(
SYSCTL_SLPWAKE_ADC_PD
);

55 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_ADC
);

58 
pADC
->
INTEN
 = 0;

61 
pADC
->
CTRL
 = 
Êags
;

62 
	}
}

65 
	$Chù_ADC_DeInô
(
LPC_ADC_T
 *
pADC
)

67 
pADC
->
INTEN
 = 0;

68 
pADC
->
CTRL
 = 0;

71 
	`Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_ADC
);

72 
	`Chù_SYSCTL_PowîDown
(
SYSCTL_SLPWAKE_ADC_PD
);

73 
	}
}

76 
	$Chù_ADC_SèπCÆibøti⁄
(
LPC_ADC_T
 *
pADC
)

79 
pADC
->
CTRL
 |
ADC_CR_CALMODEBIT
;

82 
pADC
->
CTRL
 &~
ADC_CR_ASYNMODE
;

85 
	`Chù_ADC_SëClockR©e
(
pADC
, 500000);

88 
pADC
->
CTRL
 &~
ADC_CR_LPWRMODEBIT
;

91 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/adc/adc_8xx.h

32 #i‚de‡
__ADC_8XX_H_


33 
	#__ADC_8XX_H_


	)

35 #ifde‡
__˝lu•lus


47 
ADC_SEQA_IDX
,

48 
ADC_SEQB_IDX


49 } 
	tADC_SEQ_IDX_T
;

55 
__IO
 
uöt32_t
 
CTRL
;

56 
__I
 
uöt32_t
 
RESERVED0
;

57 
__IO
 
uöt32_t
 
SEQ_CTRL
[
ADC_SEQB_IDX
 + 1];

58 
__IO
 
uöt32_t
 
SEQ_GDAT
[
ADC_SEQB_IDX
 + 1];

59 
__I
 
uöt32_t
 
RESERVED1
[2];

60 
__I
 
uöt32_t
 
DR
[12];

61 
__IO
 
uöt32_t
 
THR_LOW
[2];

62 
__IO
 
uöt32_t
 
THR_HIGH
[2];

63 
__IO
 
uöt32_t
 
CHAN_THRSEL
;

64 
__IO
 
uöt32_t
 
INTEN
;

65 
__IO
 
uöt32_t
 
FLAGS
;

66 
__IO
 
uöt32_t
 
TRM
;

67 } 
	tLPC_ADC_T
;

70 
	#ADC_MAX_SAMPLE_RATE
 30000000

	)

76 
	#ADC_CR_CLKDIV_MASK
 (0xFF << 0Ë

	)

77 
	#ADC_CR_CLKDIV_BITPOS
 (0Ë

	)

78 
	#ADC_CR_ASYNMODE
 (1 << 8Ë

	)

79 
	#ADC_CR_MODE10BIT
 (1 << 9Ë

	)

80 
	#ADC_CR_LPWRMODEBIT
 (1 << 10Ë

	)

81 
	#ADC_CR_CALMODEBIT
 (1 << 30Ë

	)

82 
	#ADC_CR_BITACC
(
n
Ë(((“Ë& 0x1Ë<< 9)Ë

	)

83 
	#ADC_CR_CLKDIV
(
n
Ë(((“Ë& 0xFFË<< 0)Ë

	)

84 
	#ADC_SAMPLE_RATE_CONFIG_MASK
 (
	`ADC_CR_CLKDIV
(0xFFË| 
	`ADC_CR_BITACC
(0x01))

	)

87 
	#ADC_SEQ_CTRL_CHANSEL
(
n
Ë(1 << (n)Ë

	)

88 
	#ADC_SEQ_CTRL_CHANSEL_MASK
 (0xFFFË

	)

91 
	#ADC_SEQ_CTRL_HWTRIG_ARM_TXEV
 (0 << 12Ë

	)

92 
	#ADC_SEQ_CTRL_HWTRIG_CT32B0_MAT0
 (1 << 12Ë

	)

93 
	#ADC_SEQ_CTRL_HWTRIG_CT32B0_MAT1
 (2 << 12Ë

	)

94 
	#ADC_SEQ_CTRL_HWTRIG_SCT_OUT0
 (2 << 12Ë

	)

95 
	#ADC_SEQ_CTRL_HWTRIG_CT16B0_MAT0
 (3 << 12Ë

	)

96 
	#ADC_SEQ_CTRL_HWTRIG_CT16B0_MAT1
 (4 << 12Ë

	)

97 
	#ADC_SEQ_CTRL_HWTRIG_SCT_OUT1
 (4 << 12Ë

	)

98 
	#ADC_SEQ_CTRL_HWTRIG_CT16B0_CAP0
 (5 << 12Ë

	)

99 
	#ADC_SEQ_CTRL_HWTRIG_CT16B1_CAP0
 (6 << 12Ë

	)

100 
	#ADC_SEQ_CTRL_HWTRIG_CT32B0_CAP0
 (7 << 12Ë

	)

101 
	#ADC_SEQ_CTRL_HWTRIG_MASK
 (0x3F << 12Ë

	)

104 
	#ADC_SEQ_CTRL_HWTRIG_POLPOS
 (1 << 18Ë

	)

105 
	#ADC_SEQ_CTRL_HWTRIG_SYNCBYPASS
 (1 << 19Ë

	)

106 
	#ADC_SEQ_CTRL_START
 (1 << 26Ë

	)

107 
	#ADC_SEQ_CTRL_BURST
 (1 << 27Ë

	)

108 
	#ADC_SEQ_CTRL_SINGLESTEP
 (1 << 28Ë

	)

109 
	#ADC_SEQ_CTRL_LOWPRIO
 (1 << 29Ë

	)

110 
	#ADC_SEQ_CTRL_MODE_EOS
 (1 << 30Ë

	)

111 
	#ADC_SEQ_CTRL_SEQ_ENA
 (1UL << 31Ë

	)

114 
	#ADC_SEQ_GDAT_RESULT_MASK
 (0xFFF << 4Ë

	)

115 
	#ADC_SEQ_GDAT_RESULT_BITPOS
 (4Ë

	)

116 
	#ADC_SEQ_GDAT_THCMPRANGE_MASK
 (0x3 << 16Ë

	)

117 
	#ADC_SEQ_GDAT_THCMPRANGE_BITPOS
 (16Ë

	)

118 
	#ADC_SEQ_GDAT_THCMPCROSS_MASK
 (0x3 << 18Ë

	)

119 
	#ADC_SEQ_GDAT_THCMPCROSS_BITPOS
 (18Ë

	)

120 
	#ADC_SEQ_GDAT_CHAN_MASK
 (0xF << 26Ë

	)

121 
	#ADC_SEQ_GDAT_CHAN_BITPOS
 (26Ë

	)

122 
	#ADC_SEQ_GDAT_OVERRUN
 (1 << 30Ë

	)

123 
	#ADC_SEQ_GDAT_DATAVALID
 (1UL << 31Ë

	)

126 
	#ADC_DR_RESULT
(
n
Ë(((“Ë>> 4Ë& 0xFFF)Ë

	)

127 
	#ADC_DR_THCMPRANGE_MASK
 (0x3 << 16Ë

	)

128 
	#ADC_DR_THCMPRANGE_BITPOS
 (16Ë

	)

129 
	#ADC_DR_THCMPRANGE
(
n
Ë((“Ë>> 
ADC_DR_THCMPRANGE_BITPOS
Ë& 0x3)

	)

130 
	#ADC_DR_THCMPCROSS_MASK
 (0x3 << 18Ë

	)

131 
	#ADC_DR_THCMPCROSS_BITPOS
 (18Ë

	)

132 
	#ADC_DR_THCMPCROSS
(
n
Ë((“Ë>> 
ADC_DR_THCMPCROSS_BITPOS
Ë& 0x3)

	)

133 
	#ADC_DR_CHAN_MASK
 (0xF << 26Ë

	)

134 
	#ADC_DR_CHAN_BITPOS
 (26Ë

	)

135 
	#ADC_DR_CHANNEL
(
n
Ë((“Ë>> 
ADC_DR_CHAN_BITPOS
Ë& 0xFË

	)

136 
	#ADC_DR_OVERRUN
 (1 << 30Ë

	)

137 
	#ADC_DR_DATAVALID
 (1UL << 31Ë

	)

138 
	#ADC_DR_DONE
(
n
Ë((“Ë>> 31))

	)

141 
	#ADC_THR_VAL_MASK
 (0xFFF << 4Ë

	)

142 
	#ADC_THR_VAL_POS
 (4Ë

	)

145 
	#ADC_THRSEL_CHAN_SEL_THR1
(
n
Ë(1 << (n)Ë

	)

148 
	#ADC_INTEN_SEQA_ENABLE
 (1 << 0Ë

	)

149 
	#ADC_INTEN_SEQB_ENABLE
 (1 << 1Ë

	)

150 
	#ADC_INTEN_SEQN_ENABLE
(
£q
Ë(1 << (£q)Ë

	)

151 
	#ADC_INTEN_OVRRUN_ENABLE
 (1 << 2Ë

	)

152 
	#ADC_INTEN_CMP_DISBALE
 (0Ë

	)

153 
	#ADC_INTEN_CMP_OUTSIDETH
 (1Ë

	)

154 
	#ADC_INTEN_CMP_CROSSTH
 (2Ë

	)

155 
	#ADC_INTEN_CMP_MASK
 (3Ë

	)

156 
	#ADC_INTEN_CMP_ENABLE
(
i£l
, 
ch
Ë(((i£lË& 
ADC_INTEN_CMP_MASK
Ë<< ((2 * (ch)Ë+ 3)Ë

	)

159 
	#ADC_FLAGS_THCMP_MASK
(
ch
Ë(1 << (ch)Ë

	)

160 
	#ADC_FLAGS_OVRRUN_MASK
(
ch
Ë(1 << (12 + (ch))Ë

	)

161 
	#ADC_FLAGS_SEQA_OVRRUN_MASK
 (1 << 24Ë

	)

162 
	#ADC_FLAGS_SEQB_OVRRUN_MASK
 (1 << 25Ë

	)

163 
	#ADC_FLAGS_SEQN_OVRRUN_MASK
(
£q
Ë(1 << (24 + (£q))Ë

	)

164 
	#ADC_FLAGS_SEQA_INT_MASK
 (1 << 28Ë

	)

165 
	#ADC_FLAGS_SEQB_INT_MASK
 (1 << 29Ë

	)

166 
	#ADC_FLAGS_SEQN_INT_MASK
(
£q
Ë(1 << (28 + (£q)))

	)

167 
	#ADC_FLAGS_THCMP_INT_MASK
 (1 << 30Ë

	)

168 
	#ADC_FLAGS_OVRRUN_INT_MASK
 (1UL << 31Ë

	)

171 
	#ADC_TRIM_VRANGE_HIGHV
 (0 << 5Ë

	)

172 
	#ADC_TRIM_VRANGE_LOWV
 (1 << 5Ë

	)

175 
	#ADC_CHAN_THRSEL_RES
 0xFFFFF000

	)

176 
	#ADC_INTEN_RES
 0xF8000000

	)

177 
	#ADC_SEQ_CTRL_RES
 ((7 << 15Ë| (0x3F << 20))

	)

188 
Chù_ADC_Inô
(
LPC_ADC_T
 *
pADC
, 
uöt32_t
 
Êags
);

196 
Chù_ADC_DeInô
(
LPC_ADC_T
 *
pADC
);

211 
STATIC
 
INLINE
 
Chù_ADC_SëDividî
(
LPC_ADC_T
 *
pADC
, 
uöt8_t
 
div
)

213 
uöt32_t
 
ãmp
;

215 
ãmp
 = 
pADC
->
CTRL
 & ~(
ADC_CR_CLKDIV_MASK
);

216 
pADC
->
CTRL
 = 
ãmp
 | (
uöt32_t
Ë
div
;

229 
STATIC
 
INLINE
 
Chù_ADC_SëClockR©e
(
LPC_ADC_T
 *
pADC
, 
uöt32_t
 
øã
)

231 
Chù_ADC_SëDividî
(
pADC
, (
uöt8_t
Ë(
Chù_Clock_GëSy°emClockR©e
(Ë/ 
øã
) - 1);

243 
STATIC
 
INLINE
 
uöt8_t
 
Chù_ADC_GëDividî
(
LPC_ADC_T
 *
pADC
)

245  
pADC
->
CTRL
 & 
ADC_CR_CLKDIV_MASK
;

257 
Chù_ADC_SèπCÆibøti⁄
(
LPC_ADC_T
 *
pADC
);

264 
STATIC
 
INLINE
 
boﬁ
 
Chù_ADC_IsCÆibøti⁄D⁄e
(
LPC_ADC_T
 *
pADC
)

266  (
boﬁ
Ë((
pADC
->
CTRL
 & 
ADC_CR_CALMODEBIT
) == 0);

278 
STATIC
 
INLINE
 
Chù_ADC_SëSequí˚rBôs
(
LPC_ADC_T
 *
pADC
, 
ADC_SEQ_IDX_T
 
£qIndex
, 
uöt32_t
 
bôs
)

280 
pADC
->
SEQ_CTRL
[
£qIndex
] = (pADC->SEQ_CTRL[£qIndex] & ~
ADC_SEQ_CTRL_RES
Ë| 
bôs
;

292 
STATIC
 
INLINE
 
Chù_ADC_CÀ¨Sequí˚rBôs
(
LPC_ADC_T
 *
pADC
, 
ADC_SEQ_IDX_T
 
£qIndex
, 
uöt32_t
 
bôs
)

294 
pADC
->
SEQ_CTRL
[
£qIndex
] =ÖADC->SEQ_CTRL[£qIndex] & ~(
ADC_SEQ_CTRL_RES
 | 
bôs
);

320 
STATIC
 
INLINE
 
Chù_ADC_SëupSequí˚r
(
LPC_ADC_T
 *
pADC
, 
ADC_SEQ_IDX_T
 
£qIndex
, 
uöt32_t
 
›ti⁄s
)

322 
pADC
->
SEQ_CTRL
[
£qIndex
] = 
›ti⁄s
;

331 
STATIC
 
INLINE
 
Chù_ADC_E«bÀSequí˚r
(
LPC_ADC_T
 *
pADC
, 
ADC_SEQ_IDX_T
 
£qIndex
)

333 
Chù_ADC_SëSequí˚rBôs
(
pADC
, 
£qIndex
, 
ADC_SEQ_CTRL_SEQ_ENA
);

342 
STATIC
 
INLINE
 
Chù_ADC_DißbÀSequí˚r
(
LPC_ADC_T
 *
pADC
, 
ADC_SEQ_IDX_T
 
£qIndex
)

344 
Chù_ADC_CÀ¨Sequí˚rBôs
(
pADC
, 
£qIndex
, 
ADC_SEQ_CTRL_SEQ_ENA
);

355 
STATIC
 
INLINE
 
Chù_ADC_SèπSequí˚r
(
LPC_ADC_T
 *
pADC
, 
ADC_SEQ_IDX_T
 
£qIndex
)

357 
Chù_ADC_SëSequí˚rBôs
(
pADC
, 
£qIndex
, 
ADC_SEQ_CTRL_START
);

369 
STATIC
 
INLINE
 
Chù_ADC_SèπBur°Sequí˚r
(
LPC_ADC_T
 *
pADC
, 
ADC_SEQ_IDX_T
 
£qIndex
)

371 
Chù_ADC_SëSequí˚rBôs
(
pADC
, 
£qIndex
, 
ADC_SEQ_CTRL_BURST
);

380 
STATIC
 
INLINE
 
Chù_ADC_St›Bur°Sequí˚r
(
LPC_ADC_T
 *
pADC
, 
ADC_SEQ_IDX_T
 
£qIndex
)

382 
Chù_ADC_CÀ¨Sequí˚rBôs
(
pADC
, 
£qIndex
, 
ADC_SEQ_CTRL_BURST
);

387 
ADC_DR_THCMPRANGE_INRANGE
,

388 
ADC_DR_THCMPRANGE_RESERVED
,

389 
ADC_DR_THCMPRANGE_BELOW
,

390 
ADC_DR_THCMPRANGE_ABOVE


391 } 
	tADC_DR_THCMPRANGE_T
;

395 
ADC_DR_THCMPCROSS_NOCROSS
,

396 
ADC_DR_THCMPCROSS_RESERVED
,

397 
ADC_DR_THCMPCROSS_DOWNWARD
,

398 
ADC_DR_THCMPCROSS_UPWARD


399 } 
	tADC_DR_THCMPCROSS_T
;

417 
STATIC
 
INLINE
 
uöt32_t
 
Chù_ADC_GëSequí˚rD©aReg
(
LPC_ADC_T
 *
pADC
, 
ADC_SEQ_IDX_T
 
£qIndex
)

419  
pADC
->
SEQ_GDAT
[
£qIndex
];

438 
STATIC
 
INLINE
 
uöt32_t
 
Chù_ADC_GëD©aReg
(
LPC_ADC_T
 *
pADC
, 
uöt8_t
 
ödex
)

440  
pADC
->
DR
[
ödex
];

450 
STATIC
 
INLINE
 
Chù_ADC_SëThrLowVÆue
(
LPC_ADC_T
 *
pADC
, 
uöt8_t
 
th∫um
, 
uöt16_t
 
vÆue
)

452 
pADC
->
THR_LOW
[
th∫um
] = (((
uöt32_t
Ë
vÆue
Ë<< 
ADC_THR_VAL_POS
);

462 
STATIC
 
INLINE
 
Chù_ADC_SëThrHighVÆue
(
LPC_ADC_T
 *
pADC
, 
uöt8_t
 
th∫um
, 
uöt16_t
 
vÆue
)

464 
pADC
->
THR_HIGH
[
th∫um
] = (((
uöt32_t
Ë
vÆue
Ë<< 
ADC_THR_VAL_POS
);

476 
STATIC
 
INLINE
 
Chù_ADC_Sñe˘TH0Ch™√ls
(
LPC_ADC_T
 *
pADC
, 
uöt32_t
 
ch™√ls
)

478 
pADC
->
CHAN_THRSEL
 =ÖADC->CHAN_THRSEL & ~(
ADC_CHAN_THRSEL_RES
 | 
ch™√ls
);

490 
STATIC
 
INLINE
 
Chù_ADC_Sñe˘TH1Ch™√ls
(
LPC_ADC_T
 *
pADC
, 
uöt32_t
 
ch™√ls
)

492 
pADC
->
CHAN_THRSEL
 = (pADC->CHAN_THRSEL & ~
ADC_CHAN_THRSEL_RES
Ë| 
ch™√ls
;

504 
STATIC
 
INLINE
 
Chù_ADC_E«bÀI¡
(
LPC_ADC_T
 *
pADC
, 
uöt32_t
 
ötMask
)

506 
pADC
->
INTEN
 = (pADC->INTEN & ~
ADC_INTEN_RES
Ë| 
ötMask
;

518 
STATIC
 
INLINE
 
Chù_ADC_DißbÀI¡
(
LPC_ADC_T
 *
pADC
, 
uöt32_t
 
ötMask
)

520 
pADC
->
INTEN
 =ÖADC->INTEN & ~(
ADC_INTEN_RES
 | 
ötMask
);

525 
ADC_INTEN_THCMP_DISABLE
,

526 
ADC_INTEN_THCMP_OUTSIDE
,

527 
ADC_INTEN_THCMP_CROSSING
,

528 } 
	tADC_INTEN_THCMP_T
;

537 
STATIC
 
INLINE
 
Chù_ADC_SëThªshﬁdI¡
(
LPC_ADC_T
 *
pADC
, 
uöt8_t
 
ch
, 
ADC_INTEN_THCMP_T
 
thI¡
)

539 
pADC
->
INTEN
 = (pADC->INTEN & ~(
ADC_INTEN_RES
 | (3 << (3 + (
ch
 * 2))))Ë| (
thI¡
 << (3 + (ch * 2)));

551 
STATIC
 
INLINE
 
uöt32_t
 
Chù_ADC_GëFœgs
(
LPC_ADC_T
 *
pADC
)

553  
pADC
->
FLAGS
;

562 
STATIC
 
INLINE
 
Chù_ADC_CÀ¨Fœgs
(
LPC_ADC_T
 *
pADC
, 
uöt32_t
 
Êags
)

564 
pADC
->
FLAGS
 = 
Êags
;

573 
STATIC
 
INLINE
 
Chù_ADC_SëTrim
(
LPC_ADC_T
 *
pADC
, 
uöt32_t
 
åim
)

575 
pADC
->
TRM
 = 
åim
;

582 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/crc/crc_8xx.c

31 
	~"chù.h
"

50 
	$Chù_CRC_Inô
()

52 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_CRC
);

53 
	}
}

56 
	$Chù_CRC_Deöô
()

58 
	`Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_CRC
);

59 
	}
}

62 
	$Chù_CRC_U£DeÁu…C⁄fig
(
CRC_POLY_T
 
pﬁy
)

64 
pﬁy
) {

65 
CRC_POLY_CRC16
:

66 
	`Chù_CRC_U£CRC16
();

69 
CRC_POLY_CRC32
:

70 
	`Chù_CRC_U£CRC32
();

73 
CRC_POLY_CCITT
:

75 
	`Chù_CRC_U£CCITT
();

78 
	}
}

81 
uöt32_t
 
	$Chù_CRC_CRC8
(c⁄° 
uöt8_t
 *
d©a
, 
uöt32_t
 
byãs
)

83 
	`Chù_CRC_U£CCITT
();

84 
byãs
 > 0) {

85 
	`Chù_CRC_Wrôe8
(*
d©a
);

86 
d©a
++;

87 
byãs
--;

90  
	`Chù_CRC_Sum
();

91 
	}
}

94 
uöt32_t
 
	$Chù_CRC_CRC16
(c⁄° 
uöt16_t
 *
d©a
, 
uöt32_t
 
hw‹ds
)

96 
	`Chù_CRC_U£CRC16
();

97 
hw‹ds
 > 0) {

98 
	`Chù_CRC_Wrôe16
(*
d©a
);

99 
d©a
++;

100 
hw‹ds
--;

103  
	`Chù_CRC_Sum
();

104 
	}
}

107 
uöt32_t
 
	$Chù_CRC_CRC32
(c⁄° 
uöt32_t
 *
d©a
, uöt32_à
w‹ds
)

109 
	`Chù_CRC_U£CRC32
();

110 
w‹ds
 > 0) {

111 
	`Chù_CRC_Wrôe32
(*
d©a
);

112 
d©a
++;

113 
w‹ds
--;

116  
	`Chù_CRC_Sum
();

117 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/crc/crc_8xx.h

32 #i‚de‡
__CRC_8XX_H_


33 
	#__CRC_8XX_H_


	)

35 #ifde‡
__˝lu•lus


48 
__IO
 
uöt32_t
 
MODE
;

49 
__IO
 
uöt32_t
 
SEED
;

51 
__I
 
uöt32_t
 
SUM
;

52 
__O
 
uöt32_t
 
WRDATA32
;

53 
__O
 
uöt16_t
 
WRDATA16
;

54 
__O
 
uöt8_t
 
WRDATA8
;

57 } 
	tLPC_CRC_T
;

62 
	#CRC_MODE_POLY_BITMASK
 ((0x03)Ë

	)

63 
	#CRC_MODE_POLY_CCITT
 (0x00Ë

	)

64 
	#CRC_MODE_POLY_CRC16
 (0x01Ë

	)

65 
	#CRC_MODE_POLY_CRC32
 (0x02Ë

	)

66 
	#CRC_MODE_WRDATA_BITMASK
 (0x03 << 2Ë

	)

67 
	#CRC_MODE_WRDATA_BIT_RVS
 (1 << 2Ë

	)

68 
	#CRC_MODE_WRDATA_CMPL
 (1 << 3Ë

	)

69 
	#CRC_MODE_SUM_BITMASK
 (0x03 << 4Ë

	)

70 
	#CRC_MODE_SUM_BIT_RVS
 (1 << 4Ë

	)

71 
	#CRC_MODE_SUM_CMPL
 (1 << 5Ë

	)

73 
	#MODE_CFG_CCITT
 (0x00Ë

	)

74 
	#MODE_CFG_CRC16
 (0x15Ë

	)

75 
	#MODE_CFG_CRC32
 (0x36Ë

	)

77 
	#CRC_SEED_CCITT
 (0x0000FFFF)

	)

78 
	#CRC_SEED_CRC16
 (0x00000000)

	)

79 
	#CRC_SEED_CRC32
 (0xFFFFFFFF)

	)

84 
	eIP_CRC_001_POLY
 {

85 
CRC_POLY_CCITT
 = 
CRC_MODE_POLY_CCITT
,

86 
CRC_POLY_CRC16
 = 
CRC_MODE_POLY_CRC16
,

87 
CRC_POLY_CRC32
 = 
CRC_MODE_POLY_CRC32
,

88 
CRC_POLY_LAST
,

89 } 
	tCRC_POLY_T
;

95 
Chù_CRC_Inô
();

101 
Chù_CRC_Deöô
();

111 
STATIC
 
INLINE
 
Chù_CRC_SëPﬁy
(
CRC_POLY_T
 
pﬁy
, 
uöt32_t
 
Êags
)

113 
LPC_CRC
->
MODE
 = (
uöt32_t
Ë
pﬁy
 | 
Êags
;

120 
STATIC
 
INLINE
 
Chù_CRC_U£CRC16
()

122 
LPC_CRC
->
MODE
 = 
MODE_CFG_CRC16
;

123 
LPC_CRC
->
SEED
 = 
CRC_SEED_CRC16
;

130 
STATIC
 
INLINE
 
Chù_CRC_U£CRC32
()

132 
LPC_CRC
->
MODE
 = 
MODE_CFG_CRC32
;

133 
LPC_CRC
->
SEED
 = 
CRC_SEED_CRC32
;

140 
STATIC
 
INLINE
 
Chù_CRC_U£CCITT
()

142 
LPC_CRC
->
MODE
 = 
MODE_CFG_CCITT
;

143 
LPC_CRC
->
SEED
 = 
CRC_SEED_CCITT
;

151 
Chù_CRC_U£DeÁu…C⁄fig
(
CRC_POLY_T
 
pﬁy
);

158 
STATIC
 
INLINE
 
Chù_CRC_SëMode
(
uöt32_t
 
mode
)

160 
LPC_CRC
->
MODE
 = 
mode
;

167 
STATIC
 
INLINE
 
uöt32_t
 
Chù_CRC_GëMode
()

169  
LPC_CRC
->
MODE
;

177 
STATIC
 
INLINE
 
Chù_CRC_SëSìd
(
uöt32_t
 
£ed
)

179 
LPC_CRC
->
SEED
 = 
£ed
;

186 
STATIC
 
INLINE
 
uöt32_t
 
Chù_CRC_GëSìd
()

188  
LPC_CRC
->
SEED
;

196 
STATIC
 
INLINE
 
Chù_CRC_Wrôe8
(
uöt8_t
 
d©a
)

198 
LPC_CRC
->
WRDATA8
 = 
d©a
;

206 
STATIC
 
INLINE
 
Chù_CRC_Wrôe16
(
uöt16_t
 
d©a
)

208 
LPC_CRC
->
WRDATA16
 = 
d©a
;

216 
STATIC
 
INLINE
 
Chù_CRC_Wrôe32
(
uöt32_t
 
d©a
)

218 
LPC_CRC
->
WRDATA32
 = 
d©a
;

225 
STATIC
 
INLINE
 
uöt32_t
 
Chù_CRC_Sum
()

227  
LPC_CRC
->
SUM
;

236 
uöt32_t
 
Chù_CRC_CRC8
(c⁄° 
uöt8_t
 *
d©a
, uöt32_à
byãs
);

244 
uöt32_t
 
Chù_CRC_CRC16
(c⁄° 
uöt16_t
 *
d©a
, uöt32_à
hw‹ds
);

252 
uöt32_t
 
Chù_CRC_CRC32
(c⁄° uöt32_à*
d©a
, uöt32_à
w‹ds
);

258 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/dma/dma_8xx.c

32 
	~"chù.h
"

45 #ifde‡
__ICCARM__


46 
	#ASTR
(
°r
Ë#°r

	)

47 
	#ALIGN
(
x
Ë
	`_Pøgma
(
	`ASTR
(
d©a_Æignmít
=##x))

	)

49 
	#ALIGN
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

53 
	#DMA_ALIGN
 
	`ALIGN
(512)

	)

54 
DMA_ALIGN
 
DMA_CHDESC_T
 
	gChù_DMA_TabÀ
[
MAX_DMA_CHANNEL
];

64 
	$ChùEz_DMA_Inô
(
uöt32_t
 
isE«bÀIRQ
)

66 
	`Chù_DMA_Inô
(
LPC_DMA
);

67 
	`Chù_DMA_E«bÀ
(
LPC_DMA
);

68 
	`Chù_DMA_SëSRAMBa£
(
LPC_DMA
, 
	`DMA_ADDR
(
Chù_DMA_TabÀ
));

69 i‡(
isE«bÀIRQ
)

70 
	`NVIC_E«bÀIRQ
(
DMA_IRQn
);

72 
	}
}

83 
	$ChùEz_DMA_InôCh™√l
–
DMA_CHID_T
 
ch™√l
, 
uöt32_t
 
§c_addªss
, uöt32_à
§c_ö¸emít
,

84 
uöt32_t
 
d°_addªss
, uöt32_à
d°_ö¸emít
, uöt32_à
x‰_width
, uöt32_à
Àngth_byãs
, uöt32_à
¥i‹ôy
)

86 
	`Chù_DMA_E«bÀCh™√l
(
LPC_DMA
, 
ch™√l
);

87 
	`Chù_DMA_E«bÀI¡Ch™√l
(
LPC_DMA
, 
ch™√l
);

89 
	`Chù_DMA_SëupCh™√lC⁄fig
(
LPC_DMA
, 
ch™√l
, 
DMA_CFG_PERIPHREQEN
 |

90 
	`DMA_CFG_CHPRIORITY
(
¥i‹ôy
));

92 i‡(
§c_ö¸emít
 !
DMA_XFERCFG_SRCINC_0
) {

93 
Chù_DMA_TabÀ
[
ch™√l
].
sour˚
 = 
	`DMA_ADDR
((
§c_addªss
 + 
Àngth_byãs
)

94 - (1UL << 
x‰_width
));

96 
Chù_DMA_TabÀ
[
ch™√l
].
sour˚
 = 
	`DMA_ADDR
(
§c_addªss
);

99 i‡(
d°_ö¸emít
 !
DMA_XFERCFG_DSTINC_0
) {

100 
Chù_DMA_TabÀ
[
ch™√l
].
de°
 = 
	`DMA_ADDR
((
d°_addªss
 + 
Àngth_byãs
)

101 - (1UL << 
x‰_width
));

103 
Chù_DMA_TabÀ
[
ch™√l
].
de°
 = 
	`DMA_ADDR
(
d°_addªss
);

105 
Chù_DMA_TabÀ
[
ch™√l
].
√xt
 = 
	`DMA_ADDR
(0);

107 
	}
}

118 
	$ChùEz_DMA_SèπTøns„r
(
DMA_CHID_T
 
ch™√l
, 
uöt32_t
 
§c_ö¸emít
, uöt32_à
d°_ö¸emít
, uöt32_à
x‰_width
, uöt32_à
Àngth_byãs
)

120 
uöt32_t
 
x„r_cou¡
;

123 
x„r_cou¡
 = (
x‰_width
 =
DMA_XFERCFG_WIDTH_8
Ë? 
Àngth_byãs
 :

124 (
x‰_width
 =
DMA_XFERCFG_WIDTH_16
Ë? (
Àngth_byãs
 >> 1) :

125 (
Àngth_byãs
 >> 2);

127 
	`Chù_DMA_SëupCh™√lTøns„r
(
LPC_DMA
, 
ch™√l
,

128 (
DMA_XFERCFG_CFGVALID
 | 
DMA_XFERCFG_SETINTA
 | 
DMA_XFERCFG_SWTRIG
 |

129 
x‰_width
 | 
§c_ö¸emít
 | 
d°_ö¸emít
 |

130 
	`DMA_XFERCFG_XFERCOUNT
(
x„r_cou¡
)));

131 
	}
}

133 
boﬁ
 
	$ChùEzr_DMA_Tøns„r
–
DMA_CHID_T
 
ch™√l
, 
uöt32_t
 
§c_addªss
, uöt32_à
§c_ö¸emít
,

134 
uöt32_t
 
d°_addªss
, uöt32_à
d°_ö¸emít
, uöt32_à
x‰_width
, uöt32_à
Àngth_byãs
, uöt32_à
¥i‹ôy
)

136 i‡((
	`Chù_DMA_GëBusyCh™√ls
(
LPC_DMA
Ë& (1 << 
ch™√l
)) != 0)

137  
FALSE
;

138 
	`ChùEz_DMA_InôCh™√l
(
ch™√l
, 
§c_addªss
, 
§c_ö¸emít
, 
d°_addªss
, 
d°_ö¸emít
, 
x‰_width
, 
Àngth_byãs
, 
¥i‹ôy
);

139 
	`ChùEz_DMA_SèπTøns„r
(
ch™√l
, 
§c_ö¸emít
, 
d°_ö¸emít
, 
x‰_width
, 
Àngth_byãs
);

140  
TRUE
;

141 
	}
}

143 
	$ChùEz_DMA_Ab‹tCh™√l
(
DMA_CHID_T
 
ch
) {

144 
	`Chù_DMA_DißbÀCh™√l
(
LPC_DMA
, 
ch
);

145 (
	`Chù_DMA_GëBusyCh™√ls
(
LPC_DMA
Ë& (1 << 
ch
)) != 0) {}

146 
	`Chù_DMA_Ab‹tCh™√l
(
LPC_DMA
, 
ch
);

147 
	`Chù_DMA_CÀ¨Eº‹I¡Ch™√l
(
LPC_DMA
, 
ch
);

148 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/dma/dma_8xx.h

32 #i‚de‡
__DMA_8XX_H_


33 
	#__DMA_8XX_H_


	)

35 #ifde‡
__˝lu•lus


48 
__IO
 
uöt32_t
 
ENABLESET
;

49 
__I
 
uöt32_t
 
RESERVED0
;

50 
__O
 
uöt32_t
 
ENABLECLR
;

51 
__I
 
uöt32_t
 
RESERVED1
;

52 
__I
 
uöt32_t
 
ACTIVE
;

53 
__I
 
uöt32_t
 
RESERVED2
;

54 
__I
 
uöt32_t
 
BUSY
;

55 
__I
 
uöt32_t
 
RESERVED3
;

56 
__IO
 
uöt32_t
 
ERRINT
;

57 
__I
 
uöt32_t
 
RESERVED4
;

58 
__IO
 
uöt32_t
 
INTENSET
;

59 
__I
 
uöt32_t
 
RESERVED5
;

60 
__O
 
uöt32_t
 
INTENCLR
;

61 
__I
 
uöt32_t
 
RESERVED6
;

62 
__IO
 
uöt32_t
 
INTA
;

63 
__I
 
uöt32_t
 
RESERVED7
;

64 
__IO
 
uöt32_t
 
INTB
;

65 
__I
 
uöt32_t
 
RESERVED8
;

66 
__O
 
uöt32_t
 
SETVALID
;

67 
__I
 
uöt32_t
 
RESERVED9
;

68 
__O
 
uöt32_t
 
SETTRIG
;

69 
__I
 
uöt32_t
 
RESERVED10
;

70 
__O
 
uöt32_t
 
ABORT
;

71 } 
	tLPC_DMA_COMMON_T
;

77 
__IO
 
uöt32_t
 
CFG
;

78 
__I
 
uöt32_t
 
CTLSTAT
;

79 
__IO
 
uöt32_t
 
XFERCFG
;

80 
__I
 
uöt32_t
 
RESERVED
;

81 } 
	tLPC_DMA_CHANNEL_T
;

84 
	#DMA_CFG_RESERVED
 ((3<<2)|(1<<7)|(3<<12)|0xfffc0000)

	)

85 
	#DMA_CTLSTAT_RESERVED
 (~(1|(1<<2)))

	)

86 
	#DMA_XFERCFG_RESERVED
 ((3<<6)|(3<<10)|(0x3fu<<26))

	)

91 
DMAREQ_USART0_RX
,

92 
DMA_CH0
 = 
DMAREQ_USART0_RX
,

93 
DMAREQ_USART0_TX
,

94 
DMA_CH1
 = 
DMAREQ_USART0_TX
,

95 
DMAREQ_USART1_RX
,

96 
DMA_CH2
 = 
DMAREQ_USART1_RX
,

97 
DMAREQ_USART1_TX
,

98 
DMA_CH3
 = 
DMAREQ_USART1_TX
,

99 
DMAREQ_USART2_RX
,

100 
DMA_CH4
 = 
DMAREQ_USART2_RX
,

101 
DMAREQ_USART2_TX
,

102 
DMA_CH5
 = 
DMAREQ_USART2_TX
,

103 
DMAREQ_SPI0_RX
,

104 
DMA_CH6
 = 
DMAREQ_SPI0_RX
,

105 
DMAREQ_SPI0_TX
,

106 
DMA_CH7
 = 
DMAREQ_SPI0_TX
,

107 
DMAREQ_SPI1_RX
,

108 
DMA_CH8
 = 
DMAREQ_SPI1_RX
,

109 
DMAREQ_SPI1_TX
,

110 
DMA_CH9
 = 
DMAREQ_SPI1_TX
,

111 
DMAREQ_I2C0_MST
,

112 
DMA_CH10
 = 
DMAREQ_I2C0_MST
,

113 
DMAREQ_I2C0_SLV
,

114 
DMA_CH11
 = 
DMAREQ_I2C0_SLV
,

115 
DMAREQ_I2C1_MST
,

116 
DMA_CH12
 = 
DMAREQ_I2C1_MST
,

117 
DMAREQ_I2C1_SLV
,

118 
DMA_CH13
 = 
DMAREQ_I2C1_SLV
,

119 
DMAREQ_I2C2_MST
,

120 
DMA_CH14
 = 
DMAREQ_I2C2_MST
,

121 
DMAREQ_I2C2_SLV
,

122 
DMA_CH15
 = 
DMAREQ_I2C2_SLV
,

123 
DMAREQ_I2C3_MST
,

124 
DMA_CH16
 = 
DMAREQ_I2C3_MST
,

125 
DMAREQ_I2C3_SLV
,

126 
DMA_CH17
 = 
DMAREQ_I2C3_SLV
,

127 } 
	tDMA_CHID_T
;

130 
	#MAX_DMA_CHANNEL
 (
DMA_CH17
 + 1)

	)

133 
	#DMA_COMMON_RESERVED
 (~(0ULË<< 
MAX_DMA_CHANNEL
)

	)

134 
	#DMA_ENABLESET_RESERVED
 
DMA_COMMON_RESERVED


	)

135 
	#DMA_ENABLECLR_RESERVED
 
DMA_COMMON_RESERVED


	)

136 
	#DMA_ACTIVE_RESERVED
 
DMA_COMMON_RESERVED


	)

137 
	#DMA_BUSY_RESERVED
 
DMA_COMMON_RESERVED


	)

138 
	#DMA_ERRINT_RESERVED
 
DMA_COMMON_RESERVED


	)

139 
	#DMA_INTENSET_RESERVED
 
DMA_COMMON_RESERVED


	)

140 
	#DMA_INTENCLR_RESERVED
 
DMA_COMMON_RESERVED


	)

141 
	#DMA_INTA_RESERVED
 
DMA_COMMON_RESERVED


	)

142 
	#DMA_INTB_RESERVED
 
DMA_COMMON_RESERVED


	)

143 
	#DMA_SETVALID_RESERVED
 
DMA_COMMON_RESERVED


	)

144 
	#DMA_SETTRIG_RESERVED
 
DMA_COMMON_RESERVED


	)

145 
	#DMA_ABORT_RESERVED
 
DMA_COMMON_RESERVED


	)

151 
__IO
 
uöt32_t
 
CTRL
;

152 
__I
 
uöt32_t
 
INTSTAT
;

153 
__IO
 
uöt32_t
 
SRAMBASE
;

154 
__I
 
uöt32_t
 
RESERVED2
[5];

155 
LPC_DMA_COMMON_T
 
DMACOMMON
[1];

156 
__I
 
uöt32_t
 
RESERVED0
[225];

157 
LPC_DMA_CHANNEL_T
 
DMACH
[
MAX_DMA_CHANNEL
];

158 } 
	tLPC_DMA_T
;

161 
	#DMA_CTRL_RESERVED
 (~1)

	)

162 
	#DMA_INTSTAT_RESERVED
 (~7)

	)

163 
	#DMA_SRAMBASE_RESERVED
 (0xFF)

	)

166 
WIDTH_8_BITS
 = 0,

167 
WIDTH_16_BITS
 = 1,

168 
WIDTH_32_BITS
 = 2

169 } 
	tD©aWidth
;

177 
ChùEz_DMA_Inô
(
uöt32_t
 
isE«bÀIRQ
);

196 
ChùEz_DMA_InôCh™√l
–
DMA_CHID_T
 
ch
, 
uöt32_t
 
§c_addªss
, uöt32_à
§c_ö¸emít
,

197 
uöt32_t
 
d°_addªss
, uöt32_à
d°_ö¸emít
, uöt32_à
x‰_width
, uöt32_à
Àngth_byãs
, uöt32_à
¥i‹ôy
);

214 
ChùEz_DMA_SèπTøns„r
(
DMA_CHID_T
 
ch
, 
uöt32_t
 
§c_ö¸emít
, uöt32_à
d°_ö¸emít
, uöt32_à
x‰_width
, uöt32_à
Àngth_byãs
);

221 
boﬁ
 
ChùEzr_DMA_Tøns„r
–
DMA_CHID_T
 
ch™√l
, 
uöt32_t
 
§c_addªss
, uöt32_à
§c_ö¸emít
,

222 
uöt32_t
 
d°_addªss
, uöt32_à
d°_ö¸emít
, uöt32_à
x‰_width
, uöt32_à
Àngth_byãs
, uöt32_à
¥i‹ôy
);

230 
ChùEz_DMA_Ab‹tCh™√l
(
DMA_CHID_T
 
ch
);

241 
STATIC
 
INLINE
 
Chù_DMA_Inô
(
LPC_DMA_T
 *
pDMA
)

243 (Ë
pDMA
;

244 
Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_DMA
);

252 
STATIC
 
INLINE
 
Chù_DMA_DeInô
(
LPC_DMA_T
 *
pDMA
)

254 (Ë
pDMA
;

255 
Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_DMA
);

263 
STATIC
 
INLINE
 
Chù_DMA_E«bÀ
(
LPC_DMA_T
 *
pDMA
)

265 
pDMA
->
CTRL
 = 1;

273 
STATIC
 
INLINE
 
Chù_DMA_DißbÀ
(
LPC_DMA_T
 *
pDMA
)

275 
pDMA
->
CTRL
 = 0;

279 
	#DMA_INTSTAT_ACTIVEINT
 0x2

	)

280 
	#DMA_INTSTAT_ACTIVEERRINT
 0x4

	)

290 
STATIC
 
INLINE
 
uöt32_t
 
Chù_DMA_GëI¡Sètus
(
LPC_DMA_T
 *
pDMA
)

292  (
pDMA
->
INTSTAT
 & ~
DMA_INTSTAT_RESERVED
);

297 
uöt32_t
 
x„rcfg
;

298 
uöt32_t
 
sour˚
;

299 
uöt32_t
 
de°
;

300 
uöt32_t
 
√xt
;

301 } 
	tDMA_CHDESC_T
;

305 
DMA_CHDESC_T
 
Chù_DMA_TabÀ
[
MAX_DMA_CHANNEL
];

319 
STATIC
 
INLINE
 
Chù_DMA_SëSRAMBa£
(
LPC_DMA_T
 *
pDMA
, 
uöt32_t
 
ba£
)

321 
	gpDMA
->
	gSRAMBASE
 = 
ba£
;

329 
STATIC
 
INLINE
 
uöt32_t
 
Chù_DMA_GëSRAMBa£
(
LPC_DMA_T
 *
pDMA
)

331  (
	gpDMA
->
	gSRAMBASE
 & ~
	gDMA_SRAMBASE_RESERVED
);

348 
STATIC
 
INLINE
 
Chù_DMA_E«bÀCh™√l
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

350 
	gpDMA
->
	gDMACOMMON
[0].
	gENABLESET
 = (1 << 
ch
);

359 
STATIC
 
INLINE
 
Chù_DMA_DißbÀCh™√l
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

361 
	gpDMA
->
	gDMACOMMON
[0].
	gENABLECLR
 = (1 << 
ch
);

372 
STATIC
 
INLINE
 
uöt32_t
 
Chù_DMA_GëE«bÀdCh™√ls
(
LPC_DMA_T
 *
pDMA
)

374  (
	gpDMA
->
	gDMACOMMON
[0].
	gENABLESET
 & ~
	gDMA_ENABLESET_RESERVED
);

387 
STATIC
 
INLINE
 
uöt32_t
 
Chù_DMA_GëA˘iveCh™√ls
(
LPC_DMA_T
 *
pDMA
)

389  (
	gpDMA
->
	gDMACOMMON
[0].
	gACTIVE
 & ~
	gDMA_ACTIVE_RESERVED
);

403 
STATIC
 
INLINE
 
uöt32_t
 
Chù_DMA_GëBusyCh™√ls
(
LPC_DMA_T
 *
pDMA
)

405  (
	gpDMA
->
	gDMACOMMON
[0].
	gBUSY
 & ~
	gDMA_BUSY_RESERVED
);

417 
STATIC
 
INLINE
 
uöt32_t
 
Chù_DMA_GëEº‹I¡Ch™√ls
(
LPC_DMA_T
 *
pDMA
)

419  (
	gpDMA
->
	gDMACOMMON
[0].
	gERRINT
 & ~
	gDMA_ERRINT_RESERVED
);

428 
STATIC
 
INLINE
 
Chù_DMA_CÀ¨Eº‹I¡Ch™√l
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

430 
	gpDMA
->
	gDMACOMMON
[0].
	gERRINT
 = (1 << 
ch
);

439 
STATIC
 
INLINE
 
Chù_DMA_E«bÀI¡Ch™√l
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

441 
	gpDMA
->
	gDMACOMMON
[0].
	gINTENSET
 = (1 << 
ch
);

450 
STATIC
 
INLINE
 
Chù_DMA_DißbÀI¡Ch™√l
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

452 
	gpDMA
->
	gDMACOMMON
[0].
	gINTENCLR
 = (1 << 
ch
);

465 
STATIC
 
INLINE
 
uöt32_t
 
Chù_DMA_GëE«bÀI¡Ch™√ls
(
LPC_DMA_T
 *
pDMA
)

467  (
	gpDMA
->
	gDMACOMMON
[0].
	gINTENSET
 & ~
	gDMA_INTENSET_RESERVED
);

479 
STATIC
 
INLINE
 
uöt32_t
 
Chù_DMA_GëA˘iveI¡ACh™√ls
(
LPC_DMA_T
 *
pDMA
)

481  (
	gpDMA
->
	gDMACOMMON
[0].
	gINTA
 & ~
	gDMA_INTA_RESERVED
);

490 
STATIC
 
INLINE
 
Chù_DMA_CÀ¨A˘iveI¡ACh™√l
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

492 
	gpDMA
->
	gDMACOMMON
[0].
	gINTA
 = (1 << 
ch
);

504 
STATIC
 
INLINE
 
uöt32_t
 
Chù_DMA_GëA˘iveI¡BCh™√ls
(
LPC_DMA_T
 *
pDMA
)

506  (
	gpDMA
->
	gDMACOMMON
[0].
	gINTB
 & ~
	gDMA_INTB_RESERVED
);

515 
STATIC
 
INLINE
 
Chù_DMA_CÀ¨A˘iveI¡BCh™√l
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

517 
	gpDMA
->
	gDMACOMMON
[0].
	gINTB
 = (1 << 
ch
);

528 
STATIC
 
INLINE
 
Chù_DMA_SëVÆidCh™√l
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

530 
	gpDMA
->
	gDMACOMMON
[0].
	gSETVALID
 = (1 << 
ch
);

540 
STATIC
 
INLINE
 
Chù_DMA_SëTrigCh™√l
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

542 
	gpDMA
->
	gDMACOMMON
[0].
	gSETTRIG
 = (1 << 
ch
);

556 
STATIC
 
INLINE
 
Chù_DMA_Ab‹tCh™√l
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

558 
	gpDMA
->
	gDMACOMMON
[0].
	gABORT
 = (1 << 
ch
);

571 
	#DMA_ADDR
(
addr
Ë((
uöt32_t
Ë◊ddr))

	)

575 
	#DMA_CFG_PERIPHREQEN
 (1 << 0Ë

	)

576 
	#DMA_CFG_HWTRIGEN
 (1 << 1Ë

	)

577 
	#DMA_CFG_TRIGPOL_LOW
 (0 << 4Ë

	)

578 
	#DMA_CFG_TRIGPOL_HIGH
 (1 << 4Ë

	)

579 
	#DMA_CFG_TRIGTYPE_EDGE
 (0 << 5Ë

	)

580 
	#DMA_CFG_TRIGTYPE_LEVEL
 (1 << 5Ë

	)

581 
	#DMA_CFG_TRIGBURST_SNGL
 (0 << 6Ë

	)

582 
	#DMA_CFG_TRIGBURST_BURST
 (1 << 6Ë

	)

583 
	#DMA_CFG_BURSTPOWER_1
 (0 << 8Ë

	)

584 
	#DMA_CFG_BURSTPOWER_2
 (1 << 8Ë

	)

585 
	#DMA_CFG_BURSTPOWER_4
 (2 << 8Ë

	)

586 
	#DMA_CFG_BURSTPOWER_8
 (3 << 8Ë

	)

587 
	#DMA_CFG_BURSTPOWER_16
 (4 << 8Ë

	)

588 
	#DMA_CFG_BURSTPOWER_32
 (5 << 8Ë

	)

589 
	#DMA_CFG_BURSTPOWER_64
 (6 << 8Ë

	)

590 
	#DMA_CFG_BURSTPOWER_128
 (7 << 8Ë

	)

591 
	#DMA_CFG_BURSTPOWER_256
 (8 << 8Ë

	)

592 
	#DMA_CFG_BURSTPOWER_512
 (9 << 8Ë

	)

593 
	#DMA_CFG_BURSTPOWER_1024
 (10 << 8Ë

	)

594 
	#DMA_CFG_BURSTPOWER
(
n
Ë(“Ë<< 8Ë

	)

595 
	#DMA_CFG_SRCBURSTWRAP
 (1 << 14Ë

	)

596 
	#DMA_CFG_DSTBURSTWRAP
 (1 << 15Ë

	)

597 
	#DMA_CFG_CHPRIORITY
(
p
Ë(’Ë<< 16Ë

	)

628 
STATIC
 
INLINE
 
Chù_DMA_SëupCh™√lC⁄fig
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
, 
uöt32_t
 
cfg
)

630 
	gpDMA
->
	gDMACH
[
ch
].
	gCFG
 = 
cfg
;

634 
	#DMA_CTLSTAT_VALIDPENDING
 (1 << 0Ë

	)

635 
	#DMA_CTLSTAT_TRIG
 (1 << 2Ë

	)

643 
STATIC
 
INLINE
 
uöt32_t
 
Chù_DMA_GëCh™√lSètus
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

645  (
	gpDMA
->
	gDMACH
[
ch
].
	gXFERCFG
 & ~
	gDMA_XFERCFG_RESERVED
);

649 
	#DMA_XFERCFG_CFGVALID
 (1 << 0Ë

	)

650 
	#DMA_XFERCFG_RELOAD
 (1 << 1Ë

	)

651 
	#DMA_XFERCFG_SWTRIG
 (1 << 2Ë

	)

652 
	#DMA_XFERCFG_CLRTRIG
 (1 << 3Ë

	)

653 
	#DMA_XFERCFG_SETINTA
 (1 << 4Ë

	)

654 
	#DMA_XFERCFG_SETINTB
 (1 << 5Ë

	)

655 
	#DMA_XFERCFG_WIDTH_8
 (0 << 8Ë

	)

656 
	#DMA_XFERCFG_WIDTH_16
 (1 << 8Ë

	)

657 
	#DMA_XFERCFG_WIDTH_32
 (2 << 8Ë

	)

658 
	#DMA_XFERCFG_SRCINC_0
 (0 << 12Ë

	)

659 
	#DMA_XFERCFG_SRCINC_1
 (1 << 12Ë

	)

660 
	#DMA_XFERCFG_SRCINC_2
 (2 << 12Ë

	)

661 
	#DMA_XFERCFG_SRCINC_4
 (3 << 12Ë

	)

662 
	#DMA_XFERCFG_DSTINC_0
 (0 << 14Ë

	)

663 
	#DMA_XFERCFG_DSTINC_1
 (1 << 14Ë

	)

664 
	#DMA_XFERCFG_DSTINC_2
 (2 << 14Ë

	)

665 
	#DMA_XFERCFG_DSTINC_4
 (3 << 14Ë

	)

666 
	#DMA_XFERCFG_XFERCOUNT
(
n
Ë(“ - 1Ë<< 16Ë

	)

685 
STATIC
 
INLINE
 
Chù_DMA_SëupCh™√lTøns„r
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
, 
uöt32_t
 
cfg
)

687 
	gpDMA
->
	gDMACH
[
ch
].
	gXFERCFG
 = 
cfg
;

699 
STATIC
 
INLINE
 
Chù_DMA_SëTønBôs
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
, 
uöt32_t
 
mask
)

703 
	gpDMA
->
	gDMACH
[
ch
].
	gXFERCFG
 = (
pDMA
->
DMACH
[ch].
XFERCFG
 & ~
DMA_XFERCFG_RESERVED
Ë| 
mask
;

715 
STATIC
 
INLINE
 
Chù_DMA_CÀ¨TønBôs
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
, 
uöt32_t
 
mask
)

719 
	gpDMA
->
	gDMACH
[
ch
].
	gXFERCFG
 &~(
DMA_XFERCFG_RESERVED
 | 
mask
);

729 
STATIC
 
INLINE
 
Chù_DMA_SëupCh™√lTøns„rSize
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
, 
uöt32_t
 
å™s
)

731 
	gpDMA
->
	gDMACH
[
ch
].
	gXFERCFG
 = (
pDMA
->
DMACH
[ch].
XFERCFG
 & ~(
DMA_XFERCFG_RESERVED
 | (0x3FF << 16))Ë| 
DMA_XFERCFG_XFERCOUNT
(
å™s
);

740 
STATIC
 
INLINE
 
Chù_DMA_SëCh™√lVÆid
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

742 
Chù_DMA_SëTønBôs
(
pDMA
, 
ch
, 
DMA_XFERCFG_CFGVALID
);

751 
STATIC
 
INLINE
 
Chù_DMA_SëCh™√lInVÆid
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

753 
Chù_DMA_CÀ¨TønBôs
(
pDMA
, 
ch
, 
DMA_XFERCFG_CFGVALID
);

762 
STATIC
 
INLINE
 
Chù_DMA_SWTriggîCh™√l
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

764 
Chù_DMA_SëTønBôs
(
pDMA
, 
ch
, 
DMA_XFERCFG_SWTRIG
);

773 
STATIC
 
INLINE
 
boﬁ
 
Chù_DMA_IsCh™√lA˘ive
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
)

775  (
	gpDMA
->
	gDMACOMMON
[0].
	gACTIVE
 & (1 << 
	gch
)) != 0;

794 
STATIC
 
INLINE
 
boﬁ
 
Chù_DMA_SëupTønCh™√l
(
LPC_DMA_T
 *
pDMA
, 
DMA_CHID_T
 
ch
, c⁄° 
DMA_CHDESC_T
 *
desc
)

797 i‡(
Chù_DMA_IsCh™√lA˘ive
(
pDMA
, 
ch
))

798  
	gÁl£
;

801 ((
	gDMA_CHDESC_T
 *Ë(
	gpDMA
->
	gSRAMBASE
 & ~
	gDMA_SRAMBASE_RESERVED
))[
ch
] = *
desc
;

802  
	gåue
;

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/gpio/gpio_8xx.c

32 
	~"chù.h
"

33 
	~"gpio_8xx.h
"

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/gpio/gpio_8xx.h

32 #i‚de‡
__GPIO_8XX_H_


33 
	#__GPIO_8XX_H_


	)

35 #ifde‡
__˝lu•lus


48 
__IO
 
uöt8_t
 
B
[128][32];

49 
__IO
 
uöt32_t
 
W
[32][32];

50 
__IO
 
uöt32_t
 
DIR
[32];

51 
__IO
 
uöt32_t
 
MASK
[32];

52 
__IO
 
uöt32_t
 
PIN
[32];

53 
__IO
 
uöt32_t
 
MPIN
[32];

54 
__IO
 
uöt32_t
 
SET
[32];

55 
__O
 
uöt32_t
 
CLR
[32];

56 
__O
 
uöt32_t
 
NOT
[32];

57 
__O
 
uöt32_t
 
DIRSET
[32];

58 
__O
 
uöt32_t
 
DIRCLR
[32];

59 
__O
 
uöt32_t
 
DIRNOT
[32];

60 } 
	tLPC_GPIO_T
;

67 
STATIC
 
INLINE
 
Chù_GPIO_Inô
(
LPC_GPIO_T
 *
pGPIO
)

69 
LPC_SYSCTL
->
SYSAHBCLKCTRL
 = (1 << 
SYSCTL_CLOCK_GPIO
Ë| (LPC_SYSCTL->SYSAHBCLKCTRL & ~
SYSCTL_SYSAHBCLKCTRL_RESERVED
);

78 
STATIC
 
INLINE
 
Chù_GPIO_DeInô
(
LPC_GPIO_T
 *
pGPIO
)

80 
LPC_SYSCTL
->
SYSAHBCLKCTRL
 &~((1 << 
SYSCTL_CLOCK_GPIO
Ë| 
SYSCTL_SYSAHBCLKCTRL_RESERVED
);

91 
STATIC
 
INLINE
 
Chù_GPIO_PöSëDIR
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, uöt8_à
pö
, 
boﬁ
 
isOuçut
)

94 #ifde‡
CHIP_LPC82X


95 i‡(
isOuçut
)

96 
pGPIO
->
DIRSET
[
p‹t
] = 1UL << 
pö
;

98 
pGPIO
->
DIRCLR
[
p‹t
] = 1UL << 
pö
;

100 i‡(
isOuçut
)

101 
pGPIO
->
DIR
[
p‹t
] |1UL << 
pö
;

103 
pGPIO
->
DIR
[
p‹t
] &~(1UL << 
pö
);

114 
STATIC
 
INLINE
 
boﬁ
 
Chù_GPIO_PöGëDIR
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, uöt8_à
pö
)

116  (
boﬁ
Ë(((
pGPIO
->
DIR
[
p‹t
]Ë>> 
pö
) & 1);

126 
STATIC
 
INLINE
 
Chù_GPIO_PöToggÀDIR
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, uöt8_à
pö
)

128 #ifde‡
CHIP_LPC82X


129 
pGPIO
->
DIRNOT
[
p‹t
] = 1UL << 
pö
;

131 
pGPIO
->
DIR
[
p‹t
] ^1UL << 
pö
;

144 
STATIC
 
INLINE
 
Chù_GPIO_PöSëSèã
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, uöt8_à
pö
, 
boﬁ
 
£âög
)

146 
pGPIO
->
B
[
p‹t
][
pö
] = 
£âög
;

158 
STATIC
 
INLINE
 
boﬁ
 
Chù_GPIO_PöGëSèã
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, uöt8_à
pö
)

160  (
boﬁ
Ë
pGPIO
->
B
[
p‹t
][
pö
];

171 
STATIC
 
INLINE
 
Chù_GPIO_PöToggÀSèã
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, uöt8_à
pö
)

173 
pGPIO
->
NOT
[
p‹t
] = 1UL << 
pö
;

186 
STATIC
 
INLINE
 
Chù_GPIO_P‹tSëDIR
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, uöt8_à
pöMask
, 
boﬁ
 
isOuçut
)

188 #ifde‡
CHIP_LPC82X


189 i‡(
isOuçut
)

190 
pGPIO
->
DIRSET
[
p‹t
] = 
pöMask
;

192 
pGPIO
->
DIRCLR
[
p‹t
] = 
pöMask
;

194 i‡(
isOuçut
)

195 
pGPIO
->
DIR
[
p‹t
] |
pöMask
;

197 
pGPIO
->
DIR
[
p‹t
] &~
pöMask
;

209 
STATIC
 
INLINE
 
uöt32_t
 
Chù_GPIO_P‹tGëDIR
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
)

211  
pGPIO
->
DIR
[
p‹t
];

223 
STATIC
 
INLINE
 
Chù_GPIO_P‹tToggÀDIR
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, uöt8_à
pöMask
)

225 #ifde‡
CHIP_LPC82X


226 
pGPIO
->
DIRNOT
[
p‹t
] = 
pöMask
;

228 
pGPIO
->
DIR
[
p‹t
] ^
pöMask
;

239 
STATIC
 
INLINE
 
Chù_GPIO_P‹tSëSèã
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, 
uöt32_t
 
vÆue
)

241 
pGPIO
->
PIN
[
p‹t
] = 
vÆue
;

250 
STATIC
 
INLINE
 
uöt32_t
 
Chù_GPIO_P‹tGëSèã
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
)

252  
pGPIO
->
PIN
[
p‹t
];

264 
STATIC
 
INLINE
 
Chù_GPIO_P‹tToggÀSèã
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, 
uöt32_t
 
pös
)

266 
pGPIO
->
NOT
[
p‹t
] = 
pös
;

278 
STATIC
 
INLINE
 
Chù_GPIO_P‹tSëOutHigh
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, 
uöt32_t
 
bmPös
)

280 
pGPIO
->
SET
[
p‹t
] = 
bmPös
;

292 
STATIC
 
INLINE
 
Chù_GPIO_P‹tSëOutLow
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, 
uöt32_t
 
pös
)

294 
pGPIO
->
CLR
[
p‹t
] = 
pös
;

307 
STATIC
 
INLINE
 
Chù_GPIO_P‹tSëMask
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, 
uöt32_t
 
mask
)

309 
pGPIO
->
MASK
[
p‹t
] = 
mask
;

320 
STATIC
 
INLINE
 
uöt32_t
 
Chù_GPIO_P‹tGëMask
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
)

322  
pGPIO
->
MASK
[
p‹t
];

332 
STATIC
 
INLINE
 
Chù_GPIO_P‹tSëMaskedSèã
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
, 
uöt32_t
 
vÆue
)

334 
pGPIO
->
MPIN
[
p‹t
] = 
vÆue
;

343 
STATIC
 
INLINE
 
uöt32_t
 
Chù_GPIO_P‹tGëMaskedSèã
(
LPC_GPIO_T
 *
pGPIO
, 
uöt8_t
 
p‹t
)

345  
pGPIO
->
MPIN
[
p‹t
];

353 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/i2c/i2c_8xx.c

32 
	~"chù.h
"

47 
CHIP_SYSCTL_PERIPH_RESET_T
 
	$I2C_GëRe£tID
(
LPC_I2C_T
 *
pI2C
)

49 
uöt32_t
 
ba£
 = (uöt32_tË
pI2C
;

50 
ba£
) {

51 
LPC_I2C1_BASE
:

52  
RESET_I2C1
;

53 
LPC_I2C2_BASE
:

54  
RESET_I2C2
;

55 
LPC_I2C3_BASE
:

56  
RESET_I2C3
;

58  
RESET_I2C0
;

60 
	}
}

63 
CHIP_SYSCTL_CLOCK_T
 
	$I2C_GëClockID
(
LPC_I2C_T
 *
pI2C
)

65 
uöt32_t
 
ba£
 = (uöt32_tË
pI2C
;

66 
ba£
) {

67 
LPC_I2C1_BASE
:

68  
SYSCTL_CLOCK_I2C1
;

69 
LPC_I2C2_BASE
:

70  
SYSCTL_CLOCK_I2C2
;

71 
LPC_I2C3_BASE
:

72  
SYSCTL_CLOCK_I2C3
;

74  
SYSCTL_CLOCK_I2C0
;

76 
	}
}

89 
	$Chù_I2CM_SëDutyCy˛e
(
LPC_I2C_T
 *
pI2C
, 
uöt16_t
 
s˛H
, uöt16_à
s˛L
)

92 i‡(
s˛H
 < 2) {

93 
s˛H
 = 2;

95 i‡(
s˛H
 > 9) {

96 
s˛H
 = 9;

98 i‡(
s˛L
 < 2) {

99 
s˛L
 = 2;

101 i‡(
s˛L
 > 9) {

102 
s˛L
 = 9;

105 
pI2C
->
MSTTIME
 = (((
s˛H
 - 2Ë& 0x07Ë<< 4Ë| ((
s˛L
 - 2) & 0x07);

106 
	}
}

113 
	$Chù_I2C_Inô
(
LPC_I2C_T
 *
pI2C
)

116 
	`Chù_Clock_E«bÀPîùhClock
(
	`I2C_GëClockID
(
pI2C
));

119 
	`Chù_SYSCTL_PîùhRe£t
(
	`I2C_GëRe£tID
(
pI2C
));

120 
	}
}

123 
	$Chù_I2C_DeInô
(
LPC_I2C_T
 *
pI2C
)

126 
	`Chù_Clock_DißbÀPîùhClock
(
	`I2C_GëClockID
(
pI2C
));

127 
	}
}

130 
	$Chù_I2CM_SëBusS≥ed
(
LPC_I2C_T
 *
pI2C
, 
uöt32_t
 
busS≥ed
)

132 
uöt32_t
 
s˛
 = 
	`Chù_Clock_GëSy°emClockR©e
(Ë/ (
	`Chù_I2C_GëClockDiv
(
pI2C
Ë* 
busS≥ed
);

133 
	`Chù_I2CM_SëDutyCy˛e
(
pI2C
, (
s˛
 >> 1), (scl - (scl >> 1)));

134 
	}
}

137 
uöt32_t
 
	$Chù_I2CM_X„rH™dÀr
(
LPC_I2C_T
 *
pI2C
, 
I2CM_XFER_T
 *
x„r
)

139 
uöt32_t
 
°©us
 = 
	`Chù_I2CM_GëSètus
(
pI2C
);

141 i‡(
°©us
 & 
I2C_STAT_MSTRARBLOSS
) {

143 
x„r
->
°©us
 = 
I2CM_STATUS_ARBLOST
;

145 
	`Chù_I2CM_CÀ¨Sètus
(
pI2C
, 
I2C_STAT_MSTRARBLOSS
);

148 i‡(
°©us
 & 
I2C_STAT_MSTSTSTPERR
) {

150 
x„r
->
°©us
 = 
I2CM_STATUS_BUS_ERROR
;

152 
	`Chù_I2CM_CÀ¨Sètus
(
pI2C
, 
I2C_STAT_MSTSTSTPERR
);

155 i‡(
°©us
 & 
I2C_STAT_MSTPENDING
) {

157 
	`Chù_I2CM_GëMa°îSèã
(
pI2C
)) {

159 
I2C_STAT_MSTCODE_IDLE
:

164 
I2C_STAT_MSTCODE_RXREADY
:

166 *
x„r
->
rxBuff
++ = 
pI2C
->
MSTDAT
;

167 
x„r
->
rxSz
--;

168 i‡(
x„r
->
rxSz
) {

170 
	`Chù_I2CM_Ma°îC⁄töue
(
pI2C
);

174 
x„r
->
°©us
 = 
I2CM_STATUS_OK
;

176 
	`Chù_I2CM_SídSt›
(
pI2C
);

181 
I2C_STAT_MSTCODE_TXREADY
:

182 i‡(
x„r
->
txSz
) {

184 
pI2C
->
MSTDAT
 = *
x„r
->
txBuff
++;

185 
x„r
->
txSz
--;

186 
	`Chù_I2CM_Ma°îC⁄töue
(
pI2C
);

190 i‡(
x„r
->
rxSz
) {

192 
	`Chù_I2CM_WrôeByã
(
pI2C
, (
x„r
->
¶aveAddr
 << 1) | 0x1);

194 
	`Chù_I2CM_SídSèπ
(
pI2C
);

198 
x„r
->
°©us
 = 
I2CM_STATUS_OK
;

200 
	`Chù_I2CM_SídSt›
(
pI2C
);

205 
I2C_STAT_MSTCODE_NACKADR
:

207 
x„r
->
°©us
 = 
I2CM_STATUS_NAK_ADR
;

208 
	`Chù_I2CM_SídSt›
(
pI2C
);

211 
I2C_STAT_MSTCODE_NACKDAT
:

213 
x„r
->
°©us
 = 
I2CM_STATUS_NAK_DAT
;

214 
	`Chù_I2CM_SídSt›
(
pI2C
);

219 
x„r
->
°©us
 = 
I2CM_STATUS_ERROR
;

225 
x„r
->
°©us
 = 
I2CM_STATUS_ERROR
;

227  
x„r
->
°©us
 !
I2CM_STATUS_BUSY
;

228 
	}
}

231 
	$Chù_I2CM_X„r
(
LPC_I2C_T
 *
pI2C
, 
I2CM_XFER_T
 *
x„r
)

234 
x„r
->
°©us
 = 
I2CM_STATUS_BUSY
;

236 
	`Chù_I2CM_CÀ¨Sètus
(
pI2C
, 
I2C_STAT_MSTRARBLOSS
 | 
I2C_STAT_MSTSTSTPERR
);

238 
	`Chù_I2CM_WrôeByã
(
pI2C
, (
x„r
->
¶aveAddr
 << 1Ë| (x„r->
txSz
 == 0));

240 
	`Chù_I2CM_SídSèπ
(
pI2C
);

241 
	}
}

244 
uöt32_t
 
	$Chù_I2CM_X„rBlockög
(
LPC_I2C_T
 *
pI2C
, 
I2CM_XFER_T
 *
x„r
)

246 
uöt32_t
 
ªt
 = 0;

248 
	`Chù_I2CM_X„r
(
pI2C
, 
x„r
);

250 
ªt
 == 0) {

252 !
	`Chù_I2CM_IsMa°îPídög
(
pI2C
)) {}

254 
ªt
 = 
	`Chù_I2CM_X„rH™dÀr
(
pI2C
, 
x„r
);

256  
ªt
;

257 
	}
}

260 
uöt32_t
 
	$Chù_I2CS_X„rH™dÀr
(
LPC_I2C_T
 *
pI2C
, c⁄° 
I2CS_XFER_T
 *
x„rs
)

262 
uöt32_t
 
d⁄e
 = 0;

264 
uöt8_t
 
d©a
;

265 
uöt32_t
 
°©e
;

268 i‡((
	`Chù_I2C_GëPídögI¡
(
pI2C
Ë& 
I2C_INTENSET_SLVDESEL
) != 0) {

269 
	`Chù_I2CS_CÀ¨Sètus
(
pI2C
, 
I2C_STAT_SLVDESEL
);

270 
x„rs
->
	`¶aveD⁄e
();

274 
°©e
 = 
	`Chù_I2CS_GëSœveSèã
(
pI2C
);

276 
°©e
) {

277 
I2C_STAT_SLVCODE_ADDR
:

279 
d©a
 = 
	`Chù_I2CS_GëSœveAddr
(
pI2C
, 
	`Chù_I2CS_GëSœveM©chIndex
(pI2C));

282 
x„rs
->
	`¶aveSèπ
(
d©a
);

285 
I2C_STAT_SLVCODE_RX
:

287 
d©a
 = 
	`Chù_I2CS_RódByã
(
pI2C
);

288 
d⁄e
 = 
x„rs
->
	`¶aveRecv
(
d©a
);

291 
I2C_STAT_SLVCODE_TX
:

293 
d⁄e
 = 
x„rs
->
	`¶aveSíd
(&
d©a
);

294 
	`Chù_I2CS_WrôeByã
(
pI2C
, 
d©a
);

299 i‡(
d⁄e
 == 0) {

300 
	`Chù_I2CS_SœveC⁄töue
(
pI2C
);

303 
	`Chù_I2CS_SœveNACK
(
pI2C
);

306  
d⁄e
;

307 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/i2c/i2c_8xx.h

32 #i‚de‡
__I2C_COMMON_8XX_H_


33 
	#__I2C_COMMON_8XX_H_


	)

35 #ifde‡
__˝lu•lus


48 
__IO
 
uöt32_t
 
CFG
;

49 
__IO
 
uöt32_t
 
STAT
;

50 
__IO
 
uöt32_t
 
INTENSET
;

51 
__O
 
uöt32_t
 
INTENCLR
;

52 
__IO
 
uöt32_t
 
TIMEOUT
;

53 
__IO
 
uöt32_t
 
CLKDIV
;

54 
__I
 
uöt32_t
 
INTSTAT
;

55 
__I
 
uöt32_t
 
RESERVED0
;

56 
__IO
 
uöt32_t
 
MSTCTL
;

57 
__IO
 
uöt32_t
 
MSTTIME
;

58 
__IO
 
uöt32_t
 
MSTDAT
;

59 
__I
 
uöt32_t
 
RESERVED1
[5];

60 
__IO
 
uöt32_t
 
SLVCTL
;

61 
__IO
 
uöt32_t
 
SLVDAT
;

62 
__IO
 
uöt32_t
 
SLVADR
[4];

63 
__IO
 
uöt32_t
 
SLVQUAL0
;

64 
__I
 
uöt32_t
 
RESERVED2
[9];

65 
__I
 
uöt32_t
 
MONRXDAT
;

66 } 
	tLPC_I2C_T
;

69 
	#I2C_CFG_RESERVED
 (~0x1f)

	)

70 
	#I2C_STAT_RESERVED
 ((1<<5)|(1<<7)|(0xf<<20)|(0x3fu<<26))

	)

71 
	#I2C_INTENSET_RESERVED
 ((7<<1)|(1<<5)|(1<<7)|(3<<9)|(7<<12)|(1<<18)|(0xf<<20)|(0x3fu<<26))

	)

72 
	#I2C_INTENCLR_RESERVED
 ((7<<1)|(1<<5)|(1<<7)|(3<<9)|(7<<12)|(1<<18)|(0xf<<20)|(0x3fu<<26))

	)

73 
	#I2C_TIMEOUT_RESERVED
 0xffff0000

	)

74 
	#I2C_CLKDIV_RESERVED
 0xffff0000

	)

75 
	#I2C_INTSTAT_RESERVED
 ((7<<1)|(1<<5)|(1<<7)|(3<<9)|(7<<12)|(1<<18)|(0xf<<20)|(0x3fu<<26))

	)

76 
	#I2C_MSTCTL_RESERVED
 (~7)

	)

77 
	#I2C_MSTTIME_RESERVED
 (~0x7f)

	)

78 
	#I2C_MSTDAT_RESERVED
 (~0xff)

	)

79 
	#I2C_SLVCTL_RESERVED
 (~3)

	)

80 
	#I2C_SLVDAT_RESERVED
 (~0xff)

	)

81 
	#I2C_SLVADR_RESERVED
 (~0xff)

	)

82 
	#I2C_SLVQUAL0_RESERVED
 (~0xff)

	)

87 
	#I2C_CFG_MSTEN
 (1 << 0Ë

	)

88 
	#I2C_CFG_SLVEN
 (1 << 1Ë

	)

89 
	#I2C_CFG_MONEN
 (1 << 2Ë

	)

90 
	#I2C_CFG_TIMEOUTEN
 (1 << 3Ë

	)

91 
	#I2C_CFG_MONCLKSTR
 (1 << 4Ë

	)

92 
	#I2C_CFG_MASK
 ((
uöt32_t
Ë0x1FË

	)

97 
	#I2C_STAT_MSTPENDING
 (1 << 0Ë

	)

98 
	#I2C_STAT_MSTSTATE
 (0x7 << 1Ë

	)

99 
	#I2C_STAT_MSTRARBLOSS
 (1 << 4Ë

	)

100 
	#I2C_STAT_MSTSTSTPERR
 (1 << 6Ë

	)

101 
	#I2C_STAT_SLVPENDING
 (1 << 8Ë

	)

102 
	#I2C_STAT_SLVSTATE
 (0x3 << 9Ë

	)

103 
	#I2C_STAT_SLVNOTSTR
 (1 << 11Ë

	)

104 
	#I2C_STAT_SLVIDX
 (0x3 << 12Ë

	)

105 
	#I2C_STAT_SLVSEL
 (1 << 14Ë

	)

106 
	#I2C_STAT_SLVDESEL
 (1 << 15Ë

	)

107 
	#I2C_STAT_MONRDY
 (1 << 16Ë

	)

108 
	#I2C_STAT_MONOV
 (1 << 17Ë

	)

109 
	#I2C_STAT_MONACTIVE
 (1 << 18Ë

	)

110 
	#I2C_STAT_MONIDLE
 (1 << 19Ë

	)

111 
	#I2C_STAT_EVENTTIMEOUT
 (1 << 24Ë

	)

112 
	#I2C_STAT_SCLTIMEOUT
 (1 << 25Ë

	)

114 
	#I2C_STAT_MSTCODE_IDLE
 (0Ë

	)

115 
	#I2C_STAT_MSTCODE_RXREADY
 (1Ë

	)

116 
	#I2C_STAT_MSTCODE_TXREADY
 (2Ë

	)

117 
	#I2C_STAT_MSTCODE_NACKADR
 (3Ë

	)

118 
	#I2C_STAT_MSTCODE_NACKDAT
 (4Ë

	)

120 
	#I2C_STAT_SLVCODE_ADDR
 (0Ë

	)

121 
	#I2C_STAT_SLVCODE_RX
 (1Ë

	)

122 
	#I2C_STAT_SLVCODE_TX
 (2Ë

	)

127 
	#I2C_INTENSET_MSTPENDING
 (1 << 0Ë

	)

128 
	#I2C_INTENSET_MSTRARBLOSS
 (1 << 4Ë

	)

129 
	#I2C_INTENSET_MSTSTSTPERR
 (1 << 6Ë

	)

130 
	#I2C_INTENSET_SLVPENDING
 (1 << 8Ë

	)

131 
	#I2C_INTENSET_SLVNOTSTR
 (1 << 11Ë

	)

132 
	#I2C_INTENSET_SLVDESEL
 (1 << 15Ë

	)

133 
	#I2C_INTENSET_MONRDY
 (1 << 16Ë

	)

134 
	#I2C_INTENSET_MONOV
 (1 << 17Ë

	)

135 
	#I2C_INTENSET_MONIDLE
 (1 << 19Ë

	)

136 
	#I2C_INTENSET_EVENTTIMEOUT
 (1 << 24Ë

	)

137 
	#I2C_INTENSET_SCLTIMEOUT
 (1 << 25Ë

	)

142 
	#I2C_INTENCLR_MSTPENDING
 (1 << 0Ë

	)

143 
	#I2C_INTENCLR_MSTRARBLOSS
 (1 << 4Ë

	)

144 
	#I2C_INTENCLR_MSTSTSTPERR
 (1 << 6Ë

	)

145 
	#I2C_INTENCLR_SLVPENDING
 (1 << 8Ë

	)

146 
	#I2C_INTENCLR_SLVNOTSTR
 (1 << 11Ë

	)

147 
	#I2C_INTENCLR_SLVDESEL
 (1 << 15Ë

	)

148 
	#I2C_INTENCLR_MONRDY
 (1 << 16Ë

	)

149 
	#I2C_INTENCLR_MONOV
 (1 << 17Ë

	)

150 
	#I2C_INTENCLR_MONIDLE
 (1 << 19Ë

	)

151 
	#I2C_INTENCLR_EVENTTIMEOUT
 (1 << 24Ë

	)

152 
	#I2C_INTENCLR_SCLTIMEOUT
 (1 << 25Ë

	)

157 
	#I2C_TIMEOUT_VAL
(
n
Ë(((
uöt32_t
Ë(“Ë- 1Ë& 0xFFF0Ë| 0x000FË

	)

162 
	#I2C_INTSTAT_MSTPENDING
 (1 << 0Ë

	)

163 
	#I2C_INTSTAT_MSTRARBLOSS
 (1 << 4Ë

	)

164 
	#I2C_INTSTAT_MSTSTSTPERR
 (1 << 6Ë

	)

165 
	#I2C_INTSTAT_SLVPENDING
 (1 << 8Ë

	)

166 
	#I2C_INTSTAT_SLVNOTSTR
 (1 << 11Ë

	)

167 
	#I2C_INTSTAT_SLVDESEL
 (1 << 15Ë

	)

168 
	#I2C_INTSTAT_MONRDY
 (1 << 16Ë

	)

169 
	#I2C_INTSTAT_MONOV
 (1 << 17Ë

	)

170 
	#I2C_INTSTAT_MONIDLE
 (1 << 19Ë

	)

171 
	#I2C_INTSTAT_EVENTTIMEOUT
 (1 << 24Ë

	)

172 
	#I2C_INTSTAT_SCLTIMEOUT
 (1 << 25Ë

	)

177 
	#I2C_MSTCTL_MSTCONTINUE
 (1 << 0Ë

	)

178 
	#I2C_MSTCTL_MSTSTART
 (1 << 1Ë

	)

179 
	#I2C_MSTCTL_MSTSTOP
 (1 << 2Ë

	)

180 
	#I2C_MSTCTL_MSTDMA
 (1 << 3Ë

	)

185 
	#I2C_MSTTIME_MSTSCLLOW
 (0x07 << 0Ë

	)

186 
	#I2C_MSTTIME_MSTSCLHIGH
 (0x07 << 4Ë

	)

191 
	#I2C_MSTDAT_DATAMASK
 ((
uöt32_t
Ë0x00FF << 0Ë

	)

196 
	#I2C_SLVCTL_SLVCONTINUE
 (1 << 0Ë

	)

197 
	#I2C_SLVCTL_SLVNACK
 (1 << 1Ë

	)

198 
	#I2C_SLVCTL_SLVDMA
 (1 << 3Ë

	)

203 
	#I2C_SLVDAT_DATAMASK
 ((
uöt32_t
Ë0x00FF << 0Ë

	)

208 
	#I2C_SLVADR_SADISABLE
 (1 << 0Ë

	)

209 
	#I2C_SLVADR_SLVADR
 (0x7F << 1Ë

	)

210 
	#I2C_SLVADR_MASK
 ((
uöt32_t
Ë0x00FFË

	)

215 
	#I2C_SLVQUAL_QUALMODE0
 (1 << 0Ë

	)

216 
	#I2C_SLVQUAL_SLVQUAL0
 (0x7F << 1Ë

	)

221 
	#I2C_MONRXDAT_DATA
 (0xFF << 0Ë

	)

222 
	#I2C_MONRXDAT_MONSTART
 (1 << 8Ë

	)

223 
	#I2C_MONRXDAT_MONRESTART
 (1 << 9Ë

	)

224 
	#I2C_MONRXDAT_MONNACK
 (1 << 10Ë

	)

234 
Chù_I2C_Inô
(
LPC_I2C_T
 *
pI2C
);

244 
Chù_I2C_DeInô
(
LPC_I2C_T
 *
pI2C
);

255 
INLINE
 
Chù_I2C_SëClockDiv
(
LPC_I2C_T
 *
pI2C
, 
uöt32_t
 
˛kdiv
)

257 i‡((
˛kdiv
 >= 1) && (clkdiv <= 65536)) {

258 
pI2C
->
CLKDIV
 = 
˛kdiv
 - 1;

261 
pI2C
->
CLKDIV
 = 0;

272 
INLINE
 
uöt32_t
 
Chù_I2C_GëClockDiv
(
LPC_I2C_T
 *
pI2C
)

274  (
pI2C
->
CLKDIV
 & 0xFFFF) + 1;

283 
INLINE
 
Chù_I2C_E«bÀI¡
(
LPC_I2C_T
 *
pI2C
, 
uöt32_t
 
ötEn
)

285 
pI2C
->
INTENSET
 = 
ötEn
;

294 
INLINE
 
Chù_I2C_DißbÀI¡
(
LPC_I2C_T
 *
pI2C
, 
uöt32_t
 
ötCÃ
)

296 
pI2C
->
INTENCLR
 = 
ötCÃ
;

307 
INLINE
 
Chù_I2C_CÀ¨I¡
(
LPC_I2C_T
 *
pI2C
, 
uöt32_t
 
ötCÃ
)

309 
Chù_I2C_DißbÀI¡
(
pI2C
, 
ötCÃ
);

317 
INLINE
 
uöt32_t
 
Chù_I2C_GëPídögI¡
(
LPC_I2C_T
 *
pI2C
)

319  
pI2C
->
INTSTAT
 & ~
I2C_INTSTAT_RESERVED
;

350 
	#I2CM_STATUS_OK
 0x00

	)

351 
	#I2CM_STATUS_ERROR
 0x01

	)

352 
	#I2CM_STATUS_NAK_ADR
 0x02

	)

353 
	#I2CM_STATUS_BUS_ERROR
 0x03

	)

354 
	#I2CM_STATUS_NAK_DAT
 0x04

	)

355 
	#I2CM_STATUS_ARBLOST
 0x05

	)

356 
	#I2CM_STATUS_BUSY
 0xFF

	)

366 c⁄° 
uöt8_t
 *
txBuff
;

367 
uöt8_t
 *
rxBuff
;

368 
uöt16_t
 
txSz
;

370 
uöt16_t
 
rxSz
;

372 
uöt16_t
 
°©us
;

373 
uöt8_t
 
¶aveAddr
;

374 } 
	tI2CM_XFER_T
;

388 
Chù_I2CM_SëBusS≥ed
(
LPC_I2C_T
 *
pI2C
, 
uöt32_t
 
busS≥ed
);

396 
INLINE
 
Chù_I2CM_E«bÀ
(
LPC_I2C_T
 *
pI2C
)

398 
pI2C
->
CFG
 = (pI2C->CFG & 
I2C_CFG_MASK
Ë| 
I2C_CFG_MSTEN
;

407 
INLINE
 
Chù_I2CM_DißbÀ
(
LPC_I2C_T
 *
pI2C
)

409 
pI2C
->
CFG
 = (pI2C->CFG & 
I2C_CFG_MASK
Ë& ~
I2C_CFG_MSTEN
;

418 
INLINE
 
uöt32_t
 
Chù_I2CM_GëSètus
(
LPC_I2C_T
 *
pI2C
)

420  
pI2C
->
STAT
 & ~
I2C_STAT_RESERVED
;

430 
INLINE
 
Chù_I2CM_CÀ¨Sètus
(
LPC_I2C_T
 *
pI2C
, 
uöt32_t
 
˛rSètus
)

433 
pI2C
->
STAT
 = 
˛rSètus
 & (
I2C_STAT_MSTRARBLOSS
 | 
I2C_STAT_MSTSTSTPERR
);

442 
INLINE
 
boﬁ
 
Chù_I2CM_IsMa°îPídög
(
LPC_I2C_T
 *
pI2C
)

444  (
pI2C
->
STAT
 & 
I2C_STAT_MSTPENDING
) != 0;

454 
INLINE
 
uöt32_t
 
Chù_I2CM_GëMa°îSèã
(
LPC_I2C_T
 *
pI2C
)

456  (
pI2C
->
STAT
 & 
I2C_STAT_MSTSTATE
) >> 1;

467 
INLINE
 
Chù_I2CM_SídSèπ
(
LPC_I2C_T
 *
pI2C
)

469 
pI2C
->
MSTCTL
 = 
I2C_MSTCTL_MSTSTART
;

480 
INLINE
 
Chù_I2CM_SídSt›
(
LPC_I2C_T
 *
pI2C
)

482 
pI2C
->
MSTCTL
 = 
I2C_MSTCTL_MSTSTOP
;

493 
INLINE
 
Chù_I2CM_Ma°îC⁄töue
(
LPC_I2C_T
 *
pI2C
)

495 
pI2C
->
MSTCTL
 = 
I2C_MSTCTL_MSTCONTINUE
;

507 
INLINE
 
Chù_I2CM_WrôeByã
(
LPC_I2C_T
 *
pI2C
, 
uöt8_t
 
d©a
)

509 
pI2C
->
MSTDAT
 = (
uöt32_t
Ë
d©a
;

519 
INLINE
 
uöt8_t
 
Chù_I2CM_RódByã
(
LPC_I2C_T
 *
pI2C
)

521  (
uöt8_t
Ë(
pI2C
->
MSTDAT
 & 
I2C_MSTDAT_DATAMASK
);

536 
uöt32_t
 
Chù_I2CM_X„rH™dÀr
(
LPC_I2C_T
 *
pI2C
, 
I2CM_XFER_T
 *
x„r
);

576 
Chù_I2CM_X„r
(
LPC_I2C_T
 *
pI2C
, 
I2CM_XFER_T
 *
x„r
);

586 
uöt32_t
 
Chù_I2CM_X„rBlockög
(
LPC_I2C_T
 *
pI2C
, 
I2CM_XFER_T
 *
x„r
);

604 (*
I2CSœveX„rSèπ
)(
	tuöt8_t
 
	taddr
);

611 
uöt8_t
 (*
	tI2CSœveX„rSíd
)(
	tuöt8_t
 *
	td©a
);

618 
uöt8_t
 (*
	tI2CSœveX„rRecv
)(
	tuöt8_t
 
	td©a
);

624 (*
I2CSœveX„rD⁄e
)();

649 
I2CSœveX„rSèπ
 
¶aveSèπ
;

650 
I2CSœveX„rSíd
 
¶aveSíd
;

651 
I2CSœveX„rRecv
 
¶aveRecv
;

652 
I2CSœveX„rD⁄e
 
¶aveD⁄e
;

653 } 
	tI2CS_XFER_T
;

661 
STATIC
 
INLINE
 
Chù_I2CS_E«bÀ
(
LPC_I2C_T
 *
pI2C
)

663 
pI2C
->
CFG
 = (pI2C->CFG & 
I2C_CFG_MASK
Ë| 
I2C_CFG_SLVEN
;

671 
STATIC
 
INLINE
 
Chù_I2CS_DißbÀ
(
LPC_I2C_T
 *
pI2C
)

673 
pI2C
->
CFG
 = (pI2C->CFG & 
I2C_CFG_MASK
Ë& ~
I2C_CFG_SLVEN
;

682 
STATIC
 
INLINE
 
uöt32_t
 
Chù_I2CS_GëSètus
(
LPC_I2C_T
 *
pI2C
)

684  
pI2C
->
STAT
 & ~
I2C_STAT_RESERVED
;

694 
STATIC
 
INLINE
 
Chù_I2CS_CÀ¨Sètus
(
LPC_I2C_T
 *
pI2C
, 
uöt32_t
 
˛rSètus
)

696 
pI2C
->
STAT
 = 
˛rSètus
 & 
I2C_STAT_SLVDESEL
;

705 
STATIC
 
INLINE
 
boﬁ
 
Chù_I2CS_IsSœvePídög
(
LPC_I2C_T
 *
pI2C
)

707  (
pI2C
->
STAT
 & 
I2C_STAT_SLVPENDING
) != 0;

716 
STATIC
 
INLINE
 
boﬁ
 
Chù_I2CS_IsSœveSñe˘ed
(
LPC_I2C_T
 *
pI2C
)

718  (
pI2C
->
STAT
 & 
I2C_STAT_SLVSEL
) != 0;

727 
STATIC
 
INLINE
 
boﬁ
 
Chù_I2CS_IsSœveDeSñe˘ed
(
LPC_I2C_T
 *
pI2C
)

729  (
pI2C
->
STAT
 & 
I2C_STAT_SLVDESEL
) != 0;

739 
STATIC
 
INLINE
 
uöt32_t
 
Chù_I2CS_GëSœveSèã
(
LPC_I2C_T
 *
pI2C
)

741  (
pI2C
->
STAT
 & 
I2C_STAT_SLVSTATE
) >> 9;

749 
STATIC
 
INLINE
 
uöt32_t
 
Chù_I2CS_GëSœveM©chIndex
(
LPC_I2C_T
 *
pI2C
)

751  (
pI2C
->
STAT
 & 
I2C_STAT_SLVIDX
) >> 12;

762 
STATIC
 
INLINE
 
Chù_I2CS_SœveC⁄töue
(
LPC_I2C_T
 *
pI2C
)

764 
pI2C
->
SLVCTL
 = 
I2C_SLVCTL_SLVCONTINUE
;

773 
STATIC
 
INLINE
 
Chù_I2CS_SœveNACK
(
LPC_I2C_T
 *
pI2C
)

775 
pI2C
->
SLVCTL
 = 
I2C_SLVCTL_SLVNACK
;

787 
STATIC
 
INLINE
 
Chù_I2CS_WrôeByã
(
LPC_I2C_T
 *
pI2C
, 
uöt8_t
 
d©a
)

789 
pI2C
->
SLVDAT
 = (
uöt32_t
Ë
d©a
;

799 
STATIC
 
INLINE
 
uöt8_t
 
Chù_I2CS_RódByã
(
LPC_I2C_T
 *
pI2C
)

801  (
uöt8_t
Ë(
pI2C
->
SLVDAT
 & 
I2C_SLVDAT_DATAMASK
);

813 
STATIC
 
INLINE
 
Chù_I2CS_SëSœveAddr
(
LPC_I2C_T
 *
pI2C
, 
uöt8_t
 
¶vNum
, uöt8_à
¶vAddr
)

815 
pI2C
->
SLVADR
[
¶vNum
] = (
uöt32_t
Ë(
¶vAddr
 << 1);

824 
STATIC
 
INLINE
 
uöt8_t
 
Chù_I2CS_GëSœveAddr
(
LPC_I2C_T
 *
pI2C
, uöt8_à
¶vNum
)

826  (
pI2C
->
SLVADR
[
¶vNum
] >> 1) & 0x7F;

835 
STATIC
 
INLINE
 
Chù_I2CS_E«bÀSœveAddr
(
LPC_I2C_T
 *
pI2C
, 
uöt8_t
 
¶vNum
)

837 
pI2C
->
SLVADR
[
¶vNum
] = (pI2C->SLVADR[¶vNum] & 
I2C_SLVADR_MASK
Ë& ~
I2C_SLVADR_SADISABLE
;

846 
STATIC
 
INLINE
 
Chù_I2CS_DißbÀSœveAddr
(
LPC_I2C_T
 *
pI2C
, 
uöt8_t
 
¶vNum
)

848 
pI2C
->
SLVADR
[
¶vNum
] = (pI2C->SLVADR[¶vNum] & 
I2C_SLVADR_MASK
Ë| 
I2C_SLVADR_SADISABLE
;

859 
STATIC
 
INLINE
 
Chù_I2CS_SëSœveQuÆ0
(
LPC_I2C_T
 *
pI2C
, 
boﬁ
 
exãnd
, 
uöt8_t
 
¶vNum
)

861 
¶vNum
 = slvNum << 1;

862 i‡(
exãnd
) {

863 
¶vNum
 |
I2C_SLVQUAL_QUALMODE0
;

866 
pI2C
->
SLVQUAL0
 = 
¶vNum
;

879 
uöt32_t
 
Chù_I2CS_X„rH™dÀr
(
LPC_I2C_T
 *
pI2C
, c⁄° 
I2CS_XFER_T
 *
x„rs
);

886 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/iap/iap.c

32 
	~"chù.h
"

51 
uöt8_t
 
	$Chù_IAP_PªSe˘‹F‹RódWrôe
(
uöt32_t
 
°rSe˘‹
, uöt32_à
ídSe˘‹
)

53 
uöt32_t
 
comm™d
[5], 
ªsu…
[5];

55 
comm™d
[0] = 
IAP_PREWRRITE_CMD
;

56 
comm™d
[1] = 
°rSe˘‹
;

57 
comm™d
[2] = 
ídSe˘‹
;

58 
	`üp_íåy
(
comm™d
, 
ªsu…
);

60  
ªsu…
[0];

61 
	}
}

64 
uöt8_t
 
	$Chù_IAP_C›yRamToFœsh
(
uöt32_t
 
d°Add
, uöt32_à*
§cAdd
, uöt32_à
byãswπ
)

66 
uöt32_t
 
comm™d
[5], 
ªsu…
[5];

68 
comm™d
[0] = 
IAP_WRISECTOR_CMD
;

69 
comm™d
[1] = 
d°Add
;

70 
comm™d
[2] = (
uöt32_t
Ë
§cAdd
;

71 
comm™d
[3] = 
byãswπ
;

72 
comm™d
[4] = 
Sy°emC‹eClock
 / 1000;

73 
	`üp_íåy
(
comm™d
, 
ªsu…
);

75  
ªsu…
[0];

76 
	}
}

79 
uöt8_t
 
	$Chù_IAP_Eø£Se˘‹
(
uöt32_t
 
°rSe˘‹
, uöt32_à
ídSe˘‹
)

81 
uöt32_t
 
comm™d
[5], 
ªsu…
[5];

83 
comm™d
[0] = 
IAP_ERSSECTOR_CMD
;

84 
comm™d
[1] = 
°rSe˘‹
;

85 
comm™d
[2] = 
ídSe˘‹
;

86 
comm™d
[3] = 
Sy°emC‹eClock
 / 1000;

87 
	`üp_íåy
(
comm™d
, 
ªsu…
);

89  
ªsu…
[0];

90 
	}
}

93 
uöt8_t
 
	$Chù_IAP_BœnkCheckSe˘‹
(
uöt32_t
 
°rSe˘‹
, uöt32_à
ídSe˘‹
)

95 
uöt32_t
 
comm™d
[5], 
ªsu…
[5];

97 
comm™d
[0] = 
IAP_BLANK_CHECK_SECTOR_CMD
;

98 
comm™d
[1] = 
°rSe˘‹
;

99 
comm™d
[2] = 
ídSe˘‹
;

100 
	`üp_íåy
(
comm™d
, 
ªsu…
);

102  
ªsu…
[0];

103 
	}
}

106 
uöt32_t
 
	$Chù_IAP_RódPID
()

108 
uöt32_t
 
comm™d
[5], 
ªsu…
[5];

110 
comm™d
[0] = 
IAP_REPID_CMD
;

111 
	`üp_íåy
(
comm™d
, 
ªsu…
);

113  
ªsu…
[1];

114 
	}
}

117 
uöt32_t
 
	$Chù_IAP_RódBoŸCode
()

119 
uöt32_t
 
comm™d
[5], 
ªsu…
[5];

121 
comm™d
[0] = 
IAP_READ_BOOT_CODE_CMD
;

122 
	`üp_íåy
(
comm™d
, 
ªsu…
);

124  
ªsu…
[1] & 0xffff;

125 
	}
}

128 
uöt8_t
 
	$Chù_IAP_Com∑ª
(
uöt32_t
 
d°Add
, uöt32_à
§cAdd
, uöt32_à
byãscmp
)

130 
uöt32_t
 
comm™d
[5], 
ªsu…
[5];

132 
comm™d
[0] = 
IAP_COMPARE_CMD
;

133 
comm™d
[1] = 
d°Add
;

134 
comm™d
[2] = 
§cAdd
;

135 
comm™d
[3] = 
byãscmp
;

136 
	`üp_íåy
(
comm™d
, 
ªsu…
);

138  
ªsu…
[0];

139 
	}
}

142 
uöt8_t
 
	$Chù_IAP_ReövokeISP
()

144 
uöt32_t
 
comm™d
[5], 
ªsu…
[5];

146 
comm™d
[0] = 
IAP_REINVOKE_ISP_CMD
;

147 
	`üp_íåy
(
comm™d
, 
ªsu…
);

149  
ªsu…
[0];

150 
	}
}

153 
uöt32_t
 
	$Chù_IAP_RódUID
(
uöt32_t
* 
uid
)

155 
uöt32_t
 
comm™d
[5], 
ªsu…
[5];

156 
uöt32_t
 
i
;

158 
comm™d
[0] = 
IAP_READ_UID_CMD
;

159 
	`üp_íåy
(
comm™d
, 
ªsu…
);

161 
i
=0; i<4; i++)

162 *(
uid
+
i
Ë
ªsu…
[i+1];

164  
ªsu…
[0];

165 
	}
}

168 
uöt8_t
 
	$Chù_IAP_Eø£Page
(
uöt32_t
 
°rPage
, uöt32_à
ídPage
)

170 
uöt32_t
 
comm™d
[5], 
ªsu…
[5];

172 
comm™d
[0] = 
IAP_ERASE_PAGE_CMD
;

173 
comm™d
[1] = 
°rPage
;

174 
comm™d
[2] = 
ídPage
;

175 
comm™d
[3] = 
Sy°emC‹eClock
 / 1000;

176 
	`üp_íåy
(
comm™d
, 
ªsu…
);

178  
ªsu…
[0];

179 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/iap/iap.h

32 #i‚de‡
__IAP_H_


33 
	#__IAP_H_


	)

35 #ifde‡
__˝lu•lus


45 
	#IAP_PREWRRITE_CMD
 50

	)

46 
	#IAP_WRISECTOR_CMD
 51

	)

47 
	#IAP_ERSSECTOR_CMD
 52

	)

48 
	#IAP_BLANK_CHECK_SECTOR_CMD
 53

	)

49 
	#IAP_REPID_CMD
 54

	)

50 
	#IAP_READ_BOOT_CODE_CMD
 55

	)

51 
	#IAP_COMPARE_CMD
 56

	)

52 
	#IAP_REINVOKE_ISP_CMD
 57

	)

53 
	#IAP_READ_UID_CMD
 58

	)

54 
	#IAP_ERASE_PAGE_CMD
 59

	)

55 
	#IAP_EEPROM_WRITE
 61

	)

56 
	#IAP_EEPROM_READ
 62

	)

59 
	#IAP_CMD_SUCCESS
 0

	)

60 
	#IAP_INVALID_COMMAND
 1

	)

61 
	#IAP_SRC_ADDR_ERROR
 2

	)

62 
	#IAP_DST_ADDR_ERROR
 3

	)

63 
	#IAP_SRC_ADDR_NOT_MAPPED
 4

	)

64 
	#IAP_DST_ADDR_NOT_MAPPED
 5

	)

65 
	#IAP_COUNT_ERROR
 6

	)

66 
	#IAP_INVALID_SECTOR
 7

	)

67 
	#IAP_SECTOR_NOT_BLANK
 8

	)

68 
	#IAP_SECTOR_NOT_PREPARED
 9

	)

69 
	#IAP_COMPARE_ERROR
 10

	)

70 
	#IAP_BUSY
 11

	)

71 
	#IAP_PARAM_ERROR
 12

	)

72 
	#IAP_ADDR_ERROR
 13

	)

73 
	#IAP_ADDR_NOT_MAPPED
 14

	)

74 
	#IAP_CMD_LOCKED
 15

	)

75 
	#IAP_INVALID_CODE
 16

	)

76 
	#IAP_INVALID_BAUD_RATE
 17

	)

77 
	#IAP_INVALID_STOP_BIT
 18

	)

78 
	#IAP_CRP_ENABLED
 19

	)

81 (*
IAP_ENTRY_T
)([], []);

92 
uöt8_t
 
Chù_IAP_PªSe˘‹F‹RódWrôe
(
uöt32_t
 
°rSe˘‹
, uöt32_à
ídSe˘‹
);

103 
uöt8_t
 
Chù_IAP_C›yRamToFœsh
(
uöt32_t
 
d°Add
, uöt32_à*
§cAdd
, uöt32_à
byãswπ
);

112 
uöt8_t
 
Chù_IAP_Eø£Se˘‹
(
uöt32_t
 
°rSe˘‹
, uöt32_à
ídSe˘‹
);

125 
uöt8_t
 
Chù_IAP_BœnkCheckSe˘‹
(
uöt32_t
 
°rSe˘‹
, uöt32_à
ídSe˘‹
);

131 
uöt32_t
 
Chù_IAP_RódPID
();

137 
uöt32_t
 
Chù_IAP_RódBoŸCode
();

148 
uöt8_t
 
Chù_IAP_Com∑ª
(
uöt32_t
 
d°Add
, uöt32_à
§cAdd
, uöt32_à
byãscmp
);

154 
uöt8_t
 
Chù_IAP_ReövokeISP
();

160 
uöt32_t
 
Chù_IAP_RódUID
(uöt32_t* 
uid
);

174 
uöt8_t
 
Chù_IAP_Eø£Page
(
uöt32_t
 
°rPage
, uöt32_à
ídPage
);

180 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/inmux/inmux_8xx.h

32 #i‚de‡
__INMUX_8XX_H_


33 
	#__INMUX_8XX_H_


	)

35 #ifde‡
__˝lu•lus


44 
__IO
 
uöt32_t
 
DMA_INMUX_INMUX
[2];

45 
__O
 
uöt32_t
 
RESERVED
[6];

46 
__IO
 
uöt32_t
 
SCT0_INMUX
[4];

47 } 
	tLPC_INMUX_T
;

53 
DMA_INMUX_0
,

54 
DMA_INMUX_1
,

55 }
	tDMA_INMUX_T
;

61 
SCT_INMUX_0
,

62 
SCT_INMUX_1
,

63 
SCT_INMUX_2
,

64 
SCT_INMUX_3
,

65 } 
	tSCT_INMUX_T
;

71 
SCT_INP_IN0
,

72 
SCT_INP_IN1
,

73 
SCT_INP_IN2
,

74 
SCT_INP_IN3
,

75 
SCT_INP_ADC_THCMP_IRQ
,

76 
SCT_INP_ACMP_O
,

77 
SCT_INP_ARM_TXEV
,

78 
SCT_INP_DEBUG_HALTED
,

79 } 
	tSCT_INP_T
;

88 
STATIC
 
INLINE
 
Chù_INMUX_SëDMAOTrig
(
LPC_INMUX_T
 *
pINMUX
, 
DMA_INMUX_T
 
imux
, 
DMA_CHID_T
 
ch
)

90 
pINMUX
->
DMA_INMUX_INMUX
[
imux
] = 
ch
;

100 
STATIC
 
INLINE
 
Chù_INMUX_SëSCTInMux
(
LPC_INMUX_T
 *
pINMUX
, 
SCT_INMUX_T
 
is˘
, 
SCT_INP_T
 
åig
)

102 
pINMUX
->
SCT0_INMUX
[
is˘
] = 
åig
;

113 
__IO
 
uöt32_t
 
DMA_ITRIG_INMUX
[
MAX_DMA_CHANNEL
];

114 } 
	tLPC_DMATRIGMUX_T
;

118 
DMATRIG_ADC_SEQA_IRQ
 = 0,

119 
DMATRIG_ADC_SEQB_IRQ
,

120 
DMATRIG_SCT0_DMA0
,

121 
DMATRIG_SCT0_DMA1
,

122 
DMATRIG_ACMP_O
,

123 
DMATRIG_PINT0
,

124 
DMATRIG_PINT1
,

125 
DMATRIG_DMA_INMUX0
,

126 
DMATRIG_DMA_INMUX1
,

127 } 
	tDMA_TRIGSRC_T
;

139 
STATIC
 
INLINE
 
Chù_DMATRIGMUX_SëI≈utTrig
(
LPC_DMATRIGMUX_T
 *
pDMATRIG
, 
DMA_CHID_T
 
ch
, 
DMA_TRIGSRC_T
 
åig
)

141 
pDMATRIG
->
DMA_ITRIG_INMUX
[
ch
] = (
uöt32_t
Ë
åig
;

152 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/mrt/mrt_8xx.h

32 #i‚de‡
__MRT_8XX_H_


33 
	#__MRT_8XX_H_


	)

35 #ifde‡
__˝lu•lus


47 
	#MRT_CHANNELS_NUM
 (4)

	)

48 
	#MRT_NO_IDLE_CHANNEL
 (0x40)

	)

54 
__IO
 
uöt32_t
 
INTVAL
;

55 
__O
 
uöt32_t
 
TIMER
;

56 
__IO
 
uöt32_t
 
CTRL
;

57 
__IO
 
uöt32_t
 
STAT
;

58 } 
	tLPC_MRT_CH_T
;

64 
LPC_MRT_CH_T
 
CHANNEL
[
MRT_CHANNELS_NUM
];

65 
uöt32_t
 
unu£d
[45];

66 
__O
 
uöt32_t
 
IDLE_CH
;

67 
__IO
 
uöt32_t
 
IRQ_FLAG
;

68 } 
	tLPC_MRT_T
;

71 
	#MRT_CTRL_RESERVED
 (~7)

	)

72 
	#MRT_STAT_RESERVED
 (~3)

	)

77 
	eMRT_MODE
 {

78 
MRT_MODE_REPEAT
 = (0 << 1),

79 
MRT_MODE_ONESHOT
 = (1 << 1)

80 } 
	tMRT_MODE_T
;

86 
	#MRT_INTVAL_IVALUE
 (0x7FFFFFFFULË

	)

87 
	#MRT_INTVAL_LOAD
 (0x80000000ULË

	)

90 
	#MRT_CTRL_INTEN_MASK
 (0x01)

	)

91 
	#MRT_CTRL_MODE_MASK
 (0x06)

	)

94 
	#MRT_STAT_INTFLAG
 (0x01)

	)

95 
	#MRT_STAT_RUNNING
 (0x02)

	)

98 
	#LPC_MRT_CH0
 ((
LPC_MRT_CH_T
 *Ë&
LPC_MRT
->
CHANNEL
[0])

	)

99 
	#LPC_MRT_CH1
 ((
LPC_MRT_CH_T
 *Ë&
LPC_MRT
->
CHANNEL
[1])

	)

100 
	#LPC_MRT_CH2
 ((
LPC_MRT_CH_T
 *Ë&
LPC_MRT
->
CHANNEL
[2])

	)

101 
	#LPC_MRT_CH3
 ((
LPC_MRT_CH_T
 *Ë&
LPC_MRT
->
CHANNEL
[3])

	)

102 
	#LPC_MRT_CH
(
ch
Ë((
LPC_MRT_CH_T
 *Ë&
LPC_MRT
->
CHANNEL
[(ch)])

	)

105 
	#MRT0_INTFLAG
 (1)

	)

106 
	#MRT1_INTFLAG
 (2)

	)

107 
	#MRT2_INTFLAG
 (4)

	)

108 
	#MRT3_INTFLAG
 (8)

	)

109 
	#MRTn_INTFLAG
(
ch
Ë(1 << (ch))

	)

115 
STATIC
 
INLINE
 
Chù_MRT_Inô
()

118 
Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_MRT
);

121 
Chù_SYSCTL_PîùhRe£t
(
RESET_MRT
);

128 
STATIC
 
INLINE
 
Chù_MRT_DeInô
()

131 
Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_MRT
);

139 
STATIC
 
INLINE
 
LPC_MRT_CH_T
 *
Chù_MRT_GëRegPå
(
uöt8_t
 
ch
)

141  
LPC_MRT_CH
(
ch
);

149 
STATIC
 
INLINE
 
uöt32_t
 
Chù_MRT_GëI¡îvÆ
(
LPC_MRT_CH_T
 *
pMRT
)

151  
pMRT
->
INTVAL
;

165 
STATIC
 
INLINE
 
Chù_MRT_SëI¡îvÆ
(
LPC_MRT_CH_T
 *
pMRT
, 
uöt32_t
 
öãrvÆ
)

167 
pMRT
->
INTVAL
 = 
öãrvÆ
;

175 
STATIC
 
INLINE
 
uöt32_t
 
Chù_MRT_GëTimî
(
LPC_MRT_CH_T
 *
pMRT
)

177  
pMRT
->
TIMER
;

185 
STATIC
 
INLINE
 
boﬁ
 
Chù_MRT_GëE«bÀd
(
LPC_MRT_CH_T
 *
pMRT
)

187  (
boﬁ
Ë((
pMRT
->
CTRL
 & 
MRT_CTRL_INTEN_MASK
) != 0);

195 
STATIC
 
INLINE
 
Chù_MRT_SëE«bÀd
(
LPC_MRT_CH_T
 *
pMRT
)

197 
pMRT
->
CTRL
 = 
MRT_CTRL_INTEN_MASK
 | (pMRT->CTRL & ~
MRT_CTRL_RESERVED
);

205 
STATIC
 
INLINE
 
Chù_MRT_SëDißbÀd
(
LPC_MRT_CH_T
 *
pMRT
)

207 
pMRT
->
CTRL
 &~(
MRT_CTRL_INTEN_MASK
 | 
MRT_CTRL_RESERVED
);

215 
STATIC
 
INLINE
 
MRT_MODE_T
 
Chù_MRT_GëMode
(
LPC_MRT_CH_T
 *
pMRT
)

217  (
MRT_MODE_T
Ë(
pMRT
->
CTRL
 & 
MRT_CTRL_MODE_MASK
);

226 
STATIC
 
INLINE
 
Chù_MRT_SëMode
(
LPC_MRT_CH_T
 *
pMRT
, 
MRT_MODE_T
 
mode
)

228 
uöt32_t
 
ªg
;

230 
ªg
 = 
pMRT
->
CTRL
 & ~(
MRT_CTRL_MODE_MASK
 | 
MRT_CTRL_RESERVED
);

231 
pMRT
->
CTRL
 = 
ªg
 | (
uöt32_t
Ë
mode
;

239 
STATIC
 
INLINE
 
boﬁ
 
Chù_MRT_IsRïótMode
(
LPC_MRT_CH_T
 *
pMRT
)

241  ((
pMRT
->
CTRL
 & 
MRT_CTRL_MODE_MASK
Ë!0Ë? 
Ál£
 : 
åue
;

249 
STATIC
 
INLINE
 
boﬁ
 
Chù_MRT_IsO√ShŸMode
(
LPC_MRT_CH_T
 *
pMRT
)

251  ((
pMRT
->
CTRL
 & 
MRT_CTRL_MODE_MASK
Ë!0Ë? 
åue
 : 
Ál£
;

259 
STATIC
 
INLINE
 
boﬁ
 
Chù_MRT_I¡Pídög
(
LPC_MRT_CH_T
 *
pMRT
)

261  (
boﬁ
Ë((
pMRT
->
STAT
 & 
MRT_STAT_INTFLAG
) != 0);

269 
STATIC
 
INLINE
 
Chù_MRT_I¡CÀ¨
(
LPC_MRT_CH_T
 *
pMRT
)

271 
pMRT
->
STAT
 = 
MRT_STAT_INTFLAG
 | (pMRT->STAT & ~
MRT_STAT_RESERVED
);

279 
STATIC
 
INLINE
 
boﬁ
 
Chù_MRT_Ru¬ög
(
LPC_MRT_CH_T
 *
pMRT
)

281  (
boﬁ
Ë((
pMRT
->
STAT
 & 
MRT_STAT_RUNNING
) != 0);

288 
STATIC
 
INLINE
 
uöt8_t
 
Chù_MRT_GëIdÀCh™√l
()

290  (
uöt8_t
Ë(
LPC_MRT
->
IDLE_CH
);

297 
STATIC
 
INLINE
 
uöt8_t
 
Chù_MRT_GëIdÀCh™√lShi·ed
()

299  (
uöt8_t
Ë(
Chù_MRT_GëIdÀCh™√l
() >> 4);

306 
STATIC
 
INLINE
 
uöt32_t
 
Chù_MRT_GëI¡Pídög
()

308  
LPC_MRT
->
IRQ_FLAG
;

316 
STATIC
 
INLINE
 
boﬁ
 
Chù_MRT_GëI¡PídögByCh™√l
(
uöt8_t
 
ch
)

318  (
boﬁ
Ë(((
LPC_MRT
->
IRQ_FLAG
 >> 
ch
) & 1) != 0);

330 
STATIC
 
INLINE
 
Chù_MRT_CÀ¨I¡Pídög
(
uöt32_t
 
mask
)

332 
LPC_MRT
->
IRQ_FLAG
 = 
mask
;

339 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/mrt/stopwatch.c

32 
	~"chù.h
"

33 
	~"°›w©ch.h
"

40 
uöt32_t
 
	gticksPîSec⁄d
;

41 
uöt32_t
 
	gticksPîMs
;

42 
uöt32_t
 
	gticksPîUs
;

57 
	$St›W©ch_Inô
()

59 
	`Chù_MRT_Inô
();

60 
	`Chù_MRT_SëMode
(
LPC_MRT_CH1
, 
MRT_MODE_REPEAT
);

61 
	`Chù_MRT_SëI¡îvÆ
(
LPC_MRT_CH1
, 0x7fffff‡| 
MRT_INTVAL_LOAD
);

62 
	`Chù_MRT_GëE«bÀd
(
LPC_MRT_CH1
);

65 
ticksPîSec⁄d
 = 
	`Chù_Clock_GëSy°emClockR©e
();

66 
ticksPîMs
 = 
ticksPîSec⁄d
 / 1000;

67 
ticksPîUs
 = 
ticksPîSec⁄d
 / 1000000;

68 
	}
}

70 
	$St›W©ch_Re£t
()

72 
	`Chù_MRT_SëI¡îvÆ
(
LPC_MRT_CH1
, 0x7fffff‡| 
MRT_INTVAL_LOAD
);

73 
	}
}

77 
uöt32_t
 
	$St›W©ch_Sèπ
()

80  0x7fffff‡- 
	`Chù_MRT_GëTimî
(
LPC_MRT_CH1
);

81 
	}
}

84 
uöt32_t
 
	$St›W©ch_TicksPîSec⁄d
()

86  
ticksPîSec⁄d
;

87 
	}
}

90 
uöt32_t
 
	$St›W©ch_TicksToMs
(
uöt32_t
 
ticks
)

92  
ticks
 / 
ticksPîMs
;

93 
	}
}

96 
uöt32_t
 
	$St›W©ch_TicksToUs
(
uöt32_t
 
ticks
)

98  
ticks
 / 
ticksPîUs
;

99 
	}
}

102 
uöt32_t
 
	$St›W©ch_MsToTicks
(
uöt32_t
 
mS
)

104  
mS
 * 
ticksPîMs
;

105 
	}
}

108 
uöt32_t
 
	$St›W©ch_UsToTicks
(
uöt32_t
 
uS
)

110  
uS
 * 
ticksPîUs
;

111 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/mrt/stopwatch.h

32 #i‚de‡
__STOPWATCH_H_


33 
	#__STOPWATCH_H_


	)

35 
	~"cmsis.h
"

46 
St›W©ch_Inô
();

52 
St›W©ch_Re£t
();

58 
uöt32_t
 
St›W©ch_Sèπ
();

65 
STATIC
 
INLINE
 
uöt32_t
 
	$St›W©ch_Eœp£d
(
uöt32_t
 
°¨tTime
)

67  
	`St›W©ch_Sèπ
(Ë- 
°¨tTime
;

68 
	}
}

74 
uöt32_t
 
St›W©ch_TicksPîSec⁄d
();

81 
uöt32_t
 
St›W©ch_TicksToMs
(uöt32_à
ticks
);

88 
uöt32_t
 
St›W©ch_TicksToUs
(uöt32_à
ticks
);

95 
uöt32_t
 
St›W©ch_MsToTicks
(uöt32_à
mS
);

102 
uöt32_t
 
St›W©ch_UsToTicks
(uöt32_à
uS
);

109 
STATIC
 
INLINE
 
	$St›W©ch_DñayTicks
(
uöt32_t
 
ticks
)

111 
uöt32_t
 
°¨tTime
 = 
	`St›W©ch_Sèπ
();

112 
	`St›W©ch_Eœp£d
(
°¨tTime
Ë< 
ticks
) {}

113 
	}
}

120 
STATIC
 
INLINE
 
	$St›W©ch_DñayMs
(
uöt32_t
 
mS
)

122 
uöt32_t
 
ticks
 = 
	`St›W©ch_MsToTicks
(
mS
);

123 
uöt32_t
 
°¨tTime
 = 
	`St›W©ch_Sèπ
();

124 
	`St›W©ch_Eœp£d
(
°¨tTime
Ë< 
ticks
) {}

125 
	}
}

132 
STATIC
 
INLINE
 
	$St›W©ch_DñayUs
(
uöt32_t
 
uS
)

134 
uöt32_t
 
ticks
 = 
	`St›W©ch_UsToTicks
(
uS
);

135 
uöt32_t
 
°¨tTime
 = 
	`St›W©ch_Sèπ
();

136 
	`St›W©ch_Eœp£d
(
°¨tTime
Ë< 
ticks
) {}

137 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/peri_driver.h

1 #i‚de‡
_PERI_DRIVER_H_


2 
	#_PERI_DRIVER_H_


	)

4 
	~"chù.h
"

5 
	~"rom/rom≠i_8xx.h
"

6 
	~"acmp/acmp_8xx.h
"

8 #i‡
deföed
(
CHIP_LPC82X
)

9 
	~"adc/adc_8xx.h
"

12 
	~"¸c/¸c_8xx.h
"

14 #i‡
deföed
(
CHIP_LPC82X
)

15 
	~"dma/dma_8xx.h
"

18 
	~"gpio/gpio_8xx.h
"

19 
	~"i2c/i2c_8xx.h
"

20 
	~"üp/üp.h
"

21 
	~"¸c/¸c_8xx.h
"

23 #i‡
deföed
(
CHIP_LPC82X
)

24 
	~"ömux/ömux_8xx.h
"

27 
	~"mπ/mπ_8xx.h
"

28 
	~"mπ/°›w©ch.h
"

29 
	~"pööt/pööt_8xx.h
"

30 
	~"pmu/pmu_8xx.h
"

32 
	~"s˘imî/s˘_8xx.h
"

33 
	~"s˘imî/s˘_pwm_8xx.h
"

34 
	~"•i/•i_8xx.h
"

35 
	~"u¨t/u¨t_8xx.h
"

36 
	~"wkt/wkt_8xx.h
"

37 
	~"wwdt/wwdt_8xx.h
"

38 
	~"üp/üp.h
"

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/pinint/pinint_8xx.c

32 
	~"chù.h
"

51 
	$Chù_PININT_SëP©ã∫M©chSrc
(
LPC_PININT_T
 *
pPININT
, 
uöt8_t
 
ch™
, 
Chù_PININT_BITSLICE_T
 
¶i˚
)

53 
uöt32_t
 
pm§c_ªg
;

56 
pm§c_ªg
 = 
pPININT
->
PMSRC
 & ~((
PININT_SRC_BITSOURCE_MASK
 << (
PININT_SRC_BITSOURCE_START
 + (
¶i˚
 * 3)))

57 | 
PININT_PMSRC_RESERVED
);

58 
pPININT
->
PMSRC
 = 
pm§c_ªg
 | (
ch™
 << (
PININT_SRC_BITSOURCE_START
 + (
¶i˚
 * 3)));

59 
	}
}

62 
	$Chù_PININT_SëP©ã∫M©chC⁄fig
(
LPC_PININT_T
 *
pPININT
, 
Chù_PININT_BITSLICE_T
 
¶i˚
,

63 
Chù_PININT_BITSLICE_CFG_T
 
¶i˚_cfg
, 
boﬁ
 
íd_poöt
)

65 
uöt32_t
 
pmcfg_ªg
;

68 
pmcfg_ªg
 = 
pPININT
->
PMCFG
 & ~((
PININT_SRC_BITCFG_MASK
 << (
PININT_SRC_BITCFG_START
 + (
¶i˚
 * 3)))

69 | 
PININT_PMCFG_RESERVED
);

70 
pPININT
->
PMCFG
 = 
pmcfg_ªg
 | (
¶i˚_cfg
 << (
PININT_SRC_BITCFG_START
 + (
¶i˚
 * 3)));

73 i‡(
íd_poöt
 =
åue
)

76 i‡(
¶i˚
 !
PININTBITSLICE7
)

78 
pPININT
->
PMCFG
 = (0x1 << 
¶i˚
Ë| (pPININT->PMCFG & ~
PININT_PMCFG_RESERVED
);

81 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/pinint/pinint_8xx.h

32 #i‚de‡
__PININT_8XX_H_


33 
	#__PININT_8XX_H_


	)

35 #ifde‡
__˝lu•lus


48 
__IO
 
uöt32_t
 
ISEL
;

49 
__IO
 
uöt32_t
 
IENR
;

50 
__IO
 
uöt32_t
 
SIENR
;

51 
__IO
 
uöt32_t
 
CIENR
;

52 
__IO
 
uöt32_t
 
IENF
;

53 
__IO
 
uöt32_t
 
SIENF
;

54 
__IO
 
uöt32_t
 
CIENF
;

55 
__IO
 
uöt32_t
 
RISE
;

56 
__IO
 
uöt32_t
 
FALL
;

57 
__IO
 
uöt32_t
 
IST
;

58 
__IO
 
uöt32_t
 
PMCTRL
;

59 
__IO
 
uöt32_t
 
PMSRC
;

60 
__IO
 
uöt32_t
 
PMCFG
;

61 } 
	tLPC_PININT_T
;

64 
	#PININT_ISEL_RESERVED
 (~0xff)

	)

65 
	#PININT_IENR_RESERVED
 (~0xff)

	)

66 
	#PININT_SIENR_RESERVED
 (~0xff)

	)

67 
	#PININT_CIENR_RESERVED
 (~0xff)

	)

68 
	#PININT_IENF_RESERVED
 (~0xff)

	)

69 
	#PININT_SIENF_RESERVED
 (~0xff)

	)

70 
	#PININT_CIENF_RESERVED
 (~0xff)

	)

71 
	#PININT_RISE_RESERVED
 (~0xff)

	)

72 
	#PININT_FALL_RESERVED
 (~0xff)

	)

73 
	#PININT_IST_RESERVED
 (~0xff)

	)

74 
	#PININT_PMCTRL_RESERVED
 (~0xff000003)

	)

75 
	#PININT_PMSRC_RESERVED
 0xff

	)

76 
	#PININT_PMCFG_RESERVED
 (1<<7)

	)

83 
	#PININT_PMCTRL_PMATCH_SEL
 (1 << 0)

	)

84 
	#PININT_PMCTRL_RXEV_ENA
 (1 << 1)

	)

87 
	#PININT_SRC_BITSOURCE_START
 8

	)

88 
	#PININT_SRC_BITSOURCE_MASK
 7

	)

91 
	#PININT_SRC_BITCFG_START
 8

	)

92 
	#PININT_SRC_BITCFG_MASK
 7

	)

97 
	#PININTCH0
 (1 << 0)

	)

98 
	#PININTCH1
 (1 << 1)

	)

99 
	#PININTCH2
 (1 << 2)

	)

100 
	#PININTCH3
 (1 << 3)

	)

101 
	#PININTCH4
 (1 << 4)

	)

102 
	#PININTCH5
 (1 << 5)

	)

103 
	#PININTCH6
 (1 << 6)

	)

104 
	#PININTCH7
 (1 << 7)

	)

105 
	#PININTCH
(
ch
Ë(1 << (ch))

	)

110 
	eChù_PININT_BITSLICE
 {

111 
PININTBITSLICE0
 = 0,

112 
PININTBITSLICE1
 = 1,

113 
PININTBITSLICE2
 = 2,

114 
PININTBITSLICE3
 = 3,

115 
PININTBITSLICE4
 = 4,

116 
PININTBITSLICE5
 = 5,

117 
PININTBITSLICE6
 = 6,

118 
PININTBITSLICE7
 = 7

119 } 
	tChù_PININT_BITSLICE_T
;

124 
	eChù_PININT_BITSLICE_CFG
 {

125 
PININT_PATTERNCONST1
 = 0x0,

126 
PININT_PATTERNRISING
 = 0x1,

127 
PININT_PATTERNFALLING
 = 0x2,

128 
PININT_PATTERNRISINGRFALLING
 = 0x3,

129 
PININT_PATTERNHIGH
 = 0x4,

130 
PININT_PATTERNLOW
 = 0x5,

131 
PININT_PATTERCONST0
 = 0x6,

132 
PININT_PATTEREVENT
 = 0x7

133 } 
	tChù_PININT_BITSLICE_CFG_T
;

141 
STATIC
 
INLINE
 
Chù_PININT_Inô
(
LPC_PININT_T
 *
pPININT
) {}

148 
STATIC
 
INLINE
 
Chù_PININT_DeInô
(
LPC_PININT_T
 *
pPININT
) {}

156 
STATIC
 
INLINE
 
Chù_PININT_SëPöModeEdge
(
LPC_PININT_T
 *
pPININT
, 
uöt32_t
 
pös
)

158 
pPININT
->
ISEL
 &~(
pös
 | 
PININT_ISEL_RESERVED
);

167 
STATIC
 
INLINE
 
Chù_PININT_SëPöModeLevñ
(
LPC_PININT_T
 *
pPININT
, 
uöt32_t
 
pös
)

169 
pPININT
->
ISEL
 = 
pös
 | (pPININT->ISEL & ~
PININT_ISEL_RESERVED
);

170 
pPININT
->
SIENR
 = 
pös
;

181 
STATIC
 
INLINE
 
uöt32_t
 
Chù_PININT_GëHighE«bÀd
(
LPC_PININT_T
 *
pPININT
)

183  
pPININT
->
IENR
 & ~
PININT_IENR_RESERVED
;

192 
STATIC
 
INLINE
 
Chù_PININT_E«bÀI¡High
(
LPC_PININT_T
 *
pPININT
, 
uöt32_t
 
pös
)

194 
pPININT
->
SIENR
 = 
pös
;

203 
STATIC
 
INLINE
 
Chù_PININT_Sñe˘Levñ
(
LPC_PININT_T
 *
pPININT
, 
uöt32_t
 
pös
, 
boﬁ
 
isHigh
)

205 i‡(
isHigh
)

206 
pPININT
->
SIENF
 = 
pös
;

208 
pPININT
->
CIENF
 = 
pös
;

218 
STATIC
 
INLINE
 
Chù_PININT_DißbÀI¡High
(
LPC_PININT_T
 *
pPININT
, 
uöt32_t
 
pös
)

220 
pPININT
->
CIENR
 = 
pös
;

231 
STATIC
 
INLINE
 
uöt32_t
 
Chù_PININT_GëLowE«bÀd
(
LPC_PININT_T
 *
pPININT
)

233  
pPININT
->
IENF
 & ~
PININT_IENF_RESERVED
;

242 
STATIC
 
INLINE
 
Chù_PININT_E«bÀI¡Low
(
LPC_PININT_T
 *
pPININT
, 
uöt32_t
 
pös
)

244 
pPININT
->
SIENF
 = 
pös
;

253 
STATIC
 
INLINE
 
Chù_PININT_DißbÀI¡Low
(
LPC_PININT_T
 *
pPININT
, 
uöt32_t
 
pös
)

255 
pPININT
->
CIENF
 = 
pös
;

263 
STATIC
 
INLINE
 
uöt32_t
 
Chù_PININT_GëRi£Sèãs
(
LPC_PININT_T
 *
pPININT
)

265  
pPININT
->
RISE
 & ~
PININT_RISE_RESERVED
;

274 
STATIC
 
INLINE
 
Chù_PININT_CÀ¨Ri£Sèãs
(
LPC_PININT_T
 *
pPININT
, 
uöt32_t
 
pös
)

276 
pPININT
->
RISE
 = 
pös
;

284 
STATIC
 
INLINE
 
uöt32_t
 
Chù_PININT_GëFÆlSèãs
(
LPC_PININT_T
 *
pPININT
)

286  
pPININT
->
FALL
 & ~
PININT_FALL_RESERVED
;

295 
STATIC
 
INLINE
 
Chù_PININT_CÀ¨FÆlSèãs
(
LPC_PININT_T
 *
pPININT
, 
uöt32_t
 
pös
)

297 
pPININT
->
FALL
 = 
pös
;

305 
STATIC
 
INLINE
 
uöt32_t
 
Chù_PININT_GëI¡Sètus
(
LPC_PININT_T
 *
pPININT
)

307  
pPININT
->
IST
& ~
PININT_IST_RESERVED
;

316 
STATIC
 
INLINE
 
Chù_PININT_CÀ¨I¡Sètus
(
LPC_PININT_T
 *
pPININT
, 
uöt32_t
 
pös
)

318 
pPININT
->
IST
 = 
pös
;

328 
Chù_PININT_SëP©ã∫M©chSrc
(
LPC_PININT_T
 *
pPININT
, 
uöt8_t
 
ch™
, 
Chù_PININT_BITSLICE_T
 
¶i˚
);

338 
Chù_PININT_SëP©ã∫M©chC⁄fig
(
LPC_PININT_T
 *
pPININT
, 
Chù_PININT_BITSLICE_T
 
¶i˚
,

339 
Chù_PININT_BITSLICE_CFG_T
 
¶i˚_cfg
, 
boﬁ
 
íd_poöt
);

346 
STATIC
 
INLINE
 
Chù_PININT_E«bÀP©ã∫M©ch
(
LPC_PININT_T
 *
pPININT
)

348 
pPININT
->
PMCTRL
 = 
PININT_PMCTRL_PMATCH_SEL
 | (pPININT->PMCTRL & ~
PININT_PMCTRL_RESERVED
);

356 
STATIC
 
INLINE
 
Chù_PININT_DißbÀP©ã∫M©ch
(
LPC_PININT_T
 *
pPININT
)

358 
pPININT
->
PMCTRL
 &~(
PININT_PMCTRL_PMATCH_SEL
 | 
PININT_PMCTRL_RESERVED
);

366 
STATIC
 
INLINE
 
Chù_PININT_E«bÀP©ã∫M©chRxEv
(
LPC_PININT_T
 *
pPININT
)

368 
pPININT
->
PMCTRL
 = 
PININT_PMCTRL_RXEV_ENA
 | (pPININT->PMCTRL & ~
PININT_PMCTRL_RESERVED
);

376 
STATIC
 
INLINE
 
Chù_PININT_DißbÀP©ã∫M©chRxEv
(
LPC_PININT_T
 *
pPININT
)

378 
pPININT
->
PMCTRL
 &~(
PININT_PMCTRL_RXEV_ENA
 | 
PININT_PMCTRL_RESERVED
);

385 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/pmu/pmu_8xx.c

32 
	~"chù.h
"

39 
	#SCB_SCR_RESERVED
 (~(
SCB_SCR_SLEEPONEXIT_Msk
|
SCB_SCR_SLEEPDEEP_Msk
|
SCB_SCR_SEVONPEND_Msk
))

	)

54 
	$Chù_PMU_SÀïSèã
(
LPC_PMU_T
 *
pPMU
)

56 
SCB
->
SCR
 = ~(1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë& (SCB->SCR & ~
SCB_SCR_RESERVED
);

57 
pPMU
->
PCON
 = 
PMU_PCON_PM_SLEEP
;

60 
	`__WFI
();

61 
	}
}

64 
	$Chù_PMU_DìpSÀïSèã
(
LPC_PMU_T
 *
pPMU
)

66 
SCB
->
SCR
 = (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë| (SCB->SCR & ~
SCB_SCR_RESERVED
);

67 
pPMU
->
PCON
 = 
PMU_PCON_PM_DEEPSLEEP
;

70 
	`__WFI
();

71 
	}
}

74 
	$Chù_PMU_PowîDownSèã
(
LPC_PMU_T
 *
pPMU
)

76 
SCB
->
SCR
 = (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë| (SCB->SCR & ~
SCB_SCR_RESERVED
);

77 
pPMU
->
PCON
 = 
PMU_PCON_PM_POWERDOWN
;

80 
	`__WFI
();

81 
	}
}

84 
	$Chù_PMU_DìpPowîDownSèã
(
LPC_PMU_T
 *
pPMU
)

86 
SCB
->
SCR
 = (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë| (SCB->SCR & ~
SCB_SCR_RESERVED
);

87 
pPMU
->
PCON
 = 
PMU_PCON_PM_DEEPPOWERDOWN
;

90 
	`__WFI
();

91 
	}
}

94 
	$Chù_PMU_SÀï
(
LPC_PMU_T
 *
pPMU
, 
CHIP_PMU_MCUPOWER_T
 
SÀïMode
)

96 i‡(
SÀïMode
 =
PMU_MCU_DEEP_SLEEP
) {

97 
	`Chù_PMU_DìpSÀïSèã
(
pPMU
);

99 i‡(
SÀïMode
 =
PMU_MCU_POWER_DOWN
) {

100 
	`Chù_PMU_PowîDownSèã
(
pPMU
);

102 i‡(
SÀïMode
 =
PMU_MCU_DEEP_PWRDOWN
) {

103 
	`Chù_PMU_DìpPowîDownSèã
(
pPMU
);

107 
	`Chù_PMU_SÀïSèã
(
pPMU
);

109 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/pmu/pmu_8xx.h

32 #i‚de‡
__PMU_8XX_H_


33 
	#__PMU_8XX_H_


	)

35 #ifde‡
__˝lu•lus


48 
__IO
 
uöt32_t
 
PCON
;

49 
__IO
 
uöt32_t
 
GPREG
[4];

50 
__IO
 
uöt32_t
 
DPDCTRL
;

51 } 
	tLPC_PMU_T
;

54 
	#PMU_PCON_RESERVED
 ((0xf<<4)|(0x6<<8)|0xfffff000)

	)

55 
	#PMU_DPDCTRL_RESERVED
 (~0xf)

	)

60 
	eCHIP_PMU_MCUPOWER
 {

61 
PMU_MCU_SLEEP
 = 0,

62 
PMU_MCU_DEEP_SLEEP
,

63 
PMU_MCU_POWER_DOWN
,

64 
PMU_MCU_DEEP_PWRDOWN


65 } 
	tCHIP_PMU_MCUPOWER_T
;

70 
	#PMU_PCON_PM_SLEEP
 (0x0Ë

	)

71 
	#PMU_PCON_PM_DEEPSLEEP
 (0x1Ë

	)

72 
	#PMU_PCON_PM_POWERDOWN
 (0x2Ë

	)

73 
	#PMU_PCON_PM_DEEPPOWERDOWN
 (0x3Ë

	)

74 
	#PMU_PCON_NODPD
 (1 << 3Ë

	)

75 
	#PMU_PCON_SLEEPFLAG
 (1 << 8Ë

	)

76 
	#PMU_PCON_DPDFLAG
 (1 << 11Ë

	)

81 
	#PMU_DPDCTRL_WAKEUPPHYS
 (1 << 0Ë

	)

82 
	#PMU_DPDCTRL_WAKEPAD
 (1 << 1Ë

	)

83 
	#PMU_DPDCTRL_LPOSCEN
 (1 << 2Ë

	)

84 
	#PMU_DPDCTRL_LPOSCDPDEN
 (1 << 3Ë

	)

93 
STATIC
 
INLINE
 
Chù_PMU_WrôeGPREG
(
LPC_PMU_T
 *
pPMU
, 
uöt8_t
 
ªgIndex
, 
uöt32_t
 
vÆue
)

95 
pPMU
->
GPREG
[
ªgIndex
] = 
vÆue
;

104 
STATIC
 
INLINE
 
uöt32_t
 
Chù_PMU_RódGPREG
(
LPC_PMU_T
 *
pPMU
, 
uöt8_t
 
ªgIndex
)

106  
pPMU
->
GPREG
[
ªgIndex
];

116 
Chù_PMU_SÀïSèã
(
LPC_PMU_T
 *
pPMU
);

127 
Chù_PMU_DìpSÀïSèã
(
LPC_PMU_T
 *
pPMU
);

139 
Chù_PMU_PowîDownSèã
(
LPC_PMU_T
 *
pPMU
);

152 
Chù_PMU_DìpPowîDownSèã
(
LPC_PMU_T
 *
pPMU
);

160 
Chù_PMU_SÀï
(
LPC_PMU_T
 *
pPMU
, 
CHIP_PMU_MCUPOWER_T
 
SÀïMode
);

169 
STATIC
 
INLINE
 
Chù_PMU_DißbÀDìpPowîDown
(
LPC_PMU_T
 *
pPMU
)

171 
pPMU
->
PCON
 = 
PMU_PCON_NODPD
 | (pPMU->PCON & ~
PMU_PCON_RESERVED
);

181 
STATIC
 
INLINE
 
uöt32_t
 
Chù_PMU_GëSÀïFœgs
(
LPC_PMU_T
 *
pPMU
)

183  (
pPMU
->
PCON
 & (
PMU_PCON_SLEEPFLAG
 | 
PMU_PCON_DPDFLAG
));

194 
STATIC
 
INLINE
 
Chù_PMU_CÀ¨SÀïFœgs
(
LPC_PMU_T
 *
pPMU
, 
uöt32_t
 
Êags
)

196 
pPMU
->
PCON
 |(
Êags
 & (~
PMU_PCON_RESERVED
));

209 
STATIC
 
INLINE
 
Chù_PMU_SëPowîDownC⁄åﬁ
(
LPC_PMU_T
 *
pPMU
, 
uöt32_t
 
Êags
)

211 
pPMU
->
DPDCTRL
 = 
Êags
 | (pPMU->DPDCTRL & ~
PMU_DPDCTRL_RESERVED
);

224 
STATIC
 
INLINE
 
Chù_PMU_CÀ¨PowîDownC⁄åﬁ
(
LPC_PMU_T
 *
pPMU
, 
uöt32_t
 
Êags
)

226 
pPMU
->
DPDCTRL
 &~(
Êags
 | 
PMU_DPDCTRL_RESERVED
);

233 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/rom/rom_i2c_8xx.h

32 #i‚de‡
__ROM_I2C_8XX_H_


33 
	#__ROM_I2C_8XX_H_


	)

35 #ifde‡
__˝lu•lus


47 *
	tI2C_HANDLE_T
;

52 (*
I2C_CALLBK_T
)(
	tuöt32_t
 
	tîr_code
, uöt32_à
	tn
);

57 
	sI2C_PARAM
 {

58 
uöt32_t
 
num_byãs_£nd
;

59 
uöt32_t
 
num_byãs_ªc
;

60 
uöt8_t
 *
buf„r_±r_£nd
;

61 
uöt8_t
 *
buf„r_±r_ªc
;

62 
I2C_CALLBK_T
 
func_±
;

63 
uöt8_t
 
°›_Êag
;

64 
uöt8_t
 
dummy
[3];

65 } 
	tI2C_PARAM_T
;

70 
	sI2C_RESULT
 {

71 
uöt32_t
 
n_byãs_£¡
;

72 
uöt32_t
 
n_byãs_ªcd
;

73 } 
	tI2C_RESULT_T
;

78 
	eCHIP_I2C_MODE
 {

79 
IDLE
,

80 
MASTER_SEND
,

81 
MASTER_RECEIVE
,

82 
SLAVE_SEND
,

83 
SLAVE_RECEIVE


84 } 
	tCHIP_I2C_MODE_T
;

89 
	sI2CD_API
 {

91 (*
i2c_i§_h™dÀr
)(
I2C_HANDLE_T
 *
h™dÀ
);

94 
Eº‹Code_t
 (*
i2c_ma°î_å™smô_pﬁl
)(
I2C_HANDLE_T
 *
h™dÀ
, 
I2C_PARAM_T
 *
∑øm
, 
I2C_RESULT_T
 *
ªsu…
);

95 
Eº‹Code_t
 (*
i2c_ma°î_ª˚ive_pﬁl
)(
I2C_HANDLE_T
 *
h™dÀ
, 
I2C_PARAM_T
 *
∑øm
, 
I2C_RESULT_T
 *
ªsu…
);

96 
Eº‹Code_t
 (*
i2c_ma°î_tx_rx_pﬁl
)(
I2C_HANDLE_T
 *
h™dÀ
, 
I2C_PARAM_T
 *
∑øm
, 
I2C_RESULT_T
 *
ªsu…
);

97 
Eº‹Code_t
 (*
i2c_ma°î_å™smô_öå
)(
I2C_HANDLE_T
 *
h™dÀ
, 
I2C_PARAM_T
 *
∑øm
, 
I2C_RESULT_T
 *
ªsu…
);

98 
Eº‹Code_t
 (*
i2c_ma°î_ª˚ive_öå
)(
I2C_HANDLE_T
 *
h™dÀ
, 
I2C_PARAM_T
 *
∑øm
, 
I2C_RESULT_T
 *
ªsu…
);

99 
Eº‹Code_t
 (*
i2c_ma°î_tx_rx_öå
)(
I2C_HANDLE_T
 *
h™dÀ
, 
I2C_PARAM_T
 *
∑øm
, 
I2C_RESULT_T
 *
ªsu…
);

102 
Eº‹Code_t
 (*
i2c_¶ave_ª˚ive_pﬁl
)(
I2C_HANDLE_T
 *
h™dÀ
, 
I2C_PARAM_T
 *
∑øm
, 
I2C_RESULT_T
 *
ªsu…
);

103 
Eº‹Code_t
 (*
i2c_¶ave_å™smô_pﬁl
)(
I2C_HANDLE_T
 *
h™dÀ
, 
I2C_PARAM_T
 *
∑øm
, 
I2C_RESULT_T
 *
ªsu…
);

104 
Eº‹Code_t
 (*
i2c_¶ave_ª˚ive_öå
)(
I2C_HANDLE_T
 *
h™dÀ
, 
I2C_PARAM_T
 *
∑øm
, 
I2C_RESULT_T
 *
ªsu…
);

105 
Eº‹Code_t
 (*
i2c_¶ave_å™smô_öå
)(
I2C_HANDLE_T
 *
h™dÀ
, 
I2C_PARAM_T
 *
∑øm
, 
I2C_RESULT_T
 *
ªsu…
);

106 
Eº‹Code_t
 (*
i2c_£t_¶ave_addr
)(
I2C_HANDLE_T
 *
h™dÀ
, 
uöt32_t
 
¶ave_addr_0_3
, uöt32_à
¶ave_mask_0_3
);

109 
uöt32_t
 (*
i2c_gë_mem_size
)();

110 
I2C_HANDLE_T
 * (*
i2c_£tup
)–
uöt32_t
 
i2c_ba£_addr
, uöt32_à* 
°¨t_of_øm
);

111 
Eº‹Code_t
 (*
i2c_£t_bôøã
)(
I2C_HANDLE_T
 *
h™dÀ
, 
uöt32_t
 
p_˛k_ö_hz
, uöt32_à
bôøã_ö_bps
);

112 
uöt32_t
 (*
i2c_gë_fúmw¨e_vîsi⁄
)();

113 
CHIP_I2C_MODE_T
 (*
i2c_gë_°©us
)(
I2C_HANDLE_T
 *
h™dÀ
);

114 
Eº‹Code_t
 (*
i2c_£t_timeout
)(
I2C_HANDLE_T
 *
h™dÀ
, 
uöt32_t
 
timeout
);

115 } 
	tI2CD_API_T
;

121 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/rom/rom_pwr_8xx.h

32 #i‚de‡
__ROM_PWR_8XX_H_


33 
	#__ROM_PWR_8XX_H_


	)

35 #ifde‡
__˝lu•lus


47 
	#CPU_FREQ_EQU
 0

	)

48 
	#CPU_FREQ_LTE
 1

	)

49 
	#CPU_FREQ_GTE
 2

	)

50 
	#CPU_FREQ_APPROX
 3

	)

55 
	#PLL_CMD_SUCCESS
 0

	)

56 
	#PLL_INVALID_FREQ
 1

	)

57 
	#PLL_INVALID_MODE
 2

	)

58 
	#PLL_FREQ_NOT_FOUND
 3

	)

59 
	#PLL_NOT_LOCKED
 4

	)

64 
	#PWR_DEFAULT
 0

	)

65 
	#PWR_CPU_PERFORMANCE
 1

	)

66 
	#PWR_EFFICIENCY
 2

	)

67 
	#PWR_LOW_CURRENT
 3

	)

72 
	#PWR_CMD_SUCCESS
 0

	)

73 
	#PWR_INVALID_FREQ
 1

	)

74 
	#PWR_INVALID_MODE
 2

	)

79 
	sPWRD_API
 {

80 (*
£t_∂l
)(
uöt32_t
 
cmd
[], uöt32_à
ª•
[]);

81 (*
£t_powî
)(
uöt32_t
 
cmd
[], uöt32_à
ª•
[]);

82 } 
	tPWRD_API_T
;

88 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/rom/rom_uart_8xx.h

32 #i‚de‡
__ROM_UART_8XX_H_


33 
	#__ROM_UART_8XX_H_


	)

35 #ifde‡
__˝lu•lus


47 
	#OVERRUN_ERR_EN
 (1 << 0Ë

	)

48 
	#UNDERRUN_ERR_EN
 (1 << 1Ë

	)

49 
	#FRAME_ERR_EN
 (1 << 2Ë

	)

50 
	#PARITY_ERR_EN
 (1 << 3Ë

	)

51 
	#RXNOISE_ERR_EN
 (1 << 4Ë

	)

57 
	#ALL_ERR_EN
 (
OVERRUN_ERR_EN
 | 
UNDERRUN_ERR_EN
 | 
FRAME_ERR_EN
 | 
PARITY_ERR_EN
 | \

58 
RXNOISE_ERR_EN
)

	)

60 
	#NO_ERR_EN
 (0)

	)

68 
	#TX_MODE_BUF_EMPTY
 (0x00)

	)

69 
	#RX_MODE_BUF_FULL
 (0x00)

	)

72 
	#TX_MODE_SZERO_SEND_CRLF
 (0x01)

	)

73 
	#RX_MODE_CRLF_RECVD
 (0x01)

	)

76 
	#TX_MODE_SZERO_SEND_LF
 (0x02)

	)

77 
	#RX_MODE_LF_RECVD
 (0x02)

	)

80 
	#TX_MODE_SZERO
 (0x03)

	)

85 
	#DRIVER_MODE_POLLING
 (0x00Ë

	)

86 
	#DRIVER_MODE_INTERRUPT
 (0x01Ë

	)

87 
	#DRIVER_MODE_DMA
 (0x02Ë

	)

92 
	tUART_HANDLE_T
;

97 (*
UART_CALLBK_T
)(
	tuöt32_t
 
	tîr_code
, uöt32_à
	tn
);

102 (*
UART_DMA_REQ_T
)(
	tuöt32_t
 
	t§c_adr
, uöt32_à
	td°_adr
, uöt32_à
	tsize
);

108 
uöt32_t
 
sys_˛k_ö_hz
;

109 
uöt32_t
 
baudøã_ö_hz
;

110 
uöt8_t
 
c⁄fig
;

114 
uöt8_t
 
sync_mod
;

122 
uöt16_t
 
îr‹_í
;

128 } 
	tUART_CONFIG_T
;

134 
uöt8_t
 *
buf„r
;

135 
uöt32_t
 
size
;

136 
uöt16_t
 
å™s„r_mode
;

145 
uöt16_t
 
drivî_mode
;

149 
UART_CALLBK_T
 
ˇŒback_func_±
;

150 
UART_DMA_REQ_T
 
dma_ªq_func_±
;

151 } 
	tUART_PARAM_T
;

156 
	sUARTD_API
 {

158 
uöt32_t
 (*
u¨t_gë_mem_size
)();

159 
UART_HANDLE_T
 * (*
u¨t_£tup
)(
uöt32_t
 
ba£_addr
, 
uöt8_t
 * 
øm
);

160 
uöt32_t
 (*
u¨t_öô
)(
UART_HANDLE_T
 *
h™dÀ
, 
UART_CONFIG_T
 *
£t
);

163 
uöt8_t
 (*
u¨t_gë_ch¨
)(
UART_HANDLE_T
 *
h™dÀ
);

164 (*
u¨t_put_ch¨
)(
UART_HANDLE_T
 *
h™dÀ
, 
uöt8_t
 
d©a
);

165 
uöt32_t
 (*
u¨t_gë_löe
)(
UART_HANDLE_T
 *
h™dÀ
, 
UART_PARAM_T
 *
∑øm
);

166 
uöt32_t
 (*
u¨t_put_löe
)(
UART_HANDLE_T
 *
h™dÀ
, 
UART_PARAM_T
 *
∑øm
);

169 (*
u¨t_i§
)(
UART_HANDLE_T
 *
h™dÀ
);

170 } 
	tUARTD_API_T
;

176 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/rom/romapi_8xx.h

32 #i‚de‡
__ROMAPI_8XX_H_


33 
	#__ROMAPI_8XX_H_


	)

35 
	~"../üp/üp.h
"

36 
	~"../../comm⁄/chù/îr‹_8xx.h
"

37 
	~"rom_i2c_8xx.h
"

38 
	~"rom_pwr_8xx.h
"

39 
	~"rom_u¨t_8xx.h
"

41 #ifde‡
__˝lu•lus


53 
	sROM_API
 {

54 c⁄° 
uöt32_t
 
unu£d
[3];

55 c⁄° 
PWRD_API_T
 *
pPWRD
;

56 c⁄° 
uöt32_t
 
p_dev1
;

57 c⁄° 
I2CD_API_T
 *
pI2CD
;

58 c⁄° 
uöt32_t
 
p_dev3
;

59 c⁄° 
uöt32_t
 
p_dev4
;

60 c⁄° 
uöt32_t
 
p_dev5
;

61 c⁄° 
UARTD_API_T
 *
pUARTD
;

62 } 
	tLPC_ROM_API_T
;

65 
	#LPC_ROM_API_BASE_LOC
 0x1FFF1FF8UL

	)

66 
	#LPC_ROM_API
 (*(
LPC_ROM_API_T
 * *Ë
LPC_ROM_API_BASE_LOC
)

	)

69 
	#LPC_PWRD_API
 ((
LPC_ROM_API
)->
pPWRD
)

	)

72 
	#LPC_I2CD_API
 ((
LPC_ROM_API
)->
pI2CD
)

	)

75 
	#LPC_UARTD_API
 ((
LPC_ROM_API
)->
pUARTD
)

	)

78 
	#IAP_ENTRY_LOCATION
 0X1FFF1FF1UL

	)

83 
INLINE
 
üp_íåy
(
cmd_∑øm
[], 
°©us_ªsu…
[])

85 ((
IAP_ENTRY_T
Ë
IAP_ENTRY_LOCATION
)(
cmd_∑øm
, 
°©us_ªsu…
);

92 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/sctimer/sct_8xx.c

32 
	~"chù.h
"

51 
	$Chù_SCT_Inô
(
LPC_SCT_T
 *
pSCT
)

53 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_SCT
);

54 
	`Chù_SYSCTL_PîùhRe£t
(
RESET_SCT
);

55 
	}
}

58 
	$Chù_SCT_DeInô
(
LPC_SCT_T
 *
pSCT
)

60 
	`Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_SCT
);

61 
	}
}

64 
	$Chù_SCT_SëCÃC⁄åﬁ
(
LPC_SCT_T
 *
pSCT
, 
uöt32_t
 
vÆue
, 
Fun˘i⁄ÆSèã
 
ía
)

66 i‡(
ía
 =
ENABLE
) {

67 
	`Chù_SCT_SëC⁄åﬁ
(
pSCT
, 
vÆue
);

70 
	`Chù_SCT_CÀ¨C⁄åﬁ
(
pSCT
, 
vÆue
);

72 
	}
}

75 
	$Chù_SCT_SëC⁄Êi˘Resﬁuti⁄
(
LPC_SCT_T
 *
pSCT
, 
uöt8_t
 
ouäum
, uöt8_à
vÆue
)

77 
uöt32_t
 
ãm
;

79 
ãm
 = 
pSCT
->
RES
 & ~((0x03 << (2 * 
ouäum
))|
SCT_RES_RESERVED
);

80 
pSCT
->
RES
 = 
ãm
 | (
vÆue
 << (2 * 
ouäum
));

81 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/sctimer/sct_8xx.h

32 #i‚de‡
__SCT_8XX_H_


33 
	#__SCT_8XX_H_


	)

35 #ifde‡
__˝lu•lus


47 
	#CONFIG_SCT_nEV
 (8Ë

	)

48 
	#CONFIG_SCT_nRG
 (8Ë

	)

49 
	#CONFIG_SCT_nOU
 (6Ë

	)

55 
__IO
 
uöt32_t
 
CONFIG
;

57 
__IO
 
uöt32_t
 
CTRL_U
;

59 
__IO
 
uöt16_t
 
CTRL_L
;

60 
__IO
 
uöt16_t
 
CTRL_H
;

64 
__IO
 
uöt32_t
 
LIMIT_U
;

66 
__IO
 
uöt16_t
 
LIMIT_L
;

67 
__IO
 
uöt16_t
 
LIMIT_H
;

72 
__IO
 
uöt32_t
 
HALT_U
;

74 
__IO
 
uöt16_t
 
HALT_L
;

75 
__IO
 
uöt16_t
 
HALT_H
;

80 
__IO
 
uöt32_t
 
STOP_U
;

82 
__IO
 
uöt16_t
 
STOP_L
;

83 
__IO
 
uöt16_t
 
STOP_H
;

89 
__IO
 
uöt32_t
 
START_U
;

91 
__IO
 
uöt16_t
 
START_L
;

92 
__IO
 
uöt16_t
 
START_H
;

97 
uöt32_t
 
RESERVED1
[10];

100 
__IO
 
uöt32_t
 
COUNT_U
;

102 
__IO
 
uöt16_t
 
COUNT_L
;

103 
__IO
 
uöt16_t
 
COUNT_H
;

108 
__IO
 
uöt32_t
 
STATE_U
;

110 
__IO
 
uöt16_t
 
STATE_L
;

111 
__IO
 
uöt16_t
 
STATE_H
;

115 
__I
 
uöt32_t
 
INPUT
;

117 
__IO
 
uöt32_t
 
REGMODE_U
;

119 
__IO
 
uöt16_t
 
REGMODE_L
;

120 
__IO
 
uöt16_t
 
REGMODE_H
;

124 
__IO
 
uöt32_t
 
OUTPUT
;

125 
__IO
 
uöt32_t
 
OUTPUTDIRCTRL
;

126 
__IO
 
uöt32_t
 
RES
;

127 
__IO
 
uöt32_t
 
DMAREQ0
;

128 
__IO
 
uöt32_t
 
DMAREQ1
;

130 
uöt32_t
 
RESERVED2
[35];

132 
__IO
 
uöt32_t
 
EVEN
;

133 
__IO
 
uöt32_t
 
EVFLAG
;

134 
__IO
 
uöt32_t
 
CONEN
;

135 
__IO
 
uöt32_t
 
CONFLAG
;

137 
__IO
 union {

138 
uöt32_t
 
U
;

140 
uöt16_t
 
L
;

141 
uöt16_t
 
H
;

143 } 
MATCH
[
CONFIG_SCT_nRG
];

145 
__I
 union {

146 
uöt32_t
 
U
;

148 
uöt16_t
 
L
;

149 
uöt16_t
 
H
;

151 } 
CAP
[
CONFIG_SCT_nRG
];

154 
uöt32_t
 
RESERVED3
[56];

157 
__IO
 union {

158 
uöt32_t
 
U
;

160 
uöt16_t
 
L
;

161 
uöt16_t
 
H
;

163 } 
MATCHREL
[
CONFIG_SCT_nRG
];

165 
__IO
 union {

166 
uöt32_t
 
U
;

168 
uöt16_t
 
L
;

169 
uöt16_t
 
H
;

171 } 
CAPCTRL
[
CONFIG_SCT_nRG
];

174 
uöt32_t
 
RESERVED4
[56];

176 
__IO
 struct {

177 
uöt32_t
 
STATE
;

178 
uöt32_t
 
CTRL
;

179 } 
EV
[
CONFIG_SCT_nEV
];

181 
uöt32_t
 
RESERVED5
[112];

183 
__IO
 struct {

184 
uöt32_t
 
SET
;

185 
uöt32_t
 
CLR
;

186 } 
OUT
[
CONFIG_SCT_nOU
];

188 } 
	tLPC_SCT_T
;

191 
	#SCT_CONFIG_RESERVED
 0xfff80000

	)

192 
	#SCT_CTRL_RESERVED
 ((7<<13)|(7u<<29))

	)

193 
	#SCT_LIMIT_RESERVED
 (~(0x3f|(0x3f<<16))

	)

194 
	#SCT_HALT_RESERVED
 (~(0x3f|(0x3f<<16))

	)

195 
	#SCT_STOP_RESERVED
 (~(0x3f|(0x3f<<16))

	)

196 
	#SCT_START_RESERVED
 (~(0x3f|(0x3f<<16))

	)

197 
	#SCT_STATE_RESERVED
 (~(0x1f|(0x1f<<16))

	)

198 
	#SCT_INPUT_RESERVED
 (~(0xf|(0xf<<16))

	)

199 
	#SCT_REGMODE_RESERVED
 (~(0x1f|(0x1f<<16))

	)

200 
	#SCT_OUTPUT_RESERVED
 (~0xf)

	)

201 
	#SCT_OUTPUTDIRCTRL_RESERVED
 (~0xff)

	)

202 
	#SCT_RES_RESERVED
 (~0xff)

	)

203 
	#SCT_EVEN_RESERVED
 (~0x3f)

	)

204 
	#SCT_EVFLAG_RESERVED
 (~0x3f)

	)

205 
	#SCT_CONEN_RESERVED
 (~0xf)

	)

206 
	#SCT_CONFLAG_RESERVED
 (~(0xf|(3u<<30)))

	)

207 
	#SCT_CAPCTRL_RESERVED
 (~(0x3f|(0x3f<<16)))

	)

208 
	#SCT_EVn_STATE_RESERVED
 (~3)

	)

209 
	#SCT_EVn_CTRL_RESERVED
 (0xff800000)

	)

210 
	#SCT_OUTn_SET_RESERVED
 (~0x3f)

	)

211 
	#SCT_OUTn_CLR_RESERVED
 (~0x3f)

	)

216 
	#SCT_CONFIG_16BIT_COUNTER
 0x00000000

	)

217 
	#SCT_CONFIG_32BIT_COUNTER
 0x00000001

	)

219 
	#SCT_CONFIG_CLKMODE_BUSCLK
 (0x0 << 1Ë

	)

220 
	#SCT_CONFIG_CLKMODE_SCTCLK
 (0x1 << 1Ë

	)

221 
	#SCT_CONFIG_CLKMODE_INCLK
 (0x2 << 1Ë

	)

222 
	#SCT_CONFIG_CLKMODE_INEDGECLK
 (0x3 << 1Ë

	)

224 
	#SCT_CONFIG_NORELOAD_U
 (0x1 << 7Ë

	)

225 
	#SCT_CONFIG_NORELOAD_L
 (0x1 << 7Ë

	)

226 
	#SCT_CONFIG_NORELOAD_H
 (0x1 << 8Ë

	)

228 
	#SCT_CONFIG_AUTOLIMIT_U
 (0x1 << 17Ë

	)

229 
	#SCT_CONFIG_AUTOLIMIT_L
 (0x1 << 17Ë

	)

230 
	#SCT_CONFIG_AUTOLIMIT_H
 (0x1 << 18Ë

	)

235 
	#COUNTUP_TO_LIMIT_THEN_CLEAR_TO_ZERO
 0

	)

236 
	#COUNTUP_TO
 
LIMIT_THEN_COUNTDOWN_TO_ZERO
 1

	)

238 
	#SCT_CTRL_STOP_L
 (1 << 1Ë

	)

239 
	#SCT_CTRL_HALT_L
 (1 << 2Ë

	)

240 
	#SCT_CTRL_CLRCTR_L
 (1 << 3Ë

	)

241 
	#SCT_CTRL_BIDIR_L
(
x
Ë(((xË& 0x01Ë<< 4Ë

	)

242 
	#SCT_CTRL_PRE_L
(
x
Ë(((xË& 0xFFË<< 5Ë

	)

244 
	#COUNTUP_TO_LIMIT_THEN_CLEAR_TO_ZERO
 0

	)

245 
	#COUNTUP_TO
 
LIMIT_THEN_COUNTDOWN_TO_ZERO
 1

	)

246 
	#SCT_CTRL_STOP_H
 (1 << 17Ë

	)

247 
	#SCT_CTRL_HALT_H
 (1 << 18Ë

	)

248 
	#SCT_CTRL_CLRCTR_H
 (1 << 19Ë

	)

249 
	#SCT_CTRL_BIDIR_H
(
x
Ë(((xË& 0x01Ë<< 20)

	)

250 
	#SCT_CTRL_PRE_H
(
x
Ë(((xË& 0xFFË<< 21Ë

	)

255 
	#SCT_RES_NOCHANGE
 (0)

	)

256 
	#SCT_RES_SET_OUTPUT
 (1)

	)

257 
	#SCT_RES_CLEAR_OUTPUT
 (2)

	)

258 
	#SCT_RES_TOGGLE_OUTPUT
 (3)

	)

263 
	eCHIP_SCT_MATCH_REG
 {

264 
SCT_MATCH_0
 = 0,

265 
SCT_MATCH_1
 = 1,

266 
SCT_MATCH_2
 = 2,

267 
SCT_MATCH_3
 = 3,

268 
SCT_MATCH_4
 = 4

269 } 
	tCHIP_SCT_MATCH_REG_T
;

274 
	eCHIP_SCT_EVENT
 {

275 
SCT_EVT_0
 = (1 << 0),

276 
SCT_EVT_1
 = (1 << 1),

277 
SCT_EVT_2
 = (1 << 2),

278 
SCT_EVT_3
 = (1 << 3),

279 
SCT_EVT_4
 = (1 << 4)

280 } 
	tCHIP_SCT_EVENT_T
;

288 
STATIC
 
INLINE
 
Chù_SCT_C⁄fig
(
LPC_SCT_T
 *
pSCT
, 
uöt32_t
 
vÆue
)

290 
pSCT
->
CONFIG
 = 
vÆue
;

305 
Chù_SCT_SëCÃC⁄åﬁ
(
LPC_SCT_T
 *
pSCT
, 
uöt32_t
 
vÆue
, 
Fun˘i⁄ÆSèã
 
ía
);

321 
Chù_SCT_SëC⁄Êi˘Resﬁuti⁄
(
LPC_SCT_T
 *
pSCT
, 
uöt8_t
 
ouäum
, uöt8_à
vÆue
);

329 
STATIC
 
INLINE
 
Chù_SCT_SëCou¡
(
LPC_SCT_T
 *
pSCT
, 
uöt32_t
 
cou¡
)

331 
pSCT
->
COUNT_U
 = 
cou¡
;

340 
STATIC
 
INLINE
 
Chù_SCT_SëCou¡L
(
LPC_SCT_T
 *
pSCT
, 
uöt16_t
 
cou¡
)

342 
pSCT
->
COUNT_L
 = 
cou¡
;

351 
STATIC
 
INLINE
 
Chù_SCT_SëCou¡H
(
LPC_SCT_T
 *
pSCT
, 
uöt16_t
 
cou¡
)

353 
pSCT
->
COUNT_H
 = 
cou¡
;

363 
STATIC
 
INLINE
 
Chù_SCT_SëM©chCou¡
(
LPC_SCT_T
 *
pSCT
, 
CHIP_SCT_MATCH_REG_T
 
n
, 
uöt32_t
 
vÆue
)

365 
pSCT
->
MATCH
[
n
].
U
 = 
vÆue
;

375 
STATIC
 
INLINE
 
Chù_SCT_SëM©chRñﬂd
(
LPC_SCT_T
 *
pSCT
, 
CHIP_SCT_MATCH_REG_T
 
n
, 
uöt32_t
 
vÆue
)

377 
pSCT
->
MATCHREL
[
n
].
U
 = 
vÆue
;

386 
STATIC
 
INLINE
 
Chù_SCT_E«bÀEvítI¡
(
LPC_SCT_T
 *
pSCT
, 
CHIP_SCT_EVENT_T
 
evt
)

388 
pSCT
->
EVEN
 = 
evt
 | (pSCT->EVEN & ~
SCT_EVEN_RESERVED
);

397 
STATIC
 
INLINE
 
Chù_SCT_DißbÀEvítI¡
(
LPC_SCT_T
 *
pSCT
, 
CHIP_SCT_EVENT_T
 
evt
)

399 
pSCT
->
EVEN
 &~(
evt
 | 
SCT_EVEN_RESERVED
);

408 
STATIC
 
INLINE
 
Chù_SCT_CÀ¨EvítFœg
(
LPC_SCT_T
 *
pSCT
, 
CHIP_SCT_EVENT_T
 
evt
)

410 
pSCT
->
EVFLAG
 = 
evt
 | (pSCT->EVFLAG & ~
SCT_EVFLAG_RESERVED
);

419 
STATIC
 
INLINE
 
Chù_SCT_SëC⁄åﬁ
(
LPC_SCT_T
 *
pSCT
, 
uöt32_t
 
vÆue
)

421 
pSCT
->
CTRL_U
 = 
vÆue
 | (pSCT->CTRL_U & ~
SCT_CTRL_RESERVED
);

430 
STATIC
 
INLINE
 
Chù_SCT_CÀ¨C⁄åﬁ
(
LPC_SCT_T
 *
pSCT
, 
uöt32_t
 
vÆue
)

432 
pSCT
->
CTRL_U
 &~(
vÆue
 | 
SCT_CTRL_RESERVED
);

440 
Chù_SCT_Inô
(
LPC_SCT_T
 *
pSCT
);

447 
Chù_SCT_DeInô
(
LPC_SCT_T
 *
pSCT
);

453 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/sctimer/sct_pwm_8xx.c

32 
	~"chù.h
"

51 
	$Chù_SCTPWM_SëOutPö
(
LPC_SCT_T
 *
pSCT
, 
uöt8_t
 
ödex
, uöt8_à
pö
)

53 
ix
 = (Ë
ödex
;

54 
pSCT
->
EV
[
ix
].
CTRL
 = 
ödex
 | (1 << 12);

55 
pSCT
->
EV
[
ix
].
STATE
 = 1;

56 
pSCT
->
OUT
[
pö
].
SET
 = 1;

57 
pSCT
->
OUT
[
pö
].
CLR
 = 1 << 
ix
;

60 
pSCT
->
RES
 = (pSCT->RES & ~(3 << (
pö
 << 1))) | (0x01 << (pin << 1));

63 
pSCT
->
OUTPUTDIRCTRL
 = (pSCT->OUTPUTDIRCTRL & ~((3 << (
pö
 << 1))|
SCT_OUTPUTDIRCTRL_RESERVED
));

64 
	}
}

67 
	$Chù_SCTPWM_SëR©e
(
LPC_SCT_T
 *
pSCT
, 
uöt32_t
 
‰eq
)

69 
uöt32_t
 
øã
;

71 
øã
 = 
	`Chù_Clock_GëSy°emClockR©e
(Ë/ 
‰eq
;;

74 
	`Chù_SCTPWM_St›
(
pSCT
);

77 
pSCT
->
REGMODE_U
 = 0;

78 
	`Chù_SCT_SëM©chCou¡
(
pSCT
, 
SCT_MATCH_0
, 0);

79 
	`Chù_SCT_SëM©chRñﬂd
(
pSCT
, 
SCT_MATCH_0
, 
øã
);

80 
pSCT
->
EV
[0].
CTRL
 = 1 << 12;

81 
pSCT
->
EV
[0].
STATE
 = 1;

84 
	`Chù_SCT_C⁄fig
(
pSCT
, 
SCT_CONFIG_32BIT_COUNTER
 | 
SCT_CONFIG_AUTOLIMIT_L
);

85 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/sctimer/sct_pwm_8xx.h

32 #i‚de‡
__SCT_PWM_8XX_H_


33 
	#__SCT_PWM_8XX_H_


	)

34 
	~"s˘_8xx.h
"

35 #ifde‡
__˝lu•lus


56 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SCTPWM_GëTicksPîCy˛e
(
LPC_SCT_T
 *
pSCT
)

58  
pSCT
->
MATCHREL
[0].
U
;

71 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SCTPWM_Pî˚¡ageToTicks
(
LPC_SCT_T
 *
pSCT
, 
uöt8_t
 
≥r˚¡
)

73  (
Chù_SCTPWM_GëTicksPîCy˛e
(
pSCT
Ë* 
≥r˚¡
) / 100;

86 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SCTPWM_GëDutyCy˛e
(
LPC_SCT_T
 *
pSCT
, 
uöt8_t
 
ödex
)

88  
pSCT
->
MATCHREL
[
ödex
].
U
;

103 
STATIC
 
INLINE
 
Chù_SCTPWM_SëDutyCy˛e
(
LPC_SCT_T
 *
pSCT
, 
uöt8_t
 
ödex
, 
uöt32_t
 
ticks
)

105 
Chù_SCT_SëM©chRñﬂd
(
pSCT
, (
CHIP_SCT_MATCH_REG_T
)
ödex
, 
ticks
);

113 
STATIC
 
INLINE
 
Chù_SCTPWM_Inô
(
LPC_SCT_T
 *
pSCT
)

115 
Chù_SCT_Inô
(
pSCT
);

129 
STATIC
 
INLINE
 
Chù_SCTPWM_Sèπ
(
LPC_SCT_T
 *
pSCT
)

131 
Chù_SCT_CÀ¨C⁄åﬁ
(
pSCT
, 
SCT_CTRL_HALT_L
 | 
SCT_CTRL_HALT_H
);

139 
STATIC
 
INLINE
 
Chù_SCTPWM_St›
(
LPC_SCT_T
 *
pSCT
)

142 
Chù_SCT_SëC⁄åﬁ
(
pSCT
, 
SCT_CTRL_HALT_L
 | 
SCT_CTRL_HALT_H
);

145 
Chù_SCT_SëC⁄åﬁ
(
pSCT
, 
SCT_CTRL_CLRCTR_L
 | 
SCT_CTRL_CLRCTR_H
);

154 
Chù_SCTPWM_SëR©e
(
LPC_SCT_T
 *
pSCT
, 
uöt32_t
 
‰eq
);

167 
Chù_SCTPWM_SëOutPö
(
LPC_SCT_T
 *
pSCT
, 
uöt8_t
 
ödex
, uöt8_à
pö
);

173 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/spi/spi_8xx.c

32 
	~"chù.h
"

37 vﬁ©ûê
boﬁ
 
	gxmôOn
;

38 vﬁ©ûê
boﬁ
 
	gdós£πed
;

47 
STATIC
 
	$SPI_Síd_D©a_RxIgn‹e
(
LPC_SPI_T
 *
pSPI
,

48 
SPI_DATA_SETUP_T
 *
pXfSëup
)

50 i‡(
pXfSëup
->
TxC¡
 =’XfSëup->
Lígth
 - 1)) {

51 
	`Chù_SPI_SídLa°Føme_RxIgn‹e
(
pSPI
, 
pXfSëup
->
pTx
[pXfSëup->
TxC¡
],ÖXfSëup->
D©aSize
);

54 
	`Chù_SPI_SídMidFøme
(
pSPI
, 
pXfSëup
->
pTx
[pXfSëup->
TxC¡
]);

57 
pXfSëup
->
TxC¡
++;

58 
	}
}

60 
STATIC
 
	$SPI_Síd_D©a
(
LPC_SPI_T
 *
pSPI
,

61 
SPI_DATA_SETUP_T
 *
pXfSëup
)

63 i‡(
pXfSëup
->
TxC¡
 =’XfSëup->
Lígth
 - 1)) {

64 
	`Chù_SPI_SídLa°Føme
(
pSPI
, 
pXfSëup
->
pTx
[pXfSëup->
TxC¡
],ÖXfSëup->
D©aSize
);

67 
	`Chù_SPI_SídMidFøme
(
pSPI
, 
pXfSëup
->
pTx
[pXfSëup->
TxC¡
]);

70 
pXfSëup
->
TxC¡
++;

71 
	}
}

73 
STATIC
 
	$SPI_Síd_Dummy
(
LPC_SPI_T
 *
pSPI
,

74 
SPI_DATA_SETUP_T
 *
pXfSëup
)

76 i‡(
pXfSëup
->
RxC¡
 =’XfSëup->
Lígth
 - 1)) {

77 
	`Chù_SPI_SídLa°Føme
(
pSPI
, 0x55, 
pXfSëup
->
D©aSize
);

80 
	`Chù_SPI_SídMidFøme
(
pSPI
, 0x55);

82 
	}
}

84 
STATIC
 
	$SPI_Re˚ive_D©a
(
LPC_SPI_T
 *
pSPI
,

85 
SPI_DATA_SETUP_T
 *
pXfSëup
)

87 
pXfSëup
->
pRx
[pXfSëup->
RxC¡
] = 
	`Chù_SPI_Re˚iveFøme
(
pSPI
);

88 
pXfSëup
->
RxC¡
++;

89 
	}
}

92 
STATIC
 
uöt8_t
 
	$Chù_SPIS_FödSSEL
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
d©a
)

94 
i
;

95 
uöt8_t
 
s£l
 = 0;

97 
i
 = 0; i <= 3; i++) {

98 i‡((
d©a
 & 
	`SPI_RXDAT_RXSSELNUM_INACTIVE
(
i
)) == 0) {

100 
s£l
 = (
uöt8_t
Ë
i
;

104  
s£l
;

105 
	}
}

112 
uöt32_t
 
	$Chù_SPI_CÆClkR©eDividî
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
bôR©e
)

114 
uöt32_t
 
SPIClk
;

115 
uöt32_t
 
DivVÆ
 = 1;

118 
SPIClk
 = 
	`Chù_Clock_GëSy°emClockR©e
();

120 
DivVÆ
 = 
SPIClk
 / 
bôR©e
;

122  
DivVÆ
;

123 
	}
}

126 
	$Chù_SPI_DñayC⁄fig
(
LPC_SPI_T
 *
pSPI
, 
SPI_DELAY_CONFIG_T
 *
pC⁄fig
)

128 
uöt32_t
 
dñayVÆue
 = 
	`SPI_DLY_PRE_DELAY
(
pC⁄fig
->
PªDñay
) |

129 
	`SPI_DLY_POST_DELAY
(
pC⁄fig
->
Po°Dñay
) |

130 
	`SPI_DLY_FRAME_DELAY
(
pC⁄fig
->
FømeDñay
);

131 i‡(
pC⁄fig
->
Tøns„rDñay
) {

132 
dñayVÆue
 |
	`SPI_DLY_TRANSFER_DELAY
(
pC⁄fig
->
Tøns„rDñay
 - 1);

134 
pSPI
->
DLY
 = 
dñayVÆue
;

135 
	}
}

138 
	$Chù_SPI_I¡_Cmd
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
I¡Mask
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

140 i‡(
NewSèã
 =
ENABLE
) {

141 
pSPI
->
INTENSET
 = 
I¡Mask
;

144 
pSPI
->
INTENCLR
 = 
I¡Mask
;

146 
	}
}

149 
uöt32_t
 
	$Chù_SPI_RWFømes_Blockög
(
LPC_SPI_T
 *
pSPI
, 
SPI_DATA_SETUP_T
 *
pXfSëup
)

151 
uöt32_t
 
Sètus
;

153 
	`Chù_SPI_CÀ¨Sètus
(
pSPI
, 
SPI_STAT_CLR_RXOV
 | 
SPI_STAT_CLR_TXUR
 | 
SPI_STAT_CLR_SSA
 | 
SPI_STAT_CLR_SSD
);

154 
	`Chù_SPI_SëC⁄åﬁInfo
(
pSPI
, 
pXfSëup
->
D©aSize
, 
SPI_TXCTL_ASSERT_SSEL
 | 
SPI_TXCTL_EOF
);

155 
pXfSëup
->
TxC¡
 =ÖXfSëup->
RxC¡
 = 0;

156 (
pXfSëup
->
TxC¡
 <ÖXfSëup->
Lígth
) ||

157 (
pXfSëup
->
RxC¡
 <ÖXfSëup->
Lígth
)) {

158 
Sètus
 = 
	`Chù_SPI_GëSètus
(
pSPI
);

161 i‡((
Sètus
 & 
SPI_STAT_TXRDY
Ë&& (
pXfSëup
->
TxC¡
 <ÖXfSëup->
Lígth
)) {

162 
	`SPI_Síd_D©a
(
pSPI
, 
pXfSëup
);

166 i‡((
Sètus
 & 
SPI_STAT_RXRDY
Ë&& (
pXfSëup
->
RxC¡
 <ÖXfSëup->
Lígth
)) {

167 
	`SPI_Re˚ive_D©a
(
pSPI
, 
pXfSëup
);

171 i‡(
	`Chù_SPI_GëSètus
(
pSPI
Ë& (
SPI_STAT_CLR_RXOV
 | 
SPI_STAT_CLR_TXUR
)) {

174  
pXfSëup
->
TxC¡
;

175 
	}
}

177 
uöt32_t
 
	$Chù_SPI_WrôeFømes_Blockög
(
LPC_SPI_T
 *
pSPI
, 
SPI_DATA_SETUP_T
 *
pXfSëup
)

180 
	`Chù_SPI_CÀ¨Sètus
(
pSPI
, 
SPI_STAT_CLR_RXOV
 | 
SPI_STAT_CLR_TXUR
 | 
SPI_STAT_CLR_SSA
 | 
SPI_STAT_CLR_SSD
);

181 
	`Chù_SPI_SëC⁄åﬁInfo
(
pSPI
, 
pXfSëup
->
D©aSize
, 
SPI_TXCTL_ASSERT_SSEL
 | 
SPI_TXCTL_EOF
 | 
SPI_TXCTL_RXIGNORE
);

182 
pXfSëup
->
TxC¡
 =ÖXfSëup->
RxC¡
 = 0;

183 
pXfSëup
->
TxC¡
 <ÖXfSëup->
Lígth
) {

185 !(
	`Chù_SPI_GëSètus
(
pSPI
Ë& 
SPI_STAT_TXRDY
)) {}

187 
	`SPI_Síd_D©a_RxIgn‹e
(
pSPI
, 
pXfSëup
);

192 !(
	`Chù_SPI_GëSètus
(
pSPI
Ë& 
SPI_STAT_SSD
)) {}

193 
	`Chù_SPI_CÀ¨Sètus
(
pSPI
, 
SPI_STAT_CLR_SSD
);

196 i‡(
	`Chù_SPI_GëSètus
(
pSPI
Ë& 
SPI_STAT_CLR_TXUR
) {

199  
pXfSëup
->
TxC¡
;

200 
	}
}

202 
uöt32_t
 
	$Chù_SPI_RódFømes_Blockög
(
LPC_SPI_T
 *
pSPI
, 
SPI_DATA_SETUP_T
 *
pXfSëup
)

205 
	`Chù_SPI_CÀ¨Sètus
(
pSPI
, 
SPI_STAT_CLR_RXOV
 | 
SPI_STAT_CLR_TXUR
 | 
SPI_STAT_CLR_SSA
 | 
SPI_STAT_CLR_SSD
);

206 
	`Chù_SPI_SëC⁄åﬁInfo
(
pSPI
, 
pXfSëup
->
D©aSize
, 
SPI_TXCTL_ASSERT_SSEL
 | 
SPI_TXCTL_EOF
);

207 
pXfSëup
->
TxC¡
 =ÖXfSëup->
RxC¡
 = 0;

208 
pXfSëup
->
RxC¡
 <ÖXfSëup->
Lígth
) {

210 !(
	`Chù_SPI_GëSètus
(
pSPI
Ë& 
SPI_STAT_TXRDY
)) {}

212 
	`SPI_Síd_Dummy
(
pSPI
, 
pXfSëup
);

215 !(
	`Chù_SPI_GëSètus
(
pSPI
Ë& 
SPI_STAT_RXRDY
)) {}

217 
	`SPI_Re˚ive_D©a
(
pSPI
, 
pXfSëup
);

221 i‡(
	`Chù_SPI_GëSètus
(
pSPI
Ë& (
SPI_STAT_CLR_RXOV
 | 
SPI_STAT_CLR_TXUR
)) {

224  
pXfSëup
->
RxC¡
;

225 
	}
}

228 
Sètus
 
	$Chù_SPI_I¡_RWFømes
(
LPC_SPI_T
 *
pSPI
, 
SPI_DATA_SETUP_T
 *
pXfSëup
)

230 
uöt32_t
 
Sètus
;

232 
Sètus
 = 
	`Chù_SPI_GëSètus
(
pSPI
);

234 i‡(
Sètus
 & (
SPI_STAT_RXOV
 | 
SPI_STAT_TXUR
)) {

235  
ERROR
;

238 i‡(
pXfSëup
->
TxC¡
 == 0) {

239 
	`Chù_SPI_SëC⁄åﬁInfo
(
pSPI
, 
pXfSëup
->
D©aSize
, 
SPI_TXCTL_ASSERT_SSEL
 | 
SPI_TXCTL_EOF
);

242 i‡(
pXfSëup
->
pRx
 =
NULL
) {

243 i‡((
Sètus
 & 
SPI_STAT_TXRDY
Ë&& (
pXfSëup
->
TxC¡
 <ÖXfSëup->
Lígth
)) {

244 
	`SPI_Síd_D©a_RxIgn‹e
(
pSPI
, 
pXfSëup
);

249 i‡((
Sètus
 & 
SPI_STAT_TXRDY
Ë&& (
pXfSëup
->
TxC¡
 <ÖXfSëup->
Lígth
)) {

250 
	`SPI_Síd_D©a
(
pSPI
, 
pXfSëup
);

254 i‡((
Sètus
 & 
SPI_STAT_RXRDY
Ë&& (
pXfSëup
->
RxC¡
 <ÖXfSëup->
Lígth
)) {

255 
	`SPI_Re˚ive_D©a
(
pSPI
, 
pXfSëup
);

259  
SUCCESS
;

260 
	}
}

263 
uöt32_t
 
	$Chù_SPIM_GëClockR©e
(
LPC_SPI_T
 *
pSPI
)

265  
	`Chù_Clock_GëSy°emClockR©e
(Ë/ ((
pSPI
->
DIV
 & ~
SPI_DIV_RESERVED
) + 1);

266 
	}
}

269 
uöt32_t
 
	$Chù_SPIM_SëClockR©e
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
øã
)

271 
uöt32_t
 
ba£Clock
, 
div
;

274 
ba£Clock
 = 
	`Chù_Clock_GëSy°emClockR©e
();

277 
div
 = 
ba£Clock
 / 
øã
;

280 i‡(
div
 == 0) {

281 
div
 = 1;

283 i‡(
div
 > 0x10000) {

284 
div
 = 0x10000;

286 
pSPI
->
DIV
 = 
div
 - 1;

288  
	`Chù_SPIM_GëClockR©e
(
pSPI
);

289 
	}
}

292 
	$Chù_SPIM_DñayC⁄fig
(
LPC_SPI_T
 *
pSPI
, 
SPIM_DELAY_CONFIG_T
 *
pC⁄fig
)

294 
pSPI
->
DLY
 = (
	`SPI_DLY_PRE_DELAY
(
pC⁄fig
->
PªDñay
) |

295 
	`SPI_DLY_POST_DELAY
(
pC⁄fig
->
Po°Dñay
) |

296 
	`SPI_DLY_FRAME_DELAY
(
pC⁄fig
->
FømeDñay
) |

297 
	`SPI_DLY_TRANSFER_DELAY
(
pC⁄fig
->
Tøns„rDñay
 - 1));

298 
	}
}

301 
	$Chù_SPIM_As£πSSEL
(
LPC_SPI_T
 *
pSPI
, 
uöt8_t
 
s£lNum
)

303 
uöt32_t
 
ªg
;

305 
ªg
 = 
pSPI
->
TXCTRL
 & 
SPI_TXDATCTL_CTRLMASK
;

308 
ªg
 &~
	`SPI_TXDATCTL_DEASSERTNUM_SSEL
(
s£lNum
);

310 
pSPI
->
TXCTRL
 = 
ªg
;

311 
	}
}

314 
	$Chù_SPIM_DeAs£πSSEL
(
LPC_SPI_T
 *
pSPI
, 
uöt8_t
 
s£lNum
)

316 
uöt32_t
 
ªg
;

318 
ªg
 = 
pSPI
->
TXCTRL
 & 
SPI_TXDATCTL_CTRLMASK
;

319 
pSPI
->
TXCTRL
 = 
ªg
 | 
	`SPI_TXDATCTL_DEASSERTNUM_SSEL
(
s£lNum
);

320 
	}
}

323 
	$Chù_SPIM_X„rH™dÀr
(
LPC_SPI_T
 *
pSPI
, 
SPIM_XFER_T
 *
x„r
)

325 
uöt32_t
 
d©a
;

326 
uöt8_t
 
Êí
;

329 
Êí
 = ((
pSPI
->
TXCTRL
 & ~
SPI_TXCTRL_RESERVED
) >> 24) & 0xF;

332 i‡((
	`Chù_SPI_GëSètus
(
pSPI
Ë& 
SPI_STAT_SSA
) != 0) {

333 
	`Chù_SPI_CÀ¨Sètus
(
pSPI
, 
SPI_STAT_SSA
);

336 
x„r
->
pCB
->
	`ma°îX„rCSAs£π
(xfer);

340 i‡((
	`Chù_SPI_GëSètus
(
pSPI
Ë& 
SPI_STAT_SSD
) != 0) {

341 
	`Chù_SPI_CÀ¨Sètus
(
pSPI
, 
SPI_STAT_SSD
);

344 i‡(
xmôOn
 =
Ál£
) {

345 
x„r
->
pCB
->
	`mMa°îX„rD⁄e
(xfer);

350 ((
	`Chù_SPI_GëSètus
(
pSPI
Ë& 
SPI_STAT_TXRDY
Ë!0Ë&& (
xmôOn
 =
åue
)) {

351 i‡((
x„r
->
txCou¡
 =1Ë&& (x„r->
ãrmö©e
)) {

353 
	`Chù_SPIM_F‹˚EndOfTøns„r
(
pSPI
);

354 
xmôOn
 = 
Ál£
;

356 i‡(
x„r
->
txCou¡
 == 0) {

358 
x„r
->
pCB
->
	`ma°îX„rSíd
(xfer);

361 i‡(
x„r
->
txCou¡
 > 0) {

363 i‡(
x„r
->
pTXD©a8
 =
NULL
) {

364 
d©a
 = 0;

368 i‡(
Êí
 > 8) {

369 
d©a
 = (
uöt32_t
Ë*
x„r
->
pTXD©a16
;

370 
x„r
->
pTXD©a16
++;

373 
d©a
 = (
uöt32_t
Ë*
x„r
->
pTXD©a8
;

374 
x„r
->
pTXD©a8
++;

377 
x„r
->
d©aTX„ºed
++;

380 
	`Chù_SPI_WrôeTXD©a
(
pSPI
, 
d©a
);

381 
x„r
->
txCou¡
--;

386 (
	`Chù_SPI_GëSètus
(
pSPI
Ë& 
SPI_STAT_RXRDY
) != 0) {

388 
d©a
 = 
	`Chù_SPI_RódRawRXFifo
(
pSPI
);

391 i‡(
x„r
->
pRXD©a8
 !
NULL
) {

393 i‡(
x„r
->
rxCou¡
 == 0) {

395 
x„r
->
pCB
->
	`ma°îX„rRecv
(xfer);

399 i‡(
x„r
->
rxCou¡
 > 0) {

400 i‡(
Êí
 > 8) {

401 *
x„r
->
pRXD©a16
 = (
uöt16_t
Ë(
d©a
 & 0xFFFF);

402 
x„r
->
pRXD©a16
++;

405 *
x„r
->
pRXD©a8
 = (
uöt8_t
Ë(
d©a
 & 0xFF);

406 
x„r
->
pRXD©a8
++;

409 
x„r
->
d©aRX„ºed
++;

410 
x„r
->
rxCou¡
--;

414 
	}
}

417 
	$Chù_SPIM_X„r
(
LPC_SPI_T
 *
pSPI
, 
SPIM_XFER_T
 *
x„r
)

420 
pSPI
->
TXCTRL
 = 
x„r
->
›ti⁄s
 | 
SPI_TXDATCTL_DEASSERT_ALL
;

421 
	`Chù_SPIM_As£πSSEL
(
pSPI
, 
x„r
->
s£lNum
);

424 
x„r
->
d©aRX„ºed
 = x„r->
d©aTX„ºed
 = 0;

427 
xmôOn
 = 
åue
;

428 
	`Chù_SPIM_X„rH™dÀr
(
pSPI
, 
x„r
);

429 
	}
}

432 
	$Chù_SPIM_X„rBlockög
(
LPC_SPI_T
 *
pSPI
, 
SPIM_XFER_T
 *
x„r
)

435 
	`Chù_SPIM_X„r
(
pSPI
, 
x„r
);

438 
xmôOn
 =
åue
) {

439 
	`Chù_SPIM_X„rH™dÀr
(
pSPI
, 
x„r
);

441 
	}
}

444 
uöt32_t
 
	$Chù_SPIS_X„rH™dÀr
(
LPC_SPI_T
 *
pSPI
, 
SPIS_XFER_T
 *
x„r
)

446 
uöt32_t
 
°©îr
, 
d©a
;

447 
uöt8_t
 
Êí
;

450 
Êí
 = ((
pSPI
->
TXCTRL
 & ~
SPI_TXCTRL_RESERVED
) >> 24) & 0xF;

454 
°©îr
 = 
	`Chù_SPI_GëSètus
(
pSPI
Ë& (
SPI_STAT_RXOV
 | 
SPI_STAT_TXUR
);

455 i‡(
°©îr
 != 0) {

456 
	`Chù_SPI_CÀ¨Sètus
(
pSPI
, 
°©îr
);

460 i‡((
	`Chù_SPI_GëSètus
(
pSPI
Ë& 
SPI_STAT_SSA
) != 0) {

461 
	`Chù_SPI_CÀ¨Sètus
(
pSPI
, 
SPI_STAT_SSA
);

465 
x„r
->
s£lNum
 = 
	`Chù_SPIS_FödSSEL
(
pSPI
, 
	`Chù_SPI_RódRawRXFifo
(pSPI));

468 
x„r
->
pCB
->
	`¶aveX„rCSAs£π
(xfer);

472 i‡((
	`Chù_SPI_GëSètus
(
pSPI
Ë& 
SPI_STAT_SSD
) != 0) {

473 
	`Chù_SPI_CÀ¨Sètus
(
pSPI
, 
SPI_STAT_SSD
);

474 
dós£πed
 = 
åue
;

475 
x„r
->
pCB
->
	`¶aveX„rCSDeAs£π
(xfer);

479 (
	`Chù_SPI_GëSètus
(
pSPI
Ë& 
SPI_STAT_TXRDY
) != 0) {

480 i‡(
x„r
->
txCou¡
 == 0) {

482 
x„r
->
pCB
->
	`¶aveX„rSíd
(xfer);

486 i‡((
x„r
->
txCou¡
 =0Ë|| (x„r->
pTXD©a8
 =
NULL
)) {

487 
d©a
 = 0;

491 i‡(
Êí
 > 8) {

492 
d©a
 = (
uöt32_t
Ë*
x„r
->
pTXD©a16
;

493 
x„r
->
pTXD©a16
++;

496 
d©a
 = (
uöt32_t
Ë*
x„r
->
pTXD©a8
;

497 
x„r
->
pTXD©a8
++;

500 
x„r
->
d©aTX„ºed
++;

501 
x„r
->
txCou¡
--;

504 
	`Chù_SPI_WrôeTXD©a
(
pSPI
, 
d©a
);

508 (
	`Chù_SPI_GëSètus
(
pSPI
Ë& 
SPI_STAT_RXRDY
) != 0) {

510 
d©a
 = 
	`Chù_SPI_RódRawRXFifo
(
pSPI
);

513 i‡(
x„r
->
pRXD©a8
 !
NULL
) {

515 i‡(
x„r
->
rxCou¡
 == 0) {

517 
x„r
->
pCB
->
	`¶aveX„rRecv
(xfer);

521 i‡(
Êí
 > 8) {

522 *
x„r
->
pRXD©a16
 = (
uöt16_t
Ë(
d©a
 & 0xFFFF);

523 
x„r
->
pRXD©a16
++;

526 *
x„r
->
pRXD©a8
 = (
uöt8_t
Ë(
d©a
 & 0xFF);

527 
x„r
->
pRXD©a8
++;

530 
x„r
->
d©aRX„ºed
++;

531 
x„r
->
rxCou¡
--;

535  
°©îr
;

536 
	}
}

539 
uöt32_t
 
	$Chù_SPIS_X„rBlockög
(
LPC_SPI_T
 *
pSPI
, 
SPIS_XFER_T
 *
x„r
)

541 
uöt32_t
 
°©us
 = 0;

544 
dós£πed
 = 
Ál£
;

545 (!
dós£πed
Ë&& (
°©us
 == 0)) {

546 
°©us
 = 
	`Chù_SPIS_X„rH™dÀr
(
pSPI
, 
x„r
);

549  
°©us
;

550 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/spi/spi_8xx.h

32 #i‚de‡
__SPI_8XX_H__


33 
	#__SPI_8XX_H__


	)

35 #ifde‡
__˝lu•lus


47 
__IO
 
uöt32_t
 
CFG
;

48 
__IO
 
uöt32_t
 
DLY
;

49 
__IO
 
uöt32_t
 
STAT
;

50 
__IO
 
uöt32_t
 
INTENSET
;

51 
__O
 
uöt32_t
 
INTENCLR
;

52 
__I
 
uöt32_t
 
RXDAT
;

53 
__IO
 
uöt32_t
 
TXDATCTL
;

54 
__IO
 
uöt32_t
 
TXDAT
;

55 
__IO
 
uöt32_t
 
TXCTRL
;

56 
__IO
 
uöt32_t
 
DIV
;

57 
__I
 
uöt32_t
 
INTSTAT
;

58 } 
	tLPC_SPI_T
;

61 
	#SPI_CFG_RESERVED
 ((1<<1)|(1<<6)|0xffff„00)

	)

62 
	#SPI_DLY_RESERVED
 0xffff0000

	)

63 
	#SPI_STAT_RESERVED
 (~0x1ff)

	)

64 
	#SPI_INTENSET_RESERVED
 (~0x3f)

	)

65 
	#SPI_INTENCLR_RESERVED
 (~0x3f)

	)

66 
	#SPI_RXDAT_RESERVED
 ((7<<17)|(0x7ffu<<21))

	)

67 
	#SPI_TXDATCTL_RESERVED
 ((7<<17)|(1<<23)|(0xfu<<28))

	)

68 
	#SPI_TXDAT_RESERVED
 0xffff0000

	)

69 
	#SPI_TXCTRL_RESERVED
 (0xffff|(7<<17)|(1<<23)|(0xfu<<28))

	)

70 
	#SPI_DIV_RESERVED
 0xffff0000

	)

71 
	#SPI_INTSTAT_RESERVED
 (~0x3f)

	)

76 
	#SPI_CFG_BITMASK
 (0x1BDË

	)

77 
	#SPI_CFG_SPI_EN
 (1 << 0Ë

	)

78 
	#SPI_CFG_SLAVE_EN
 (0 << 0Ë

	)

79 
	#SPI_CFG_MASTER_EN
 (1 << 2Ë

	)

80 
	#SPI_CFG_MSB_FIRST_EN
 (0 << 3Ë

	)

81 
	#SPI_CFG_LSB_FIRST_EN
 (1 << 3Ë

	)

82 
	#SPI_CFG_CPHA_FIRST
 (0 << 4Ë

	)

83 
	#SPI_CFG_CPHA_SECOND
 (1 << 4Ë

	)

84 
	#SPI_CFG_CPOL_LO
 (0 << 5Ë

	)

85 
	#SPI_CFG_CPOL_HI
 (1 << 5Ë

	)

86 
	#SPI_CFG_LBM_EN
 (1 << 7Ë

	)

87 
	#SPI_CFG_SPOL_LO
 (0 << 8Ë

	)

88 
	#SPI_CFG_SPOL_HI
 (1 << 8Ë

	)

89 
	#SPI_CFG_SPOLNUM_HI
(
n
Ë(1 << (“Ë+ 8)Ë

	)

94 
	#SPI_DLY_BITMASK
 (0xFFFFË

	)

95 
	#SPI_DLY_PRE_DELAY
(
n
Ë((“Ë& 0x0FË<< 0Ë

	)

96 
	#SPI_DLY_POST_DELAY
(
n
Ë((“Ë& 0x0FË<< 4Ë

	)

97 
	#SPI_DLY_FRAME_DELAY
(
n
Ë((“Ë& 0x0FË<< 8Ë

	)

98 
	#SPI_DLY_TRANSFER_DELAY
(
n
Ë((“Ë& 0x0FË<< 12Ë

	)

103 
	#SPI_STAT_BITMASK
 (0x1FFË

	)

104 
	#SPI_STAT_RXRDY
 (1 << 0Ë

	)

105 
	#SPI_STAT_TXRDY
 (1 << 1Ë

	)

106 
	#SPI_STAT_RXOV
 (1 << 2Ë

	)

107 
	#SPI_STAT_TXUR
 (1 << 3Ë

	)

108 
	#SPI_STAT_SSA
 (1 << 4Ë

	)

109 
	#SPI_STAT_SSD
 (1 << 5Ë

	)

110 
	#SPI_STAT_STALLED
 (1 << 6Ë

	)

111 
	#SPI_STAT_EOT
 (1 << 7Ë

	)

112 
	#SPI_STAT_MSTIDLE
 (1 << 8Ë

	)

117 
	#SPI_INTENSET_BITMASK
 (0x3FË

	)

118 
	#SPI_INTENSET_RXDYEN
 (1 << 0Ë

	)

119 
	#SPI_INTENSET_TXDYEN
 (1 << 1Ë

	)

120 
	#SPI_INTENSET_RXOVEN
 (1 << 2Ë

	)

121 
	#SPI_INTENSET_TXUREN
 (1 << 3Ë

	)

122 
	#SPI_INTENSET_SSAEN
 (1 << 4Ë

	)

123 
	#SPI_INTENSET_SSDEN
 (1 << 5Ë

	)

128 
	#SPI_INTENCLR_BITMASK
 (0x3FË

	)

129 
	#SPI_INTENCLR_RXDYEN
 (1 << 0Ë

	)

130 
	#SPI_INTENCLR_TXDYEN
 (1 << 1Ë

	)

131 
	#SPI_INTENCLR_RXOVEN
 (1 << 2Ë

	)

132 
	#SPI_INTENCLR_TXUREN
 (1 << 3Ë

	)

133 
	#SPI_INTENCLR_SSAEN
 (1 << 4Ë

	)

134 
	#SPI_INTENCLR_SSDEN
 (1 << 5Ë

	)

139 
	#SPI_RXDAT_BITMASK
 (0x1FFFFFË

	)

140 
	#SPI_RXDAT_DATA
(
n
Ë(“Ë& 0xFFFFË

	)

141 
	#SPI_RXDAT_RXSSELN_ACTIVE
 (0 << 16Ë

	)

142 
	#SPI_RXDAT_RXSSELN_INACTIVE
 ((1 << 16Ë

	)

143 
	#SPI_RXDAT_RXSSELNUM_INACTIVE
(
n
Ë(1 << (“Ë+ 16)Ë

	)

144 
	#SPI_RXDAT_SOT
 (1 << 20Ë

	)

149 
	#SPI_TXDATCTL_BITMASK
 (0xF71FFFFË

	)

150 
	#SPI_TXDATCTL_DATA
(
n
Ë(“Ë& 0xFFFFË

	)

151 
	#SPI_TXDATCTL_CTRLMASK
 (0xF710000Ë

	)

152 
	#SPI_TXDATCTL_ASSERT_SSEL
 (0 << 16Ë

	)

153 
	#SPI_TXDATCTL_DEASSERT_SSEL
 (1 << 16Ë

	)

154 
	#SPI_TXDATCTL_DEASSERTNUM_SSEL
(
n
Ë(1 << (“Ë+ 16)Ë

	)

155 
	#SPI_TXDATCTL_DEASSERT_ALL
 (0xF << 16Ë

	)

156 
	#SPI_TXDATCTL_EOT
 (1 << 20Ë

	)

157 
	#SPI_TXDATCTL_EOF
 (1 << 21Ë

	)

158 
	#SPI_TXDATCTL_RXIGNORE
 (1 << 22Ë

	)

159 
	#SPI_TXDATCTL_FLEN
(
n
Ë((“Ë& 0x0FË<< 24Ë

	)

164 
	#SPI_TXDAT_DATA
(
n
Ë(“Ë& 0xFFFFË

	)

169 
	#SPI_TXCTL_BITMASK
 (0xF7F0000Ë

	)

170 
	#SPI_TXCTL_ASSERT_SSEL
 (0 << 16Ë

	)

171 
	#SPI_TXCTL_DEASSERT_SSEL
 (1 << 16Ë

	)

172 
	#SPI_TXCTL_DEASSERTNUM_SSEL
(
n
Ë(1 << (“Ë+ 16)Ë

	)

173 
	#SPI_TXDATCTL_DEASSERT_ALL
 (0xF << 16Ë

	)

174 
	#SPI_TXCTL_EOT
 (1 << 20Ë

	)

175 
	#SPI_TXCTL_EOF
 (1 << 21Ë

	)

176 
	#SPI_TXCTL_RXIGNORE
 (1 << 22Ë

	)

177 
	#SPI_TXCTL_FLEN
(
n
Ë(((“Ë- 1Ë& 0x0FË<< 24Ë

	)

178 
	#SPI_TXCTL_FLENMASK
 (0xF << 24Ë

	)

183 
	#SPI_DIV_VAL
(
n
Ë(“Ë& 0xFFFFË

	)

188 
	#SPI_INTSTAT_BITMASK
 (0x3FË

	)

189 
	#SPI_INTSTAT_RXRDY
 (1 << 0Ë

	)

190 
	#SPI_INTSTAT_TXRDY
 (1 << 1Ë

	)

191 
	#SPI_INTSTAT_RXOV
 (1 << 2Ë

	)

192 
	#SPI_INTSTAT_TXUR
 (1 << 3Ë

	)

193 
	#SPI_INTSTAT_SSA
 (1 << 4Ë

	)

194 
	#SPI_INTSTAT_SSD
 (1 << 5Ë

	)

197 
	#SPI_CLOCK_CPHA0_CPOL0
 (
SPI_CFG_CPOL_LO
 | 
SPI_CFG_CPHA_FIRST
Ë

	)

198 
	#SPI_CLOCK_MODE0
 
SPI_CLOCK_CPHA0_CPOL0


	)

199 
	#SPI_CLOCK_CPHA1_CPOL0
 
SPI_CFG_CPOL_LO
 | 
SPI_CFG_CPHA_SECOND


	)

200 
	#SPI_CLOCK_MODE1
 
SPI_CLOCK_CPHA1_CPOL0


	)

201 
	#SPI_CLOCK_CPHA0_CPOL1
 
SPI_CFG_CPOL_HI
 | 
SPI_CFG_CPHA_FIRST


	)

202 
	#SPI_CLOCK_MODE2
 
SPI_CLOCK_CPHA0_CPOL1


	)

203 
	#SPI_CLOCK_CPHA1_CPOL1
 
SPI_CFG_CPOL_HI
 | 
SPI_CFG_CPHA_SECOND


	)

204 
	#SPI_CLOCK_MODE3
 
SPI_CLOCK_CPHA1_CPOL1


	)

214 
STATIC
 
INLINE
 
Chù_SPI_SëCFGRegBôs
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
bôs
)

217 
pSPI
->
CFG
 = 
bôs
 | (pSPI->CFG & 
SPI_CFG_BITMASK
);

228 
STATIC
 
INLINE
 
Chù_SPI_CÀ¨CFGRegBôs
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
bôs
)

231 
pSPI
->
CFG
 = ~
bôs
 & (pSPI->CFG & 
SPI_CFG_BITMASK
);

239 
STATIC
 
INLINE
 
Chù_SPI_Inô
(
LPC_SPI_T
 *
pSPI
)

242 i‡(
pSPI
 =
LPC_SPI1
) {

243 
Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_SPI1
);

244 
Chù_SYSCTL_PîùhRe£t
(
RESET_SPI1
);

246 
Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_SPI0
);

247 
Chù_SYSCTL_PîùhRe£t
(
RESET_SPI0
);

256 
STATIC
 
INLINE
 
Chù_SPI_DißbÀ
(
LPC_SPI_T
 *
pSPI
)

258 
Chù_SPI_CÀ¨CFGRegBôs
(
pSPI
, 
SPI_CFG_SPI_EN
);

267 
STATIC
 
INLINE
 
Chù_SPI_DeInô
(
LPC_SPI_T
 *
pSPI
)

269 
Chù_SPI_DißbÀ
(
pSPI
);

270 i‡(
pSPI
 =
LPC_SPI1
) {

271 
Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_SPI1
);

273 
Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_SPI0
);

282 
STATIC
 
INLINE
 
Chù_SPI_E«bÀ
(
LPC_SPI_T
 *
pSPI
)

284 
Chù_SPI_SëCFGRegBôs
(
pSPI
, 
SPI_CFG_SPI_EN
);

294 
STATIC
 
INLINE
 
Chù_SPI_E«bÀMa°îMode
(
LPC_SPI_T
 *
pSPI
)

296 
Chù_SPI_SëCFGRegBôs
(
pSPI
, 
SPI_CFG_MASTER_EN
);

299 
pSPI
->
TXCTRL
 = 
SPI_TXDATCTL_DEASSERT_ALL
;

308 
STATIC
 
INLINE
 
Chù_SPI_E«bÀSœveMode
(
LPC_SPI_T
 *
pSPI
)

310 
Chù_SPI_CÀ¨CFGRegBôs
(
pSPI
, 
SPI_CFG_MASTER_EN
);

318 
STATIC
 
INLINE
 
Chù_SPI_E«bÀLSBFú°
(
LPC_SPI_T
 *
pSPI
)

320 
Chù_SPI_SëCFGRegBôs
(
pSPI
, 
SPI_CFG_LSB_FIRST_EN
);

328 
STATIC
 
INLINE
 
Chù_SPI_E«bÀMSBFú°
(
LPC_SPI_T
 *
pSPI
)

330 
Chù_SPI_CÀ¨CFGRegBôs
(
pSPI
, 
SPI_CFG_LSB_FIRST_EN
);

340 
STATIC
 
INLINE
 
Chù_SPI_SëSPIMode
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
mode
)

342 
Chù_SPI_CÀ¨CFGRegBôs
(
pSPI
, (
SPI_CFG_CPOL_HI
 | 
SPI_CFG_CPHA_SECOND
));

343 
Chù_SPI_SëCFGRegBôs
(
pSPI
, (
uöt32_t
Ë
mode
);

353 
STATIC
 
INLINE
 
Chù_SPI_SëCSPﬁHigh
(
LPC_SPI_T
 *
pSPI
, 
uöt8_t
 
csNum
)

355 
Chù_SPI_SëCFGRegBôs
(
pSPI
, 
SPI_CFG_SPOLNUM_HI
(
csNum
));

365 
STATIC
 
INLINE
 
Chù_SPI_SëCSPﬁLow
(
LPC_SPI_T
 *
pSPI
, 
uöt8_t
 
csNum
)

367 
Chù_SPI_CÀ¨CFGRegBôs
(
pSPI
, 
SPI_CFG_SPOLNUM_HI
(
csNum
));

379 
STATIC
 
INLINE
 
Chù_SPI_C⁄figuªSPI
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
c⁄fig
)

381 
Chù_SPI_CÀ¨CFGRegBôs
(
pSPI
, 
SPI_CFG_MASTER_EN
 | 
SPI_CFG_LSB_FIRST_EN
 |

382 
SPI_CFG_CPHA_SECOND
 | 
SPI_CFG_CPOL_HI
);

383 
Chù_SPI_SëCFGRegBôs
(
pSPI
, 
c⁄fig
);

386 
pSPI
->
TXCTRL
 = 
SPI_TXDATCTL_DEASSERT_ALL
;

396 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SPI_GëSètus
(
LPC_SPI_T
 *
pSPI
)

398  
pSPI
->
STAT
 & ~
SPI_STAT_RESERVED
;

409 
STATIC
 
INLINE
 
Chù_SPI_CÀ¨Sètus
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
Fœg
)

411 
pSPI
->
STAT
 = 
Fœg
;

420 
STATIC
 
INLINE
 
Chù_SPI_E«bÀI¡s
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
Fœg
)

422 
pSPI
->
INTENSET
 = 
Fœg
;

431 
STATIC
 
INLINE
 
Chù_SPI_DißbÀI¡s
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
Fœg
)

433 
pSPI
->
INTENCLR
 = 
Fœg
;

443 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SPI_GëE«bÀdI¡s
(
LPC_SPI_T
 *
pSPI
)

445  
pSPI
->
INTENSET
 & ~
SPI_INTENSET_RESERVED
;

455 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SPI_GëPídögI¡s
(
LPC_SPI_T
 *
pSPI
)

457  
pSPI
->
INTSTAT
 & ~
SPI_INTSTAT_RESERVED
;

465 
STATIC
 
INLINE
 
Chù_SPI_FlushFifos
(
LPC_SPI_T
 *
pSPI
)

467 
Chù_SPI_DißbÀ
(
pSPI
);

468 
Chù_SPI_E«bÀ
(
pSPI
);

476 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SPI_RódRawRXFifo
(
LPC_SPI_T
 *
pSPI
)

478  
pSPI
->
RXDAT
 & ~
SPI_RXDAT_RESERVED
;

490 
STATIC
 
INLINE
 
uöt32_t
 
Chù_SPI_RódRXD©a
(
LPC_SPI_T
 *
pSPI
)

492  
pSPI
->
RXDAT
 & 0xFFFF;

501 
STATIC
 
INLINE
 
Chù_SPI_WrôeTXD©a
(
LPC_SPI_T
 *
pSPI
, 
uöt16_t
 
d©a
)

503 
pSPI
->
TXDAT
 = (
uöt32_t
Ë
d©a
;

514 
STATIC
 
INLINE
 
Chù_SPI_SëTXCTRLRegBôs
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
bôs
)

516 
pSPI
->
TXCTRL
 = 
bôs
 | (pSPI->TXCTRL & 
SPI_TXDATCTL_CTRLMASK
);

527 
STATIC
 
INLINE
 
Chù_SPI_CÀ¨TXCTRLRegBôs
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
bôs
)

529 
pSPI
->
TXCTRL
 = ~
bôs
 & (pSPI->TXCTRL & 
SPI_TXDATCTL_CTRLMASK
);

540 
STATIC
 
INLINE
 
Chù_SPI_SëTXCé
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
˘æBôs
)

542 
Chù_SPI_SëTXCTRLRegBôs
(
pSPI
, 
˘æBôs
);

553 
STATIC
 
INLINE
 
Chù_SPI_CÀ¨TXCé
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
˘æBôs
)

555 
Chù_SPI_CÀ¨TXCTRLRegBôs
(
pSPI
, 
˘æBôs
);

564 
STATIC
 
INLINE
 
Chù_SPI_SëX„rSize
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
˘æBôs
)

566 
Chù_SPI_CÀ¨TXCTRLRegBôs
(
pSPI
, 
SPI_TXCTL_FLENMASK
);

567 
Chù_SPI_SëTXCTRLRegBôs
(
pSPI
, 
SPI_TXCTL_FLEN
(
˘æBôs
));

582 
SPI_MODE_MASTER
 = 
SPI_CFG_MASTER_EN
,

583 
SPI_MODE_SLAVE
 = 
SPI_CFG_SLAVE_EN
,

584 } 
	tSPI_MODE_T
;

587 
	eIP_SPI_DATA_ORDER
 {

588 
SPI_DATA_MSB_FIRST
 = 
SPI_CFG_MSB_FIRST_EN
,

589 
SPI_DATA_LSB_FIRST
 = 
SPI_CFG_LSB_FIRST_EN
,

590 } 
	tSPI_DATA_ORDER_T
;

593 
	eIP_SPI_SSEL_POL
 {

594 
SPI_SSEL_ACTIVE_LO
 = 
SPI_CFG_SPOL_LO
,

595 
SPI_SSEL_ACTIVE_HI
 = 
SPI_CFG_SPOL_HI
,

596 } 
	tSPI_SSEL_POL_T
;

602 
SPI_MODE_T
 
Mode
;

603 
uöt32_t
 
ClockMode
;

604 
SPI_DATA_ORDER_T
 
D©aOrdî
;

605 
SPI_SSEL_POL_T
 
SSELPﬁ
;

606 
uöt16_t
 
ClkDiv
;

607 } 
	tSPI_CONFIG_T
;

613 
uöt8_t
 
PªDñay
;

614 
uöt8_t
 
Po°Dñay
;

615 
uöt8_t
 
FømeDñay
;

616 
uöt8_t
 
Tøns„rDñay
;

617 } 
	tSPI_DELAY_CONFIG_T
;

623 
uöt16_t
 *
pTx
;

624 
uöt32_t
 
TxC¡
;

625 
uöt16_t
 *
pRx
;

626 
uöt32_t
 
RxC¡
;

627 
uöt32_t
 
Lígth
;

628 
uöt16_t
 
D©aSize
;

629 } 
	tSPI_DATA_SETUP_T
;

637 
uöt32_t
 
Chù_SPI_CÆClkR©eDividî
(
LPC_SPI_T
 *
pSPI
, uöt32_à
bôR©e
);

646 
Chù_SPI_DñayC⁄fig
(
LPC_SPI_T
 *
pSPI
, 
SPI_DELAY_CONFIG_T
 *
pC⁄fig
);

655 
Chù_SPI_I¡_Cmd
(
LPC_SPI_T
 *
pSPI
, 
uöt32_t
 
I¡Mask
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

670 
STATIC
 
INLINE
 
Chù_SPI_E«bÀLo›Back
(
LPC_SPI_T
 *
pSPI
)

672 
pSPI
->
CFG
 = 
SPI_CFG_LBM_EN
 | (pSPI->CFG & ~
SPI_CFG_RESERVED
);

682 
STATIC
 
INLINE
 
Chù_SPI_DißbÀLo›Back
(
LPC_SPI_T
 *
pSPI
)

684 
pSPI
->
CFG
 &(~
SPI_CFG_LBM_EN
Ë& 
SPI_CFG_BITMASK
;

695 
STATIC
 
INLINE
 
Chù_SPI_SëC⁄åﬁInfo
(
LPC_SPI_T
 *
pSPI
, 
uöt8_t
 
FÀn
, 
uöt32_t
 
Fœg
)

697 
pSPI
->
TXCTRL
 = 
Fœg
 | 
SPI_TXDATCTL_FLEN
(
FÀn
 - 1);

707 
STATIC
 
INLINE
 
Chù_SPI_SídFú°Føme_RxIgn‹e
(
LPC_SPI_T
 *
pSPI
, 
uöt16_t
 
D©a
, 
uöt8_t
 
D©aSize
)

709 
pSPI
->
TXDATCTL
 = 
SPI_TXDATCTL_ASSERT_SSEL
 | 
SPI_TXDATCTL_EOF
 | 
SPI_TXDATCTL_RXIGNORE
 | 
SPI_TXDATCTL_FLEN
(

710 
D©aSize
 - 1Ë| 
SPI_TXDATCTL_DATA
(
D©a
);

720 
STATIC
 
INLINE
 
Chù_SPI_SídFú°Føme
(
LPC_SPI_T
 *
pSPI
, 
uöt16_t
 
D©a
, 
uöt8_t
 
D©aSize
)

722 
pSPI
->
TXDATCTL
 = 
SPI_TXDATCTL_ASSERT_SSEL
 | 
SPI_TXDATCTL_EOF
 | 
SPI_TXDATCTL_FLEN
(
D©aSize
 - 1Ë| 
SPI_TXDATCTL_DATA
(

723 
D©a
);

732 
STATIC
 
INLINE
 
Chù_SPI_SídMidFøme
(
LPC_SPI_T
 *
pSPI
, 
uöt16_t
 
D©a
)

734 
pSPI
->
TXDAT
 = 
SPI_TXDAT_DATA
(
D©a
);

744 
STATIC
 
INLINE
 
Chù_SPI_SídLa°Føme_RxIgn‹e
(
LPC_SPI_T
 *
pSPI
, 
uöt16_t
 
D©a
, 
uöt8_t
 
D©aSize
)

746 
pSPI
->
TXDATCTL
 = 
SPI_TXDATCTL_ASSERT_SSEL
 | 
SPI_TXDATCTL_EOF
 | 
SPI_TXDATCTL_EOT
 | 
SPI_TXDATCTL_RXIGNORE
 |

747 
SPI_TXDATCTL_FLEN
(
D©aSize
 - 1Ë| 
SPI_TXDATCTL_DATA
(
D©a
);

757 
STATIC
 
INLINE
 
Chù_SPI_SídLa°Føme
(
LPC_SPI_T
 *
pSPI
, 
uöt16_t
 
D©a
, 
uöt8_t
 
D©aSize
)

759 
pSPI
->
TXDATCTL
 = 
SPI_TXDATCTL_ASSERT_SSEL
 | 
SPI_TXDATCTL_EOF
 | 
SPI_TXDATCTL_EOT
 |

760 
SPI_TXDATCTL_FLEN
(
D©aSize
 - 1Ë| 
SPI_TXDATCTL_DATA
(
D©a
);

768 
STATIC
 
INLINE
 
uöt16_t
 
Chù_SPI_Re˚iveFøme
(
LPC_SPI_T
 *
pSPI
)

770  
SPI_RXDAT_DATA
(
pSPI
->
RXDAT
);

780 
Sètus
 
Chù_SPI_I¡_RWFømes
(
LPC_SPI_T
 *
pSPI
, 
SPI_DATA_SETUP_T
 *
xf_£tup
);

793 
uöt32_t
 
Chù_SPI_RWFømes_Blockög
(
LPC_SPI_T
 *
pSPI
, 
SPI_DATA_SETUP_T
 *
pXfSëup
);

805 
uöt32_t
 
Chù_SPI_WrôeFømes_Blockög
(
LPC_SPI_T
 *
pSPI
, 
SPI_DATA_SETUP_T
 *
pXfSëup
);

817 
uöt32_t
 
Chù_SPI_RódFømes_Blockög
(
LPC_SPI_T
 *
pSPI
, 
SPI_DATA_SETUP_T
 *
pXfSëup
);

834 
uöt32_t
 
Chù_SPIM_GëClockR©e
(
LPC_SPI_T
 *
pSPI
);

844 
uöt32_t
 
Chù_SPIM_SëClockR©e
(
LPC_SPI_T
 *
pSPI
, uöt32_à
øã
);

850 
uöt8_t
 
PªDñay
;

851 
uöt8_t
 
Po°Dñay
;

852 
uöt8_t
 
FømeDñay
;

853 
uöt8_t
 
Tøns„rDñay
;

854 } 
	tSPIM_DELAY_CONFIG_T
;

862 
Chù_SPIM_DñayC⁄fig
(
LPC_SPI_T
 *
pSPI
, 
SPIM_DELAY_CONFIG_T
 *
pC⁄fig
);

873 
STATIC
 
INLINE
 
Chù_SPIM_F‹˚EndOfTøns„r
(
LPC_SPI_T
 *
pSPI
)

875 
pSPI
->
STAT
 = 
SPI_STAT_EOT
;

884 
Chù_SPIM_As£πSSEL
(
LPC_SPI_T
 *
pSPI
, 
uöt8_t
 
s£lNum
);

892 
Chù_SPIM_DeAs£πSSEL
(
LPC_SPI_T
 *
pSPI
, 
uöt8_t
 
s£lNum
);

901 
STATIC
 
INLINE
 
Chù_SPIM_E«bÀLo›Back
(
LPC_SPI_T
 *
pSPI
)

903 
Chù_SPI_SëCFGRegBôs
(
pSPI
, 
SPI_CFG_LBM_EN
);

911 
STATIC
 
INLINE
 
Chù_SPIM_DißbÀLo›Back
(
LPC_SPI_T
 *
pSPI
)

913 
Chù_SPI_CÀ¨CFGRegBôs
(
pSPI
, 
SPI_CFG_LBM_EN
);

916 
SPIM_XFER
;

922 (*
SPIMa°îX„rCSAs£π
)(
	tSPIM_XFER
 *
	tpMa°îX„r
);

928 (*
SPIMa°îX„rSíd
)(
	tSPIM_XFER
 *
	tpMa°îX„r
);

934 (*
SPIMa°îX„rRecv
)(
	tSPIM_XFER
 *
	tpMa°îX„r
);

940 (*
SPIMMa°îX„rCSDeAs£π
)(
	tSPIM_XFER
 *
	tpMa°îX„r
);

946 (*
SPIMMa°îX„rD⁄e
)(
	tSPIM_XFER
 *
	tpMa°îX„r
);

950 
SPIMa°îX„rCSAs£π
 
ma°îX„rCSAs£π
;

951 
SPIMa°îX„rSíd
 
ma°îX„rSíd
;

952 
SPIMa°îX„rRecv
 
ma°îX„rRecv
;

953 
SPIMMa°îX„rCSDeAs£π
 
mMa°îX„rCSDeAs£π
;

954 
SPIMMa°îX„rD⁄e
 
mMa°îX„rD⁄e
;

955 } 
	tSPIM_CALLBACKS_T
;

958 
	sSPIM_XFER
 {

959 c⁄° 
SPIM_CALLBACKS_T
 *
pCB
;

961 
uöt8_t
 *
pRXD©a8
;

962 
uöt16_t
 *
pRXD©a16
;

966 
uöt8_t
 *
pTXD©a8
;

967 
uöt16_t
 *
pTXD©a16
;

970 
uöt32_t
 
›ti⁄s
;

971 
uöt16_t
 
rxCou¡
;

972 
uöt16_t
 
txCou¡
;

973 
uöt16_t
 
d©aRX„ºed
;

974 
uöt16_t
 
d©aTX„ºed
;

975 
uöt8_t
 
s£lNum
;

976 
boﬁ
 
ãrmö©e
;

977 } 
	tSPIM_XFER_T
;

989 
Chù_SPIM_X„rH™dÀr
(
LPC_SPI_T
 *
pSPI
, 
SPIM_XFER_T
 *
x„r
);

1023 
Chù_SPIM_X„r
(
LPC_SPI_T
 *
pSPI
, 
SPIM_XFER_T
 *
x„r
);

1036 
Chù_SPIM_X„rBlockög
(
LPC_SPI_T
 *
pSPI
, 
SPIM_XFER_T
 *
x„r
);

1053 
	#SPI_STAT_CLR_RXOV
 ((
uöt32_t
Ë(1 << 2))

	)

1055 
	#SPI_STAT_CLR_TXUR
 ((
uöt32_t
Ë(1 << 3))

	)

1057 
	#SPI_STAT_CLR_SSA
 ((
uöt32_t
Ë(1 << 4))

	)

1059 
	#SPI_STAT_CLR_SSD
 ((
uöt32_t
Ë(1 << 5))

	)

1061 
SPIS_XFER
;

1068 (*
SPISœveX„rCSAs£π
)(
	tSPIS_XFER
 *
	tpSœveX„r
);

1074 (*
SPISœveX„rSíd
)(
	tSPIS_XFER
 *
	tpSœveX„r
);

1080 (*
SPISœveX„rRecv
)(
	tSPIS_XFER
 *
	tpSœveX„r
);

1086 (*
SPISœveX„rCSDeAs£π
)(
	tSPIS_XFER
 *
	tpSœveX„r
);

1090 
SPISœveX„rCSAs£π
 
¶aveX„rCSAs£π
;

1091 
SPISœveX„rSíd
 
¶aveX„rSíd
;

1092 
SPISœveX„rRecv
 
¶aveX„rRecv
;

1093 
SPISœveX„rCSDeAs£π
 
¶aveX„rCSDeAs£π
;

1094 } 
	tSPIS_CALLBACKS_T
;

1097 
	sSPIS_XFER
 {

1098 c⁄° 
SPIS_CALLBACKS_T
 *
pCB
;

1100 
uöt8_t
 *
pRXD©a8
;

1101 
uöt16_t
 *
pRXD©a16
;

1105 
uöt8_t
 *
pTXD©a8
;

1106 
uöt16_t
 *
pTXD©a16
;

1109 
uöt16_t
 
rxCou¡
;

1110 
uöt16_t
 
txCou¡
;

1111 
uöt16_t
 
d©aRX„ºed
;

1112 
uöt16_t
 
d©aTX„ºed
;

1113 
uöt8_t
 
s£lNum
;

1114 } 
	tSPIS_XFER_T
;

1131 
uöt32_t
 
Chù_SPIS_X„rH™dÀr
(
LPC_SPI_T
 *
pSPI
, 
SPIS_XFER_T
 *
x„r
);

1144 
STATIC
 
INLINE
 
Chù_SPIS_PªBuffSœve
(
LPC_SPI_T
 *
pSPI
, 
SPIS_XFER_T
 *
x„r
)

1146 
Chù_SPIS_X„rH™dÀr
(
pSPI
, 
x„r
);

1160 
uöt32_t
 
Chù_SPIS_X„rBlockög
(
LPC_SPI_T
 *
pSPI
, 
SPIS_XFER_T
 *
x„r
);

1166 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/uart/ring_buffer.c

32 
	~"rög_buf„r.h
"

36 
öt32_t
 
	$RögBuf_Inô
(
rög_buf„r_t
* 
pRB
, 
uöt8_t
* 
buf„r
, 
uöt32_t
 
size
 )

38 
pRB
->
pBuf
 = (
uöt8_t
*)
buf„r
;

39 
pRB
->
size
 = size;

40 
pRB
->
rNdx
 = 0;

41 
pRB
->
wNdx
 = 0;

42 
pRB
->
˙t
 = 0;

44 
	}
}

46 
öt32_t
 
	$RögBuf_Deöô
(
rög_buf„r_t
* 
pRB
 )

48 
pRB
 =ÖRB;;

50 
	}
}

52 
öt32_t
 
	$RögBuf_GëFªeByãs
(
rög_buf„r_t
* 
pRB
 )

54  
pRB
->
size
 -ÖRB->
˙t
;

55 
	}
}

57 
öt32_t
 
	$RögBuf_GëU£dByãs
(
rög_buf„r_t
* 
pRB
)

59  
pRB
->
˙t
;

60 
	}
}

62 
öt32_t
 
	$RögBuf_Wrôe
(
rög_buf„r_t
* 
pRB
, c⁄° 
uöt8_t
* 
d©a
, 
uöt32_t
 
d©aByãs
)

64 
uöt32_t
 
wrôeToEnd
, 
byãsToC›y
;

65 
	`INIT_CRITICAL
();

66 
	`ENTER_CRITICAL
();

68 
wrôeToEnd
 = 
pRB
->
size
 -ÖRB->
wNdx
;

69 
byãsToC›y
 = 
	`MIN
(
d©aByãs
, 
pRB
->
size
 -ÖRB->
˙t
);

71 i‡(
byãsToC›y
 != 0)

74 
	`mem˝y
(&
pRB
->
pBuf
[pRB->
wNdx
], 
d©a
, 
	`MIN
(
byãsToC›y
, 
wrôeToEnd
));

77 i‡(
wrôeToEnd
 < 
byãsToC›y
)

79 
	`mem˝y
(
pRB
->
pBuf
, 
d©a
 + 
wrôeToEnd
, 
byãsToC›y
 - writeToEnd);

84 
pRB
->
wNdx
 = (pRB->wNdx + 
byãsToC›y
Ë%ÖRB->
size
;

85 
pRB
->
˙t
 +
d©aByãs
;

87 
	`LEAVE_CRITICAL
();

88  
byãsToC›y
;

89 
	}
}

91 
öt32_t
 
	$RögBuf_Wrôe1Byã
(
rög_buf„r_t
* 
pRB
, c⁄° 
uöt8_t
 *
pcD©a
)

93 
uöt32_t
 
ªt
 = 0;

94 
	`INIT_CRITICAL
();

95 
	`ENTER_CRITICAL
();

96 i‡(
pRB
->
˙t
 <ÖRB->
size
)

98 
pRB
->
pBuf
[pRB->
wNdx
] = 
pcD©a
[0];

99 
pRB
->
wNdx
 = (pRB->wNdx + 1Ë%ÖRB->
size
;

100 
pRB
->
˙t
++;

101 
ªt
 = 1;

103 
	`LEAVE_CRITICAL
();

104  
ªt
;

105 
	}
}

107 
öt32_t
 
	$_¥vRögBuf_Ród
(
rög_buf„r_t
* 
pRB
, 
uöt8_t
* 
d©a
, 
uöt32_t
 
d©aByãs
, uöt32_à
isToFªe
)

109 
uöt32_t
 
ªadToEnd
, 
byãsToC›y
;

110 
	`INIT_CRITICAL
();

111 
	`ENTER_CRITICAL
();

112 
ªadToEnd
 = 
pRB
->
size
 -ÖRB->
rNdx
;

113 
byãsToC›y
 = 
	`MIN
(
d©aByãs
, 
pRB
->
˙t
);

114 i‡(
byãsToC›y
 != 0)

116 
	`mem˝y
(
d©a
, &
pRB
->
pBuf
[pRB->
rNdx
], 
	`MIN
(
byãsToC›y
, 
ªadToEnd
));

118 i‡(
ªadToEnd
 < 
byãsToC›y
)

119 
	`mem˝y
(
d©a
 + 
ªadToEnd
, &
pRB
->
pBuf
[0], 
byãsToC›y
 -ÑeadToEnd);

121 i‡(
isToFªe
)

123 
pRB
->
rNdx
 = (pRB->rNdx + 
byãsToC›y
Ë%ÖRB->
size
;

124 
pRB
->
˙t
 -
byãsToC›y
;

127 
	`LEAVE_CRITICAL
();

129  
byãsToC›y
;

130 
	}
}

132 
öt32_t
 
	$RögBuf_Ród
(
rög_buf„r_t
* 
pRB
, 
uöt8_t
* 
d©a
, 
uöt32_t
 
d©aByãs
)

134  
	`_¥vRögBuf_Ród
(
pRB
, 
d©a
, 
d©aByãs
, 1);

135 
	}
}

137 
öt32_t
 
	$RögBuf_C›y
(
rög_buf„r_t
* 
pRB
, 
uöt8_t
* 
d©a
, 
uöt32_t
 
d©aByãs
)

139  
	`_¥vRögBuf_Ród
(
pRB
, 
d©a
, 
d©aByãs
, 0);

140 
	}
}

142 
öt32_t
 
	$RögBuf_Ród1Byã
(
rög_buf„r_t
* 
pRB
, 
uöt8_t
 *
pD©a
)

144 
uöt32_t
 
ªt
 = 0;

145 
	`INIT_CRITICAL
();

146 
	`ENTER_CRITICAL
();

147 i‡(
pRB
->
˙t
 != 0)

149 
pD©a
[0] = 
pRB
->
pBuf
[pRB->
rNdx
];

150 
pRB
->
rNdx
 = (pRB->rNdx + 1Ë%ÖRB->
size
;

151 
pRB
->
˙t
--;

152 
ªt
 = 1;

154 
	`LEAVE_CRITICAL
();

155  
ªt
;

156 
	}
}

158 
öt32_t
 
	$RögBuf_Pìk
(
rög_buf„r_t
* 
pRB
, 
uöt8_t
 **
µD©a
)

160 
uöt32_t
 
ªadToEnd
 = 
pRB
->
size
 -ÖRB->
rNdx
;

161 
uöt32_t
 
c⁄tiguousByãs
;

162 *
µD©a
 = &(
pRB
->
pBuf
[pRB->
rNdx
]);

163 
c⁄tiguousByãs
 = 
	`MIN
(
ªadToEnd
, (ªadToEnd + 
pRB
->
wNdx
Ë%ÖRB->
size
);

164  
c⁄tiguousByãs
;

165 
	}
}

167 
öt32_t
 
	$RögBuf_Fªe
(
rög_buf„r_t
* 
pRB
, 
uöt32_t
 
byãsToFªe
)

169 
	`INIT_CRITICAL
();

170 
	`ENTER_CRITICAL
();

171 
pRB
->
rNdx
 = (pRB->rNdx + 
byãsToFªe
Ë%ÖRB->
size
;

172 
pRB
->
˙t
 -
byãsToFªe
;

173 
	`LEAVE_CRITICAL
();

174  
byãsToFªe
;

175 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/uart/ring_buffer.h

32 #i‚de‡
__RING_BUFFER_H_


33 
	#__RING_BUFFER_H_


	)

34 
	~<°döt.h
>

35 
	~<°rög.h
>

37 
	#RINGBUF_IRQ_SAFE


	)

38 #ifde‡
RINGBUF_IRQ_SAFE


39 
	~<cmsis.h
>

40 
	#INIT_CRITICAL
(Ë
uöt32_t
 
¥iMask
 = 
	`__gë_PRIMASK
()

	)

41 
	#ENTER_CRITICAL
(Ë
	`__£t_PRIMASK
(1)

	)

42 
	#LEAVE_CRITICAL
(Ë
	`__£t_PRIMASK
(
¥iMask
)

	)

44 
	#INIT_CRITICAL
()

	)

45 
	#ENTER_CRITICAL
()

	)

46 
	#LEAVE_CRITICAL
()

	)

52 
uöt8_t
 *
	mpBuf
;

53 
uöt32_t
 
	msize
;

54 
uöt32_t
 
	m˙t
;

55 
uöt32_t
 
	mrNdx
;

56 
uöt32_t
 
	mwNdx
;

58 } 
	trög_buf„r_t
, 
	tRINGBUFF_T
;

60 #i‚de‡
MIN


61 
	#MIN
(
x
,
y
Ë((xË< (yË? (xË: (y))

	)

71 
öt32_t
 
RögBuf_Inô
(
rög_buf„r_t
 *
pRB
, 
uöt8_t
 *
pBuf„r
, 
uöt32_t
 
size
);

81 
öt32_t
 
RögBuf_Wrôe
(
rög_buf„r_t
* 
pRB
, c⁄° 
uöt8_t
 *
pcD©a
, 
uöt32_t
 
d©aByãs
);

90 
öt32_t
 
RögBuf_Wrôe1Byã
(
rög_buf„r_t
* 
pRB
, c⁄° 
uöt8_t
 *
pcD©a
);

100 
öt32_t
 
RögBuf_Ród
(
rög_buf„r_t
* 
pRB
, 
uöt8_t
 *
pD©a
, 
uöt32_t
 
d©aByãs
);

109 
öt32_t
 
RögBuf_Ród1Byã
(
rög_buf„r_t
* 
pRB
, 
uöt8_t
 *
pD©a
);

118 
öt32_t
 
RögBuf_C›y
(
rög_buf„r_t
* 
pRB
, 
uöt8_t
 *
pD©a
, 
uöt32_t
 
d©aByãs
);

129 
öt32_t
 
RögBuf_Pìk
(
rög_buf„r_t
* 
pRB
, 
uöt8_t
 **
µD©a
);

137 
öt32_t
 
RögBuf_Fªe
(
rög_buf„r_t
* 
pRB
, 
uöt32_t
 
byãsToFªe
);

144 
öt32_t
 
RögBuf_GëFªeByãs
(
rög_buf„r_t
* 
pRB
);

151 
öt32_t
 
RögBuf_GëU£dByãs
(
rög_buf„r_t
* 
pRB
);

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/uart/uart_8xx.c

32 
	~"chù.h
"

33 
	~"u¨t_8xx.h
"

47 
CHIP_SYSCTL_CLOCK_T
 
	$gëUARTClockID
(
LPC_USART_T
 *
pUART
)

49 i‡(
pUART
 =
LPC_USART0
) {

50  
SYSCTL_CLOCK_UART0
;

52 i‡(
pUART
 =
LPC_USART1
) {

53  
SYSCTL_CLOCK_UART1
;

56  
SYSCTL_CLOCK_UART2
;

57 
	}
}

64 
	$Chù_UART_Inô
(
LPC_USART_T
 *
pUART
)

67 
	`Chù_Clock_E«bÀPîùhClock
(
	`gëUARTClockID
(
pUART
));

70 i‡(
pUART
 =
LPC_USART0
) {

72 
	`Chù_SYSCTL_PîùhRe£t
(
RESET_USART0
);

74 i‡(
pUART
 =
LPC_USART1
) {

76 
	`Chù_SYSCTL_PîùhRe£t
(
RESET_USART1
);

80 
	`Chù_SYSCTL_PîùhRe£t
(
RESET_USART2
);

82 
	}
}

85 
	$Chù_UART_DeInô
(
LPC_USART_T
 *
pUART
)

88 
	`Chù_Clock_DißbÀPîùhClock
(
	`gëUARTClockID
(
pUART
));

89 
	}
}

92 
	$Chù_UART_Síd
(
LPC_USART_T
 *
pUART
, c⁄° *
d©a
, 
numByãs
)

94 
£¡
 = 0;

95 
uöt8_t
 *
p8
 = (uöt8_à*Ë
d©a
;

98 (
£¡
 < 
numByãs
) &&

99 ((
	`Chù_UART_GëSètus
(
pUART
Ë& 
UART_STAT_TXRDY
) != 0)) {

100 
	`Chù_UART_SídByã
(
pUART
, *
p8
);

101 
p8
++;

102 
£¡
++;

105  
£¡
;

106 
	}
}

109 
	$Chù_UART_SídBlockög
(
LPC_USART_T
 *
pUART
, c⁄° *
d©a
, 
numByãs
)

111 
∑ss
, 
£¡
 = 0;

112 
uöt8_t
 *
p8
 = (uöt8_à*Ë
d©a
;

114 
numByãs
 > 0) {

115 
∑ss
 = 
	`Chù_UART_Síd
(
pUART
, 
p8
, 
numByãs
);

116 
numByãs
 -
∑ss
;

117 
£¡
 +
∑ss
;

118 
p8
 +
∑ss
;

121  
£¡
;

122 
	}
}

125 
	$Chù_UART_Ród
(
LPC_USART_T
 *
pUART
, *
d©a
, 
numByãs
)

127 
ªadByãs
 = 0;

128 
uöt8_t
 *
p8
 = (uöt8_à*Ë
d©a
;

131 (
ªadByãs
 < 
numByãs
) &&

132 ((
	`Chù_UART_GëSètus
(
pUART
Ë& 
UART_STAT_RXRDY
) != 0)) {

133 *
p8
 = 
	`Chù_UART_RódByã
(
pUART
);

134 
p8
++;

135 
ªadByãs
++;

138  
ªadByãs
;

139 
	}
}

142 
	$Chù_UART_RódBlockög
(
LPC_USART_T
 *
pUART
, *
d©a
, 
numByãs
)

144 
∑ss
, 
ªadByãs
 = 0;

145 
uöt8_t
 *
p8
 = (uöt8_à*Ë
d©a
;

147 
numByãs
 > 0) {

148 
∑ss
 = 
	`Chù_UART_Ród
(
pUART
, 
p8
, 
numByãs
);

149 
numByãs
 -
∑ss
;

150 
ªadByãs
 +
∑ss
;

151 
p8
 +
∑ss
;

154  
ªadByãs
;

155 
	}
}

158 
	$Chù_UART_SëBaud
(
LPC_USART_T
 *
pUART
, 
uöt32_t
 
baudøã
)

160 
uöt32_t
 
baudR©eGíî©‹
;

161 
baudR©eGíî©‹
 = 
	`Chù_Clock_GëUSARTNBa£ClockR©e
(Ë/ (16 * 
baudøã
);

162 
pUART
->
BRG
 = 
baudR©eGíî©‹
 - 1;

163 
	}
}

166 
	$Chù_UART_RXI¡H™dÀrRB
(
LPC_USART_T
 *
pUART
, 
RINGBUFF_T
 *
pRB
)

169 (
	`Chù_UART_GëSètus
(
pUART
Ë& 
UART_STAT_RXRDY
) != 0) {

170 
uöt8_t
 
ch
 = 
	`Chù_UART_RódByã
(
pUART
);

171 
	`RögBuf_Wrôe
(
pRB
, &
ch
, 1);

173 
	}
}

176 
	$Chù_UART_TXI¡H™dÀrRB
(
LPC_USART_T
 *
pUART
, 
RINGBUFF_T
 *
pRB
)

178 
uöt8_t
 
ch
;

181 ((
	`Chù_UART_GëSètus
(
pUART
Ë& 
UART_STAT_TXRDY
) != 0) &&

182 
	`RögBuf_Ród
(
pRB
, &
ch
, 1)) {

183 
	`Chù_UART_SídByã
(
pUART
, 
ch
);

185 
	}
}

188 
uöt32_t
 
	$Chù_UART_SídRB
(
LPC_USART_T
 *
pUART
, 
RINGBUFF_T
 *
pRB
, c⁄° *
d©a
, 
cou¡
)

190 
uöt32_t
 
ªt
;

191 
uöt8_t
 *
p8
 = (uöt8_à*Ë
d©a
;

194 
	`Chù_UART_I¡DißbÀ
(
pUART
, 
UART_INTEN_TXRDY
);

197 
ªt
 = 
	`RögBuf_Wrôe
(
pRB
, 
p8
, 
cou¡
);

198 
	`Chù_UART_TXI¡H™dÀrRB
(
pUART
, 
pRB
);

201 
ªt
 +
	`RögBuf_Wrôe
(
pRB
, (
p8
 +Ñë), (
cou¡
 -Ñet));

204 
	`Chù_UART_I¡E«bÀ
(
pUART
, 
UART_INTEN_TXRDY
);

206  
ªt
;

207 
	}
}

210 
	$Chù_UART_RódRB
(
LPC_USART_T
 *
pUART
, 
RINGBUFF_T
 *
pRB
, *
d©a
, 
byãs
)

212 (Ë
pUART
;

214  
	`RögBuf_Ród
(
pRB
, (
uöt8_t
 *Ë
d©a
, 
byãs
);

215 
	}
}

218 
	$Chù_UART_IRQRBH™dÀr
(
LPC_USART_T
 *
pUART
, 
RINGBUFF_T
 *
pRXRB
, RINGBUFF_T *
pTXRB
)

221 i‡((
	`Chù_UART_GëSètus
(
pUART
Ë& 
UART_STAT_TXRDY
) != 0) {

222 
	`Chù_UART_TXI¡H™dÀrRB
(
pUART
, 
pTXRB
);

225 i‡(
	`RögBuf_GëFªeByãs
(
pTXRB
) == 0) {

226 
	`Chù_UART_I¡DißbÀ
(
pUART
, 
UART_INTEN_TXRDY
);

231 
	`Chù_UART_RXI¡H™dÀrRB
(
pUART
, 
pRXRB
);

232 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/uart/uart_8xx.h

32 #i‚de‡
__UART_8XX_H_


33 
	#__UART_8XX_H_


	)

35 #ifde‡
__˝lu•lus


39 
	~"rög_buf„r.h
"

50 
__IO
 
uöt32_t
 
CFG
;

51 
__IO
 
uöt32_t
 
CTRL
;

52 
__IO
 
uöt32_t
 
STAT
;

53 
__IO
 
uöt32_t
 
INTENSET
;

54 
__O
 
uöt32_t
 
INTENCLR
;

55 
__I
 
uöt32_t
 
RXDATA
;

56 
__I
 
uöt32_t
 
RXDATA_STAT
;

57 
__IO
 
uöt32_t
 
TXDATA
;

58 
__IO
 
uöt32_t
 
BRG
;

59 
__IO
 
uöt32_t
 
INTSTAT
;

60 
__IO
 
uöt32_t
 
OSR
;

61 
__IO
 
uöt32_t
 
ADDR
;

62 } 
	tLPC_USART_T
;

67 
	#UART_CFG_ENABLE
 (0x01 << 0)

	)

68 
	#UART_CFG_DATALEN_7
 (0x00 << 2Ë

	)

69 
	#UART_CFG_DATALEN_8
 (0x01 << 2Ë

	)

70 
	#UART_CFG_DATALEN_9
 (0x02 << 2Ë

	)

71 
	#UART_CFG_PARITY_NONE
 (0x00 << 4Ë

	)

72 
	#UART_CFG_PARITY_EVEN
 (0x02 << 4Ë

	)

73 
	#UART_CFG_PARITY_ODD
 (0x03 << 4Ë

	)

74 
	#UART_CFG_STOPLEN_1
 (0x00 << 6Ë

	)

75 
	#UART_CFG_STOPLEN_2
 (0x01 << 6Ë

	)

76 
	#UART_CFG_CTSEN
 (0x01 << 9Ë

	)

77 
	#UART_CFG_SYNCEN
 (0x01 << 11Ë

	)

78 
	#UART_CFG_CLKPOL
 (0x01 << 12Ë

	)

79 
	#UART_CFG_SYNCMST
 (0x01 << 14Ë

	)

80 
	#UART_CFG_LOOP
 (0x01 << 15Ë

	)

82 #ifde‡
CHIP_LPC82X


83 
	#UART_CFG_OETA
 (0x01 << 18Ë

	)

84 
	#UART_CFG_AUTOADDR
 (0x01 << 19Ë

	)

85 
	#UART_CFG_OESEL
 (0x01 << 20Ë

	)

86 
	#UART_CFG_OEPOL
 (0x01 << 21Ë

	)

87 
	#UART_CFG_RXPOL
 (0x01 << 22Ë

	)

88 
	#UART_CFG_TXPOL
 (0x01 << 22Ë

	)

89 
	#UART_CFG_RESERVED
 ((1<<1)|(1<<7)|(1<<8)|(1<<10)|(1<<13)|(3 << 16)|(0xffu<<24))

	)

91 
	#UART_CFG_RESERVED
 ((1<<1)|(1<<7)|(1<<8)|(1<<10)|(1<<13)|(0xffffu<<16))

	)

97 
	#UART_CTRL_TXBRKEN
 (0x01 << 1Ë

	)

98 
	#UART_CTRL_ADDRDET
 (0x01 << 2Ë

	)

99 
	#UART_CTRL_TXDIS
 (0x01 << 6Ë

	)

100 
	#UART_CTRL_CC
 (0x01 << 8Ë

	)

101 
	#UART_CTRL_CLRCC
 (0x01 << 9Ë

	)

102 #ifde‡
CHIP_LPC82X


103 
	#UART_CTRL_AUTOBAUD
 (1 << 16Ë

	)

104 
	#UART_CTRL_RESERVED
 (0xFFFEFCB9U)

	)

106 
	#UART_CTRL_RESERVED
 (1|(7<<3)|(1<<7)|0xfffffc00u)

	)

112 
	#UART_STAT_RXRDY
 (0x01 << 0Ë

	)

113 
	#UART_STAT_RXIDLE
 (0x01 << 1Ë

	)

114 
	#UART_STAT_TXRDY
 (0x01 << 2Ë

	)

115 
	#UART_STAT_TXIDLE
 (0x01 << 3Ë

	)

116 
	#UART_STAT_CTS
 (0x01 << 4Ë

	)

117 
	#UART_STAT_DELTACTS
 (0x01 << 5Ë

	)

118 
	#UART_STAT_TXDISINT
 (0x01 << 6Ë

	)

119 
	#UART_STAT_OVERRUNINT
 (0x01 << 8Ë

	)

120 
	#UART_STAT_RXBRK
 (0x01 << 10Ë

	)

121 
	#UART_STAT_DELTARXBRK
 (0x01 << 11Ë

	)

122 
	#UART_STAT_START
 (0x01 << 12Ë

	)

123 
	#UART_STAT_FRM_ERRINT
 (0x01 << 13Ë

	)

124 
	#UART_STAT_PAR_ERRINT
 (0x01 << 14Ë

	)

125 
	#UART_STAT_RXNOISEINT
 (0x01 << 15Ë

	)

126 #ifde‡
CHIP_LPC82X


127 
	#UART_STAT_ABERR
 (0x01 << 16Ë

	)

128 
	#UART_STAT_RESERVED
 ((1<<7)|(1<<9)|(0xFFFEU<<16))

	)

130 
	#UART_STAT_RESERVED
 ((1<<7)|(1<<9)|(0xffffu<<16))

	)

136 
	#UART_INTEN_RXRDY
 (0x01 << 0Ë

	)

137 
	#UART_INTEN_TXRDY
 (0x01 << 2Ë

	)

138 
	#UART_INTEN_DELTACTS
 (0x01 << 5Ë

	)

139 
	#UART_INTEN_TXDIS
 (0x01 << 6Ë

	)

140 
	#UART_INTEN_OVERRUN
 (0x01 << 8Ë

	)

141 
	#UART_INTEN_DELTARXBRK
 (0x01 << 11Ë

	)

142 
	#UART_INTEN_START
 (0x01 << 12Ë

	)

143 
	#UART_INTEN_FRAMERR
 (0x01 << 13Ë

	)

144 
	#UART_INTEN_PARITYERR
 (0x01 << 14Ë

	)

145 
	#UART_INTEN_RXNOISE
 (0x01 << 15Ë

	)

146 #ifde‡
CHIP_LPC82X


147 
	#UART_INTEN_TXIDLE
 (0x01 << 3Ë

	)

148 
	#UART_INTEN_ABERR
 (0x01 << 16Ë

	)

149 
	#UART_INTEN_RESERVED
 ((1<<1)|(1<<4)|(1<<7)|(3<<9)|(0xff„u<<16))

	)

150 
	#UART_INTSTAT_RESERVED
 ((1<<1)|(1<<4)|(1<<7)|(3<<9)|(0xff„u<<16))

	)

152 
	#UART_INTEN_RESERVED
 ((1<<1)|(3<<3)|(1<<7)|(3<<9)|(0xffffu<<16))

	)

153 
	#UART_INTSTAT_RESERVED
 ((1<<1)|(3<<3)|(1<<7)|(3<<9)|(0xffffu<<16))

	)

161 
STATIC
 
INLINE
 
Chù_UART_E«bÀ
(
LPC_USART_T
 *
pUART
)

163 
pUART
->
CFG
 = 
UART_CFG_ENABLE
 | (pUART->CFG & ~
UART_CFG_RESERVED
);

171 
STATIC
 
INLINE
 
Chù_UART_DißbÀ
(
LPC_USART_T
 *
pUART
)

173 
pUART
->
CFG
 &~(
UART_CFG_RESERVED
 | 
UART_CFG_ENABLE
);

176 
STATIC
 
INLINE
 
Chù_UART_Lo›backC⁄fig
(
LPC_USART_T
 *
pUART
, 
uöt32_t
 
isEn
)

178 i‡(
isEn
)

179 
pUART
->
CFG
 |
UART_CFG_LOOP
;

181 
pUART
->
CFG
 &~
UART_CFG_LOOP
;

189 
STATIC
 
INLINE
 
Chù_UART_TXE«bÀ
(
LPC_USART_T
 *
pUART
)

191 
pUART
->
CTRL
 &~(
UART_CTRL_RESERVED
 | 
UART_CTRL_TXDIS
);

199 
STATIC
 
INLINE
 
Chù_UART_TXDißbÀ
(
LPC_USART_T
 *
pUART
)

201 
pUART
->
CTRL
 = 
UART_CTRL_TXDIS
 | (pUART->CTRL & ~
UART_CTRL_RESERVED
);

212 
STATIC
 
INLINE
 
Chù_UART_SídByã
(
LPC_USART_T
 *
pUART
, 
uöt8_t
 
d©a
)

214 
pUART
->
TXDATA
 = (
uöt32_t
Ë
d©a
;

225 
STATIC
 
INLINE
 
uöt32_t
 
Chù_UART_RódByã
(
LPC_USART_T
 *
pUART
)

228  (
uöt32_t
Ë(
pUART
->
RXDATA
 & 0x000001FF);

239 
STATIC
 
INLINE
 
Chù_UART_I¡E«bÀ
(
LPC_USART_T
 *
pUART
, 
uöt32_t
 
ötMask
)

241 
pUART
->
INTENSET
 = 
ötMask
;

252 
STATIC
 
INLINE
 
Chù_UART_I¡DißbÀ
(
LPC_USART_T
 *
pUART
, 
uöt32_t
 
ötMask
)

254 
pUART
->
INTENCLR
 = 
ötMask
;

265 
STATIC
 
INLINE
 
uöt32_t
 
Chù_UART_GëI¡sE«bÀd
(
LPC_USART_T
 *
pUART
)

267  (
pUART
->
INTENSET
 & ~
UART_INTEN_RESERVED
);

278 
STATIC
 
INLINE
 
uöt32_t
 
Chù_UART_GëI¡Sètus
(
LPC_USART_T
 *
pUART
)

280  (
pUART
->
INTSTAT
 & ~
UART_INTSTAT_RESERVED
);

294 
STATIC
 
INLINE
 
Chù_UART_C⁄figD©a
(
LPC_USART_T
 *
pUART
, 
uöt32_t
 
c⁄fig
)

296 
uöt32_t
 
ªg
;

298 
ªg
 = 
pUART
->
CFG
 & ~((0x3 << 2Ë| (0x3 << 4Ë| (0x1 << 6Ë| 
UART_CFG_RESERVED
);

299 
pUART
->
CFG
 = 
ªg
 | 
c⁄fig
;

310 
STATIC
 
INLINE
 
uöt32_t
 
Chù_UART_GëSètus
(
LPC_USART_T
 *
pUART
)

312  (
pUART
->
STAT
 & ~
UART_STAT_RESERVED
);

324 
STATIC
 
INLINE
 
Chù_UART_CÀ¨Sètus
(
LPC_USART_T
 *
pUART
, 
uöt32_t
 
°sMask
)

326 
pUART
->
STAT
 = 
°sMask
;

336 
STATIC
 
INLINE
 
Chù_UART_SëOSR
(
LPC_USART_T
 *
pUART
, 
uöt32_t
 
ovrVÆ
)

338 
pUART
->
OSR
 = 
ovrVÆ
 - 1;

348 
STATIC
 
INLINE
 
Chù_UART_SëAddr
(
LPC_USART_T
 *
pUART
, 
uöt32_t
 
addr
)

350 
pUART
->
ADDR
 = 
addr
;

358 
Chù_UART_Inô
(
LPC_USART_T
 *
pUART
);

365 
Chù_UART_DeInô
(
LPC_USART_T
 *
pUART
);

378 
Chù_UART_Síd
(
LPC_USART_T
 *
pUART
, c⁄° *
d©a
, 
numByãs
);

390 
Chù_UART_Ród
(
LPC_USART_T
 *
pUART
, *
d©a
, 
numByãs
);

398 
Chù_UART_SëBaud
(
LPC_USART_T
 *
pUART
, 
uöt32_t
 
baudøã
);

409 
Chù_UART_SídBlockög
(
LPC_USART_T
 *
pUART
, c⁄° *
d©a
, 
numByãs
);

421 
Chù_UART_RódBlockög
(
LPC_USART_T
 *
pUART
, *
d©a
, 
numByãs
);

432 
Chù_UART_RXI¡H™dÀrRB
(
LPC_USART_T
 *
pUART
, 
RINGBUFF_T
 *
pRB
);

443 
Chù_UART_TXI¡H™dÀrRB
(
LPC_USART_T
 *
pUART
, 
RINGBUFF_T
 *
pRB
);

456 
uöt32_t
 
Chù_UART_SídRB
(
LPC_USART_T
 *
pUART
, 
RINGBUFF_T
 *
pRB
, c⁄° *
d©a
, 
cou¡
);

469 
Chù_UART_RódRB
(
LPC_USART_T
 *
pUART
, 
RINGBUFF_T
 *
pRB
, *
d©a
, 
byãs
);

481 
Chù_UART_IRQRBH™dÀr
(
LPC_USART_T
 *
pUART
, 
RINGBUFF_T
 *
pRXRB
, RINGBUFF_T *
pTXRB
);

487 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/wkt/wkt_8xx.c

31 
	~"chù.h
"

50 
	$Chù_WKT_SëClockSour˚
(
LPC_WKT_T
 *
pWKT
, 
WKT_CLKSRC_T
 
˛kSrc
)

52 i‡(
˛kSrc
 =
WKT_CLKSRC_10KHZ
) {

53 
pWKT
->
CTRL
 |
WKT_CTRL_CLKSEL
;

56 
pWKT
->
CTRL
 &~
WKT_CTRL_CLKSEL
;

58 
	}
}

61 
uöt32_t
 
	$Chù_WKT_GëClockR©e
(
LPC_WKT_T
 *
pWKT
)

63 i‡(
	`Chù_WKT_GëClockSour˚
(
pWKT
Ë=
WKT_CLKSRC_DIVIRC
) {

71 
	}
}

74 
	$Chù_WKT_Sèπ
(
LPC_WKT_T
 *
pWKT
, 
WKT_CLKSRC_T
 
˛kSrc
, 
uöt32_t
 
˙tVÆ
)

77 
	`Chù_WKT_SëClockSour˚
(
pWKT
, (
WKT_CLKSRC_T
Ë
˛kSrc
);

80 
pWKT
->
COUNT
 = 
˙tVÆ
;

81 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/wkt/wkt_8xx.h

32 #i‚de‡
__WKT_8XX_H_


33 
	#__WKT_8XX_H_


	)

35 #ifde‡
__˝lu•lus


48 
__IO
 
uöt32_t
 
CTRL
;

49 
uöt32_t
 
Re£rved
[2];

50 
__IO
 
uöt32_t
 
COUNT
;

51 } 
	tLPC_WKT_T
;

53 
	#WKT_CTRL_RESERVED
 (~7)

	)

58 
	#WKT_CTRL_CLKSEL
 ((
uöt32_t
Ë(1 << 0)Ë

	)

59 
	#WKT_CTRL_ALARMFLAG
 ((
uöt32_t
Ë(1 << 1)Ë

	)

60 
	#WKT_CTRL_CLEARCTR
 ((
uöt32_t
Ë(1 << 2)Ë

	)

66 
WKT_CLKSRC_DIVIRC
 = 0,

67 
WKT_CLKSRC_10KHZ
 = 1

68 } 
	tWKT_CLKSRC_T
;

75 
STATIC
 
INLINE
 
WKT_CLKSRC_T
 
Chù_WKT_GëClockSour˚
(
LPC_WKT_T
 *
pWKT
)

77  (
WKT_CLKSRC_T
Ë(
pWKT
->
CTRL
 & 
WKT_CTRL_CLKSEL
);

86 
Chù_WKT_SëClockSour˚
(
LPC_WKT_T
 *
pWKT
, 
WKT_CLKSRC_T
 
˛kSrc
);

93 
uöt32_t
 
Chù_WKT_GëClockR©e
(
LPC_WKT_T
 *
pWKT
);

100 
STATIC
 
INLINE
 
boﬁ
 
Chù_WKT_GëI¡Sètus
(
LPC_WKT_T
 *
pWKT
)

102  (
boﬁ
Ë((
pWKT
->
CTRL
 & 
WKT_CTRL_ALARMFLAG
) != 0);

110 
STATIC
 
INLINE
 
Chù_WKT_CÀ¨I¡Sètus
(
LPC_WKT_T
 *
pWKT
)

112 
pWKT
->
CTRL
 = 
WKT_CTRL_ALARMFLAG
 | (pWKT->CTRL & ~
WKT_CTRL_RESERVED
);

120 
STATIC
 
INLINE
 
Chù_WKT_St›
(
LPC_WKT_T
 *
pWKT
)

122 
pWKT
->
CTRL
 = 
WKT_CTRL_CLEARCTR
 | (pWKT->CTRL & ~
WKT_CTRL_RESERVED
);

132 
STATIC
 
INLINE
 
Chù_WKT_LﬂdCou¡
(
LPC_WKT_T
 *
pWKT
, 
uöt32_t
 
cou¡
)

134 
pWKT
->
COUNT
 = 
cou¡
;

145 
Chù_WKT_Sèπ
(
LPC_WKT_T
 *
pWKT
, 
WKT_CLKSRC_T
 
˛kSrc
, 
uöt32_t
 
˙tVÆ
);

151 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/wwdt/wwdt_8xx.c

32 
	~"chù.h
"

51 
	$Chù_WWDT_Inô
(
LPC_WWDT_T
 *
pWWDT
)

53 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_WWDT
);

56 
pWWDT
->
MOD
 = 0;

57 
pWWDT
->
TC
 = 0xFF;

58 
pWWDT
->
WARNINT
 = 0xFFFF;

59 
pWWDT
->
WINDOW
 = 0xFFFFFF;

60 
	}
}

63 
	$Chù_WWDT_DeInô
(
LPC_WWDT_T
 *
pWWDT
)

65 
	`Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_WWDT
);

66 
	}
}

69 
	$Chù_WWDT_CÀ¨SètusFœg
(
LPC_WWDT_T
 *
pWWDT
, 
uöt32_t
 
°©us
)

71 i‡(
°©us
 & 
WWDT_WDMOD_WDTOF
) {

72 
pWWDT
->
MOD
 &(~
WWDT_WDMOD_WDTOF
Ë& 
WWDT_WDMOD_BITMASK
;

75 i‡(
°©us
 & 
WWDT_WDMOD_WDINT
) {

76 
pWWDT
->
MOD
 = 
WWDT_WDMOD_WDINT
 | (pWWDT->MOD & ~
WWDT_MOD_RESERVED
);

78 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/wwdt/wwdt_8xx.h

32 #i‚de‡
__WWDT_8XX_H_


33 
	#__WWDT_8XX_H_


	)

35 #ifde‡
__˝lu•lus


45 
	#WDT_OSC
 (
LPC8XX_IRC_FREQ
)

	)

51 
__IO
 
uöt32_t
 
MOD
;

52 
__IO
 
uöt32_t
 
TC
;

53 
__O
 
uöt32_t
 
FEED
;

54 
__I
 
uöt32_t
 
TV
;

55 
__I
 
uöt32_t
 
RESERVED0
;

56 
__IO
 
uöt32_t
 
WARNINT
;

57 
__IO
 
uöt32_t
 
WINDOW
;

58 } 
	tLPC_WWDT_T
;

61 
	#WWDT_MOD_RESERVED
 (~0x3f)

	)

62 
	#WWDT_TC_RESERVED
 0xff000000

	)

63 
	#WWDT_FEED_RESERVED
 (~0xff)

	)

64 
	#WWDT_TV_RESERVED
 0xff000000

	)

65 
	#WWDT_WARNINT_RESERVED
 (~0x3ff)

	)

66 
	#WWDT_WINDOW_RESERVED
 0xff000000

	)

72 
	#WWDT_WDMOD_BITMASK
 ((
uöt32_t
Ë0x1F)

	)

74 
	#WWDT_WDMOD_WDEN
 ((
uöt32_t
Ë(1 << 0))

	)

76 
	#WWDT_WDMOD_WDRESET
 ((
uöt32_t
Ë(1 << 1))

	)

78 
	#WWDT_WDMOD_WDTOF
 ((
uöt32_t
Ë(1 << 2))

	)

80 
	#WWDT_WDMOD_WDINT
 ((
uöt32_t
Ë(1 << 3))

	)

87 
Chù_WWDT_Inô
(
LPC_WWDT_T
 *
pWWDT
);

94 
Chù_WWDT_DeInô
(
LPC_WWDT_T
 *
pWWDT
);

102 
STATIC
 
INLINE
 
Chù_WWDT_SëTimeOut
(
LPC_WWDT_T
 *
pWWDT
, 
uöt32_t
 
timeout
)

104 
pWWDT
->
TC
 = 
timeout
;

114 
STATIC
 
INLINE
 
Chù_WWDT_Fìd
(
LPC_WWDT_T
 *
pWWDT
)

116 
pWWDT
->
FEED
 = 0xAA;

117 
pWWDT
->
FEED
 = 0x55;

128 
STATIC
 
INLINE
 
Chù_WWDT_SëW¨nög
(
LPC_WWDT_T
 *
pWWDT
, 
uöt32_t
 
timeout
)

130 
pWWDT
->
WARNINT
 = 
timeout
;

142 
STATIC
 
INLINE
 
Chù_WWDT_SëWödow
(
LPC_WWDT_T
 *
pWWDT
, 
uöt32_t
 
timeout
)

144 
pWWDT
->
WINDOW
 = 
timeout
;

158 
STATIC
 
INLINE
 
Chù_WWDT_SëO±i⁄
(
LPC_WWDT_T
 *
pWWDT
, 
uöt32_t
 
›ti⁄s
)

160 
pWWDT
->
MOD
 = 
›ti⁄s
 | (pWWDT->MOD & ~
WWDT_MOD_RESERVED
);

172 
STATIC
 
INLINE
 
Chù_WWDT_Un£tO±i⁄
(
LPC_WWDT_T
 *
pWWDT
, 
uöt32_t
 
›ti⁄s
)

174 
pWWDT
->
MOD
 &(~
›ti⁄s
Ë& 
WWDT_WDMOD_BITMASK
;

182 
STATIC
 
INLINE
 
Chù_WWDT_Sèπ
(
LPC_WWDT_T
 *
pWWDT
)

184 
Chù_WWDT_SëO±i⁄
(
pWWDT
, 
WWDT_WDMOD_WDEN
);

185 
Chù_WWDT_Fìd
(
pWWDT
);

193 
STATIC
 
INLINE
 
uöt32_t
 
Chù_WWDT_GëSètus
(
LPC_WWDT_T
 *
pWWDT
)

195  
pWWDT
->
MOD
;

206 
Chù_WWDT_CÀ¨SètusFœg
(
LPC_WWDT_T
 *
pWWDT
, 
uöt32_t
 
°©us
);

213 
STATIC
 
INLINE
 
uöt32_t
 
Chù_WWDT_GëCuºítCou¡
(
LPC_WWDT_T
 *
pWWDT
)

215  
pWWDT
->
TV
;

222 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/OS/uCOS-III/bsp_os.c

34 
	#BSP_OS_MODULE


	)

35 
	~<b•.h
>

36 
	~<b•_os.h
>

134 
CPU_BOOLEAN
 
	$BSP_OS_SemCª©e
 (
BSP_OS_SEM
 *
p_£m
,

135 
BSP_OS_SEM_VAL
 
£m_vÆ
,

136 
CPU_CHAR
 *
p_£m_«me
)

138 
OS_ERR
 
îr
;

141 
	`OSSemCª©e
((
OS_SEM
 *)
p_£m
,

142 (
CPU_CHAR
 *)
p_£m_«me
,

143 (
OS_SEM_CTR
 )
£m_vÆ
,

144 (
OS_ERR
 *)&
îr
);

146 i‡(
îr
 !
OS_ERR_NONE
) {

147  (
DEF_FAIL
);

150  (
DEF_OK
);

151 
	}
}

173 
CPU_BOOLEAN
 
	$BSP_OS_SemWaô
 (
BSP_OS_SEM
 *
p_£m
,

174 
CPU_INT32U
 
dly_ms
)

176 
OS_ERR
 
îr
;

177 
CPU_INT32U
 
dly_ticks
;

180 
dly_ticks
 = ((
dly_ms
 * 
DEF_TIME_NBR_mS_PER_SEC
Ë/ 
OSCfg_TickR©e_Hz
);

182 
	`OSSemPíd
((
OS_SEM
 *)
p_£m
,

183 (
OS_TICK
 )
dly_ticks
,

184 (
OS_OPT
 )
OS_OPT_PEND_BLOCKING
,

185 (
CPU_TS
 )0,

186 (
OS_ERR
 *)&
îr
);

188 i‡(
îr
 !
OS_ERR_NONE
) {

189  (
DEF_FAIL
);

192  (
DEF_OK
);

193 
	}
}

212 
CPU_BOOLEAN
 
	$BSP_OS_SemPo°
 (
BSP_OS_SEM
 *
p_£m
)

214 
OS_ERR
 
îr
;

217 
	`OSSemPo°
((
OS_SEM
 *)
p_£m
,

218 (
OS_OPT
 )
OS_OPT_POST_1
,

219 (
OS_ERR
 *)&
îr
);

221 i‡(
îr
 !
OS_ERR_NONE
) {

222  (
DEF_FAIL
);

225  (
DEF_OK
);

226 
	}
}

254 
	$BSP_OS_TimeDlyMs
 (
CPU_INT32U
 
dly_ms
)

256 
CPU_INT16U
 
ms
;

257 
CPU_INT16U
 
£c
;

258 
OS_ERR
 
îr
;

261 i‡(
dly_ms
 > 10000u) {

262 
dly_ms
 = 10000u;

265 i‡(
dly_ms
 >= 1000u) {

266 
ms
 = 
dly_ms
 / 1000u;

267 
£c
 = 
dly_ms
 % 1000u;

269 
ms
 = 
dly_ms
;

270 
£c
 = 0u;

274 
	`OSTimeDlyHMSM
((
CPU_INT16U
) 0u,

275 (
CPU_INT16U
) 0u,

276 (
CPU_INT16U
Ë
£c
,

277 (
CPU_INT32U
Ë
ms
,

278 (
OS_OPT
 ) 
OS_OPT_TIME_HMSM_STRICT
,

279 (
OS_ERR
 *)&
îr
);

280 
	}
}

300 
	$BSP_OS_TimeDly
 (
CPU_INT32U
 
dly_tick
)

302 
OS_ERR
 
îr
;

304 
	`OSTimeDly
(
dly_tick
, 
OS_OPT_TIME_DLY
, &
îr
);

306 ()&
îr
;

307 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/OS/uCOS-III/bsp_os.h

36 #i‚de‡ 
BSP_OS_PRESENT


37 
	#BSP_OS_PRESENT


	)

46 
	~<os.h
>

55 #ifde‡ 
BSP_OS_MODULE


56 
	#BSP_OS_EXT


	)

58 
	#BSP_OS_EXT
 

	)

75 
OS_SEM
 
	tBSP_OS_SEM
;

76 
OS_SEM_CTR
 
	tBSP_OS_SEM_VAL
;

99 
CPU_BOOLEAN
 
BSP_OS_SemCª©e
 (
BSP_OS_SEM
 *
p_£m
,

100 
BSP_OS_SEM_VAL
 
£m_vÆ
,

101 
CPU_CHAR
 *
p_£m_«me
);

103 
CPU_BOOLEAN
 
BSP_OS_SemWaô
 (
BSP_OS_SEM
 *
p_£m
,

104 
CPU_INT32U
 
dly_ms
);

106 
CPU_BOOLEAN
 
BSP_OS_SemPo°
 (
BSP_OS_SEM
 *
p_£m
);

108 
BSP_OS_TimeDlyMs
 (
CPU_INT32U
 
dly_ms
);

110 
BSP_OS_TimeDly
 (
CPU_INT32U
 
dly_tick
);

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp.c

34 
	#BSP_MODULE


	)

35 
	~<b•.h
>

37 #ifde‡ 
BSP_CFG_OS


38 
	~<b•_os.h
>

47 
	#BSP_CORE_DIV
 (1u)

	)

48 
	#BSP_BUS_DIV
 (2u)

	)

49 
	#BSP_FLEXBUS_DIV
 (3u)

	)

50 
	#BSP_FLASH_DIV
 (6u)

	)

80 
CPU_INT32U
 
	gBSP_CPU_ClkFªq_MHz
;

81 c⁄° 
CPU_INT08U
 
	gBSP_LED_PöM≠s
[
BSP_LED_CNT
] = {7, 13, 16, 17, 19, 27, 28, 18};

82 c⁄° 
CPU_INT08U
 
	gBSP_KEY_PöM≠s
[
BSP_KEY_CNT
] = {12, 4 , 1};

83 c⁄° 
CPU_INT08U
 
	gBSP_KEY_PioC⁄M≠s
[
BSP_KEY_CNT
] = {
IOCON_PIO12
, 
IOCON_PIO4
, 
IOCON_PIO1
};

85 c⁄° 
uöt32_t
 
	gOscR©eIn
 = 
MAIN_OSC_XTAL_FREQ_HZ
;

86 c⁄° 
uöt32_t
 
	gExtR©eIn
 = 
EXT_CLOCK_IN_FREQ_HZ
;

94 
BSP_LED_Inô
 ();

95 
BSP_SPI_PöMux
 ();

96 
BSP_I2C_PöMux
 ();

104 
	#DBGMCU_CR
 *(
CPU_REG32
 *)0xE0042004

	)

112 
	#DBGMCU_CR_TRACE_IOEN_MASK
 0x10

	)

113 
	#DBGMCU_CR_TRACE_MODE_ASYNC
 0x00

	)

114 
	#DBGMCU_CR_TRACE_MODE_SYNC_01
 0x40

	)

115 
	#DBGMCU_CR_TRACE_MODE_SYNC_02
 0x80

	)

116 
	#DBGMCU_CR_TRACE_MODE_SYNC_04
 0xC0

	)

117 
	#DBGMCU_CR_TRACE_MODE_MASK
 0xC0

	)

125 #i‡((
CPU_CFG_TS_TMR_EN
 !
DEF_ENABLED
) && \

126 (
	gAPP_CFG_PROBE_OS_PLUGIN_EN
 =
DEF_ENABLED
) && \

127 (
OS_PROBE_HOOKS_EN
 == 1))

159 
	$BSP_Inô
 ()

161 
	`BSP_I¡Inô
();

163 
	`Sy°emC‹eClockUpd©e
();

165 
	`Chù_GPIO_Inô
(
LPC_GPIO_PORT
);

167 
BSP_CPU_ClkFªq_MHz
 = 
	`BSP_CPU_ClkFªq
(Ë/ (
CPU_INT32U
)1000000;

169 
BSP_CPU_ClkFªq_MHz
 = BSP_CPU_ClkFreq_MHz;

171 
	`BSP_LED_Inô
();

173 #i‡(
APP_CFG_SERIAL_EN
 =
DEF_ENABLED
)

174 
	`BSP_Sî_Inô
(115200);

177 
	`BSP_SPI_PöMux
();

178 
	`BSP_I2C_PöMux
();

180 
	`BSP_I2C_Inô
(
BSP_I2C_ID_I2C0
, 
BSP_I2C_MODE_STANDARD
,

181 
BSP_I2C_MODE_STANDARD_MAX_FREQ_HZ
);

183 #ifde‡
TRACE_EN


184 
DBGMCU_CR
 |
DBGMCU_CR_TRACE_IOEN_MASK
;

185 
DBGMCU_CR
 &~
DBGMCU_CR_TRACE_MODE_MASK
;

186 
DBGMCU_CR
 |
DBGMCU_CR_TRACE_MODE_SYNC_04
;

188 
	}
}

207 
CPU_INT32U
 
	$BSP_CPU_ClkFªq
 ()

209  ((
CPU_INT32U
)
	`Chù_Clock_GëSy°emClockR©e
());

210 
	}
}

228 #ifde‡ 
BSP_CFG_OS


229 
	$BSP_Tick_Inô
 ()

231 
CPU_INT32U
 
˝u_˛k_‰eq
;

232 
CPU_INT32U
 
˙ts
;

234 
˝u_˛k_‰eq
 = 
	`BSP_CPU_ClkFªq
();

236 #i‡(
OS_VERSION
 >= 30000u)

237 
˙ts
 = 
˝u_˛k_‰eq
 / (
CPU_INT32U
)
OSCfg_TickR©e_Hz
;

239 
˙ts
 = 
˝u_˛k_‰eq
 / (
CPU_INT32U
)
OS_TICKS_PER_SEC
;

242 
	`OS_CPU_SysTickInô
(
˙ts
);

243 
	}
}

271 
	$BSP_LED_Inô
 ()

273 
i
;

275 
i
 = 0; i < 
BSP_LED_CNT
; i++) {

276 
	`Chù_GPIO_PöSëDIR
(
LPC_GPIO_PORT
, 0, 
BSP_LED_PöM≠s
[
i
], 1);

277 
	`Chù_GPIO_PöSëSèã
(
LPC_GPIO_PORT
, 0, 
BSP_LED_PöM≠s
[
i
], 
åue
);

279 
	}
}

296 
	$BSP_LED_Së
 (
CPU_INT32U
 
Àd_id
, 
CPU_BOOLEAN
 
Àd_⁄
)

298 i‡(
Àd_id
 < 
BSP_LED_CNT
) {

299 
	`Chù_GPIO_PöSëSèã
(
LPC_GPIO_PORT
, 0, 
BSP_LED_PöM≠s
[
Àd_id
], (
boﬁ
Ë!
Àd_⁄
);

301 
	}
}

303 
	$BSP_LED_ToggÀ
(
CPU_INT32U
 
Àd_id
)

305 i‡(
Àd_id
 < 
BSP_LED_CNT
) {

306 
	`Chù_GPIO_PöToggÀSèã
(
LPC_GPIO_PORT
, 0, 
BSP_LED_PöM≠s
[
Àd_id
]);

308 
	}
}

334 
	$BSP_SPI_PöMux
 ()

336 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

337 
	`Chù_SWM_MovabÀPöAssign
(
SWM_SPI1_SSEL0_IO
, 15);

338 
	`Chù_SWM_MovabÀPöAssign
(
SWM_SPI1_SCK_IO
, 24);

339 
	`Chù_SWM_MovabÀPöAssign
(
SWM_SPI1_MISO_IO
, 25);

340 
	`Chù_SWM_MovabÀPöAssign
(
SWM_SPI1_MOSI_IO
, 26);

341 
	`Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

342 
	}
}

361 
	$BSP_I2C_PöMux
 ()

364 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

365 
	`Chù_SWM_E«bÀFixedPö
(
SWM_FIXED_I2C0_SDA
);

366 
	`Chù_SWM_E«bÀFixedPö
(
SWM_FIXED_I2C0_SCL
);

369 
	`Chù_IOCON_PöSëI2CMode
(
LPC_IOCON
, 
IOCON_PIO10
, 
PIN_I2CMODE_FASTPLUS
);

370 
	`Chù_IOCON_PöSëI2CMode
(
LPC_IOCON
, 
IOCON_PIO11
, 
PIN_I2CMODE_FASTPLUS
);

373 
	`Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

374 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp.h

37 #i‚de‡ 
BSP_PRESENT


38 
	#BSP_PRESENT


	)

47 #ifde‡ 
BSP_MODULE


48 
	#BSP_EXT


	)

50 
	#BSP_EXT
 

	)

60 
	~<°d¨g.h
>

61 
	~<°dio.h
>

63 
	~<˝u.h
>

64 
	~<˝u_c‹e.h
>

66 
	~<lib_ascii.h
>

67 
	~<lib_def.h
>

68 
	~<lib_mem.h
>

69 
	~<lib_°r.h
>

71 
	~<b•_os.h
>

72 
	~<≠p_cfg.h
>

73 
	~<b•_cfg.h
>

74 #i‡(
APP_CFG_SERIAL_EN
 =
DEF_ENABLED
)

75 
	~<b•_£r.h
>

77 
	~<b•_i2c.h
>

78 
	~<b•_©24.h
>

80 
	~<chù.h
>

88 
	#BSP_LED1
 0

	)

89 
	#BSP_LED2
 1

	)

90 
	#BSP_LED3
 2

	)

91 
	#BSP_LED4
 3

	)

92 
	#BSP_LED5
 4

	)

93 
	#BSP_LED6
 5

	)

94 
	#BSP_LED7
 6

	)

95 
	#BSP_LED8
 7

	)

96 
	#BSP_LED_CNT
 8

	)

98 
	#BSP_KEY_CNT
 3

	)

100 
	#BSP_CONSOLE
 
LPC_USART1


	)

105 
	#MAIN_OSC_XTAL_FREQ_HZ
 12000000

	)

109 
	#EXT_CLOCK_IN_FREQ_HZ
 0

	)

111 
	#BSP_AT24_I2C_ID
 
BSP_I2C_ID_I2C0


	)

112 
	#BSP_AT24_I2C_ADDR
 ((
CPU_INT08U
)0x50)

	)

120 
	#BSP_INT_ID_SPI0
 0u

	)

121 
	#BSP_INT_ID_SPI1
 1u

	)

122 
	#BSP_INT_ID_RSVD2
 2u

	)

123 
	#BSP_INT_ID_UART0
 3u

	)

124 
	#BSP_INT_ID_UART1
 4u

	)

125 
	#BSP_INT_ID_UART2
 5u

	)

126 
	#BSP_INT_ID_RSVD6
 6u

	)

127 
	#BSP_INT_ID_I2C1
 7u

	)

128 
	#BSP_INT_ID_I2C0
 8u

	)

129 
	#BSP_INT_ID_SCT
 9u

	)

130 
	#BSP_INT_ID_MRT
 10u

	)

131 
	#BSP_INT_ID_CMP
 11u

	)

132 
	#BSP_INT_ID_WDT
 12u

	)

133 
	#BSP_INT_ID_BOD
 13u

	)

134 
	#BSP_INT_ID_FLASH
 14u

	)

135 
	#BSP_INT_ID_WKT
 15u

	)

136 
	#BSP_INT_ID_ADC_SEQA
 16u

	)

137 
	#BSP_INT_ID_ADC_SEQB
 17u

	)

138 
	#BSP_INT_ID_ADC_THCMP
 18u

	)

139 
	#BSP_INT_ID_ADC_OVR
 19u

	)

140 
	#BSP_INT_ID_DMA
 20u

	)

141 
	#BSP_INT_ID_I2C2
 21u

	)

142 
	#BSP_INT_ID_I2C3
 22u

	)

143 
	#BSP_INT_ID_RSVD23
 23u

	)

144 
	#BSP_INT_ID_PIO_INT0
 24u

	)

145 
	#BSP_INT_ID_PIO_INT1
 25u

	)

146 
	#BSP_INT_ID_PIO_INT2
 26u

	)

147 
	#BSP_INT_ID_PIO_INT3
 27u

	)

148 
	#BSP_INT_ID_PIO_INT4
 28u

	)

149 
	#BSP_INT_ID_PIO_INT5
 29u

	)

150 
	#BSP_INT_ID_PIO_INT6
 30u

	)

151 
	#BSP_INT_ID_PIO_INT7
 31u

	)

173 
BSP_Inô
 ();

175 
BSP_I¡DisAŒ
 ();

177 
BSP_Tick_Inô
 ();

179 
CPU_INT32U
 
BSP_CPU_ClkFªq
 ();

188 
BSP_I¡Inô
 ();

190 
BSP_I¡En
 (
CPU_DATA
 
öt_id
);

192 
BSP_I¡Dis
 (
CPU_DATA
 
öt_id
);

194 
BSP_I¡CÃ
 (
CPU_DATA
 
öt_id
);

196 
BSP_I¡Ve˘Së
 (
CPU_DATA
 
öt_id
,

197 
CPU_FNCT_VOID
 
i§
);

199 
BSP_I¡PrioSë
 (
CPU_DATA
 
öt_id
,

200 
CPU_INT08U
 
¥io
);

202 
BSP_I¡H™dÀrSPI0
 ();

203 
BSP_I¡H™dÀrSPI1
 ();

204 
BSP_I¡H™dÀrRSVD2
 ();

205 
BSP_I¡H™dÀrUART0
 ();

206 
BSP_I¡H™dÀrUART1
 ();

207 
BSP_I¡H™dÀrUART2
 ();

208 
BSP_I¡H™dÀrRSVD6
 ();

209 
BSP_I¡H™dÀrI2C1
 ();

210 
BSP_I¡H™dÀrI2C0
 ();

211 
BSP_I¡H™dÀrSCT
 ();

212 
BSP_I¡H™dÀrMRT
 ();

213 
BSP_I¡H™dÀrCMP
 ();

214 
BSP_I¡H™dÀrWDT
 ();

215 
BSP_I¡H™dÀrBOD
 ();

216 
BSP_I¡H™dÀrFLASH
 ();

217 
BSP_I¡H™dÀrWKT
 ();

218 
BSP_I¡H™dÀrADC_SEQA
 ();

219 
BSP_I¡H™dÀrADC_SEQB
 ();

220 
BSP_I¡H™dÀrADC_THCMP
 ();

221 
BSP_I¡H™dÀrADC_OVR
 ();

222 
BSP_I¡H™dÀrDMA
 ();

223 
BSP_I¡H™dÀrI2C2
 ();

224 
BSP_I¡H™dÀrI2C3
 ();

225 
BSP_I¡H™dÀrRSVD23
 ();

226 
BSP_I¡H™dÀrPIO_INT0
 ();

227 
BSP_I¡H™dÀrPIO_INT1
 ();

228 
BSP_I¡H™dÀrPIO_INT2
 ();

229 
BSP_I¡H™dÀrPIO_INT3
 ();

230 
BSP_I¡H™dÀrPIO_INT4
 ();

231 
BSP_I¡H™dÀrPIO_INT5
 ();

232 
BSP_I¡H™dÀrPIO_INT6
 ();

233 
BSP_I¡H™dÀrPIO_INT7
 ();

241 
BSP_LED_Së
 (
CPU_INT32U
 
Àd_id
, 
CPU_BOOLEAN
 
Àd_⁄
);

242 
BSP_LED_ToggÀ
 (
CPU_INT32U
 
Àd_id
);

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_at24.c

35 
	#BSP_AT24_MODULE


	)

36 
	~<b•.h
>

45 
	#BSP_AT24C02_ADDR_MSK
 0x7F

	)

46 
	#BSP_AT24C02_PAGE_SIZE
 8

	)

47 
	#BSP_AT24C02_CHIP_SIZE
 256

	)

49 
	#BSP_AT24C02_ADDR_LEN
 2

	)

125 
CPU_BOOLEAN
 
	$BSP_AT24_Inô
 ()

127  
DEF_OK
;

128 
	}
}

146 
CPU_BOOLEAN
 
	$BSP_AT24_Ród
 (
CPU_INT16U
 
addr
,

147 
CPU_INT16U
 
Àngth
,

148 
CPU_INT08U
 *
buf
,

149 
CPU_INT16U
 *
ªÆ_byã
)

151 
CPU_INT16U
 
chù_size
 = 0;

152 
CPU_INT08U
 
addr_buf
[
BSP_AT24C02_ADDR_LEN
];

154 
chù_size
 = 
BSP_AT24C02_CHIP_SIZE
;

156 i‡(
Àngth
 > 
chù_size
) {

157  (
DEF_FAIL
);

160 
addr_buf
[0] = 
BSP_AT24_I2C_ADDR
 & 
BSP_AT24C02_ADDR_MSK
;

161 
addr_buf
[0] |(
CPU_INT08U
)((
addr
 >> 8) &

162 (~
BSP_AT24C02_ADDR_MSK
));

164 
addr_buf
[1] = (
CPU_INT08U
)(
addr
 & 0xFF);

166 *
ªÆ_byã
 = ((
Àngth
 + 
addr
Ë> 
chù_size
) ? (chip_size -áddr) :Üength;

168  (
	`BSP_I2C_WrRd
(
BSP_AT24_I2C_ID
,

169 
addr_buf
[0],

170 &
addr_buf
[1],

172 
buf
,

173 *
ªÆ_byã
));

174 
	}
}

193 
CPU_BOOLEAN
 
	$BSP_AT24_Wrôe
 (
CPU_INT16U
 
addr
,

194 
CPU_INT16U
 
Àngth
,

195 
CPU_INT08U
 *
buf
,

196 
CPU_INT16U
 *
ªÆ_byã
)

198 
CPU_INT16U
 
d©a_Àn
 = 0;

199 
CPU_INT16U
 
off£t
 = 0;

200 
CPU_INT16U
 
∑ge_size
 = 0;

201 
CPU_INT16U
 
chù_size
 = 0;

202 
CPU_INT08U
 
addr_buf
[
BSP_AT24C02_ADDR_LEN
];

203 
OS_ERR
 
îr
;

205 
∑ge_size
 = 
BSP_AT24C02_PAGE_SIZE
;

206 
chù_size
 = 
BSP_AT24C02_CHIP_SIZE
;

208 i‡(
Àngth
 > 
chù_size
) {

209  (
DEF_FAIL
);

212 
addr_buf
[0] = 
BSP_AT24_I2C_ADDR
 & 
BSP_AT24C02_ADDR_MSK
;

214 *
ªÆ_byã
 = ((
Àngth
 + 
addr
Ë> 
chù_size
) ? (chip_size -áddr) :Üength;

216 
off£t
 < (*
ªÆ_byã
))

220 
d©a_Àn
 = 
	`DEF_MIN
 ((*
ªÆ_byã
Ë- 
off£t
,

221 
∑ge_size
 - ((
addr
 + 
off£t
) %Öage_size));

223 
addr_buf
[0] |(
CPU_INT08U
)(((
addr
 + 
off£t
) >> 8) &

224 (~
BSP_AT24C02_ADDR_MSK
));

225 
addr_buf
[1] = (
CPU_INT08U
)((
addr
 + 
off£t
) & 0xFF);

227 i‡(
	`BSP_I2C_Wr
(
BSP_AT24_I2C_ID
,

228 
addr_buf
[0],

229 &
addr_buf
[1],

231 (
buf
 + 
off£t
),

232 
d©a_Àn
Ë!
DEF_OK
) {

233  (
DEF_FAIL
);

236 
off£t
 +
d©a_Àn
;

238 
	`OSTimeDlyHMSM
(0, 0, 0, 10,

239 
OS_OPT_TIME_HMSM_STRICT
,

240 &
îr
);

243  (
DEF_OK
);

244 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_at24.h

39 #i‚de‡ 
BSP_AT24_PRESENT


40 
	#BSP_AT24_PRESENT


	)

49 #ifde‡ 
BSP_AT24_MODULE


50 
	#BSP_AT24_EXT


	)

52 
	#BSP_AT24
 

	)

63 
	#BSP_AT24_TYPE_AT24C01
 0

	)

64 
	#BSP_AT24_TYPE_AT24C02
 1

	)

65 
	#BSP_AT24_TYPE_AT24C04
 2

	)

66 
	#BSP_AT24_TYPE_AT24C08
 3

	)

67 
	#BSP_AT24_TYPE_AT24C16
 4

	)

68 
	#BSP_AT24_TYPE_MAX
 5

	)

70 
	#BSP_AT24_I2C_MAX_FREQ
 400000

	)

92 
	sb•_©24_öfo
 {

93 
CPU_INT08U
 
dev_addr_msk
;

94 
CPU_INT08U
 
∑ge_size
;

95 
CPU_INT16U
 
chù_size
;

96 } 
	tBSP_AT24_INFO
;

105 
CPU_BOOLEAN
 
BSP_AT24_Inô
 ();

106 
CPU_BOOLEAN
 
BSP_AT24_Ród
 (
CPU_INT16U
 
addr
,

107 
CPU_INT16U
 
Àngth
,

108 
CPU_INT08U
 *
buf
,

109 
CPU_INT16U
 *
ªÆ_byã
);

110 
CPU_BOOLEAN
 
BSP_AT24_Wrôe
 (
CPU_INT16U
 
addr
,

111 
CPU_INT16U
 
Àngth
,

112 
CPU_INT08U
 *
buf
,

113 
CPU_INT16U
 *
ªÆ_byã
);

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_i2c.c

35 
	#BSP_I2C_MODULE


	)

36 
	~<b•.h
>

45 
	#BSP_I2C_BUF_SIZE
 0x10

	)

46 
	#BSP_I2C_HDL_MEM_SIZE
 0x20

	)

65 
	sb•_i2c_dev
 {

66 
I2C_HANDLE_T
 *
	mI2CH™dÀ
;

67 
BSP_OS_SEM
 
	mSemLock
;

68 
BSP_OS_SEM
 
	mSemWaô
;

69 
CPU_INT08U
 
	mTxBuf
[
BSP_I2C_BUF_SIZE
];

70 
CPU_INT08U
 
	mRxBuf
[
BSP_I2C_BUF_SIZE
];

71 
CPU_INT32U
 
	mI2CH™dÀMem
[
BSP_I2C_HDL_MEM_SIZE
];

72 } 
	tBSP_I2C_DEV
;

80 
BSP_I2C_DEV
 
	gBSP_I2C_DevTbl
[
BSP_I2C_NBR_MAX
];

95 
BSP_I2C0_ISR_H™dÀr
 ();

96 
BSP_I2C0_CÆlback
 (
CPU_INT32U
 
îr_code
, CPU_INT32U 
n
);

135 
CPU_BOOLEAN
 
	$BSP_I2C_Inô
 (
CPU_INT08U
 
i2c_id
,

136 
CPU_INT08U
 
i2c_mode
,

137 
CPU_INT32U
 
bô_øã
)

140 
CPU_BOOLEAN
 
îr
;

141 
CPU_INT32U
 
i2c_ba£
;

142 
BSP_I2C_DEV
 *
p_i2c_dev
;

144 
i2c_id
) {

145 
BSP_I2C_ID_I2C0
:

147 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_I2C0
);

149 
	`Chù_SYSCTL_PîùhRe£t
(
RESET_I2C0
);

150 
i2c_ba£
 = 
LPC_I2C_BASE
;

151 
p_i2c_dev
 = (
BSP_I2C_DEV
 *)&
BSP_I2C_DevTbl
[0];

156  (
DEF_FAIL
);

159 
	`BSP_TRACE_INFO
(("i2¯øm size: 0x%x\n\r", 
LPC_I2CD_API
->
	`i2c_gë_mem_size
()));

161 i‡(
LPC_I2CD_API
->
	`i2c_gë_mem_size
(Ë> (
p_i2c_dev
->
I2CH™dÀMem
)) {

164  (
DEF_FAIL
);

168 
p_i2c_dev
->
I2CH™dÀ
 = 
LPC_I2CD_API
->
	`i2c_£tup
(
i2c_ba£
,Ö_i2c_dev->
I2CH™dÀMem
);

169 i‡(
p_i2c_dev
->
I2CH™dÀ
 =
NULL
) {

170  (
DEF_FAIL
);

174 i‡(
LPC_I2CD_API
->
	`i2c_£t_bôøã
(
p_i2c_dev
->
I2CH™dÀ
,

175 
	`Chù_Clock_GëSy°emClockR©e
(),

176 
bô_øã
Ë!
LPC_OK
) {

177  (
DEF_FAIL
);

180 
îr
 = 
	`BSP_OS_SemCª©e
((
BSP_OS_SEM
 *)&(
p_i2c_dev
->
SemWaô
),

181 (
BSP_OS_SEM_VAL
 ) 0,

182 (
CPU_CHAR
 *) "I2C Wait");

183 i‡(
îr
 =
DEF_FAIL
) {

184  (
DEF_FAIL
);

187 
îr
 = 
	`BSP_OS_SemCª©e
((
BSP_OS_SEM
 *)&(
p_i2c_dev
->
SemLock
),

188 (
BSP_OS_SEM_VAL
 ) 1,

189 (
CPU_CHAR
 *)"I2C Lock");

190 i‡(
îr
 =
DEF_FAIL
) {

191  (
DEF_FAIL
);

194 
i2c_id
) {

195 
BSP_I2C_ID_I2C0
:

196 
	`BSP_I¡Ve˘Së
(
BSP_INT_ID_I2C0
, 
BSP_I2C0_ISR_H™dÀr
);

197 
	`BSP_I¡En
(
BSP_INT_ID_I2C0
);

204  (
DEF_OK
);

206 
	}
}

233 
CPU_BOOLEAN
 
	$BSP_I2C_Rd
 (
CPU_INT08U
 
i2c_id
,

234 
CPU_INT08U
 
i2c_addr
,

235 
CPU_INT08U
 *
p_buf
,

236 
CPU_INT16U
 
nbr_byãs
)

238 
CPU_BOOLEAN
 
îr
;

239 
I2C_PARAM_T
 
∑øm
;

240 
I2C_RESULT_T
 
ªsu…
;

241 
Eº‹Code_t
 
îr‹_code
;

242 
BSP_I2C_DEV
 *
p_i2c_dev
;

244 i‡(
p_buf
 =(
CPU_INT08U
 *)0) {

245  (
DEF_FAIL
);

247 i‡((
nbr_byãs
 < 1Ë|| (“br_byã†+ 1Ë> 
BSP_I2C_BUF_SIZE
)) {

248  (
DEF_FAIL
);

250 
i2c_id
) {

251 
BSP_I2C_ID_I2C0
:

252 
p_i2c_dev
 = (
BSP_I2C_DEV
 *)&
BSP_I2C_DevTbl
[0];

256  (
DEF_FAIL
);

259 
îr
 = 
	`BSP_OS_SemWaô
(&(
p_i2c_dev
->
SemLock
), 0);

260 i‡(
îr
 =
DEF_FAIL
) {

261  (
DEF_FAIL
);

264 
p_i2c_dev
->
RxBuf
[0] = ((
i2c_addr
 << 1Ë| 
DEF_BIT_00
);

271 
∑øm
.
num_byãs_£nd
 = 0;

272 
∑øm
.
num_byãs_ªc
 = 
nbr_byãs
 + 1;

273 
∑øm
.
buf„r_±r_ªc
 = 
p_i2c_dev
->
RxBuf
;

274 
∑øm
.
°›_Êag
 = 1;

275 
∑øm
.
func_±
 = 
BSP_I2C0_CÆlback
;

278 
LPC_I2CD_API
->
	`i2c_£t_timeout
(
p_i2c_dev
->
I2CH™dÀ
, 100000);

282 
îr‹_code
 = 
LPC_I2CD_API
->
	`i2c_ma°î_ª˚ive_öå
(
p_i2c_dev
->
I2CH™dÀ
, &
∑øm
, &
ªsu…
);

284 
îr
 = 
	`BSP_OS_SemWaô
(&(
p_i2c_dev
->
SemWaô
), 500);

286 
	`BSP_OS_SemPo°
(&(
p_i2c_dev
->
SemLock
));

288 i‡(
îr‹_code
 != 0) {

289 
îr
 = 
DEF_FAIL
;

291 
	`Mem_C›y
(
p_buf
, &
p_i2c_dev
->
RxBuf
[1], 
nbr_byãs
);

294  (
îr
);

296 
	}
}

324 
CPU_BOOLEAN
 
	$BSP_I2C_Wr
 (
CPU_INT08U
 
i2c_id
,

325 
CPU_INT08U
 
i2c_addr
,

326 
CPU_INT08U
 *
off£t_buf
,

327 
CPU_INT08U
 
off£t_Àn
,

328 
CPU_INT08U
 *
p_buf
,

329 
CPU_INT16U
 
nbr_byãs
)

331 
CPU_BOOLEAN
 
îr
;

332 
I2C_PARAM_T
 
∑øm
;

333 
I2C_RESULT_T
 
ªsu…
;

334 
Eº‹Code_t
 
îr‹_code
;

335 
BSP_I2C_DEV
 *
p_i2c_dev
;

337 i‡((
off£t_buf
 =(
CPU_INT08U
 *)0Ë|| (
p_buf
 == (CPU_INT08U *)0)) {

338  (
DEF_FAIL
);

340 i‡((
nbr_byãs
 < 1Ë|| ((
off£t_Àn
 +Çbr_byã†+ 1Ë> 
BSP_I2C_BUF_SIZE
)) {

341  (
DEF_FAIL
);

343 
i2c_id
) {

344 
BSP_I2C_ID_I2C0
:

345 
p_i2c_dev
 = (
BSP_I2C_DEV
 *)&
BSP_I2C_DevTbl
[0];

349  (
DEF_FAIL
);

352 
îr
 = 
	`BSP_OS_SemWaô
(&(
p_i2c_dev
->
SemLock
), 0);

353 i‡(
îr
 =
DEF_FAIL
) {

354  (
DEF_FAIL
);

357 
p_i2c_dev
->
TxBuf
[0] = ((
i2c_addr
 << 1Ë& 
	`DEF_BIT_FIELD
(7, 1));

358 
	`Mem_C›y
(&
p_i2c_dev
->
TxBuf
[1], 
off£t_buf
, 
off£t_Àn
);

359 
	`Mem_C›y
(&
p_i2c_dev
->
TxBuf
[
off£t_Àn
 + 1], 
p_buf
, 
nbr_byãs
);

366 
∑øm
.
num_byãs_£nd
 = 
off£t_Àn
 + 
nbr_byãs
 + 1;

367 
∑øm
.
buf„r_±r_£nd
 = 
p_i2c_dev
->
TxBuf
;

368 
∑øm
.
num_byãs_ªc
 = 0;

369 
∑øm
.
°›_Êag
 = 1;

370 
∑øm
.
func_±
 = 
BSP_I2C0_CÆlback
;

373 
LPC_I2CD_API
->
	`i2c_£t_timeout
(
p_i2c_dev
->
I2CH™dÀ
, 100000);

377 
îr‹_code
 = 
LPC_I2CD_API
->
	`i2c_ma°î_å™smô_öå
(
p_i2c_dev
->
I2CH™dÀ
, &
∑øm
, &
ªsu…
);

379 
îr
 = 
	`BSP_OS_SemWaô
(&(
p_i2c_dev
->
SemWaô
), 500);

381 
	`BSP_OS_SemPo°
(&(
p_i2c_dev
->
SemLock
));

383 i‡(
îr‹_code
 != 0) {

384 
îr
 = 
DEF_FAIL
;

387  (
îr
);

388 
	}
}

415 
CPU_BOOLEAN
 
	$BSP_I2C_WrRd
 (
CPU_INT08U
 
i2c_id
,

416 
CPU_INT08U
 
i2c_addr
,

417 
CPU_INT08U
 *
off£t_buf
,

418 
CPU_INT08U
 
off£t_Àn
,

419 
CPU_INT08U
 *
p_buf
,

420 
CPU_INT16U
 
nbr_byãs
)

422 
CPU_BOOLEAN
 
îr
;

423 
I2C_PARAM_T
 
∑øm
;

424 
I2C_RESULT_T
 
ªsu…
;

425 
Eº‹Code_t
 
îr‹_code
;

426 
BSP_I2C_DEV
 *
p_i2c_dev
;

428 i‡((
off£t_buf
 =(
CPU_INT08U
 *)0Ë|| (
p_buf
 == (CPU_INT08U *)0)) {

429  (
DEF_FAIL
);

431 i‡((
nbr_byãs
 < 1) ||

432 ((
off£t_Àn
 + 1Ë> 
BSP_I2C_BUF_SIZE
) ||

433 ((
nbr_byãs
 + 1Ë> 
BSP_I2C_BUF_SIZE
)) {

434  (
DEF_FAIL
);

436 
i2c_id
) {

437 
BSP_I2C_ID_I2C0
:

438 
p_i2c_dev
 = (
BSP_I2C_DEV
 *)&
BSP_I2C_DevTbl
[0];

442  (
DEF_FAIL
);

445 
îr
 = 
	`BSP_OS_SemWaô
(&(
p_i2c_dev
->
SemLock
), 0);

446 i‡(
îr
 =
DEF_FAIL
) {

447  (
DEF_FAIL
);

450 
p_i2c_dev
->
TxBuf
[0] = ((
i2c_addr
 << 1Ë& 
	`DEF_BIT_FIELD
(7, 1));

451 
p_i2c_dev
->
RxBuf
[0] = ((
i2c_addr
 << 1Ë| 
DEF_BIT_00
);

452 
	`Mem_C›y
(&
p_i2c_dev
->
TxBuf
[1], 
off£t_buf
, 
off£t_Àn
);

459 
∑øm
.
num_byãs_£nd
 = 
off£t_Àn
 + 1;

460 
∑øm
.
buf„r_±r_£nd
 = 
p_i2c_dev
->
TxBuf
;

461 
∑øm
.
num_byãs_ªc
 = 
nbr_byãs
 + 1;

462 
∑øm
.
buf„r_±r_ªc
 = 
p_i2c_dev
->
RxBuf
;

463 
∑øm
.
°›_Êag
 = 1;

464 
∑øm
.
func_±
 = 
BSP_I2C0_CÆlback
;

467 
LPC_I2CD_API
->
	`i2c_£t_timeout
(
p_i2c_dev
->
I2CH™dÀ
, 100000);

471 
îr‹_code
 = 
LPC_I2CD_API
->
	`i2c_ma°î_tx_rx_öå
(
p_i2c_dev
->
I2CH™dÀ
, &
∑øm
, &
ªsu…
);

473 
îr
 = 
	`BSP_OS_SemWaô
(&(
p_i2c_dev
->
SemWaô
), 500);

475 
	`BSP_OS_SemPo°
(&(
p_i2c_dev
->
SemLock
));

477 i‡(
îr‹_code
 != 0) {

478 
îr
 = 
DEF_FAIL
;

480 
	`Mem_C›y
(
p_buf
, &
p_i2c_dev
->
RxBuf
[1], 
nbr_byãs
);

483  (
îr
);

484 
	}
}

504 
	$BSP_I2C0_ISR_H™dÀr
 ()

507 
LPC_I2CD_API
->
	`i2c_i§_h™dÀr
(
BSP_I2C_DevTbl
[0].
I2CH™dÀ
);

508 
	}
}

522 
	$BSP_I2C0_CÆlback
 (
CPU_INT32U
 
îr_code
, CPU_INT32U 
n
)

524 
	`BSP_OS_SemPo°
(&(
BSP_I2C_DevTbl
[0].
SemWaô
));

525 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_i2c.h

35 #i‚de‡ 
BSP_I2C_PRESENT


36 
	#BSP_I2C_PRESENT


	)

45 #ifde‡ 
BSP_I2C_MODULE


46 
	#BSP_I2C_EXT


	)

48 
	#BSP_I2C
 

	)

58 
	#BSP_I2C_ID_I2C0
 0

	)

59 
	#BSP_I2C_ID_I2C1
 1

	)

60 
	#BSP_I2C_ID_I2C2
 2

	)

61 
	#BSP_I2C_ID_I2C3
 3

	)

63 
	#BSP_I2C_NBR_MAX
 1

	)

65 
	#BSP_I2C_MODE_STANDARD_MAX_FREQ_HZ
 100000

	)

66 
	#BSP_I2C_MODE_STANDARD
 0

	)

68 
	#BSP_I2C_MODE_FAST_MAX_FREQ_HZ
 400000

	)

69 
	#BSP_I2C_MODE_FAST_1_2
 1

	)

70 
	#BSP_I2C_MODE_FAST_16_9
 2

	)

99 
CPU_BOOLEAN
 
BSP_I2C_Inô
 (
CPU_INT08U
 
i2c_id
,

100 
CPU_INT08U
 
i2c_mode
,

101 
CPU_INT32U
 
bô_øã
);

103 
CPU_BOOLEAN
 
BSP_I2C_Wr
 (
CPU_INT08U
 
i2c_id
,

104 
CPU_INT08U
 
i2c_addr
,

105 
CPU_INT08U
 *
off£t_buf
,

106 
CPU_INT08U
 
off£t_Àn
,

107 
CPU_INT08U
 *
p_buf
,

108 
CPU_INT16U
 
nbr_byãs
);

110 
CPU_BOOLEAN
 
BSP_I2C_Rd
 (
CPU_INT08U
 
i2c_id
,

111 
CPU_INT08U
 
i2c_addr
,

112 
CPU_INT08U
 *
p_buf
,

113 
CPU_INT16U
 
nbr_byãs
);

115 
CPU_BOOLEAN
 
BSP_I2C_WrRd
 (
CPU_INT08U
 
i2c_nbr
,

116 
CPU_INT08U
 
i2c_addr
,

117 
CPU_INT08U
 *
off£t_buf
,

118 
CPU_INT08U
 
off£t_Àn
,

119 
CPU_INT08U
 *
p_buf
,

120 
CPU_INT16U
 
nbr_byãs
);

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_int.c

34 
	#BSP_INT_MODULE


	)

35 
	~<b•.h
>

37 #ifde‡ 
BSP_CFG_OS


38 
	~<b•_os.h
>

48 
	#BSP_INT_SRC_NBR
 32

	)

71 
CPU_FNCT_VOID
 
	gBSP_I¡Ve˘Tbl
[
BSP_INT_SRC_NBR
];

87 
BSP_I¡H™dÀr
 (
CPU_DATA
 
öt_id
);

88 
BSP_I¡H™dÀrDummy
 ();

114 
	$BSP_I¡CÃ
 (
CPU_DATA
 
öt_id
)

117 
	}
}

136 
	$BSP_I¡Dis
 (
CPU_DATA
 
öt_id
)

138 i‡(
öt_id
 < 
BSP_INT_SRC_NBR
) {

139 
	`CPU_I¡SrcDis
(
öt_id
 + 16);

141 
	}
}

160 
	$BSP_I¡DisAŒ
 ()

162 
	`CPU_I¡Dis
();

163 
	}
}

182 
	$BSP_I¡En
 (
CPU_DATA
 
öt_id
)

184 i‡(
öt_id
 < 
BSP_INT_SRC_NBR
) {

185 
	`CPU_I¡SrcEn
(
öt_id
 + 16);

187 
	}
}

208 
	$BSP_I¡Ve˘Së
 (
CPU_DATA
 
öt_id
,

209 
CPU_FNCT_VOID
 
i§
)

211 
	`CPU_SR_ALLOC
();

214 i‡(
öt_id
 < 
BSP_INT_SRC_NBR
) {

215 
	`CPU_CRITICAL_ENTER
();

216 
BSP_I¡Ve˘Tbl
[
öt_id
] = 
i§
;

217 
	`CPU_CRITICAL_EXIT
();

219 
	}
}

240 
	$BSP_I¡PrioSë
 (
CPU_DATA
 
öt_id
,

241 
CPU_INT08U
 
¥io
)

243 
	`CPU_SR_ALLOC
();

246 i‡(
öt_id
 < 
BSP_INT_SRC_NBR
) {

247 
	`CPU_CRITICAL_ENTER
();

248 
	`CPU_I¡SrcPrioSë
(
öt_id
 + 16, 
¥io
);

249 
	`CPU_CRITICAL_EXIT
();

251 
	}
}

278 
	$BSP_I¡Inô
 ()

280 
CPU_DATA
 
öt_id
;

283 
öt_id
 = 0; i¡_id < 
BSP_INT_SRC_NBR
; int_id++) {

284 
	`BSP_I¡Ve˘Së
(
öt_id
, 
BSP_I¡H™dÀrDummy
);

286 
	}
}

305 
	$BSP_I¡H™dÀrSPI0
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_SPI0
); 
	}
}

306 
	$BSP_I¡H™dÀrSPI1
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_SPI1
); 
	}
}

307 
	$BSP_I¡H™dÀrRSVD2
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_RSVD2
); 
	}
}

308 
	$BSP_I¡H™dÀrUART0
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_UART0
); 
	}
}

309 
	$BSP_I¡H™dÀrUART1
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_UART1
); 
	}
}

310 
	$BSP_I¡H™dÀrUART2
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_UART2
); 
	}
}

311 
	$BSP_I¡H™dÀrRSVD6
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_RSVD6
); 
	}
}

312 
	$BSP_I¡H™dÀrI2C1
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_I2C1
); 
	}
}

313 
	$BSP_I¡H™dÀrI2C0
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_I2C0
); 
	}
}

314 
	$BSP_I¡H™dÀrSCT
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_SCT
); 
	}
}

315 
	$BSP_I¡H™dÀrMRT
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_MRT
); 
	}
}

316 
	$BSP_I¡H™dÀrCMP
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_CMP
); 
	}
}

317 
	$BSP_I¡H™dÀrWDT
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_WDT
); 
	}
}

318 
	$BSP_I¡H™dÀrBOD
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_BOD
); 
	}
}

319 
	$BSP_I¡H™dÀrFLASH
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_FLASH
); 
	}
}

320 
	$BSP_I¡H™dÀrWKT
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_WKT
); 
	}
}

321 
	$BSP_I¡H™dÀrADC_SEQA
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_ADC_SEQA
); 
	}
}

322 
	$BSP_I¡H™dÀrADC_SEQB
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_ADC_SEQB
); 
	}
}

323 
	$BSP_I¡H™dÀrADC_THCMP
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_ADC_THCMP
); 
	}
}

324 
	$BSP_I¡H™dÀrADC_OVR
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_ADC_OVR
); 
	}
}

325 
	$BSP_I¡H™dÀrDMA
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_DMA
); 
	}
}

326 
	$BSP_I¡H™dÀrI2C2
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_I2C2
); 
	}
}

327 
	$BSP_I¡H™dÀrI2C3
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_I2C3
); 
	}
}

328 
	$BSP_I¡H™dÀrRSVD23
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_RSVD23
); 
	}
}

329 
	$BSP_I¡H™dÀrPIO_INT0
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_PIO_INT0
); 
	}
}

330 
	$BSP_I¡H™dÀrPIO_INT1
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_PIO_INT1
); 
	}
}

331 
	$BSP_I¡H™dÀrPIO_INT2
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_PIO_INT2
); 
	}
}

332 
	$BSP_I¡H™dÀrPIO_INT3
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_PIO_INT3
); 
	}
}

333 
	$BSP_I¡H™dÀrPIO_INT4
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_PIO_INT4
); 
	}
}

334 
	$BSP_I¡H™dÀrPIO_INT5
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_PIO_INT5
); 
	}
}

335 
	$BSP_I¡H™dÀrPIO_INT6
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_PIO_INT6
); 
	}
}

336 
	$BSP_I¡H™dÀrPIO_INT7
 (Ë{ 
	`BSP_I¡H™dÀr
(
BSP_INT_ID_PIO_INT7
); 
	}
}

363 
	$BSP_I¡H™dÀr
 (
CPU_DATA
 
öt_id
)

365 
CPU_FNCT_VOID
 
i§
;

367 #ifde‡ 
BSP_CFG_OS


368 
	`CPU_SR_ALLOC
();

371 
	`CPU_CRITICAL_ENTER
();

373 
	`OSI¡E¡î
();

375 
	`CPU_CRITICAL_EXIT
();

378 i‡(
öt_id
 < 
BSP_INT_SRC_NBR
) {

379 
i§
 = 
BSP_I¡Ve˘Tbl
[
öt_id
];

380 i‡(
i§
 !(
CPU_FNCT_VOID
)0) {

381 
	`i§
();

385 #ifde‡ 
BSP_CFG_OS


386 
	`OSI¡Exô
();

388 
	}
}

407 
	$BSP_I¡H™dÀrDummy
 ()

410 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_ser.c

43 
	#BSP_SER_MODULE


	)

44 
	~<b•.h
>

45 
	~<b•_os.h
>

81 #i‡(
APP_CFG_SERIAL_EN
 =
DEF_ENABLED
)

83 
BSP_OS_SEM
 
	gBSP_SîTxWaô
;

84 
BSP_OS_SEM
 
	gBSP_SîRxWaô
;

85 
BSP_OS_SEM
 
	gBSP_SîLock
;

86 
CPU_INT08U
 
	gBSP_SîRxD©a
;

87 
CPU_INT08U
 
	gBSP_SîTxD©a
;

89 #i‡(
BSP_CFG_SER_CMD_HISTORY_LEN
 > 0u)

90 
CPU_CHAR
 
	gBSP_SîCmdHi°‹y
[
BSP_CFG_SER_CMD_HISTORY_LEN
];

99 
BSP_Sî_WrByãU∆ocked
 (
CPU_INT08U
 
c
);

100 
CPU_INT08U
 
BSP_Sî_RdByãU∆ocked
 ();

101 
BSP_Sî_ISR_H™dÀr
 ();

102 
BSP_Sî_SëBaud
(
LPC_USART_T
 *
pUART
, 
CPU_INT32U
 
baudøã
);

136 
	$BSP_Sî_Inô
 (
CPU_INT32U
 
baud_øã
)

138 
	`BSP_OS_SemCª©e
(&
BSP_SîTxWaô
, 0, "Serial Tx Wait");

139 
	`BSP_OS_SemCª©e
(&
BSP_SîRxWaô
, 0, "Serial Rx Wait");

140 
	`BSP_OS_SemCª©e
(&
BSP_SîLock
, 1, "Serial Lock");

142 #i‡(
BSP_CFG_SER_CMD_HISTORY_LEN
 > 0u)

143 
BSP_SîCmdHi°‹y
[0] = (
CPU_CHAR
)'\0';

147 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

151 
	`Chù_SWM_DißbÀFixedPö
(
SWM_FIXED_ACMP_I1
);

152 
	`Chù_SWM_DißbÀFixedPö
(
SWM_FIXED_ADC11
);

155 
	`Chù_Clock_SëUARTClockDiv
(1);

158 
	`Chù_SWM_MovabÀPöAssign
(
SWM_U1_TXD_O
, 4);

159 
	`Chù_SWM_MovabÀPöAssign
(
SWM_U1_RXD_I
, 0);

162 
	`Chù_Clock_DißbÀPîùhClock
(
SYSCTL_CLOCK_SWM
);

165 
	`Chù_Clock_E«bÀPîùhClock
(
SYSCTL_CLOCK_UART1
);

168 
	`Chù_SYSCTL_PîùhRe£t
(
RESET_USART1
);

171 
	`Chù_UART_C⁄figD©a
(
BSP_CONSOLE
, 
UART_CFG_DATALEN_8
 | 
UART_CFG_PARITY_NONE
 | 
UART_CFG_STOPLEN_1
);

172 
	`Chù_Clock_SëUSARTNBa£ClockR©e
((
baud_øã
 * 6 * 16), 
åue
);

173 
	`BSP_Sî_SëBaud
(
BSP_CONSOLE
, 
baud_øã
);

180 
	`BSP_I¡Ve˘Së
(
BSP_INT_ID_UART1
, 
BSP_Sî_ISR_H™dÀr
);

181 
	`BSP_I¡En
(
BSP_INT_ID_UART1
);

184 
	`Chù_UART_E«bÀ
(
BSP_CONSOLE
);

185 
	`Chù_UART_TXE«bÀ
(
BSP_CONSOLE
);

186 
	}
}

189 
	$BSP_Sî_SëBaud
(
LPC_USART_T
 *
pUART
, 
CPU_INT32U
 
baudøã
)

191 
CPU_INT32U
 
baudR©eGíî©‹
;

192 
baudR©eGíî©‹
 = 
	`Chù_Clock_GëUSARTNBa£ClockR©e
(Ë/ (16 * 
baudøã
);

193 
pUART
->
BRG
 = 
baudR©eGíî©‹
 - 1;

194 
	}
}

212 
	$BSP_Sî_ISR_H™dÀr
 ()

214 
CPU_INT32U
 
°©us
;

215 
LPC_USART_T
 *
UART_ba£
 = 
BSP_CONSOLE
;

217 
°©us
 = 
	`Chù_UART_GëI¡Sètus
(
UART_ba£
);

218 i‡(
°©us
 & 
UART_STAT_RXRDY
) {

219 
BSP_SîRxD©a
 = 
	`Chù_UART_RódByã
(
UART_ba£
);

220 
	`BSP_OS_SemPo°
(&
BSP_SîRxWaô
);

223 i‡((
	`Chù_UART_GëI¡sE«bÀd
(
UART_ba£
Ë& 
UART_STAT_TXRDY
) &&

224 (
°©us
 & 
UART_STAT_TXRDY
)) {

225 
	`Chù_UART_SídByã
(
UART_ba£
, 
BSP_SîTxD©a
);

226 
	`Chù_UART_I¡DißbÀ
(
UART_ba£
, 
UART_STAT_TXRDY
);

227 
	`BSP_OS_SemPo°
(&
BSP_SîTxWaô
);

229 
	}
}

250 
	$BSP_Sî_Prötf
 (
CPU_CHAR
 *
f‹m©
, ...)

252 
CPU_CHAR
 
buf_°r
[
BSP_SER_PRINTF_STR_BUF_SIZE
 + 1u];

253 
va_li°
 
v_¨gs
;

256 
	`va_°¨t
(
v_¨gs
, 
f‹m©
);

257 ()
	`v¢¥ötf
((*)&
buf_°r
[0],

258 (
size_t
 )(
buf_°r
),

259 (c⁄° *)
f‹m©
,

260 
v_¨gs
);

261 
	`va_íd
(
v_¨gs
);

263 
	`BSP_Sî_WrSå
(
buf_°r
);

264 
	}
}

285 
CPU_INT08U
 
	$BSP_Sî_RdByã
 ()

287 
CPU_INT08U
 
rx_byã
;

289 
	`BSP_OS_SemWaô
(&
BSP_SîLock
, 0);

291 
rx_byã
 = 
	`BSP_Sî_RdByãU∆ocked
();

293 
	`BSP_OS_SemPo°
(&
BSP_SîLock
);

295  (
rx_byã
);

296 
	}
}

316 
CPU_INT08U
 
	$BSP_Sî_RdByãU∆ocked
 ()

318 
CPU_INT08U
 
rx_byã
;

319 
LPC_USART_T
 *
UART_ba£
 = 
BSP_CONSOLE
;

321 
	`Chù_UART_I¡E«bÀ
(
UART_ba£
, 
UART_INTEN_RXRDY
);

323 
	`BSP_OS_SemWaô
(&
BSP_SîRxWaô
, 0);

325 
	`Chù_UART_I¡DißbÀ
(
UART_ba£
, 
UART_INTEN_RXRDY
);

327 
rx_byã
 = 
BSP_SîRxD©a
;

329  (
rx_byã
);

330 
	}
}

350 
	$BSP_Sî_RdSå
 (
CPU_CHAR
 *
p_°r
,

351 
CPU_INT16U
 
Àn
)

353 
CPU_CHAR
 *
p_ch¨
;

354 
CPU_BOOLEAN
 
rxd_hi°‹y_ch¨0
;

355 
CPU_CHAR
 
rx_d©a
;

356 
CPU_BOOLEAN
 
îr
;

359 
rxd_hi°‹y_ch¨0
 = 
DEF_NO
;

360 
p_°r
[0] = (
CPU_CHAR
)'\0';

361 
p_ch¨
 = 
p_°r
;

363 
îr
 = 
	`BSP_OS_SemWaô
(&
BSP_SîLock
, 0);

365 i‡(
îr
 !
DEF_OK
 ) {

369 
DEF_TRUE
)

371 
rx_d©a
 = 
	`BSP_Sî_RdByãU∆ocked
();

373 i‡((
rx_d©a
 =
ASCII_CHAR_CARRIAGE_RETURN
) ||

374 (
rx_d©a
 =
ASCII_CHAR_LINE_FEED
 )) {

376 
	`BSP_Sî_WrByãU∆ocked
((
CPU_INT08U
)
ASCII_CHAR_LINE_FEED
);

377 
	`BSP_Sî_WrByãU∆ocked
((
CPU_INT08U
)
ASCII_CHAR_CARRIAGE_RETURN
);

378 *
p_ch¨
 = (
CPU_CHAR
)'\0';

379 #i‡(
BSP_CFG_SER_CMD_HISTORY_LEN
 > 0u)

380 
	`Så_C›y
(
BSP_SîCmdHi°‹y
, 
p_°r
);

385 i‡(
rx_d©a
 =
ASCII_CHAR_BACKSPACE
) {

386 i‡(
p_ch¨
 > 
p_°r
) {

387 
	`BSP_Sî_WrByãU∆ocked
((
CPU_INT08U
)
ASCII_CHAR_BACKSPACE
);

388 
p_ch¨
--;

392 i‡((
	`ASCII_IsPröt
(
rx_d©a
) ) &&

393 (
rxd_hi°‹y_ch¨0
 =
DEF_NO
)) {

394 
	`BSP_Sî_WrByãU∆ocked
((
CPU_INT08U
)
rx_d©a
);

395 *
p_ch¨
 = 
rx_d©a
;

396 
p_ch¨
++;

397 i‡(
p_ch¨
 >&
p_°r
[
Àn
]) {

398 
p_ch¨
 = &
p_°r
[
Àn
];

401 } i‡((
rx_d©a
 =
ASCII_CHAR_ESCAPE
) &&

402 (
rxd_hi°‹y_ch¨0
 =
DEF_NO
 )) {

403 
rxd_hi°‹y_ch¨0
 = 
DEF_YES
;

405 #i‡(
BSP_CFG_SER_CMD_HISTORY_LEN
 > 0u)

406 } i‡((
rx_d©a
 =
ASCII_CHAR_LEFT_SQUARE_BRACKET
) &&

407 (
rxd_hi°‹y_ch¨0
 =
DEF_YES
 )) {

409 
p_ch¨
 !
p_°r
) {

410 
	`BSP_Sî_WrByãU∆ocked
((
CPU_INT08U
)
ASCII_CHAR_BACKSPACE
);

411 
p_ch¨
--;

414 
	`Så_C›y
(
p_°r
, 
BSP_SîCmdHi°‹y
);

416 *
p_ch¨
 != '\0') {

417 
	`BSP_Sî_WrByãU∆ocked
(*
p_ch¨
++);

421 
rxd_hi°‹y_ch¨0
 = 
DEF_NO
;

425 
	`BSP_OS_SemPo°
(&
BSP_SîLock
);

426 
	}
}

446 
	$BSP_Sî_WrByãU∆ocked
 (
CPU_INT08U
 
c
)

448 
LPC_USART_T
 *
UART_ba£
 = 
BSP_CONSOLE
;

450 
BSP_SîTxD©a
 = 
c
;

451 
	`Chù_UART_I¡E«bÀ
(
UART_ba£
, 
UART_INTEN_TXRDY
);

452 
	`BSP_OS_SemWaô
(&
BSP_SîTxWaô
, 0);

453 
	}
}

472 
	$BSP_Sî_WrByã
(
CPU_INT08U
 
c
)

474 
	`BSP_OS_SemWaô
(&
BSP_SîLock
, 0);

476 
	`BSP_Sî_WrByãU∆ocked
(
c
);

478 
	`BSP_OS_SemPo°
(&
BSP_SîLock
);

479 
	}
}

498 
	$BSP_Sî_WrSå
 (
CPU_CHAR
 *
p_°r
)

500 
CPU_BOOLEAN
 
îr
;

503 i‡(
p_°r
 =(
CPU_CHAR
 *)0) {

508 
îr
 = 
	`BSP_OS_SemWaô
(&
BSP_SîLock
, 0);

509 i‡(
îr
 !
DEF_OK
 ) {

513 (*
p_°r
Ë!(
CPU_CHAR
 )0) {

514 i‡(*
p_°r
 =
ASCII_CHAR_LINE_FEED
) {

515 
	`BSP_Sî_WrByãU∆ocked
(
ASCII_CHAR_CARRIAGE_RETURN
);

516 
	`BSP_Sî_WrByãU∆ocked
(
ASCII_CHAR_LINE_FEED
);

517 
p_°r
++;

519 
	`BSP_Sî_WrByãU∆ocked
(*
p_°r
++);

523 
	`BSP_OS_SemPo°
(&
BSP_SîLock
);

524 
	}
}

526 #i‡(
APP_CFG_PRINTF_EN
 =
DEF_ENABLED
)

530 #¥agm®
imp‹t
(
__u£_no_£miho°ög
)

532 
	s__FILE


534 
	mh™dÀ
;

537 
FILE
 
	g__°dout
;

539 
	$_sys_exô
 (
x
)

541 
x
 = x;

543 
	}
}

545 
	$Âutc
 (
ch
, 
FILE
 *
f
)

547 
	`BSP_OS_SemWaô
(&
BSP_SîLock
, 0);

549 
	`BSP_Sî_WrByãU∆ocked
((
CPU_INT08U
)
ch
);

551 
	`BSP_OS_SemPo°
(&
BSP_SîLock
);

553  
ch
;

554 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_ser.h

45 #i‚de‡ 
BSP_SER_PRESENT


46 
	#BSP_SER_PRESENT


	)

55 #ifde‡ 
BSP_SER_MODULE


56 
	#BSP_SER_EXT


	)

58 
	#BSP_SER
 

	)

68 
	#BSP_SER_COMM_UART_NONE
 0xFF

	)

69 
	#BSP_SER_COMM_UART_02
 2

	)

71 
	#BSP_SER_PRINTF_STR_BUF_SIZE
 80u

	)

98 
	#Sî_Inô
 
BSP_Sî_Inô


	)

99 
	#Sî_WrByã
 
BSP_Sî_WrByã


	)

100 
	#Sî_WrSå
 
BSP_Sî_WrSå


	)

101 
	#Sî_RdByã
 
BSP_Sî_RdByã


	)

102 
	#Sî_RdSå
 
BSP_Sî_RdSå


	)

103 
	#Sî_Prötf
 
BSP_Sî_Prötf


	)

120 
BSP_Sî_Inô
 (
CPU_INT32U
 
baud_øã
);

122 
CPU_INT08U
 
BSP_Sî_RdByã
();

123 
BSP_Sî_RdSå
 (
CPU_CHAR
 *
p_°r
,

124 
CPU_INT16U
 
Àn
);

126 
BSP_Sî_WrByã
(
CPU_INT08U
 
c
);

127 
BSP_Sî_WrSå
 (
CPU_CHAR
 *
p_°r
);

129 
BSP_Sî_Prötf
(
CPU_CHAR
 *
f‹m©
,

132 
BSP_C⁄sﬁe_E«bÀ
 ();

133 
CPU_INT08U
 
BSP_C⁄sﬁe_GëCh¨
 ();

134 
BSP_C⁄sﬁe_PutCh¨
 (
c
);

144 #i‚de‡ 
BSP_CFG_SER_COMM_SEL


148 #ñi‡ (
BSP_CFG_SER_COMM_SEL
 !
BSP_UART1
)

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/cpu_bsp.c

43 
	#CPU_BSP_MODULE


	)

44 
	~<˝u_c‹e.h
>

45 
	~<b•.h
>

53 
	#CPU_BSP_REG_DEMCR
 (*(
CPU_REG32
 *)0xE000EDFC)

	)

54 
	#CPU_BSP_REG_DWT_CR
 (*(
CPU_REG32
 *)0xE0001000)

	)

55 
	#CPU_BSP_REG_DWT_CYCCNT
 (*(
CPU_REG32
 *)0xE0001004)

	)

57 
	#DEM_CR_TRCENA
 
DEF_BIT_24


	)

59 
	#DWT_CR_CYCCNTENA
 
DEF_BIT_00


	)

155 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

156 
	$CPU_TS_TmrInô
 ()

158 
CPU_INT32U
 
˝u_˛k_‰eq_hz
;

163 
SIM_SCGC6
 |
SIM_SCGC6_TPM1_MASK
;

165 
SIM_SOPT2
 |
	`SIM_SOPT2_TPMSRC
(1);

167 
TPM1_MOD
 = 0xFFFF;

168 
TPM1_C0SC
 = 
TPM_Cn_MODE
;

169 
TPM1_C0V
 = 0;

171 
TPM1_SC
 = 
	`TPM_SC_CMOD
(1Ë| 
	`TPM_SC_PS
(0);

174 
˝u_˛k_‰eq_hz
 = 
	`BSP_CPU_ClkFªq
();

175 
	`CPU_TS_TmrFªqSë
(
˝u_˛k_‰eq_hz
 * 5);

176 
	}
}

262 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

263 
CPU_TS_TMR
 
	$CPU_TS_TmrRd
 ()

265 
CPU_TS_TMR
 
ts_tmr_˙ts
;

268 
ts_tmr_˙ts
 = (
CPU_TS_TMR
)
TPM1_CNT
;

270 
ts_tmr_˙ts
 = 0;

273  (
ts_tmr_˙ts
);

274 
	}
}

334 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
)

335 
CPU_INT64U
 
	$CPU_TS32_to_uSec
 (
CPU_TS32
 
ts_˙ts
)

337 
CPU_INT64U
 
ts_us
;

338 
CPU_INT64U
 
f˛k_‰eq
;

341 
f˛k_‰eq
 = 
	`BSP_CPU_ClkFªq
();

342 
ts_us
 = 
ts_˙ts
 / (
f˛k_‰eq
 / 
DEF_TIME_NBR_uS_PER_SEC
);

344  (
ts_us
);

345 
	}
}

349 #i‡(
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
)

350 
CPU_INT64U
 
	$CPU_TS64_to_uSec
 (
CPU_TS64
 
ts_˙ts
)

352 
CPU_INT64U
 
ts_us
;

353 
CPU_INT64U
 
f˛k_‰eq
;

356 
f˛k_‰eq
 = 
	`BSP_CPU_ClkFªq
();

357 
ts_us
 = 
ts_˙ts
 / (
f˛k_‰eq
 / 
DEF_TIME_NBR_uS_PER_SEC
);

359  (
ts_us
);

360 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/KeilMDK/RTE/RTE_Components.h

10 #i‚de‡
RTE_COMPONENTS_H


11 
	#RTE_COMPONENTS_H


	)

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/app.c

34 
	~<≠p_cfg.h
>

35 
	~<ö˛udes.h
>

50 
OS_TCB
 
	gAµ_TaskSèπTCB
;

51 
CPU_STK_SIZE
 
	gAµ_TaskSèπStk
[
APP_CFG_TASK_START_STK_SIZE
];

53 
OS_TCB
 
	gAµ_TaskLEDTCB
;

54 
CPU_STK_SIZE
 
	gAµ_TaskLEDStk
[
APP_CFG_TASK_LED_STK_SIZE
];

62 
Aµ_ObjCª©e
 ();

63 
Aµ_TaskCª©e
 ();

65 
Aµ_TaskSèπ
 (*
p_¨g
);

66 
Aµ_TaskLED
 (*
p_¨g
);

85 
	$maö
 ()

87 
OS_ERR
 
îr
;

89 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

90 
CPU_ERR
 
˝u_îr
;

94 
	`CPU_Inô
();

96 
	`Mem_Inô
();

98 
	`M©h_Inô
();

100 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

101 
	`CPU_NameSë
((
CPU_CHAR
 *)"LPC824Lite",

102 (
CPU_ERR
 *)&
˝u_îr
);

105 
	`BSP_I¡DisAŒ
();

107 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

108 
	`TRACE_INIT
();

109 
	`TRACE_START
();

112 
	`OSInô
(&
îr
);

114 
	`OSTaskCª©e
((
OS_TCB
 *)&
Aµ_TaskSèπTCB
,

115 (
CPU_CHAR
 *)"Startup Task",

116 (
OS_TASK_PTR
 ) 
Aµ_TaskSèπ
,

118 (
OS_PRIO
 ) 
APP_CFG_TASK_START_PRIO
,

119 (
CPU_STK
 *)&
Aµ_TaskSèπStk
[0],

120 (
CPU_STK
 )(
APP_CFG_TASK_START_STK_SIZE
 / 10u),

121 (
CPU_STK_SIZE
Ë
APP_CFG_TASK_START_STK_SIZE
,

122 (
OS_MSG_QTY
 ) 0,

123 (
OS_TICK
 ) 0,

125 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
),

126 (
OS_ERR
 *)&
îr
);

128 
	`OSSèπ
(&
îr
);

130 
DEF_ON
) {

132 
	}
}

153 
	$Aµ_TaskSèπ
 (*
p_¨g
)

155 
OS_ERR
 
os_îr
;

156 
CPU_INT08U
 
wd©a
[4] = {0x5a, 0xa5, 0x55, 0xaa};

157 
CPU_INT08U
 
rd©a
[4] = {0};

158 
CPU_INT16U
 
˙ts
;

160 ()
p_¨g
;

162 
	`BSP_Inô
();

164 
	`BSP_Tick_Inô
();

166 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

167 
	`OSSètTaskCPUUßgeInô
(&
os_îr
);

170 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


171 
	`CPU_I¡DisMósMaxCurRe£t
();

174 
	`APP_TRACE_INFO
(("Creating Application Events...\n\r"));

175 
	`Aµ_ObjCª©e
();

177 
	`APP_TRACE_INFO
(("Creating Application Tasks...\n\r"));

178 
	`Aµ_TaskCª©e
();

180 
	`BSP_AT24_Wrôe
(
EEPROM_POST_ADDR
, 4, 
wd©a
, &
˙ts
);

181 
	`BSP_AT24_Ród
(
EEPROM_POST_ADDR
, 4, 
rd©a
, &
˙ts
);

182 i‡(
	`Mem_Cmp
(
wd©a
, 
rd©a
, 4Ë!
DEF_YES
) {

183 
	`APP_TRACE_INFO
(("EEPROM POST data: 0x%02x-0x%02x-0x%02x-0x%02x\n\r",

184 
rd©a
[0],Ñdata[1],Ñdata[2],Ñdata[3]));

186 
	`APP_TRACE_INFO
(("EEPROM Test .............................. PASS\n\r"));

189 
DEF_TRUE
) {

190 
	`OSTimeDlyHMSM
(0, 0, 0, 100,

191 
OS_OPT_TIME_HMSM_STRICT
, &
os_îr
);

193 
	}
}

212 
	$Aµ_ObjCª©e
 ()

214 
	}
}

233 
	$Aµ_TaskCª©e
 ()

235 
OS_ERR
 
îr
;

238 
	`OSTaskCª©e
((
OS_TCB
 *)&
Aµ_TaskLEDTCB
,

239 (
CPU_CHAR
 *)"LED Task",

240 (
OS_TASK_PTR
 ) 
Aµ_TaskLED
,

242 (
OS_PRIO
 ) 
APP_CFG_TASK_LED_PRIO
,

243 (
CPU_STK
 *)&
Aµ_TaskLEDStk
[0],

244 (
CPU_STK
 )(
APP_CFG_TASK_LED_STK_SIZE
 / 10u),

245 (
CPU_STK_SIZE
Ë
APP_CFG_TASK_LED_STK_SIZE
,

246 (
OS_MSG_QTY
 ) 0,

247 (
OS_TICK
 ) 0,

249 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
),

250 (
OS_ERR
 *)&
îr
);

251 
	}
}

271 
	$Aµ_TaskLED
 (*
p_¨g
)

273 
OS_ERR
 
os_îr
;

276 ()
p_¨g
;

278 
DEF_TRUE
) {

280 
	`BSP_LED_ToggÀ
(
BSP_LED1
);

282 
	`OSTimeDlyHMSM
(0, 0, 0, 500,

283 
OS_OPT_TIME_HMSM_STRICT
, &
os_îr
);

285 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/app_cfg.h

27 #i‚de‡ 
APP_CFG_MODULE_PRESENT


28 
	#APP_CFG_MODULE_PRESENT


	)

30 
	~<lib_def.h
>

32 
	#EEPROM_POST_ADDR
 0xE0

	)

40 
	#APP_CFG_SHELL_EN
 
DEF_DISABLED


	)

41 
	#APP_CFG_PRINTF_EN
 
DEF_ENABLED


	)

49 
	#APP_CFG_TASK_START_PRIO
 2u

	)

50 
	#APP_CFG_TASK_LED_PRIO
 3u

	)

51 
	#APP_TASK_SHELL_PRIO
 3u

	)

59 
	#APP_CFG_TASK_START_STK_SIZE
 128u

	)

60 
	#APP_CFG_TASK_LED_STK_SIZE
 64u

	)

61 
	#APP_TASK_SHELL_STK_SIZE
 128u

	)

69 
	#APP_CFG_SERIAL_EN
 
DEF_ENABLED


	)

70 
	#BSP_CFG_SER_COMM_SEL
 
BSP_UART1


	)

77 #i‚de‡ 
TRACE_LEVEL_OFF


78 
	#TRACE_LEVEL_OFF
 0

	)

81 #i‚de‡ 
TRACE_LEVEL_INFO


82 
	#TRACE_LEVEL_INFO
 1

	)

85 #i‚de‡ 
TRACE_LEVEL_DBG


86 
	#TRACE_LEVEL_DBG
 2

	)

89 #i‡(
APP_CFG_PRINTF_EN
 =
DEF_ENABLED
)

90 
	#APP_CFG_TRACE
 
¥ötf


	)

91 
	#BSP_CFG_TRACE
 
¥ötf


	)

93 
	#APP_CFG_TRACE
 
BSP_Sî_Prötf


	)

94 
	#BSP_CFG_TRACE
 
BSP_Sî_Prötf


	)

97 
	#APP_CFG_TRACE_LEVEL
 
TRACE_LEVEL_INFO


	)

98 
	#BSP_CFG_TRACE_LEVEL
 
TRACE_LEVEL_INFO


	)

100 
	#APP_TRACE_INFO
(
x
Ë((
APP_CFG_TRACE_LEVEL
 >
TRACE_LEVEL_INFO
Ë? ()(
APP_CFG_TRACE
 xË: ()0)

	)

101 
	#APP_TRACE_DBG
(
x
Ë((
APP_CFG_TRACE_LEVEL
 >
TRACE_LEVEL_DBG
Ë? ()(
APP_CFG_TRACE
 xË: ()0)

	)

103 
	#BSP_TRACE_INFO
(
x
Ë((
BSP_CFG_TRACE_LEVEL
 >
TRACE_LEVEL_INFO
Ë? ()(
BSP_CFG_TRACE
 xË: ()0)

	)

104 
	#BSP_TRACE_DBG
(
x
Ë((
BSP_CFG_TRACE_LEVEL
 >
TRACE_LEVEL_DBG
Ë? ()(
BSP_CFG_TRACE
 xË: ()0)

	)

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/bsp_cfg.h

27 #i‚de‡ 
BSP_CFG_MODULE_PRESENT


28 
	#BSP_CFG_MODULE_PRESENT


	)

36 #i‚de‡ 
BSP_CFG_OS_ENABLED


37 
	#BSP_CFG_OS_ENABLED
 1u

	)

40 #i‡ (
BSP_CFG_OS_ENABLED
 == 1u)

41 
	#BSP_CFG_OS


	)

43 
	#BSP_CFG_BAREMETAL


	)

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/cpu_cfg.h

43 #i‚de‡ 
CPU_CFG_MODULE_PRESENT


44 
	#CPU_CFG_MODULE_PRESENT


	)

64 
	#CPU_CFG_NAME_EN
 
DEF_DISABLED


	)

69 
	#CPU_CFG_NAME_SIZE
 16u

	)

99 
	#CPU_CFG_TS_32_EN
 
DEF_ENABLED


	)

100 
	#CPU_CFG_TS_64_EN
 
DEF_DISABLED


	)

106 
	#CPU_CFG_TS_TMR_SIZE
 
CPU_WORD_SIZE_32


	)

136 
	#CPU_CFG_INT_DIS_MEAS_EN


	)

140 
	#CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
 1u

	)

163 
	#CPU_CFG_LEAD_ZEROS_ASM_PRESENT


	)

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/includes.h

38 #i‚de‡ 
INCLUDES_MODULES_PRESENT


39 
	#INCLUDES_MODULES_PRESENT


	)

47 
	~<°dio.h
>

48 
	~<°rög.h
>

49 
	~<˘y≥.h
>

50 
	~<°dlib.h
>

51 
	~<°d¨g.h
>

52 
	~<m©h.h
>

61 
	~<˝u.h
>

62 
	~<lib_def.h
>

63 
	~<lib_mem.h
>

64 
	~<lib_°r.h
>

65 
	~<lib_ascii.h
>

66 
	~<lib_m©h.h
>

75 
	~<b•.h
>

84 
	~<os.h
>

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/lib_cfg.h

44 #i‚de‡ 
LIB_CFG_MODULE_PRESENT


45 
	#LIB_CFG_MODULE_PRESENT


	)

54 
	#LIB_MEM_CFG_ARG_CHK_EXT_EN
 
DEF_DISABLED


	)

58 
	#LIB_MEM_CFG_OPTIMIZE_ASM_EN
 
DEF_DISABLED


	)

62 
	#LIB_MEM_CFG_ALLOC_EN
 
DEF_DISABLED


	)

67 
	#LIB_MEM_CFG_HEAP_SIZE
 0u * 1024u

	)

69 
	#LIB_STR_CFG_FP_EN
 
DEF_DISABLED


	)

75 
	#LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
 
LIB_STR_FP_MAX_NBR_DIG_SIG_DFLT


	)

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/os_app_hooks.c

33 
	#MICRIUM_SOURCE


	)

34 
	~"os.h
"

35 
	~<os_≠p_hooks.h
>

50 
	$Aµ_OS_SëAŒHooks
 ()

52 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

53 
	`CPU_SR_ALLOC
();

56 
	`CPU_CRITICAL_ENTER
();

57 
OS_AµTaskCª©eHookPå
 = 
Aµ_OS_TaskCª©eHook
;

58 
OS_AµTaskDñHookPå
 = 
Aµ_OS_TaskDñHook
;

59 
OS_AµTaskRëu∫HookPå
 = 
Aµ_OS_TaskRëu∫Hook
;

61 
OS_AµIdÀTaskHookPå
 = 
Aµ_OS_IdÀTaskHook
;

62 
OS_AµSètTaskHookPå
 = 
Aµ_OS_SètTaskHook
;

63 
OS_AµTaskSwHookPå
 = 
Aµ_OS_TaskSwHook
;

64 
OS_AµTimeTickHookPå
 = 
Aµ_OS_TimeTickHook
;

65 
	`CPU_CRITICAL_EXIT
();

67 
	}
}

82 
	$Aµ_OS_CÃAŒHooks
 ()

84 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

85 
	`CPU_SR_ALLOC
();

88 
	`CPU_CRITICAL_ENTER
();

89 
OS_AµTaskCª©eHookPå
 = (
OS_APP_HOOK_TCB
)0;

90 
OS_AµTaskDñHookPå
 = (
OS_APP_HOOK_TCB
)0;

91 
OS_AµTaskRëu∫HookPå
 = (
OS_APP_HOOK_TCB
)0;

93 
OS_AµIdÀTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

94 
OS_AµSètTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

95 
OS_AµTaskSwHookPå
 = (
OS_APP_HOOK_VOID
)0;

96 
OS_AµTimeTickHookPå
 = (
OS_APP_HOOK_VOID
)0;

97 
	`CPU_CRITICAL_EXIT
();

99 
	}
}

114 
	$Aµ_OS_TaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

116 ()&
p_tcb
;

117 
	}
}

132 
	$Aµ_OS_TaskDñHook
 (
OS_TCB
 *
p_tcb
)

134 ()&
p_tcb
;

135 
	}
}

151 
	$Aµ_OS_TaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

153 ()&
p_tcb
;

154 
	}
}

170 
	$Aµ_OS_IdÀTaskHook
 ()

173 
	}
}

188 
	$Aµ_OS_InôHook
 ()

191 
	}
}

207 
	$Aµ_OS_SètTaskHook
 ()

210 
	}
}

229 
	$Aµ_OS_TaskSwHook
 ()

232 
	}
}

247 
	$Aµ_OS_TimeTickHook
 ()

250 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/os_app_hooks.h

33 #i‚de‡ 
OS_APP_HOOKS_H


34 
	#OS_APP_HOOKS_H


	)

37 #ifde‡ 
OS_APP_HOOKS_H_GLOBALS


38 
	#OS_APP_HOOKS_H_EXT


	)

40 
	#OS_APP_HOOKS_H_EXT
 

	)

49 
	~<os.h
>

57 
Aµ_OS_SëAŒHooks
 ();

58 
Aµ_OS_CÃAŒHooks
 ();

62 
Aµ_OS_TaskCª©eHook
(
OS_TCB
 *
p_tcb
);

63 
Aµ_OS_TaskDñHook
 (
OS_TCB
 *
p_tcb
);

64 
Aµ_OS_TaskRëu∫Hook
(
OS_TCB
 *
p_tcb
);

66 
Aµ_OS_IdÀTaskHook
 ();

67 
Aµ_OS_InôHook
 ();

68 
Aµ_OS_SètTaskHook
 ();

69 
Aµ_OS_TaskSwHook
 ();

70 
Aµ_OS_TimeTickHook
 ();

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/os_cfg.h

33 #i‚de‡
OS_CFG_H


34 
	#OS_CFG_H


	)

38 
	#OS_CFG_APP_HOOKS_EN
 1u

	)

39 
	#OS_CFG_ARG_CHK_EN
 0u

	)

40 
	#OS_CFG_CALLED_FROM_ISR_CHK_EN
 1u

	)

41 
	#OS_CFG_DBG_EN
 1u

	)

42 
	#OS_CFG_ISR_POST_DEFERRED_EN
 0u

	)

43 
	#OS_CFG_OBJ_TYPE_CHK_EN
 0u

	)

44 
	#OS_CFG_TS_EN
 1u

	)

46 
	#OS_CFG_PEND_MULTI_EN
 0u

	)

48 
	#OS_CFG_PRIO_MAX
 16u

	)

50 
	#OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 1u

	)

51 
	#OS_CFG_SCHED_ROUND_ROBIN_EN
 0u

	)

52 
	#OS_CFG_STK_SIZE_MIN
 64u

	)

56 
	#OS_CFG_FLAG_EN
 1u

	)

57 
	#OS_CFG_FLAG_DEL_EN
 1u

	)

58 
	#OS_CFG_FLAG_MODE_CLR_EN
 1u

	)

59 
	#OS_CFG_FLAG_PEND_ABORT_EN
 1u

	)

63 
	#OS_CFG_MEM_EN
 0u

	)

67 
	#OS_CFG_MUTEX_EN
 1u

	)

68 
	#OS_CFG_MUTEX_DEL_EN
 1u

	)

69 
	#OS_CFG_MUTEX_PEND_ABORT_EN
 1u

	)

73 
	#OS_CFG_Q_EN
 1u

	)

74 
	#OS_CFG_Q_DEL_EN
 1u

	)

75 
	#OS_CFG_Q_FLUSH_EN
 1u

	)

76 
	#OS_CFG_Q_PEND_ABORT_EN
 1u

	)

80 
	#OS_CFG_SEM_EN
 1u

	)

81 
	#OS_CFG_SEM_DEL_EN
 1u

	)

82 
	#OS_CFG_SEM_PEND_ABORT_EN
 1u

	)

83 
	#OS_CFG_SEM_SET_EN
 1u

	)

87 
	#OS_CFG_STAT_TASK_EN
 1u

	)

88 
	#OS_CFG_STAT_TASK_STK_CHK_EN
 1u

	)

90 
	#OS_CFG_TASK_CHANGE_PRIO_EN
 1u

	)

91 
	#OS_CFG_TASK_DEL_EN
 1u

	)

92 
	#OS_CFG_TASK_Q_EN
 1u

	)

93 
	#OS_CFG_TASK_Q_PEND_ABORT_EN
 1u

	)

94 
	#OS_CFG_TASK_PROFILE_EN
 1u

	)

95 
	#OS_CFG_TASK_REG_TBL_SIZE
 1u

	)

96 
	#OS_CFG_TASK_SEM_PEND_ABORT_EN
 1u

	)

97 
	#OS_CFG_TASK_SUSPEND_EN
 1u

	)

101 
	#OS_CFG_TIME_DLY_HMSM_EN
 1u

	)

102 
	#OS_CFG_TIME_DLY_RESUME_EN
 1u

	)

106 
	#OS_CFG_TLS_TBL_SIZE
 0u

	)

110 
	#OS_CFG_TMR_EN
 1u

	)

111 
	#OS_CFG_TMR_DEL_EN
 1u

	)

115 
	#TRACE_CFG_EN
 0u

	)

	@LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/os_cfg_app.h

33 #i‚de‡
OS_CFG_APP_H


34 
	#OS_CFG_APP_H


	)

43 
	#OS_CFG_MSG_POOL_SIZE
 16u

	)

44 
	#OS_CFG_ISR_STK_SIZE
 128u

	)

45 
	#OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
 10u

	)

49 
	#OS_CFG_IDLE_TASK_STK_SIZE
 64u

	)

53 
	#OS_CFG_INT_Q_SIZE
 10u

	)

54 
	#OS_CFG_INT_Q_TASK_STK_SIZE
 128u

	)

58 
	#OS_CFG_STAT_TASK_PRIO
 (
OS_CFG_PRIO_MAX
 - 2uË

	)

59 
	#OS_CFG_STAT_TASK_RATE_HZ
 10u

	)

60 
	#OS_CFG_STAT_TASK_STK_SIZE
 128u

	)

64 
	#OS_CFG_TICK_RATE_HZ
 100u

	)

65 
	#OS_CFG_TICK_TASK_PRIO
 (
OS_CFG_PRIO_MAX
 - 3uË

	)

66 
	#OS_CFG_TICK_TASK_STK_SIZE
 64u

	)

67 
	#OS_CFG_TICK_WHEEL_SIZE
 17u

	)

71 
	#OS_CFG_TMR_TASK_PRIO
 (
OS_CFG_PRIO_MAX
 - 2uË

	)

72 
	#OS_CFG_TMR_TASK_RATE_HZ
 10u

	)

73 
	#OS_CFG_TMR_TASK_STK_SIZE
 128u

	)

	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/ARM-Cortex-M0/IAR/cpu.h

48 #i‚de‡ 
CPU_MODULE_PRESENT


49 
	#CPU_MODULE_PRESENT


	)

85 
	~<˝u_def.h
>

86 
	~<˝u_cfg.h
>

88 #ifde‡
__˝lu•lus


121 
	tCPU_VOID
;

122 
	tCPU_CHAR
;

123 
	tCPU_BOOLEAN
;

124 
	tCPU_INT08U
;

125 sig√d 
	tCPU_INT08S
;

126 
	tCPU_INT16U
;

127 sig√d 
	tCPU_INT16S
;

128 
	tCPU_INT32U
;

129 sig√d 
	tCPU_INT32S
;

130 
	tCPU_INT64U
;

131 sig√d 
	tCPU_INT64S
;

133 
	tCPU_FP32
;

134 
	tCPU_FP64
;

137 vﬁ©ûê
	tCPU_INT08U
 
	tCPU_REG08
;

138 vﬁ©ûê
	tCPU_INT16U
 
	tCPU_REG16
;

139 vﬁ©ûê
	tCPU_INT32U
 
	tCPU_REG32
;

140 vﬁ©ûê
	tCPU_INT64U
 
	tCPU_REG64
;

143 (*
CPU_FNCT_VOID
)();

144 (*
CPU_FNCT_PTR
 )(*
	tp_obj
);

169 
	#CPU_CFG_ADDR_SIZE
 
CPU_WORD_SIZE_32


	)

170 
	#CPU_CFG_DATA_SIZE
 
CPU_WORD_SIZE_32


	)

171 
	#CPU_CFG_DATA_SIZE_MAX
 
CPU_WORD_SIZE_64


	)

173 
	#CPU_CFG_ENDIAN_TYPE
 
CPU_ENDIAN_TYPE_LITTLE


	)

183 #i‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_32
)

184 
CPU_INT32U
 
	tCPU_ADDR
;

185 #ñi‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_16
)

186 
CPU_INT16U
 
	tCPU_ADDR
;

188 
CPU_INT08U
 
	tCPU_ADDR
;

192 #i‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
)

193 
CPU_INT32U
 
	tCPU_DATA
;

194 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

195 
CPU_INT16U
 
	tCPU_DATA
;

197 
CPU_INT08U
 
	tCPU_DATA
;

201 
CPU_DATA
 
	tCPU_ALIGN
;

202 
CPU_ADDR
 
	tCPU_SIZE_T
;

223 
	#CPU_CFG_STK_GROWTH
 
CPU_STK_GROWTH_HI_TO_LO


	)

225 
	#CPU_CFG_STK_ALIGN_BYTES
 (8uË

	)

227 
CPU_INT32U
 
	tCPU_STK
;

228 
CPU_ADDR
 
	tCPU_STK_SIZE
;

303 
	#CPU_CFG_CRITICAL_METHOD
 
CPU_CRITICAL_METHOD_STATUS_LOCAL


	)

305 
CPU_INT32U
 
	tCPU_SR
;

308 #i‡ (
CPU_CFG_CRITICAL_METHOD
 =
CPU_CRITICAL_METHOD_STATUS_LOCAL
)

309 
	#CPU_SR_ALLOC
(Ë
CPU_SR
 
˝u_§
 = (CPU_SR)0

	)

311 
	#CPU_SR_ALLOC
()

	)

316 
	#CPU_INT_DIS
(Ëdÿ{ 
˝u_§
 = 
	`CPU_SR_Save
(); } 0Ë

	)

317 
	#CPU_INT_EN
(Ëdÿ{ 
	`CPU_SR_Re°‹e
(
˝u_§
); } 0Ë

	)

320 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


323 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); \

324 
	`CPU_I¡DisMósSèπ
(); } 0)

	)

327 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_I¡DisMósSt›
(); \

328 
	`CPU_INT_EN
(); } 0)

	)

332 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); } 0Ë

	)

333 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_INT_EN
(); } 0Ë

	)

351 
	#CPU_MB
(Ë
	`__DSB
()

	)

352 
	#CPU_RMB
(Ë
	`__DSB
()

	)

353 
	#CPU_WMB
(Ë
	`__DSB
()

	)

362 
CPU_I¡Dis
 ();

363 
CPU_I¡En
 ();

365 
CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
);

366 
CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
);

367 
CPU_I¡SrcPídCÃ
 (
CPU_INT08U
 
pos
);

368 
CPU_INT16S
 
CPU_I¡SrcPrioGë
 (
CPU_INT08U
 
pos
);

369 
CPU_I¡SrcPrioSë
 (
CPU_INT08U
 
pos
,

370 
CPU_INT08U
 
¥io
);

373 
CPU_SR
 
CPU_SR_Save
 ();

374 
CPU_SR_Re°‹e
 (
CPU_SR
 
˝u_§
);

377 
CPU_WaôF‹I¡
 ();

378 
CPU_WaôF‹Ex˚±
 ();

381 
CPU_DATA
 
CPU_RevBôs
 (CPU_DATA 
vÆ
);

383 
CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

384 
CPU_INT08U
 
bô_nbr
);

385 
CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

386 
CPU_INT08U
 
bô_nbr
);

395 
	#CPU_INT_STK_PTR
 0u

	)

396 
	#CPU_INT_RESET
 1u

	)

397 
	#CPU_INT_NMI
 2u

	)

398 
	#CPU_INT_HFAULT
 3u

	)

399 
	#CPU_INT_RSVD_04
 4u

	)

400 
	#CPU_INT_RSVD_05
 5u

	)

401 
	#CPU_INT_RSVD_06
 6u

	)

402 
	#CPU_INT_RSVD_07
 7u

	)

403 
	#CPU_INT_RSVD_08
 8u

	)

404 
	#CPU_INT_RSVD_09
 9u

	)

405 
	#CPU_INT_RSVD_10
 10u

	)

406 
	#CPU_INT_SVCALL
 11u

	)

407 
	#CPU_INT_RSVD_12
 12u

	)

408 
	#CPU_INT_RSVD_13
 13u

	)

409 
	#CPU_INT_PENDSV
 14u

	)

410 
	#CPU_INT_SYSTICK
 15u

	)

419 
	#CPU_REG_NVIC_NVIC
 (*((
CPU_REG32
 *)(0xE000E004))Ë

	)

420 
	#CPU_REG_NVIC_ST_CTRL
 (*((
CPU_REG32
 *)(0xE000E010))Ë

	)

421 
	#CPU_REG_NVIC_ST_RELOAD
 (*((
CPU_REG32
 *)(0xE000E014))Ë

	)

422 
	#CPU_REG_NVIC_ST_CURRENT
 (*((
CPU_REG32
 *)(0xE000E018))Ë

	)

423 
	#CPU_REG_NVIC_ST_CAL
 (*((
CPU_REG32
 *)(0xE000E01C))Ë

	)

425 
	#CPU_REG_NVIC_SETEN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E100 + (nË* 4u))Ë

	)

426 
	#CPU_REG_NVIC_CLREN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E180 + (nË* 4u))Ë

	)

427 
	#CPU_REG_NVIC_SETPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E200 + (nË* 4u))Ë

	)

428 
	#CPU_REG_NVIC_CLRPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E280 + (nË* 4u))Ë

	)

429 
	#CPU_REG_NVIC_PRIO
(
n
Ë(*((
CPU_REG32
 *)(0xE000E400 + (nË* 4u))Ë

	)

431 
	#CPU_REG_NVIC_CPUID
 (*((
CPU_REG32
 *)(0xE000ED00))Ë

	)

432 
	#CPU_REG_NVIC_ICSR
 (*((
CPU_REG32
 *)(0xE000ED04))Ë

	)

433 
	#CPU_REG_NVIC_VTOR
 (*((
CPU_REG32
 *)(0xE000ED08))Ë

	)

434 
	#CPU_REG_NVIC_AIRCR
 (*((
CPU_REG32
 *)(0xE000ED0C))Ë

	)

435 
	#CPU_REG_NVIC_SCR
 (*((
CPU_REG32
 *)(0xE000ED10))Ë

	)

436 
	#CPU_REG_NVIC_CCR
 (*((
CPU_REG32
 *)(0xE000ED14))Ë

	)

437 
	#CPU_REG_NVIC_SHPRI2
 (*((
CPU_REG32
 *)(0xE000ED1C))Ë

	)

438 
	#CPU_REG_NVIC_SHPRI3
 (*((
CPU_REG32
 *)(0xE000ED20))Ë

	)

439 
	#CPU_REG_NVIC_SHCSR
 (*((
CPU_REG32
 *)(0xE000ED24))Ë

	)

440 
	#CPU_REG_NVIC_DFSR
 (*((
CPU_REG32
 *)(0xE000ED30))Ë

	)

442 
	#CPU_REG_NVIC_MMFR0
 (*((
CPU_REG32
 *)(0xE000ED50))Ë

	)

443 
	#CPU_REG_NVIC_MMFR1
 (*((
CPU_REG32
 *)(0xE000ED54))Ë

	)

444 
	#CPU_REG_NVIC_MMFR2
 (*((
CPU_REG32
 *)(0xE000ED58))Ë

	)

445 
	#CPU_REG_NVIC_MMFR3
 (*((
CPU_REG32
 *)(0xE000ED5C))Ë

	)

446 
	#CPU_REG_NVIC_ISAFR0
 (*((
CPU_REG32
 *)(0xE000ED60))Ë

	)

447 
	#CPU_REG_NVIC_ISAFR1
 (*((
CPU_REG32
 *)(0xE000ED64))Ë

	)

448 
	#CPU_REG_NVIC_ISAFR2
 (*((
CPU_REG32
 *)(0xE000ED68))Ë

	)

449 
	#CPU_REG_NVIC_ISAFR3
 (*((
CPU_REG32
 *)(0xE000ED6C))Ë

	)

450 
	#CPU_REG_NVIC_ISAFR4
 (*((
CPU_REG32
 *)(0xE000ED70))Ë

	)

451 
	#CPU_REG_NVIC_SW_TRIG
 (*((
CPU_REG32
 *)(0xE000EF00))Ë

	)

453 
	#CPU_REG_MPU_TYPE
 (*((
CPU_REG32
 *)(0xE000ED90))Ë

	)

454 
	#CPU_REG_MPU_CTRL
 (*((
CPU_REG32
 *)(0xE000ED94))Ë

	)

455 
	#CPU_REG_MPU_REG_NBR
 (*((
CPU_REG32
 *)(0xE000ED98))Ë

	)

456 
	#CPU_REG_MPU_REG_BASE
 (*((
CPU_REG32
 *)(0xE000ED9C))Ë

	)

457 
	#CPU_REG_MPU_REG_ATTR
 (*((
CPU_REG32
 *)(0xE000EDA0))Ë

	)

459 
	#CPU_REG_DBG_SELECT
 (*((
CPU_REG32
 *)(0xE000EDF4))Ë

	)

460 
	#CPU_REG_DBG_DATA
 (*((
CPU_REG32
 *)(0xE000EDF8))Ë

	)

461 
	#CPU_REG_DBG_INT
 (*((
CPU_REG32
 *)(0xE000EDFC))Ë

	)

471 
	#CPU_REG_NVIC_ST_CTRL_COUNTFLAG
 0x00010000

	)

472 
	#CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 0x00000004

	)

473 
	#CPU_REG_NVIC_ST_CTRL_TICKINT
 0x00000002

	)

474 
	#CPU_REG_NVIC_ST_CTRL_ENABLE
 0x00000001

	)

477 
	#CPU_REG_NVIC_ST_CAL_NOREF
 0x80000000

	)

478 
	#CPU_REG_NVIC_ST_CAL_SKEW
 0x40000000

	)

481 
	#CPU_REG_NVIC_ICSR_NMIPENDSET
 0x80000000

	)

482 
	#CPU_REG_NVIC_ICSR_PENDSVSET
 0x10000000

	)

483 
	#CPU_REG_NVIC_ICSR_PENDSVCLR
 0x08000000

	)

484 
	#CPU_REG_NVIC_ICSR_PENDSTSET
 0x04000000

	)

485 
	#CPU_REG_NVIC_ICSR_PENDSTCLR
 0x02000000

	)

486 
	#CPU_REG_NVIC_ICSR_ISRPREEMPT
 0x00800000

	)

487 
	#CPU_REG_NVIC_ICSR_ISRPENDING
 0x00400000

	)

490 
	#CPU_REG_NVIC_VTOR_TBLBASE
 0x20000000

	)

493 
	#CPU_REG_NVIC_AIRCR_ENDIANNESS
 0x00008000

	)

494 
	#CPU_REG_NVIC_AIRCR_SYSRESETREQ
 0x00000004

	)

495 
	#CPU_REG_NVIC_AIRCR_VECTCLRACTIVE
 0x00000002

	)

498 
	#CPU_REG_NVIC_SCR_SEVONPEND
 0x00000010

	)

499 
	#CPU_REG_NVIC_SCR_SLEEPDEEP
 0x00000004

	)

500 
	#CPU_REG_NVIC_SCR_SLEEPONEXIT
 0x00000002

	)

503 
	#CPU_REG_NVIC_CCR_STKALIGN
 0x00000200

	)

504 
	#CPU_REG_NVIC_CCR_UNALIGN_TRP
 0x00000008

	)

507 
	#CPU_REG_NVIC_SHCSR_SVCALLPENDED
 0x00008000

	)

510 
	#CPU_REG_NVIC_DFSR_EXTERNAL
 0x00000010

	)

511 
	#CPU_REG_NVIC_DFSR_VCATCH
 0x00000008

	)

512 
	#CPU_REG_NVIC_DFSR_DWTTRAP
 0x00000004

	)

513 
	#CPU_REG_NVIC_DFSR_BKPT
 0x00000002

	)

514 
	#CPU_REG_NVIC_DFSR_HALTED
 0x00000001

	)

523 
	#CPU_MSK_NVIC_ICSR_VECT_ACTIVE
 0x000001FF

	)

532 #i‚de‡ 
CPU_CFG_ADDR_SIZE


539 #ñi‡ ((
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_08
) && \

540 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_16
) && \

541 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_32
) && \

542 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_64
))

551 #i‚de‡ 
CPU_CFG_DATA_SIZE


558 #ñi‡ ((
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_08
) && \

559 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_16
) && \

560 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_32
) && \

561 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_64
))

570 #i‚de‡ 
CPU_CFG_DATA_SIZE_MAX


577 #ñi‡ ((
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_08
) && \

578 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_16
) && \

579 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_32
) && \

580 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_64
))

590 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 < 
CPU_CFG_DATA_SIZE
)

598 #i‚de‡ 
CPU_CFG_ENDIAN_TYPE


603 #ñi‡ ((
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_BIG
 ) && \

604 (
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_LITTLE
))

613 #i‚de‡ 
CPU_CFG_STK_GROWTH


618 #ñi‡ ((
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_LO_TO_HI
) && \

619 (
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_HI_TO_LO
))

628 #i‚de‡ 
CPU_CFG_CRITICAL_METHOD


634 #ñi‡ ((
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_INT_DIS_EN
 ) && \

635 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_STK
 ) && \

636 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_LOCAL
))

652 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/ARM-Cortex-M0/IAR/cpu_c.c

45 
	~<˝u.h
>

46 
	~<˝u_c‹e.h
>

48 
	~<lib_def.h
>

50 #ifde‡
__˝lu•lus


61 
	#CPU_INT_SRC_POS_MAX
 ((((
CPU_REG_NVIC_NVIC
 + 1Ë& 0x1FË* 32Ë+ 16)

	)

63 
	#CPU_BIT_BAND_SRAM_REG_LO
 0x20000000

	)

64 
	#CPU_BIT_BAND_SRAM_REG_HI
 0x200FFFFF

	)

65 
	#CPU_BIT_BAND_SRAM_BASE
 0x22000000

	)

68 
	#CPU_BIT_BAND_PERIPH_REG_LO
 0x40000000

	)

69 
	#CPU_BIT_BAND_PERIPH_REG_HI
 0x400FFFFF

	)

70 
	#CPU_BIT_BAND_PERIPH_BASE
 0x42000000

	)

133 
CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

134 
CPU_INT08U
 
bô_nbr
)

136 
CPU_ADDR
 
bô_w‹d_off
;

137 
CPU_ADDR
 
bô_w‹d_addr
;

140 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

141 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

142 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

143 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

145 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

147 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

148 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

149 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

150 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

152 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

175 
CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

176 
CPU_INT08U
 
bô_nbr
)

178 
CPU_ADDR
 
bô_w‹d_off
;

179 
CPU_ADDR
 
bô_w‹d_addr
;

182 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

183 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

184 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

185 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

187 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

189 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

190 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

191 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

192 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

194 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

248 
CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
)

250 
CPU_INT08U
 
group
;

251 
CPU_INT08U
 
pos_max
;

252 
CPU_INT08U
 
nbr
;

253 
CPU_SR_ALLOC
();

256 
pos
) {

257 
CPU_INT_STK_PTR
:

258 
CPU_INT_RSVD_07
:

259 
CPU_INT_RSVD_08
:

260 
CPU_INT_RSVD_09
:

261 
CPU_INT_RSVD_10
:

262 
CPU_INT_RSVD_13
:

267 
CPU_INT_RESET
:

268 
CPU_INT_NMI
:

269 
CPU_INT_HFAULT
:

270 
CPU_INT_SVCALL
:

271 
CPU_INT_PENDSV
:

274 
CPU_INT_SYSTICK
:

275 
CPU_CRITICAL_ENTER
();

276 
CPU_REG_NVIC_ST_CTRL
 &~
CPU_REG_NVIC_ST_CTRL_ENABLE
;

277 
CPU_CRITICAL_EXIT
();

283 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

284 i‡(
pos
 < 
pos_max
) {

285 
group
 = (
pos
 - 16) / 32;

286 
nbr
 = (
pos
 - 16) % 32;

288 
CPU_CRITICAL_ENTER
();

289 
CPU_REG_NVIC_CLREN
(
group
Ë
DEF_BIT
(
nbr
);

290 
CPU_CRITICAL_EXIT
();

317 
CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
)

319 
CPU_INT08U
 
group
;

320 
CPU_INT08U
 
nbr
;

321 
CPU_INT08U
 
pos_max
;

322 
CPU_SR_ALLOC
();

325 
pos
) {

326 
CPU_INT_STK_PTR
:

327 
CPU_INT_RSVD_07
:

328 
CPU_INT_RSVD_08
:

329 
CPU_INT_RSVD_09
:

330 
CPU_INT_RSVD_10
:

331 
CPU_INT_RSVD_13
:

336 
CPU_INT_RESET
:

337 
CPU_INT_NMI
:

338 
CPU_INT_HFAULT
:

339 
CPU_INT_SVCALL
:

340 
CPU_INT_PENDSV
:

343 
CPU_INT_SYSTICK
:

344 
CPU_CRITICAL_ENTER
();

345 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_ENABLE
;

346 
CPU_CRITICAL_EXIT
();

352 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

353 i‡(
pos
 < 
pos_max
) {

354 
group
 = (
pos
 - 16) / 32;

355 
nbr
 = (
pos
 - 16) % 32;

357 
CPU_CRITICAL_ENTER
();

358 
CPU_REG_NVIC_SETEN
(
group
Ë
DEF_BIT
(
nbr
);

359 
CPU_CRITICAL_EXIT
();

397 
CPU_I¡SrcPídCÃ
 (
CPU_INT08U
 
pos
)

400 
CPU_INT08U
 
group
;

401 
CPU_INT08U
 
nbr
;

402 
CPU_INT08U
 
pos_max
;

403 
CPU_SR_ALLOC
();

406 
pos
) {

407 
CPU_INT_STK_PTR
:

408 
CPU_INT_RSVD_07
:

409 
CPU_INT_RSVD_08
:

410 
CPU_INT_RSVD_09
:

411 
CPU_INT_RSVD_10
:

412 
CPU_INT_RSVD_13
:

415 
CPU_INT_RESET
:

416 
CPU_INT_NMI
:

417 
CPU_INT_HFAULT
:

418 
CPU_INT_SVCALL
:

419 
CPU_INT_PENDSV
:

420 
CPU_INT_SYSTICK
:

424 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

425 i‡(
pos
 < 
pos_max
) {

426 
group
 = (
pos
 - 16) / 32;

427 
nbr
 = (
pos
 - 16) % 32;

429 
CPU_CRITICAL_ENTER
();

430 
CPU_REG_NVIC_CLRPEND
(
group
Ë
DEF_BIT
(
nbr
);

431 
CPU_CRITICAL_EXIT
();

464 
CPU_I¡SrcPrioSë
 (
CPU_INT08U
 
pos
,

465 
CPU_INT08U
 
¥io
)

467 
CPU_INT08U
 
group
;

468 
CPU_INT08U
 
nbr
;

469 
CPU_INT08U
 
pos_max
;

470 
CPU_INT32U
 
ãmp
;

471 
CPU_SR_ALLOC
();

474 
pos
) {

475 
CPU_INT_STK_PTR
:

476 
CPU_INT_RSVD_07
:

477 
CPU_INT_RSVD_08
:

478 
CPU_INT_RSVD_09
:

479 
CPU_INT_RSVD_10
:

480 
CPU_INT_RSVD_13
:

485 
CPU_INT_RESET
:

486 
CPU_INT_NMI
:

487 
CPU_INT_HFAULT
:

490 
CPU_INT_SVCALL
:

491 
CPU_CRITICAL_ENTER
();

492 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

493 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

494 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

495 
CPU_REG_NVIC_SHPRI2
 = 
ãmp
;

496 
CPU_CRITICAL_EXIT
();

499 
CPU_INT_PENDSV
:

500 
CPU_CRITICAL_ENTER
();

501 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

502 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

503 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

504 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

505 
CPU_CRITICAL_EXIT
();

508 
CPU_INT_SYSTICK
:

509 
CPU_CRITICAL_ENTER
();

510 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

511 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

512 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

513 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

514 
CPU_CRITICAL_EXIT
();

520 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

521 i‡(
pos
 < 
pos_max
) {

522 
group
 = (
pos
 - 16) / 4;

523 
nbr
 = (
pos
 - 16) % 4;

525 
CPU_CRITICAL_ENTER
();

526 
ãmp
 = 
CPU_REG_NVIC_PRIO
(
group
);

527 
ãmp
 &~(
DEF_OCTET_MASK
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

528 
ãmp
 |(
¥io
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

529 
CPU_REG_NVIC_PRIO
(
group
Ë
ãmp
;

530 
CPU_CRITICAL_EXIT
();

558 
CPU_INT16S
 
CPU_I¡SrcPrioGë
 (
CPU_INT08U
 
pos
)

560 
CPU_INT08U
 
group
;

561 
CPU_INT08U
 
nbr
;

562 
CPU_INT08U
 
pos_max
;

563 
CPU_INT16S
 
¥io
;

564 
CPU_INT32U
 
ãmp
;

565 
CPU_SR_ALLOC
();

568 
pos
) {

569 
CPU_INT_STK_PTR
:

570 
CPU_INT_RSVD_07
:

571 
CPU_INT_RSVD_08
:

572 
CPU_INT_RSVD_09
:

573 
CPU_INT_RSVD_10
:

574 
CPU_INT_RSVD_13
:

575 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

580 
CPU_INT_RESET
:

581 
¥io
 = -3;

584 
CPU_INT_NMI
:

585 
¥io
 = -2;

588 
CPU_INT_HFAULT
:

589 
¥io
 = -1;

592 
CPU_INT_SVCALL
:

593 
CPU_CRITICAL_ENTER
();

594 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

595 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

596 
CPU_CRITICAL_EXIT
();

599 
CPU_INT_PENDSV
:

600 
CPU_CRITICAL_ENTER
();

601 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

602 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

603 
CPU_CRITICAL_EXIT
();

606 
CPU_INT_SYSTICK
:

607 
CPU_CRITICAL_ENTER
();

608 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

609 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

610 
CPU_CRITICAL_EXIT
();

616 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

617 i‡(
pos
 < 
pos_max
) {

618 
group
 = (
pos
 - 16) / 4;

619 
nbr
 = (
pos
 - 16) % 4;

621 
CPU_CRITICAL_ENTER
();

622 
ãmp
 = 
CPU_REG_NVIC_PRIO
(
group
);

623 
CPU_CRITICAL_EXIT
();

625 
¥io
 = (
ãmp
 >> (
nbr
 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

627 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

632  (
¥io
);

665 
CPU_DATA
 
CPU_RevBôs
(CPU_DATA 
vÆ
)

667 
CPU_DATA
 
ªvî£_vÆ
;

668 
CPU_INT08U
 
nbr_bôs
;

669 
CPU_INT32U
 
˙t
;

670 
CPU_INT32U
 
tmp
;

673 
nbr_bôs
 = (
CPU_DATA
) * 8;

674 
ªvî£_vÆ
 = 0;

676 
˙t
 = 0; c¡ < 
nbr_bôs
; cnt++)

678 
tmp
 = (
vÆ
 & (1 << 
˙t
));

680 if(
tmp
) {

681 
ªvî£_vÆ
 |(1 << ((
nbr_bôs
 - 1Ë- 
˙t
));

685  (
ªvî£_vÆ
);

688 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/ARM-Cortex-M0/RealView/cpu.h

53 #i‚de‡ 
CPU_MODULE_PRESENT


54 
	#CPU_MODULE_PRESENT


	)

90 
	~<˝u_def.h
>

91 
	~<˝u_cfg.h
>

93 #ifde‡
__˝lu•lus


126 
	tCPU_VOID
;

127 
	tCPU_CHAR
;

128 
	tCPU_BOOLEAN
;

129 
	tCPU_INT08U
;

130 sig√d 
	tCPU_INT08S
;

131 
	tCPU_INT16U
;

132 sig√d 
	tCPU_INT16S
;

133 
	tCPU_INT32U
;

134 sig√d 
	tCPU_INT32S
;

135 
	tCPU_INT64U
;

136 sig√d 
	tCPU_INT64S
;

138 
	tCPU_FP32
;

139 
	tCPU_FP64
;

142 vﬁ©ûê
	tCPU_INT08U
 
	tCPU_REG08
;

143 vﬁ©ûê
	tCPU_INT16U
 
	tCPU_REG16
;

144 vﬁ©ûê
	tCPU_INT32U
 
	tCPU_REG32
;

145 vﬁ©ûê
	tCPU_INT64U
 
	tCPU_REG64
;

148 (*
CPU_FNCT_VOID
)();

149 (*
CPU_FNCT_PTR
 )(*
	tp_obj
);

174 
	#CPU_CFG_ADDR_SIZE
 
CPU_WORD_SIZE_32


	)

175 
	#CPU_CFG_DATA_SIZE
 
CPU_WORD_SIZE_32


	)

176 
	#CPU_CFG_DATA_SIZE_MAX
 
CPU_WORD_SIZE_64


	)

178 
	#CPU_CFG_ENDIAN_TYPE
 
CPU_ENDIAN_TYPE_LITTLE


	)

188 #i‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_32
)

189 
CPU_INT32U
 
	tCPU_ADDR
;

190 #ñi‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_16
)

191 
CPU_INT16U
 
	tCPU_ADDR
;

193 
CPU_INT08U
 
	tCPU_ADDR
;

197 #i‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
)

198 
CPU_INT32U
 
	tCPU_DATA
;

199 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

200 
CPU_INT16U
 
	tCPU_DATA
;

202 
CPU_INT08U
 
	tCPU_DATA
;

206 
CPU_DATA
 
	tCPU_ALIGN
;

207 
CPU_ADDR
 
	tCPU_SIZE_T
;

228 
	#CPU_CFG_STK_GROWTH
 
CPU_STK_GROWTH_HI_TO_LO


	)

230 
	#CPU_CFG_STK_ALIGN_BYTES
 (8uË

	)

232 
CPU_INT32U
 
	tCPU_STK
;

233 
CPU_ADDR
 
	tCPU_STK_SIZE
;

308 
	#CPU_CFG_CRITICAL_METHOD
 
CPU_CRITICAL_METHOD_STATUS_LOCAL


	)

310 
CPU_INT32U
 
	tCPU_SR
;

313 #i‡ (
CPU_CFG_CRITICAL_METHOD
 =
CPU_CRITICAL_METHOD_STATUS_LOCAL
)

314 
	#CPU_SR_ALLOC
(Ë
CPU_SR
 
˝u_§
 = (CPU_SR)0

	)

316 
	#CPU_SR_ALLOC
()

	)

321 
	#CPU_INT_DIS
(Ëdÿ{ 
˝u_§
 = 
	`CPU_SR_Save
(); } 0Ë

	)

322 
	#CPU_INT_EN
(Ëdÿ{ 
	`CPU_SR_Re°‹e
(
˝u_§
); } 0Ë

	)

325 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


328 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); \

329 
	`CPU_I¡DisMósSèπ
(); } 0)

	)

332 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_I¡DisMósSt›
(); \

333 
	`CPU_INT_EN
(); } 0)

	)

337 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); } 0Ë

	)

338 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_INT_EN
(); } 0Ë

	)

356 
	#CPU_MB
(Ë
	`__dsb
(0xF)

	)

357 
	#CPU_RMB
(Ë
	`__dsb
(0xF)

	)

358 
	#CPU_WMB
(Ë
	`__dsb
(0xF)

	)

367 
CPU_I¡Dis
 ();

368 
CPU_I¡En
 ();

370 
CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
);

371 
CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
);

372 
CPU_I¡SrcPídCÃ
 (
CPU_INT08U
 
pos
);

373 
CPU_INT16S
 
CPU_I¡SrcPrioGë
 (
CPU_INT08U
 
pos
);

374 
CPU_I¡SrcPrioSë
 (
CPU_INT08U
 
pos
,

375 
CPU_INT08U
 
¥io
);

378 
CPU_SR
 
CPU_SR_Save
 ();

379 
CPU_SR_Re°‹e
 (
CPU_SR
 
˝u_§
);

382 
CPU_WaôF‹I¡
 ();

383 
CPU_WaôF‹Ex˚±
 ();

386 
CPU_DATA
 
CPU_RevBôs
 (CPU_DATA 
vÆ
);

388 
CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

389 
CPU_INT08U
 
bô_nbr
);

390 
CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

391 
CPU_INT08U
 
bô_nbr
);

400 
	#CPU_INT_STK_PTR
 0u

	)

401 
	#CPU_INT_RESET
 1u

	)

402 
	#CPU_INT_NMI
 2u

	)

403 
	#CPU_INT_HFAULT
 3u

	)

404 
	#CPU_INT_RSVD_04
 4u

	)

405 
	#CPU_INT_RSVD_05
 5u

	)

406 
	#CPU_INT_RSVD_06
 6u

	)

407 
	#CPU_INT_RSVD_07
 7u

	)

408 
	#CPU_INT_RSVD_08
 8u

	)

409 
	#CPU_INT_RSVD_09
 9u

	)

410 
	#CPU_INT_RSVD_10
 10u

	)

411 
	#CPU_INT_SVCALL
 11u

	)

412 
	#CPU_INT_RSVD_12
 12u

	)

413 
	#CPU_INT_RSVD_13
 13u

	)

414 
	#CPU_INT_PENDSV
 14u

	)

415 
	#CPU_INT_SYSTICK
 15u

	)

424 
	#CPU_REG_NVIC_NVIC
 (*((
CPU_REG32
 *)(0xE000E004))Ë

	)

425 
	#CPU_REG_NVIC_ST_CTRL
 (*((
CPU_REG32
 *)(0xE000E010))Ë

	)

426 
	#CPU_REG_NVIC_ST_RELOAD
 (*((
CPU_REG32
 *)(0xE000E014))Ë

	)

427 
	#CPU_REG_NVIC_ST_CURRENT
 (*((
CPU_REG32
 *)(0xE000E018))Ë

	)

428 
	#CPU_REG_NVIC_ST_CAL
 (*((
CPU_REG32
 *)(0xE000E01C))Ë

	)

430 
	#CPU_REG_NVIC_SETEN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E100 + (nË* 4u))Ë

	)

431 
	#CPU_REG_NVIC_CLREN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E180 + (nË* 4u))Ë

	)

432 
	#CPU_REG_NVIC_SETPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E200 + (nË* 4u))Ë

	)

433 
	#CPU_REG_NVIC_CLRPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E280 + (nË* 4u))Ë

	)

434 
	#CPU_REG_NVIC_PRIO
(
n
Ë(*((
CPU_REG32
 *)(0xE000E400 + (nË* 4u))Ë

	)

436 
	#CPU_REG_NVIC_CPUID
 (*((
CPU_REG32
 *)(0xE000ED00))Ë

	)

437 
	#CPU_REG_NVIC_ICSR
 (*((
CPU_REG32
 *)(0xE000ED04))Ë

	)

438 
	#CPU_REG_NVIC_VTOR
 (*((
CPU_REG32
 *)(0xE000ED08))Ë

	)

439 
	#CPU_REG_NVIC_AIRCR
 (*((
CPU_REG32
 *)(0xE000ED0C))Ë

	)

440 
	#CPU_REG_NVIC_SCR
 (*((
CPU_REG32
 *)(0xE000ED10))Ë

	)

441 
	#CPU_REG_NVIC_CCR
 (*((
CPU_REG32
 *)(0xE000ED14))Ë

	)

442 
	#CPU_REG_NVIC_SHPRI2
 (*((
CPU_REG32
 *)(0xE000ED1C))Ë

	)

443 
	#CPU_REG_NVIC_SHPRI3
 (*((
CPU_REG32
 *)(0xE000ED20))Ë

	)

444 
	#CPU_REG_NVIC_SHCSR
 (*((
CPU_REG32
 *)(0xE000ED24))Ë

	)

445 
	#CPU_REG_NVIC_DFSR
 (*((
CPU_REG32
 *)(0xE000ED30))Ë

	)

447 
	#CPU_REG_NVIC_MMFR0
 (*((
CPU_REG32
 *)(0xE000ED50))Ë

	)

448 
	#CPU_REG_NVIC_MMFR1
 (*((
CPU_REG32
 *)(0xE000ED54))Ë

	)

449 
	#CPU_REG_NVIC_MMFR2
 (*((
CPU_REG32
 *)(0xE000ED58))Ë

	)

450 
	#CPU_REG_NVIC_MMFR3
 (*((
CPU_REG32
 *)(0xE000ED5C))Ë

	)

451 
	#CPU_REG_NVIC_ISAFR0
 (*((
CPU_REG32
 *)(0xE000ED60))Ë

	)

452 
	#CPU_REG_NVIC_ISAFR1
 (*((
CPU_REG32
 *)(0xE000ED64))Ë

	)

453 
	#CPU_REG_NVIC_ISAFR2
 (*((
CPU_REG32
 *)(0xE000ED68))Ë

	)

454 
	#CPU_REG_NVIC_ISAFR3
 (*((
CPU_REG32
 *)(0xE000ED6C))Ë

	)

455 
	#CPU_REG_NVIC_ISAFR4
 (*((
CPU_REG32
 *)(0xE000ED70))Ë

	)

456 
	#CPU_REG_NVIC_SW_TRIG
 (*((
CPU_REG32
 *)(0xE000EF00))Ë

	)

458 
	#CPU_REG_MPU_TYPE
 (*((
CPU_REG32
 *)(0xE000ED90))Ë

	)

459 
	#CPU_REG_MPU_CTRL
 (*((
CPU_REG32
 *)(0xE000ED94))Ë

	)

460 
	#CPU_REG_MPU_REG_NBR
 (*((
CPU_REG32
 *)(0xE000ED98))Ë

	)

461 
	#CPU_REG_MPU_REG_BASE
 (*((
CPU_REG32
 *)(0xE000ED9C))Ë

	)

462 
	#CPU_REG_MPU_REG_ATTR
 (*((
CPU_REG32
 *)(0xE000EDA0))Ë

	)

464 
	#CPU_REG_DBG_SELECT
 (*((
CPU_REG32
 *)(0xE000EDF4))Ë

	)

465 
	#CPU_REG_DBG_DATA
 (*((
CPU_REG32
 *)(0xE000EDF8))Ë

	)

466 
	#CPU_REG_DBG_INT
 (*((
CPU_REG32
 *)(0xE000EDFC))Ë

	)

476 
	#CPU_REG_NVIC_ST_CTRL_COUNTFLAG
 0x00010000

	)

477 
	#CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 0x00000004

	)

478 
	#CPU_REG_NVIC_ST_CTRL_TICKINT
 0x00000002

	)

479 
	#CPU_REG_NVIC_ST_CTRL_ENABLE
 0x00000001

	)

483 
	#CPU_REG_NVIC_ST_CAL_NOREF
 0x80000000

	)

484 
	#CPU_REG_NVIC_ST_CAL_SKEW
 0x40000000

	)

487 
	#CPU_REG_NVIC_ICSR_NMIPENDSET
 0x80000000

	)

488 
	#CPU_REG_NVIC_ICSR_PENDSVSET
 0x10000000

	)

489 
	#CPU_REG_NVIC_ICSR_PENDSVCLR
 0x08000000

	)

490 
	#CPU_REG_NVIC_ICSR_PENDSTSET
 0x04000000

	)

491 
	#CPU_REG_NVIC_ICSR_PENDSTCLR
 0x02000000

	)

492 
	#CPU_REG_NVIC_ICSR_ISRPREEMPT
 0x00800000

	)

493 
	#CPU_REG_NVIC_ICSR_ISRPENDING
 0x00400000

	)

496 
	#CPU_REG_NVIC_VTOR_TBLBASE
 0x20000000

	)

499 
	#CPU_REG_NVIC_AIRCR_ENDIANNESS
 0x00008000

	)

500 
	#CPU_REG_NVIC_AIRCR_SYSRESETREQ
 0x00000004

	)

501 
	#CPU_REG_NVIC_AIRCR_VECTCLRACTIVE
 0x00000002

	)

504 
	#CPU_REG_NVIC_SCR_SEVONPEND
 0x00000010

	)

505 
	#CPU_REG_NVIC_SCR_SLEEPDEEP
 0x00000004

	)

506 
	#CPU_REG_NVIC_SCR_SLEEPONEXIT
 0x00000002

	)

509 
	#CPU_REG_NVIC_CCR_STKALIGN
 0x00000200

	)

510 
	#CPU_REG_NVIC_CCR_UNALIGN_TRP
 0x00000008

	)

513 
	#CPU_REG_NVIC_SHCSR_SVCALLPENDED
 0x00008000

	)

516 
	#CPU_REG_NVIC_DFSR_EXTERNAL
 0x00000010

	)

517 
	#CPU_REG_NVIC_DFSR_VCATCH
 0x00000008

	)

518 
	#CPU_REG_NVIC_DFSR_DWTTRAP
 0x00000004

	)

519 
	#CPU_REG_NVIC_DFSR_BKPT
 0x00000002

	)

520 
	#CPU_REG_NVIC_DFSR_HALTED
 0x00000001

	)

529 
	#CPU_MSK_NVIC_ICSR_VECT_ACTIVE
 0x000001FF

	)

538 #i‚de‡ 
CPU_CFG_ADDR_SIZE


545 #ñi‡ ((
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_08
) && \

546 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_16
) && \

547 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_32
) && \

548 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_64
))

557 #i‚de‡ 
CPU_CFG_DATA_SIZE


564 #ñi‡ ((
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_08
) && \

565 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_16
) && \

566 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_32
) && \

567 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_64
))

576 #i‚de‡ 
CPU_CFG_DATA_SIZE_MAX


583 #ñi‡ ((
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_08
) && \

584 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_16
) && \

585 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_32
) && \

586 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_64
))

596 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 < 
CPU_CFG_DATA_SIZE
)

604 #i‚de‡ 
CPU_CFG_ENDIAN_TYPE


609 #ñi‡ ((
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_BIG
 ) && \

610 (
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_LITTLE
))

619 #i‚de‡ 
CPU_CFG_STK_GROWTH


624 #ñi‡ ((
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_LO_TO_HI
) && \

625 (
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_HI_TO_LO
))

634 #i‚de‡ 
CPU_CFG_CRITICAL_METHOD


640 #ñi‡ ((
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_INT_DIS_EN
 ) && \

641 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_STK
 ) && \

642 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_LOCAL
))

658 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/ARM-Cortex-M0/RealView/cpu_c.c

51 
	~<˝u.h
>

52 
	~<˝u_c‹e.h
>

54 
	~<lib_def.h
>

56 #ifde‡
__˝lu•lus


67 
	#CPU_INT_SRC_POS_MAX
 ((((
CPU_REG_NVIC_NVIC
 + 1Ë& 0x1FË* 32Ë+ 16)

	)

69 
	#CPU_BIT_BAND_SRAM_REG_LO
 0x20000000

	)

70 
	#CPU_BIT_BAND_SRAM_REG_HI
 0x200FFFFF

	)

71 
	#CPU_BIT_BAND_SRAM_BASE
 0x22000000

	)

74 
	#CPU_BIT_BAND_PERIPH_REG_LO
 0x40000000

	)

75 
	#CPU_BIT_BAND_PERIPH_REG_HI
 0x400FFFFF

	)

76 
	#CPU_BIT_BAND_PERIPH_BASE
 0x42000000

	)

139 
CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

140 
CPU_INT08U
 
bô_nbr
)

142 
CPU_ADDR
 
bô_w‹d_off
;

143 
CPU_ADDR
 
bô_w‹d_addr
;

146 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

147 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

148 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

149 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

151 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

153 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

154 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

155 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

156 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

158 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

181 
CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

182 
CPU_INT08U
 
bô_nbr
)

184 
CPU_ADDR
 
bô_w‹d_off
;

185 
CPU_ADDR
 
bô_w‹d_addr
;

188 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

189 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

190 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

191 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

193 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

195 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

196 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

197 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

198 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

200 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

254 
CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
)

256 
CPU_INT08U
 
group
;

257 
CPU_INT08U
 
pos_max
;

258 
CPU_INT08U
 
nbr
;

259 
CPU_SR_ALLOC
();

262 
pos
) {

263 
CPU_INT_STK_PTR
:

264 
CPU_INT_RSVD_07
:

265 
CPU_INT_RSVD_08
:

266 
CPU_INT_RSVD_09
:

267 
CPU_INT_RSVD_10
:

268 
CPU_INT_RSVD_13
:

273 
CPU_INT_RESET
:

274 
CPU_INT_NMI
:

275 
CPU_INT_HFAULT
:

276 
CPU_INT_SVCALL
:

277 
CPU_INT_PENDSV
:

280 
CPU_INT_SYSTICK
:

281 
CPU_CRITICAL_ENTER
();

282 
CPU_REG_NVIC_ST_CTRL
 &~
CPU_REG_NVIC_ST_CTRL_ENABLE
;

283 
CPU_CRITICAL_EXIT
();

289 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

290 i‡(
pos
 < 
pos_max
) {

291 
group
 = (
pos
 - 16) / 32;

292 
nbr
 = (
pos
 - 16) % 32;

294 
CPU_CRITICAL_ENTER
();

295 
CPU_REG_NVIC_CLREN
(
group
Ë
DEF_BIT
(
nbr
);

296 
CPU_CRITICAL_EXIT
();

323 
CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
)

325 
CPU_INT08U
 
group
;

326 
CPU_INT08U
 
nbr
;

327 
CPU_INT08U
 
pos_max
;

328 
CPU_SR_ALLOC
();

331 
pos
) {

332 
CPU_INT_STK_PTR
:

333 
CPU_INT_RSVD_07
:

334 
CPU_INT_RSVD_08
:

335 
CPU_INT_RSVD_09
:

336 
CPU_INT_RSVD_10
:

337 
CPU_INT_RSVD_13
:

342 
CPU_INT_RESET
:

343 
CPU_INT_NMI
:

344 
CPU_INT_HFAULT
:

345 
CPU_INT_SVCALL
:

346 
CPU_INT_PENDSV
:

349 
CPU_INT_SYSTICK
:

350 
CPU_CRITICAL_ENTER
();

351 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_ENABLE
;

352 
CPU_CRITICAL_EXIT
();

358 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

359 i‡(
pos
 < 
pos_max
) {

360 
group
 = (
pos
 - 16) / 32;

361 
nbr
 = (
pos
 - 16) % 32;

363 
CPU_CRITICAL_ENTER
();

364 
CPU_REG_NVIC_SETEN
(
group
Ë
DEF_BIT
(
nbr
);

365 
CPU_CRITICAL_EXIT
();

403 
CPU_I¡SrcPídCÃ
 (
CPU_INT08U
 
pos
)

406 
CPU_INT08U
 
group
;

407 
CPU_INT08U
 
nbr
;

408 
CPU_INT08U
 
pos_max
;

409 
CPU_SR_ALLOC
();

412 
pos
) {

413 
CPU_INT_STK_PTR
:

414 
CPU_INT_RSVD_07
:

415 
CPU_INT_RSVD_08
:

416 
CPU_INT_RSVD_09
:

417 
CPU_INT_RSVD_10
:

418 
CPU_INT_RSVD_13
:

421 
CPU_INT_RESET
:

422 
CPU_INT_NMI
:

423 
CPU_INT_HFAULT
:

424 
CPU_INT_SVCALL
:

425 
CPU_INT_PENDSV
:

426 
CPU_INT_SYSTICK
:

430 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

431 i‡(
pos
 < 
pos_max
) {

432 
group
 = (
pos
 - 16) / 32;

433 
nbr
 = (
pos
 - 16) % 32;

435 
CPU_CRITICAL_ENTER
();

436 
CPU_REG_NVIC_CLRPEND
(
group
Ë
DEF_BIT
(
nbr
);

437 
CPU_CRITICAL_EXIT
();

470 
CPU_I¡SrcPrioSë
 (
CPU_INT08U
 
pos
,

471 
CPU_INT08U
 
¥io
)

473 
CPU_INT08U
 
group
;

474 
CPU_INT08U
 
nbr
;

475 
CPU_INT08U
 
pos_max
;

476 
CPU_INT32U
 
ãmp
;

477 
CPU_SR_ALLOC
();

480 
pos
) {

481 
CPU_INT_STK_PTR
:

482 
CPU_INT_RSVD_07
:

483 
CPU_INT_RSVD_08
:

484 
CPU_INT_RSVD_09
:

485 
CPU_INT_RSVD_10
:

486 
CPU_INT_RSVD_13
:

491 
CPU_INT_RESET
:

492 
CPU_INT_NMI
:

493 
CPU_INT_HFAULT
:

496 
CPU_INT_SVCALL
:

497 
CPU_CRITICAL_ENTER
();

498 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

499 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

500 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

501 
CPU_REG_NVIC_SHPRI2
 = 
ãmp
;

502 
CPU_CRITICAL_EXIT
();

505 
CPU_INT_PENDSV
:

506 
CPU_CRITICAL_ENTER
();

507 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

508 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

509 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

510 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

511 
CPU_CRITICAL_EXIT
();

514 
CPU_INT_SYSTICK
:

515 
CPU_CRITICAL_ENTER
();

516 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

517 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

518 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

519 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

520 
CPU_CRITICAL_EXIT
();

526 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

527 i‡(
pos
 < 
pos_max
) {

528 
group
 = (
pos
 - 16) / 4;

529 
nbr
 = (
pos
 - 16) % 4;

531 
CPU_CRITICAL_ENTER
();

532 
ãmp
 = 
CPU_REG_NVIC_PRIO
(
group
);

533 
ãmp
 &~(
DEF_OCTET_MASK
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

534 
ãmp
 |(
¥io
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

535 
CPU_REG_NVIC_PRIO
(
group
Ë
ãmp
;

536 
CPU_CRITICAL_EXIT
();

564 
CPU_INT16S
 
CPU_I¡SrcPrioGë
 (
CPU_INT08U
 
pos
)

566 
CPU_INT08U
 
group
;

567 
CPU_INT08U
 
nbr
;

568 
CPU_INT08U
 
pos_max
;

569 
CPU_INT16S
 
¥io
;

570 
CPU_INT32U
 
ãmp
;

571 
CPU_SR_ALLOC
();

574 
pos
) {

575 
CPU_INT_STK_PTR
:

576 
CPU_INT_RSVD_07
:

577 
CPU_INT_RSVD_08
:

578 
CPU_INT_RSVD_09
:

579 
CPU_INT_RSVD_10
:

580 
CPU_INT_RSVD_13
:

581 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

586 
CPU_INT_RESET
:

587 
¥io
 = -3;

590 
CPU_INT_NMI
:

591 
¥io
 = -2;

594 
CPU_INT_HFAULT
:

595 
¥io
 = -1;

598 
CPU_INT_SVCALL
:

599 
CPU_CRITICAL_ENTER
();

600 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

601 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

602 
CPU_CRITICAL_EXIT
();

605 
CPU_INT_PENDSV
:

606 
CPU_CRITICAL_ENTER
();

607 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

608 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

609 
CPU_CRITICAL_EXIT
();

612 
CPU_INT_SYSTICK
:

613 
CPU_CRITICAL_ENTER
();

614 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

615 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

616 
CPU_CRITICAL_EXIT
();

622 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

623 i‡(
pos
 < 
pos_max
) {

624 
group
 = (
pos
 - 16) / 4;

625 
nbr
 = (
pos
 - 16) % 4;

627 
CPU_CRITICAL_ENTER
();

628 
ãmp
 = 
CPU_REG_NVIC_PRIO
(
group
);

629 
CPU_CRITICAL_EXIT
();

631 
¥io
 = (
ãmp
 >> (
nbr
 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

633 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

638  (
¥io
);

671 
CPU_DATA
 
CPU_RevBôs
(CPU_DATA 
vÆ
)

673 
CPU_DATA
 
ªvî£_vÆ
;

674 
CPU_INT08U
 
nbr_bôs
;

675 
CPU_INT32U
 
˙t
;

676 
CPU_INT32U
 
tmp
;

679 
nbr_bôs
 = (
CPU_DATA
) * 8;

680 
ªvî£_vÆ
 = 0;

682 
˙t
 = 0; c¡ < 
nbr_bôs
; cnt++)

684 
tmp
 = (
vÆ
 & (1 << 
˙t
));

686 if(
tmp
) {

687 
ªvî£_vÆ
 |(1 << ((
nbr_bôs
 - 1Ë- 
˙t
));

691  (
ªvî£_vÆ
);

694 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/ARM-Cortex-M4/RealView/cpu.h

52 #i‚de‡ 
CPU_MODULE_PRESENT


53 
	#CPU_MODULE_PRESENT


	)

89 
	~<˝u_def.h
>

90 
	~<˝u_cfg.h
>

92 #ifde‡
__˝lu•lus


125 
	tCPU_VOID
;

126 
	tCPU_CHAR
;

127 
	tCPU_BOOLEAN
;

128 
	tCPU_INT08U
;

129 sig√d 
	tCPU_INT08S
;

130 
	tCPU_INT16U
;

131 sig√d 
	tCPU_INT16S
;

132 
	tCPU_INT32U
;

133 sig√d 
	tCPU_INT32S
;

134 
	tCPU_INT64U
;

135 sig√d 
	tCPU_INT64S
;

137 
	tCPU_FP32
;

138 
	tCPU_FP64
;

141 vﬁ©ûê
	tCPU_INT08U
 
	tCPU_REG08
;

142 vﬁ©ûê
	tCPU_INT16U
 
	tCPU_REG16
;

143 vﬁ©ûê
	tCPU_INT32U
 
	tCPU_REG32
;

144 vﬁ©ûê
	tCPU_INT64U
 
	tCPU_REG64
;

147 (*
CPU_FNCT_VOID
)();

148 (*
CPU_FNCT_PTR
 )(*
	tp_obj
);

173 
	#CPU_CFG_ADDR_SIZE
 
CPU_WORD_SIZE_32


	)

174 
	#CPU_CFG_DATA_SIZE
 
CPU_WORD_SIZE_32


	)

175 
	#CPU_CFG_DATA_SIZE_MAX
 
CPU_WORD_SIZE_64


	)

177 
	#CPU_CFG_ENDIAN_TYPE
 
CPU_ENDIAN_TYPE_LITTLE


	)

187 #i‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_32
)

188 
CPU_INT32U
 
	tCPU_ADDR
;

189 #ñi‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_16
)

190 
CPU_INT16U
 
	tCPU_ADDR
;

192 
CPU_INT08U
 
	tCPU_ADDR
;

196 #i‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
)

197 
CPU_INT32U
 
	tCPU_DATA
;

198 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

199 
CPU_INT16U
 
	tCPU_DATA
;

201 
CPU_INT08U
 
	tCPU_DATA
;

205 
CPU_DATA
 
	tCPU_ALIGN
;

206 
CPU_ADDR
 
	tCPU_SIZE_T
;

227 
	#CPU_CFG_STK_GROWTH
 
CPU_STK_GROWTH_HI_TO_LO


	)

229 
	#CPU_CFG_STK_ALIGN_BYTES
 (8uË

	)

231 
CPU_INT32U
 
	tCPU_STK
;

232 
CPU_ADDR
 
	tCPU_STK_SIZE
;

307 
	#CPU_CFG_CRITICAL_METHOD
 
CPU_CRITICAL_METHOD_STATUS_LOCAL


	)

309 
CPU_INT32U
 
	tCPU_SR
;

312 #i‡ (
CPU_CFG_CRITICAL_METHOD
 =
CPU_CRITICAL_METHOD_STATUS_LOCAL
)

313 
	#CPU_SR_ALLOC
(Ë
CPU_SR
 
˝u_§
 = (CPU_SR)0

	)

315 
	#CPU_SR_ALLOC
()

	)

320 
	#CPU_INT_DIS
(Ëdÿ{ 
˝u_§
 = 
	`CPU_SR_Save
(); } 0Ë

	)

321 
	#CPU_INT_EN
(Ëdÿ{ 
	`CPU_SR_Re°‹e
(
˝u_§
); } 0Ë

	)

324 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


327 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); \

328 
	`CPU_I¡DisMósSèπ
(); } 0)

	)

331 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_I¡DisMósSt›
(); \

332 
	`CPU_INT_EN
(); } 0)

	)

336 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); } 0Ë

	)

337 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_INT_EN
(); } 0Ë

	)

355 
	#CPU_MB
(Ë
	`__dsb
(0xF)

	)

356 
	#CPU_RMB
(Ë
	`__dsb
(0xF)

	)

357 
	#CPU_WMB
(Ë
	`__dsb
(0xF)

	)

385 
	#CPU_CFG_LEAD_ZEROS_ASM_PRESENT


	)

388 
	#CPU_CFG_TRAIL_ZEROS_ASM_PRESENT


	)

397 
CPU_I¡Dis
 ();

398 
CPU_I¡En
 ();

400 
CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
);

401 
CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
);

402 
CPU_I¡SrcPídCÃ
(
CPU_INT08U
 
pos
);

403 
CPU_INT16S
 
CPU_I¡SrcPrioGë
(
CPU_INT08U
 
pos
);

404 
CPU_I¡SrcPrioSë
(
CPU_INT08U
 
pos
,

405 
CPU_INT08U
 
¥io
);

408 
CPU_SR
 
CPU_SR_Save
 ();

409 
CPU_SR_Re°‹e
 (
CPU_SR
 
˝u_§
);

412 
CPU_WaôF‹I¡
 ();

413 
CPU_WaôF‹Ex˚±
();

416 
CPU_DATA
 
CPU_RevBôs
 (CPU_DATA 
vÆ
);

418 
CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

419 
CPU_INT08U
 
bô_nbr
);

420 
CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

421 
CPU_INT08U
 
bô_nbr
);

430 
	#CPU_INT_STK_PTR
 0u

	)

431 
	#CPU_INT_RESET
 1u

	)

432 
	#CPU_INT_NMI
 2u

	)

433 
	#CPU_INT_HFAULT
 3u

	)

434 
	#CPU_INT_MEM
 4u

	)

435 
	#CPU_INT_BUSFAULT
 5u

	)

436 
	#CPU_INT_USAGEFAULT
 6u

	)

437 
	#CPU_INT_RSVD_07
 7u

	)

438 
	#CPU_INT_RSVD_08
 8u

	)

439 
	#CPU_INT_RSVD_09
 9u

	)

440 
	#CPU_INT_RSVD_10
 10u

	)

441 
	#CPU_INT_SVCALL
 11u

	)

442 
	#CPU_INT_DBGMON
 12u

	)

443 
	#CPU_INT_RSVD_13
 13u

	)

444 
	#CPU_INT_PENDSV
 14u

	)

445 
	#CPU_INT_SYSTICK
 15u

	)

446 
	#CPU_INT_EXT0
 16u

	)

454 
	#CPU_REG_NVIC_NVIC
 (*((
CPU_REG32
 *)(0xE000E004))Ë

	)

455 
	#CPU_REG_NVIC_ST_CTRL
 (*((
CPU_REG32
 *)(0xE000E010))Ë

	)

456 
	#CPU_REG_NVIC_ST_RELOAD
 (*((
CPU_REG32
 *)(0xE000E014))Ë

	)

457 
	#CPU_REG_NVIC_ST_CURRENT
 (*((
CPU_REG32
 *)(0xE000E018))Ë

	)

458 
	#CPU_REG_NVIC_ST_CAL
 (*((
CPU_REG32
 *)(0xE000E01C))Ë

	)

460 
	#CPU_REG_NVIC_SETEN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E100 + (nË* 4u))Ë

	)

461 
	#CPU_REG_NVIC_CLREN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E180 + (nË* 4u))Ë

	)

462 
	#CPU_REG_NVIC_SETPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E200 + (nË* 4u))Ë

	)

463 
	#CPU_REG_NVIC_CLRPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E280 + (nË* 4u))Ë

	)

464 
	#CPU_REG_NVIC_ACTIVE
(
n
Ë(*((
CPU_REG32
 *)(0xE000E300 + (nË* 4u))Ë

	)

465 
	#CPU_REG_NVIC_PRIO
(
n
Ë(*((
CPU_REG32
 *)(0xE000E400 + (nË* 4u))Ë

	)

467 
	#CPU_REG_NVIC_CPUID
 (*((
CPU_REG32
 *)(0xE000ED00))Ë

	)

468 
	#CPU_REG_NVIC_ICSR
 (*((
CPU_REG32
 *)(0xE000ED04))Ë

	)

469 
	#CPU_REG_NVIC_VTOR
 (*((
CPU_REG32
 *)(0xE000ED08))Ë

	)

470 
	#CPU_REG_NVIC_AIRCR
 (*((
CPU_REG32
 *)(0xE000ED0C))Ë

	)

471 
	#CPU_REG_NVIC_SCR
 (*((
CPU_REG32
 *)(0xE000ED10))Ë

	)

472 
	#CPU_REG_NVIC_CCR
 (*((
CPU_REG32
 *)(0xE000ED14))Ë

	)

473 
	#CPU_REG_NVIC_SHPRI1
 (*((
CPU_REG32
 *)(0xE000ED18))Ë

	)

474 
	#CPU_REG_NVIC_SHPRI2
 (*((
CPU_REG32
 *)(0xE000ED1C))Ë

	)

475 
	#CPU_REG_NVIC_SHPRI3
 (*((
CPU_REG32
 *)(0xE000ED20))Ë

	)

476 
	#CPU_REG_NVIC_SHCSR
 (*((
CPU_REG32
 *)(0xE000ED24))Ë

	)

477 
	#CPU_REG_NVIC_CFSR
 (*((
CPU_REG32
 *)(0xE000ED28))Ë

	)

478 
	#CPU_REG_NVIC_HFSR
 (*((
CPU_REG32
 *)(0xE000ED2C))Ë

	)

479 
	#CPU_REG_NVIC_DFSR
 (*((
CPU_REG32
 *)(0xE000ED30))Ë

	)

480 
	#CPU_REG_NVIC_MMFAR
 (*((
CPU_REG32
 *)(0xE000ED34))Ë

	)

481 
	#CPU_REG_NVIC_BFAR
 (*((
CPU_REG32
 *)(0xE000ED38))Ë

	)

482 
	#CPU_REG_NVIC_AFSR
 (*((
CPU_REG32
 *)(0xE000ED3C))Ë

	)

484 
	#CPU_REG_NVIC_PFR0
 (*((
CPU_REG32
 *)(0xE000ED40))Ë

	)

485 
	#CPU_REG_NVIC_PFR1
 (*((
CPU_REG32
 *)(0xE000ED44))Ë

	)

486 
	#CPU_REG_NVIC_DFR0
 (*((
CPU_REG32
 *)(0xE000ED48))Ë

	)

487 
	#CPU_REG_NVIC_AFR0
 (*((
CPU_REG32
 *)(0xE000ED4C))Ë

	)

488 
	#CPU_REG_NVIC_MMFR0
 (*((
CPU_REG32
 *)(0xE000ED50))Ë

	)

489 
	#CPU_REG_NVIC_MMFR1
 (*((
CPU_REG32
 *)(0xE000ED54))Ë

	)

490 
	#CPU_REG_NVIC_MMFR2
 (*((
CPU_REG32
 *)(0xE000ED58))Ë

	)

491 
	#CPU_REG_NVIC_MMFR3
 (*((
CPU_REG32
 *)(0xE000ED5C))Ë

	)

492 
	#CPU_REG_NVIC_ISAFR0
 (*((
CPU_REG32
 *)(0xE000ED60))Ë

	)

493 
	#CPU_REG_NVIC_ISAFR1
 (*((
CPU_REG32
 *)(0xE000ED64))Ë

	)

494 
	#CPU_REG_NVIC_ISAFR2
 (*((
CPU_REG32
 *)(0xE000ED68))Ë

	)

495 
	#CPU_REG_NVIC_ISAFR3
 (*((
CPU_REG32
 *)(0xE000ED6C))Ë

	)

496 
	#CPU_REG_NVIC_ISAFR4
 (*((
CPU_REG32
 *)(0xE000ED70))Ë

	)

497 
	#CPU_REG_NVIC_SW_TRIG
 (*((
CPU_REG32
 *)(0xE000EF00))Ë

	)

499 
	#CPU_REG_MPU_TYPE
 (*((
CPU_REG32
 *)(0xE000ED90))Ë

	)

500 
	#CPU_REG_MPU_CTRL
 (*((
CPU_REG32
 *)(0xE000ED94))Ë

	)

501 
	#CPU_REG_MPU_REG_NBR
 (*((
CPU_REG32
 *)(0xE000ED98))Ë

	)

502 
	#CPU_REG_MPU_REG_BASE
 (*((
CPU_REG32
 *)(0xE000ED9C))Ë

	)

503 
	#CPU_REG_MPU_REG_ATTR
 (*((
CPU_REG32
 *)(0xE000EDA0))Ë

	)

505 
	#CPU_REG_DBG_CTRL
 (*((
CPU_REG32
 *)(0xE000EDF0))Ë

	)

506 
	#CPU_REG_DBG_SELECT
 (*((
CPU_REG32
 *)(0xE000EDF4))Ë

	)

507 
	#CPU_REG_DBG_DATA
 (*((
CPU_REG32
 *)(0xE000EDF8))Ë

	)

508 
	#CPU_REG_DBG_INT
 (*((
CPU_REG32
 *)(0xE000EDFC))Ë

	)

518 
	#CPU_REG_NVIC_ST_CTRL_COUNTFLAG
 0x00010000

	)

519 
	#CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 0x00000004

	)

520 
	#CPU_REG_NVIC_ST_CTRL_TICKINT
 0x00000002

	)

521 
	#CPU_REG_NVIC_ST_CTRL_ENABLE
 0x00000001

	)

525 
	#CPU_REG_NVIC_ST_CAL_NOREF
 0x80000000

	)

526 
	#CPU_REG_NVIC_ST_CAL_SKEW
 0x40000000

	)

529 
	#CPU_REG_NVIC_ICSR_NMIPENDSET
 0x80000000

	)

530 
	#CPU_REG_NVIC_ICSR_PENDSVSET
 0x10000000

	)

531 
	#CPU_REG_NVIC_ICSR_PENDSVCLR
 0x08000000

	)

532 
	#CPU_REG_NVIC_ICSR_PENDSTSET
 0x04000000

	)

533 
	#CPU_REG_NVIC_ICSR_PENDSTCLR
 0x02000000

	)

534 
	#CPU_REG_NVIC_ICSR_ISRPREEMPT
 0x00800000

	)

535 
	#CPU_REG_NVIC_ICSR_ISRPENDING
 0x00400000

	)

536 
	#CPU_REG_NVIC_ICSR_RETTOBASE
 0x00000800

	)

539 
	#CPU_REG_NVIC_VTOR_TBLBASE
 0x20000000

	)

542 
	#CPU_REG_NVIC_AIRCR_ENDIANNESS
 0x00008000

	)

543 
	#CPU_REG_NVIC_AIRCR_SYSRESETREQ
 0x00000004

	)

544 
	#CPU_REG_NVIC_AIRCR_VECTCLRACTIVE
 0x00000002

	)

545 
	#CPU_REG_NVIC_AIRCR_VECTRESET
 0x00000001

	)

548 
	#CPU_REG_NVIC_SCR_SEVONPEND
 0x00000010

	)

549 
	#CPU_REG_NVIC_SCR_SLEEPDEEP
 0x00000004

	)

550 
	#CPU_REG_NVIC_SCR_SLEEPONEXIT
 0x00000002

	)

553 
	#CPU_REG_NVIC_CCR_STKALIGN
 0x00000200

	)

554 
	#CPU_REG_NVIC_CCR_BFHFNMIGN
 0x00000100

	)

555 
	#CPU_REG_NVIC_CCR_DIV_0_TRP
 0x00000010

	)

556 
	#CPU_REG_NVIC_CCR_UNALIGN_TRP
 0x00000008

	)

557 
	#CPU_REG_NVIC_CCR_USERSETMPEND
 0x00000002

	)

558 
	#CPU_REG_NVIC_CCR_NONBASETHRDENA
 0x00000001

	)

561 
	#CPU_REG_NVIC_SHCSR_USGFAULTENA
 0x00040000

	)

562 
	#CPU_REG_NVIC_SHCSR_BUSFAULTENA
 0x00020000

	)

563 
	#CPU_REG_NVIC_SHCSR_MEMFAULTENA
 0x00010000

	)

564 
	#CPU_REG_NVIC_SHCSR_SVCALLPENDED
 0x00008000

	)

565 
	#CPU_REG_NVIC_SHCSR_BUSFAULTPENDED
 0x00004000

	)

566 
	#CPU_REG_NVIC_SHCSR_MEMFAULTPENDED
 0x00002000

	)

567 
	#CPU_REG_NVIC_SHCSR_USGFAULTPENDED
 0x00001000

	)

568 
	#CPU_REG_NVIC_SHCSR_SYSTICKACT
 0x00000800

	)

569 
	#CPU_REG_NVIC_SHCSR_PENDSVACT
 0x00000400

	)

570 
	#CPU_REG_NVIC_SHCSR_MONITORACT
 0x00000100

	)

571 
	#CPU_REG_NVIC_SHCSR_SVCALLACT
 0x00000080

	)

572 
	#CPU_REG_NVIC_SHCSR_USGFAULTACT
 0x00000008

	)

573 
	#CPU_REG_NVIC_SHCSR_BUSFAULTACT
 0x00000002

	)

574 
	#CPU_REG_NVIC_SHCSR_MEMFAULTACT
 0x00000001

	)

577 
	#CPU_REG_NVIC_CFSR_DIVBYZERO
 0x02000000

	)

578 
	#CPU_REG_NVIC_CFSR_UNALIGNED
 0x01000000

	)

579 
	#CPU_REG_NVIC_CFSR_NOCP
 0x00080000

	)

580 
	#CPU_REG_NVIC_CFSR_INVPC
 0x00040000

	)

581 
	#CPU_REG_NVIC_CFSR_INVSTATE
 0x00020000

	)

582 
	#CPU_REG_NVIC_CFSR_UNDEFINSTR
 0x00010000

	)

583 
	#CPU_REG_NVIC_CFSR_BFARVALID
 0x00008000

	)

584 
	#CPU_REG_NVIC_CFSR_STKERR
 0x00001000

	)

585 
	#CPU_REG_NVIC_CFSR_UNSTKERR
 0x00000800

	)

586 
	#CPU_REG_NVIC_CFSR_IMPRECISERR
 0x00000400

	)

587 
	#CPU_REG_NVIC_CFSR_PRECISERR
 0x00000200

	)

588 
	#CPU_REG_NVIC_CFSR_IBUSERR
 0x00000100

	)

589 
	#CPU_REG_NVIC_CFSR_MMARVALID
 0x00000080

	)

590 
	#CPU_REG_NVIC_CFSR_MSTKERR
 0x00000010

	)

591 
	#CPU_REG_NVIC_CFSR_MUNSTKERR
 0x00000008

	)

592 
	#CPU_REG_NVIC_CFSR_DACCVIOL
 0x00000002

	)

593 
	#CPU_REG_NVIC_CFSR_IACCVIOL
 0x00000001

	)

596 
	#CPU_REG_NVIC_HFSR_DEBUGEVT
 0x80000000

	)

597 
	#CPU_REG_NVIC_HFSR_FORCED
 0x40000000

	)

598 
	#CPU_REG_NVIC_HFSR_VECTTBL
 0x00000002

	)

601 
	#CPU_REG_NVIC_DFSR_EXTERNAL
 0x00000010

	)

602 
	#CPU_REG_NVIC_DFSR_VCATCH
 0x00000008

	)

603 
	#CPU_REG_NVIC_DFSR_DWTTRAP
 0x00000004

	)

604 
	#CPU_REG_NVIC_DFSR_BKPT
 0x00000002

	)

605 
	#CPU_REG_NVIC_DFSR_HALTED
 0x00000001

	)

614 
	#CPU_MSK_NVIC_ICSR_VECT_ACTIVE
 0x000001FF

	)

623 #i‚de‡ 
CPU_CFG_ADDR_SIZE


630 #ñi‡ ((
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_08
) && \

631 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_16
) && \

632 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_32
) && \

633 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_64
))

642 #i‚de‡ 
CPU_CFG_DATA_SIZE


649 #ñi‡ ((
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_08
) && \

650 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_16
) && \

651 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_32
) && \

652 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_64
))

661 #i‚de‡ 
CPU_CFG_DATA_SIZE_MAX


668 #ñi‡ ((
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_08
) && \

669 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_16
) && \

670 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_32
) && \

671 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_64
))

681 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 < 
CPU_CFG_DATA_SIZE
)

689 #i‚de‡ 
CPU_CFG_ENDIAN_TYPE


694 #ñi‡ ((
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_BIG
 ) && \

695 (
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_LITTLE
))

704 #i‚de‡ 
CPU_CFG_STK_GROWTH


709 #ñi‡ ((
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_LO_TO_HI
) && \

710 (
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_HI_TO_LO
))

719 #i‚de‡ 
CPU_CFG_CRITICAL_METHOD


725 #ñi‡ ((
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_INT_DIS_EN
 ) && \

726 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_STK
 ) && \

727 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_LOCAL
))

743 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/ARM-Cortex-M4/RealView/cpu_c.c

49 
	#MICRIUM_SOURCE


	)

50 
	~<˝u.h
>

51 
	~<˝u_c‹e.h
>

53 
	~<lib_def.h
>

55 #ifde‡
__˝lu•lus


66 
	#CPU_INT_SRC_POS_MAX
 ((((
CPU_REG_NVIC_NVIC
 + 1Ë& 0x1FË* 32Ë+ 16)

	)

68 
	#CPU_BIT_BAND_SRAM_REG_LO
 0x20000000

	)

69 
	#CPU_BIT_BAND_SRAM_REG_HI
 0x200FFFFF

	)

70 
	#CPU_BIT_BAND_SRAM_BASE
 0x22000000

	)

73 
	#CPU_BIT_BAND_PERIPH_REG_LO
 0x40000000

	)

74 
	#CPU_BIT_BAND_PERIPH_REG_HI
 0x400FFFFF

	)

75 
	#CPU_BIT_BAND_PERIPH_BASE
 0x42000000

	)

138 
CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

139 
CPU_INT08U
 
bô_nbr
)

141 
CPU_ADDR
 
bô_w‹d_off
;

142 
CPU_ADDR
 
bô_w‹d_addr
;

145 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

146 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

147 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

148 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

150 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

152 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

153 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

154 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

155 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

157 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

180 
CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

181 
CPU_INT08U
 
bô_nbr
)

183 
CPU_ADDR
 
bô_w‹d_off
;

184 
CPU_ADDR
 
bô_w‹d_addr
;

187 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

188 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

189 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

190 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

192 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

194 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

195 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

196 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

197 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

199 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

253 
CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
)

255 
CPU_INT08U
 
group
;

256 
CPU_INT08U
 
pos_max
;

257 
CPU_INT08U
 
nbr
;

258 
CPU_SR_ALLOC
();

261 
pos
) {

262 
CPU_INT_STK_PTR
:

263 
CPU_INT_RSVD_07
:

264 
CPU_INT_RSVD_08
:

265 
CPU_INT_RSVD_09
:

266 
CPU_INT_RSVD_10
:

267 
CPU_INT_RSVD_13
:

272 
CPU_INT_RESET
:

273 
CPU_INT_NMI
:

274 
CPU_INT_HFAULT
:

275 
CPU_INT_SVCALL
:

276 
CPU_INT_DBGMON
:

277 
CPU_INT_PENDSV
:

280 
CPU_INT_MEM
:

281 
CPU_CRITICAL_ENTER
();

282 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

283 
CPU_CRITICAL_EXIT
();

286 
CPU_INT_BUSFAULT
:

287 
CPU_CRITICAL_ENTER
();

288 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

289 
CPU_CRITICAL_EXIT
();

292 
CPU_INT_USAGEFAULT
:

293 
CPU_CRITICAL_ENTER
();

294 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

295 
CPU_CRITICAL_EXIT
();

298 
CPU_INT_SYSTICK
:

299 
CPU_CRITICAL_ENTER
();

300 
CPU_REG_NVIC_ST_CTRL
 &~
CPU_REG_NVIC_ST_CTRL_ENABLE
;

301 
CPU_CRITICAL_EXIT
();

307 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

308 i‡(
pos
 < 
pos_max
) {

309 
group
 = (
pos
 - 16) / 32;

310 
nbr
 = (
pos
 - 16) % 32;

312 
CPU_CRITICAL_ENTER
();

313 
CPU_REG_NVIC_CLREN
(
group
Ë
DEF_BIT
(
nbr
);

314 
CPU_CRITICAL_EXIT
();

341 
CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
)

343 
CPU_INT08U
 
group
;

344 
CPU_INT08U
 
nbr
;

345 
CPU_INT08U
 
pos_max
;

346 
CPU_SR_ALLOC
();

349 
pos
) {

350 
CPU_INT_STK_PTR
:

351 
CPU_INT_RSVD_07
:

352 
CPU_INT_RSVD_08
:

353 
CPU_INT_RSVD_09
:

354 
CPU_INT_RSVD_10
:

355 
CPU_INT_RSVD_13
:

360 
CPU_INT_RESET
:

361 
CPU_INT_NMI
:

362 
CPU_INT_HFAULT
:

363 
CPU_INT_SVCALL
:

364 
CPU_INT_DBGMON
:

365 
CPU_INT_PENDSV
:

368 
CPU_INT_MEM
:

369 
CPU_CRITICAL_ENTER
();

370 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

371 
CPU_CRITICAL_EXIT
();

374 
CPU_INT_BUSFAULT
:

375 
CPU_CRITICAL_ENTER
();

376 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

377 
CPU_CRITICAL_EXIT
();

380 
CPU_INT_USAGEFAULT
:

381 
CPU_CRITICAL_ENTER
();

382 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

383 
CPU_CRITICAL_EXIT
();

386 
CPU_INT_SYSTICK
:

387 
CPU_CRITICAL_ENTER
();

388 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_ENABLE
;

389 
CPU_CRITICAL_EXIT
();

395 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

396 i‡(
pos
 < 
pos_max
) {

397 
group
 = (
pos
 - 16) / 32;

398 
nbr
 = (
pos
 - 16) % 32;

400 
CPU_CRITICAL_ENTER
();

401 
CPU_REG_NVIC_SETEN
(
group
Ë
DEF_BIT
(
nbr
);

402 
CPU_CRITICAL_EXIT
();

440 
CPU_I¡SrcPídCÃ
 (
CPU_INT08U
 
pos
)

443 
CPU_INT08U
 
group
;

444 
CPU_INT08U
 
nbr
;

445 
CPU_INT08U
 
pos_max
;

446 
CPU_SR_ALLOC
();

449 
pos
) {

450 
CPU_INT_STK_PTR
:

451 
CPU_INT_RSVD_07
:

452 
CPU_INT_RSVD_08
:

453 
CPU_INT_RSVD_09
:

454 
CPU_INT_RSVD_10
:

455 
CPU_INT_RSVD_13
:

458 
CPU_INT_RESET
:

459 
CPU_INT_NMI
:

460 
CPU_INT_HFAULT
:

461 
CPU_INT_MEM
:

462 
CPU_INT_SVCALL
:

463 
CPU_INT_DBGMON
:

464 
CPU_INT_PENDSV
:

465 
CPU_INT_BUSFAULT
:

466 
CPU_INT_USAGEFAULT
:

467 
CPU_INT_SYSTICK
:

471 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

472 i‡(
pos
 < 
pos_max
) {

473 
group
 = (
pos
 - 16) / 32;

474 
nbr
 = (
pos
 - 16) % 32;

476 
CPU_CRITICAL_ENTER
();

477 
CPU_REG_NVIC_CLRPEND
(
group
Ë
DEF_BIT
(
nbr
);

478 
CPU_CRITICAL_EXIT
();

511 
CPU_I¡SrcPrioSë
 (
CPU_INT08U
 
pos
,

512 
CPU_INT08U
 
¥io
)

514 
CPU_INT08U
 
group
;

515 
CPU_INT08U
 
nbr
;

516 
CPU_INT08U
 
pos_max
;

517 
CPU_INT32U
 
ãmp
;

518 
CPU_SR_ALLOC
();

521 
pos
) {

522 
CPU_INT_STK_PTR
:

523 
CPU_INT_RSVD_07
:

524 
CPU_INT_RSVD_08
:

525 
CPU_INT_RSVD_09
:

526 
CPU_INT_RSVD_10
:

527 
CPU_INT_RSVD_13
:

532 
CPU_INT_RESET
:

533 
CPU_INT_NMI
:

534 
CPU_INT_HFAULT
:

537 
CPU_INT_MEM
:

538 
CPU_CRITICAL_ENTER
();

539 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

540 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

541 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

542 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

543 
CPU_CRITICAL_EXIT
();

546 
CPU_INT_BUSFAULT
:

547 
CPU_CRITICAL_ENTER
();

548 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

549 
ãmp
 &~(
DEF_OCTET_MASK
 << (1 * 
DEF_OCTET_NBR_BITS
));

550 
ãmp
 |(
¥io
 << (1 * 
DEF_OCTET_NBR_BITS
));

551 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

552 
CPU_CRITICAL_EXIT
();

555 
CPU_INT_USAGEFAULT
:

556 
CPU_CRITICAL_ENTER
();

557 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

558 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

559 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

560 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

561 
CPU_CRITICAL_EXIT
();

564 
CPU_INT_SVCALL
:

565 
CPU_CRITICAL_ENTER
();

566 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

567 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

568 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

569 
CPU_REG_NVIC_SHPRI2
 = 
ãmp
;

570 
CPU_CRITICAL_EXIT
();

573 
CPU_INT_DBGMON
:

574 
CPU_CRITICAL_ENTER
();

575 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

576 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

577 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

578 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

579 
CPU_CRITICAL_EXIT
();

582 
CPU_INT_PENDSV
:

583 
CPU_CRITICAL_ENTER
();

584 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

585 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

586 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

587 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

588 
CPU_CRITICAL_EXIT
();

591 
CPU_INT_SYSTICK
:

592 
CPU_CRITICAL_ENTER
();

593 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

594 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

595 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

596 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

597 
CPU_CRITICAL_EXIT
();

603 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

604 i‡(
pos
 < 
pos_max
) {

605 
group
 = (
pos
 - 16) / 4;

606 
nbr
 = (
pos
 - 16) % 4;

608 
CPU_CRITICAL_ENTER
();

609 
ãmp
 = 
CPU_REG_NVIC_PRIO
(
group
);

610 
ãmp
 &~(
DEF_OCTET_MASK
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

611 
ãmp
 |(
¥io
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

612 
CPU_REG_NVIC_PRIO
(
group
Ë
ãmp
;

613 
CPU_CRITICAL_EXIT
();

641 
CPU_INT16S
 
CPU_I¡SrcPrioGë
 (
CPU_INT08U
 
pos
)

643 
CPU_INT08U
 
group
;

644 
CPU_INT08U
 
nbr
;

645 
CPU_INT08U
 
pos_max
;

646 
CPU_INT16S
 
¥io
;

647 
CPU_INT32U
 
ãmp
;

648 
CPU_SR_ALLOC
();

651 
pos
) {

652 
CPU_INT_STK_PTR
:

653 
CPU_INT_RSVD_07
:

654 
CPU_INT_RSVD_08
:

655 
CPU_INT_RSVD_09
:

656 
CPU_INT_RSVD_10
:

657 
CPU_INT_RSVD_13
:

658 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

663 
CPU_INT_RESET
:

664 
¥io
 = -3;

667 
CPU_INT_NMI
:

668 
¥io
 = -2;

671 
CPU_INT_HFAULT
:

672 
¥io
 = -1;

676 
CPU_INT_MEM
:

677 
CPU_CRITICAL_ENTER
();

678 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

679 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

680 
CPU_CRITICAL_EXIT
();

684 
CPU_INT_BUSFAULT
:

685 
CPU_CRITICAL_ENTER
();

686 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

687 
¥io
 = (
ãmp
 >> (1 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

688 
CPU_CRITICAL_EXIT
();

692 
CPU_INT_USAGEFAULT
:

693 
CPU_CRITICAL_ENTER
();

694 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

695 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

696 
CPU_CRITICAL_EXIT
();

699 
CPU_INT_SVCALL
:

700 
CPU_CRITICAL_ENTER
();

701 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

702 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

703 
CPU_CRITICAL_EXIT
();

706 
CPU_INT_DBGMON
:

707 
CPU_CRITICAL_ENTER
();

708 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

709 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

710 
CPU_CRITICAL_EXIT
();

713 
CPU_INT_PENDSV
:

714 
CPU_CRITICAL_ENTER
();

715 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

716 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

717 
CPU_CRITICAL_EXIT
();

720 
CPU_INT_SYSTICK
:

721 
CPU_CRITICAL_ENTER
();

722 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

723 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

724 
CPU_CRITICAL_EXIT
();

730 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

731 i‡(
pos
 < 
pos_max
) {

732 
group
 = (
pos
 - 16) / 4;

733 
nbr
 = (
pos
 - 16) % 4;

735 
CPU_CRITICAL_ENTER
();

736 
ãmp
 = 
CPU_REG_NVIC_PRIO
(
group
);

737 
CPU_CRITICAL_EXIT
();

739 
¥io
 = (
ãmp
 >> (
nbr
 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

741 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

746  (
¥io
);

749 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/cpu_core.c

41 
	#MICRIUM_SOURCE


	)

42 
	#CPU_CORE_MODULE


	)

43 
	~<˝u_c‹e.h
>

93 #i‡(!(
deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) || \

94 (
	gCPU_CFG_DATA_SIZE_MAX
 > 
	gCPU_CFG_DATA_SIZE
))

95 c⁄° 
CPU_INT08U
 
	gCPU_C¡LódZîosTbl
[256] = {

123 
CPU_INT32U
 c⁄° 
	gCPU_Endü¬essTe°
 = 0x12345678LU;

132 #i‡ (
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

133 
CPU_NameInô
 ();

138 #i‡ ((
CPU_CFG_TS_EN
 =
DEF_ENABLED
) || \

139 (
	gCPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
))

140 
CPU_TS_Inô
 ();

144 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


145 
CPU_I¡DisMósInô
 ();

147 
CPU_TS_TMR
 
CPU_I¡DisMósMaxCÆc
(CPU_TS_TMR 
time_tŸ_˙ts
);

192 
	$CPU_Inô
 ()

195 #i‡((
CPU_CFG_TS_EN
 =
DEF_ENABLED
) || \

196 (
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
))

197 
	`CPU_TS_Inô
();

200 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


201 
	`CPU_I¡DisMósInô
();

205 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

206 
	`CPU_NameInô
();

208 
	}
}

231 
	$CPU_SW_Ex˚±i⁄
 ()

233 
DEF_ON
) {

236 
	}
}

259 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

260 
	$CPU_NameCÃ
 ()

262 
	`CPU_SR_ALLOC
();

265 
	`CPU_CRITICAL_ENTER
();

266 
	`Mem_CÃ
((*)&
CPU_Name
[0],

267 (
CPU_SIZE_T
Ë
CPU_CFG_NAME_SIZE
);

268 
	`CPU_CRITICAL_EXIT
();

269 
	}
}

303 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

304 
	$CPU_NameGë
 (
CPU_CHAR
 *
p_«me
,

305 
CPU_ERR
 *
p_îr
)

307 
	`CPU_SR_ALLOC
();

310 i‡(
p_îr
 =(
CPU_ERR
 *)0) {

311 
	`CPU_SW_EXCEPTION
(;);

314 i‡(
p_«me
 =(
CPU_CHAR
 *)0) {

315 *
p_îr
 = 
CPU_ERR_NULL_PTR
;

319 
	`CPU_CRITICAL_ENTER
();

320 ()
	`Så_C›y_N
(
p_«me
,

321 &
CPU_Name
[0],

322 
CPU_CFG_NAME_SIZE
);

323 
	`CPU_CRITICAL_EXIT
();

325 *
p_îr
 = 
CPU_ERR_NONE
;

326 
	}
}

356 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

357 
	$CPU_NameSë
 (c⁄° 
CPU_CHAR
 *
p_«me
,

358 
CPU_ERR
 *
p_îr
)

360 
CPU_SIZE_T
 
Àn
;

361 
	`CPU_SR_ALLOC
();

364 i‡(
p_îr
 =(
CPU_ERR
 *)0) {

365 
	`CPU_SW_EXCEPTION
(;);

368 i‡(
p_«me
 =(c⁄° 
CPU_CHAR
 *)0) {

369 *
p_îr
 = 
CPU_ERR_NULL_PTR
;

373 
Àn
 = 
	`Så_Lí_N
(
p_«me
,

374 
CPU_CFG_NAME_SIZE
);

375 i‡(
Àn
 < 
CPU_CFG_NAME_SIZE
) {

376 
	`CPU_CRITICAL_ENTER
();

377 ()
	`Så_C›y_N
(&
CPU_Name
[0],

378 
p_«me
,

379 
CPU_CFG_NAME_SIZE
);

380 
	`CPU_CRITICAL_EXIT
();

381 *
p_îr
 = 
CPU_ERR_NONE
;

384 *
p_îr
 = 
CPU_ERR_NAME_SIZE
;

386 
	}
}

442 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
)

443 
CPU_TS32
 
	$CPU_TS_Gë32
 ()

445 
CPU_TS32
 
ts
;

446 #i‡(
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)

447 
CPU_TS_TMR
 
tmr_cur
;

448 
CPU_TS_TMR
 
tmr_dñè
;

449 
	`CPU_SR_ALLOC
();

453 #i‡(
CPU_CFG_TS_TMR_SIZE
 >
CPU_WORD_SIZE_32
)

454 
ts
 = (
CPU_TS32
)
	`CPU_TS_TmrRd
();

457 
	`CPU_INT_DIS
();

458 
tmr_cur
 = (
CPU_TS_TMR
Ë
	`CPU_TS_TmrRd
();

459 
tmr_dñè
 = (
CPU_TS_TMR
)(
tmr_cur
 - 
CPU_TS_32_TmrPªv
);

460 
CPU_TS_32_Accum
 +(
CPU_TS32
 ) 
tmr_dñè
;

461 
CPU_TS_32_TmrPªv
 = (
CPU_TS_TMR
Ë
tmr_cur
;

462 
ts
 = (
CPU_TS32
 ) 
CPU_TS_32_Accum
;

463 
	`CPU_INT_EN
();

466  (
ts
);

467 
	}
}

523 #i‡(
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
)

524 
CPU_TS64
 
	$CPU_TS_Gë64
 ()

526 
CPU_TS64
 
ts
;

527 #i‡(
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
)

528 
CPU_TS_TMR
 
tmr_cur
;

529 
CPU_TS_TMR
 
tmr_dñè
;

530 
	`CPU_SR_ALLOC
();

534 #i‡(
CPU_CFG_TS_TMR_SIZE
 >
CPU_WORD_SIZE_64
)

535 
ts
 = (
CPU_TS64
)
	`CPU_TS_TmrRd
();

538 
	`CPU_INT_DIS
();

539 
tmr_cur
 = (
CPU_TS_TMR
Ë
	`CPU_TS_TmrRd
();

540 
tmr_dñè
 = (
CPU_TS_TMR
)(
tmr_cur
 - 
CPU_TS_64_TmrPªv
);

541 
CPU_TS_64_Accum
 +(
CPU_TS64
 ) 
tmr_dñè
;

542 
CPU_TS_64_TmrPªv
 = (
CPU_TS_TMR
Ë
tmr_cur
;

543 
ts
 = (
CPU_TS64
 ) 
CPU_TS_64_Accum
;

544 
	`CPU_INT_EN
();

547  (
ts
);

548 
	}
}

577 #i‡(
CPU_CFG_TS_EN
 =
DEF_ENABLED
)

578 
	$CPU_TS_Upd©e
 ()

580 #i‡((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

581 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
))

582 ()
	`CPU_TS_Gë32
();

585 #i‡((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
) && \

586 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
))

587 ()
	`CPU_TS_Gë64
();

589 
	}
}

619 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

620 
CPU_TS_TMR_FREQ
 
	$CPU_TS_TmrFªqGë
 (
CPU_ERR
 *
p_îr
)

622 
CPU_TS_TMR_FREQ
 
‰eq_hz
;

625 i‡(
p_îr
 =(
CPU_ERR
 *)0) {

626 
	`CPU_SW_EXCEPTION
(;);

629 
‰eq_hz
 = 
CPU_TS_TmrFªq_Hz
;

630 *
p_îr
 = (
‰eq_hz
 !0uË? 
CPU_ERR_NONE
 : 
CPU_ERR_TS_FREQ_INVALID
;

632  (
‰eq_hz
);

633 
	}
}

670 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

671 
	$CPU_TS_TmrFªqSë
 (
CPU_TS_TMR_FREQ
 
‰eq_hz
)

673 
CPU_TS_TmrFªq_Hz
 = 
‰eq_hz
;

674 
	}
}

701 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


702 
CPU_TS_TMR
 
	$CPU_I¡DisMósMaxCurRe£t
 ()

704 
CPU_TS_TMR
 
time_max_˙ts
;

705 
	`CPU_SR_ALLOC
();

708 
time_max_˙ts
 = 
	`CPU_I¡DisMósMaxCurGë
();

709 
	`CPU_INT_DIS
();

710 
CPU_I¡DisMósMaxCur_˙ts
 = 0u;

711 
	`CPU_INT_EN
();

713  (
time_max_˙ts
);

714 
	}
}

742 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


743 
CPU_TS_TMR
 
	$CPU_I¡DisMósMaxCurGë
 ()

745 
CPU_TS_TMR
 
time_tŸ_˙ts
;

746 
CPU_TS_TMR
 
time_max_˙ts
;

747 
	`CPU_SR_ALLOC
();

750 
	`CPU_INT_DIS
();

751 
time_tŸ_˙ts
 = 
CPU_I¡DisMósMaxCur_˙ts
;

752 
	`CPU_INT_EN
();

753 
time_max_˙ts
 = 
	`CPU_I¡DisMósMaxCÆc
(
time_tŸ_˙ts
);

755  (
time_max_˙ts
);

756 
	}
}

784 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


785 
CPU_TS_TMR
 
	$CPU_I¡DisMósMaxGë
 ()

787 
CPU_TS_TMR
 
time_tŸ_˙ts
;

788 
CPU_TS_TMR
 
time_max_˙ts
;

789 
	`CPU_SR_ALLOC
();

792 
	`CPU_INT_DIS
();

793 
time_tŸ_˙ts
 = 
CPU_I¡DisMósMax_˙ts
;

794 
	`CPU_INT_EN
();

795 
time_max_˙ts
 = 
	`CPU_I¡DisMósMaxCÆc
(
time_tŸ_˙ts
);

797  (
time_max_˙ts
);

798 
	}
}

821 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


822 
	$CPU_I¡DisMósSèπ
 ()

824 
CPU_I¡DisMósCå
++;

825 i‡(
CPU_I¡DisNe°Cå
 == 0u) {

826 
CPU_I¡DisMósSèπ_˙ts
 = 
	`CPU_TS_TmrRd
();

828 
CPU_I¡DisNe°Cå
++;

829 
	}
}

1005 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


1006 
	$CPU_I¡DisMósSt›
 ()

1008 
CPU_TS_TMR
 
time_öts_disd_˙ts
;

1011 
CPU_I¡DisNe°Cå
--;

1012 i‡(
CPU_I¡DisNe°Cå
 == 0u) {

1013 
CPU_I¡DisMósSt›_˙ts
 = 
	`CPU_TS_TmrRd
();

1015 
time_öts_disd_˙ts
 = 
CPU_I¡DisMósSt›_˙ts
 -

1016 
CPU_I¡DisMósSèπ_˙ts
;

1018 i‡(
CPU_I¡DisMósMaxCur_˙ts
 < 
time_öts_disd_˙ts
) {

1019 
CPU_I¡DisMósMaxCur_˙ts
 = 
time_öts_disd_˙ts
;

1021 i‡(
CPU_I¡DisMósMax_˙ts
 < 
time_öts_disd_˙ts
) {

1022 
CPU_I¡DisMósMax_˙ts
 = 
time_öts_disd_˙ts
;

1025 
	}
}

1125 #i‚de‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


1126 
CPU_DATA
 
	$CPU_C¡LódZîos
 (
CPU_DATA
 
vÆ
)

1128 
CPU_DATA
 
nbr_Àad_zîos
;

1131 #i‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_08
)

1132 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos08
((
CPU_INT08U
)
vÆ
);

1134 #ñi‡(
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

1135 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos16
((
CPU_INT16U
)
vÆ
);

1137 #ñi‡(
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
)

1138 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos32
((
CPU_INT32U
)
vÆ
);

1140 #ñi‡(
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_64
)

1141 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos64
((
CPU_INT64U
)
vÆ
);

1144 
nbr_Àad_zîos
 = 
DEF_INT_CPU_U_MAX_VAL
;

1148  (
nbr_Àad_zîos
);

1149 
	}
}

1189 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_08
)

1190 
CPU_DATA
 
	$CPU_C¡LódZîos08
 (
CPU_INT08U
 
vÆ
)

1192 #i‡ (!((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1193 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_08
)))

1194 
CPU_DATA
 
ix
;

1196 
CPU_DATA
 
nbr_Àad_zîos
;

1199 #i‡((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1200 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_08
))

1201 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
((
CPU_DATA
)
vÆ
);

1202 
nbr_Àad_zîos
 -(
CPU_CFG_DATA_SIZE
 - 
CPU_WORD_SIZE_08
Ë* 
DEF_OCTET_NBR_BITS
;

1208 
ix
 = (
CPU_DATA
)(
vÆ
 >> 0u);

1209 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 0u);

1213  (
nbr_Àad_zîos
);

1214 
	}
}

1256 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_16
)

1257 
CPU_DATA
 
	$CPU_C¡LódZîos16
 (
CPU_INT16U
 
vÆ
)

1259 #i‡ (!((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1260 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_16
)))

1261 
CPU_DATA
 
ix
;

1263 
CPU_DATA
 
nbr_Àad_zîos
;

1266 #i‡((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1267 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_16
))

1268 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
((
CPU_DATA
)
vÆ
);

1269 
nbr_Àad_zîos
 -(
CPU_CFG_DATA_SIZE
 - 
CPU_WORD_SIZE_16
Ë* 
DEF_OCTET_NBR_BITS
;

1273 i‡(
vÆ
 > 0x00FFu) {

1275 
ix
 = (
CPU_DATA
)(
vÆ
 >> 8u);

1276 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 0u);

1280 
ix
 = (
CPU_DATA
)(
vÆ
 >> 0u);

1281 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 8u);

1286  (
nbr_Àad_zîos
);

1287 
	}
}

1329 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_32
)

1330 
CPU_DATA
 
	$CPU_C¡LódZîos32
 (
CPU_INT32U
 
vÆ
)

1332 #i‡ (!((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1333 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_32
)))

1334 
CPU_DATA
 
ix
;

1336 
CPU_DATA
 
nbr_Àad_zîos
;

1339 #i‡((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1340 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_32
))

1341 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
((
CPU_DATA
)
vÆ
);

1342 
nbr_Àad_zîos
 -(
CPU_CFG_DATA_SIZE
 - 
CPU_WORD_SIZE_32
Ë* 
DEF_OCTET_NBR_BITS
;

1346 i‡(
vÆ
 > 0x0000FFFFu) {

1347 i‡(
vÆ
 > 0x00FFFFFFu) {

1349 
ix
 = (
CPU_DATA
)(
vÆ
 >> 24u);

1350 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 0u);

1354 
ix
 = (
CPU_DATA
)(
vÆ
 >> 16u);

1355 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 8u);

1359 i‡(
vÆ
 > 0x000000FFu) {

1361 
ix
 = (
CPU_DATA
)(
vÆ
 >> 8u);

1362 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 16u);

1366 
ix
 = (
CPU_DATA
)(
vÆ
 >> 0u);

1367 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 24u);

1373  (
nbr_Àad_zîos
);

1374 
	}
}

1416 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_64
)

1417 
CPU_DATA
 
	$CPU_C¡LódZîos64
 (
CPU_INT64U
 
vÆ
)

1419 #i‡ (!((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1420 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_64
)))

1421 
CPU_DATA
 
ix
;

1423 
CPU_DATA
 
nbr_Àad_zîos
;

1426 #i‡((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1427 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_64
))

1428 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
((
CPU_DATA
)
vÆ
);

1429 
nbr_Àad_zîos
 -(
CPU_CFG_DATA_SIZE
 - 
CPU_WORD_SIZE_64
Ë* 
DEF_OCTET_NBR_BITS
;

1433 i‡(
vÆ
 > 0x00000000FFFFFFFFu) {

1434 i‡(
vÆ
 > 0x0000FFFFFFFFFFFFu) {

1435 i‡(
vÆ
 > 0x00FFFFFFFFFFFFFFu) {

1437 
ix
 = (
CPU_DATA
)(
vÆ
 >> 56u);

1438 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 0u);

1442 
ix
 = (
CPU_DATA
)(
vÆ
 >> 48u);

1443 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 8u);

1447 i‡(
vÆ
 > 0x000000FFFFFFFFFFu) {

1449 
ix
 = (
CPU_DATA
)(
vÆ
 >> 40u);

1450 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 16u);

1454 
ix
 = (
CPU_DATA
)(
vÆ
 >> 32u);

1455 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 24u);

1460 i‡(
vÆ
 > 0x000000000000FFFFu) {

1461 i‡(
vÆ
 > 0x0000000000FFFFFFu) {

1463 
ix
 = (
CPU_DATA
)(
vÆ
 >> 24u);

1464 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 32u);

1468 
ix
 = (
CPU_DATA
)(
vÆ
 >> 16u);

1469 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 40u);

1473 i‡(
vÆ
 > 0x00000000000000FFu) {

1475 
ix
 = (
CPU_DATA
)(
vÆ
 >> 8u);

1476 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 48u);

1480 
ix
 = (
CPU_DATA
)(
vÆ
 >> 0u);

1481 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 56u);

1488  (
nbr_Àad_zîos
);

1489 
	}
}

1602 #i‚de‡ 
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT


1603 
CPU_DATA
 
	$CPU_C¡TøûZîos
 (
CPU_DATA
 
vÆ
)

1605 
CPU_DATA
 
vÆ_bô_mask
;

1606 
CPU_DATA
 
nbr_Àad_zîos
;

1607 
CPU_DATA
 
nbr_åaû_zîos
;

1610 i‡(
vÆ
 == 0u) {

1611  (
CPU_CFG_DATA_SIZE
 * 
DEF_OCTET_NBR_BITS
);

1615 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_DATA
)~val + 1u);

1616 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
(
vÆ_bô_mask
);

1618 
nbr_åaû_zîos
 = ((
CPU_CFG_DATA_SIZE
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

1621  (
nbr_åaû_zîos
);

1622 
	}
}

1695 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_08
)

1696 
CPU_DATA
 
	$CPU_C¡TøûZîos08
 (
CPU_INT08U
 
vÆ
)

1698 #i‡ (!((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1699 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_08
)))

1700 
CPU_INT08U
 
vÆ_bô_mask
;

1701 
CPU_DATA
 
nbr_Àad_zîos
;

1703 
CPU_DATA
 
nbr_åaû_zîos
;

1706 i‡(
vÆ
 == 0u) {

1707  (
CPU_WORD_SIZE_08
 * 
DEF_OCTET_NBR_BITS
);

1711 #i‡((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1712 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_08
))

1713 
nbr_åaû_zîos
 = 
	`CPU_C¡TøûZîos
((
CPU_DATA
)
vÆ
);

1716 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_INT08U
)~val + 1u);

1717 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos08
(
vÆ_bô_mask
);

1719 
nbr_åaû_zîos
 = ((
CPU_WORD_SIZE_08
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

1723  (
nbr_åaû_zîos
);

1724 
	}
}

1799 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_16
)

1800 
CPU_DATA
 
	$CPU_C¡TøûZîos16
 (
CPU_INT16U
 
vÆ
)

1802 #i‡ (!((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1803 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_16
)))

1804 
CPU_INT16U
 
vÆ_bô_mask
;

1805 
CPU_DATA
 
nbr_Àad_zîos
;

1807 
CPU_DATA
 
nbr_åaû_zîos
;

1810 i‡(
vÆ
 == 0u) {

1811  (
CPU_WORD_SIZE_16
 * 
DEF_OCTET_NBR_BITS
);

1815 #i‡((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1816 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_16
))

1817 
nbr_åaû_zîos
 = 
	`CPU_C¡TøûZîos
((
CPU_DATA
)
vÆ
);

1820 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_INT16U
)~val + 1u);

1821 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos16
(
vÆ_bô_mask
);

1823 
nbr_åaû_zîos
 = ((
CPU_WORD_SIZE_16
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

1827  (
nbr_åaû_zîos
);

1828 
	}
}

1903 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_32
)

1904 
CPU_DATA
 
	$CPU_C¡TøûZîos32
 (
CPU_INT32U
 
vÆ
)

1906 #i‡ (!((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1907 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_32
)))

1908 
CPU_INT32U
 
vÆ_bô_mask
;

1909 
CPU_DATA
 
nbr_Àad_zîos
;

1911 
CPU_DATA
 
nbr_åaû_zîos
;

1914 i‡(
vÆ
 == 0u) {

1915  (
CPU_WORD_SIZE_32
 * 
DEF_OCTET_NBR_BITS
);

1919 #i‡((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1920 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_32
))

1921 
nbr_åaû_zîos
 = 
	`CPU_C¡TøûZîos
((
CPU_DATA
)
vÆ
);

1924 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_INT32U
)~val + 1u);

1925 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos32
(
vÆ_bô_mask
);

1927 
nbr_åaû_zîos
 = ((
CPU_WORD_SIZE_32
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

1931  (
nbr_åaû_zîos
);

1932 
	}
}

2007 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_64
)

2008 
CPU_DATA
 
	$CPU_C¡TøûZîos64
 (
CPU_INT64U
 
vÆ
)

2010 #i‡ (!((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

2011 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_64
)))

2012 
CPU_INT64U
 
vÆ_bô_mask
;

2013 
CPU_DATA
 
nbr_Àad_zîos
;

2015 
CPU_DATA
 
nbr_åaû_zîos
;

2018 i‡(
vÆ
 == 0u) {

2019  (
CPU_WORD_SIZE_64
 * 
DEF_OCTET_NBR_BITS
);

2023 #i‡((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

2024 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_64
))

2025 
nbr_åaû_zîos
 = 
	`CPU_C¡TøûZîos
((
CPU_DATA
)
vÆ
);

2028 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_INT64U
)~val + 1u);

2029 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos64
(
vÆ_bô_mask
);

2031 
nbr_åaû_zîos
 = ((
CPU_WORD_SIZE_64
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

2035  (
nbr_åaû_zîos
);

2036 
	}
}

2064 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

2065 
	$CPU_NameInô
 ()

2067 
	`CPU_NameCÃ
();

2068 
	}
}

2099 #i‡((
CPU_CFG_TS_EN
 =
DEF_ENABLED
) || \

2100 (
	gCPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
))

2101 
	$CPU_TS_Inô
 ()

2103 #i‡(((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
 ) && \

2104 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)) || \

2105 ((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
 ) && \

2106 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
)))

2107 
CPU_TS_TMR
 
ts_tmr_˙ts
;

2112 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

2113 
CPU_TS_TmrFªq_Hz
 = 0u;

2114 
	`CPU_TS_TmrInô
();

2119 #i‡(((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
 ) && \

2120 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)) || \

2121 ((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
 ) && \

2122 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
)))

2123 
ts_tmr_˙ts
 = 
	`CPU_TS_TmrRd
();

2126 #i‡ ((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

2127 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
))

2128 
CPU_TS_32_Accum
 = 0u;

2129 
CPU_TS_32_TmrPªv
 = 
ts_tmr_˙ts
;

2132 #i‡ ((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
) && \

2133 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
))

2134 
CPU_TS_64_Accum
 = 0u;

2135 
CPU_TS_64_TmrPªv
 = 
ts_tmr_˙ts
;

2137 
	}
}

2179 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


2180 
	$CPU_I¡DisMósInô
 ()

2182 
CPU_TS_TMR
 
time_mós_tŸ_˙ts
;

2183 
CPU_INT16U
 
i
;

2184 
	`CPU_SR_ALLOC
();

2187 
CPU_I¡DisMósCå
 = 0u;

2188 
CPU_I¡DisNe°Cå
 = 0u;

2189 
CPU_I¡DisMósSèπ_˙ts
 = 0u;

2190 
CPU_I¡DisMósSt›_˙ts
 = 0u;

2191 
CPU_I¡DisMósMaxCur_˙ts
 = 0u;

2192 
CPU_I¡DisMósMax_˙ts
 = 0u;

2193 
CPU_I¡DisMósOvrhd_˙ts
 = 0u;

2196 
time_mós_tŸ_˙ts
 = 0u;

2197 
	`CPU_INT_DIS
();

2198 
i
 = 0u; i < 
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
; i++) {

2199 
CPU_I¡DisMósMaxCur_˙ts
 = 0u;

2200 
	`CPU_I¡DisMósSèπ
();

2201 
	`CPU_I¡DisMósSt›
();

2202 
time_mós_tŸ_˙ts
 +
CPU_I¡DisMósMaxCur_˙ts
;

2205 
CPU_I¡DisMósOvrhd_˙ts
 = (
time_mós_tŸ_˙ts
 + (
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
 / 2u))

2206 / 
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
;

2207 
CPU_I¡DisMósMaxCur_˙ts
 = 0u;

2208 
CPU_I¡DisMósMax_˙ts
 = 0u;

2209 
	`CPU_INT_EN
();

2210 
	}
}

2312 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


2313 
CPU_TS_TMR
 
	$CPU_I¡DisMósMaxCÆc
 (
CPU_TS_TMR
 
time_tŸ_˙ts
)

2315 
CPU_TS_TMR
 
time_max_˙ts
;

2318 
time_max_˙ts
 = 
time_tŸ_˙ts
;

2319 i‡(
time_max_˙ts
 > 
CPU_I¡DisMósOvrhd_˙ts
) {

2320 
time_max_˙ts
 -
CPU_I¡DisMósOvrhd_˙ts
;

2322 
time_max_˙ts
 = 0u;

2325  (
time_max_˙ts
);

2326 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/cpu_core.h

49 #i‚de‡ 
CPU_CORE_MODULE_PRESENT


50 
	#CPU_CORE_MODULE_PRESENT


	)

59 #ifde‡ 
CPU_CORE_MODULE


60 
	#CPU_CORE_EXT


	)

62 
	#CPU_CORE_EXT
 

	)

103 
	~<˝u.h
>

104 
	~<lib_def.h
>

105 
	~<˝u_cfg.h
>

107 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

108 
	~<lib_mem.h
>

109 
	~<lib_°r.h
>

129 #ifde‡ 
CPU_CFG_TS_EN


130 #unde‡
CPU_CFG_TS_EN


134 #i‡ ((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) || \

135 (
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
))

136 
	#CPU_CFG_TS_EN
 
DEF_ENABLED


	)

138 
	#CPU_CFG_TS_EN
 
DEF_DISABLED


	)

141 #i‡ ((
CPU_CFG_TS_EN
 =
DEF_ENABLED
) || \

142 (
	$deföed
(
CPU_CFG_INT_DIS_MEAS_EN
)))

143 
	#CPU_CFG_TS_TMR_EN
 
DEF_ENABLED


	)

145 
	#CPU_CFG_TS_TMR_EN
 
DEF_DISABLED


	)

155 
	#CPU_TIME_MEAS_NBR_MIN
 1u

	)

156 
	#CPU_TIME_MEAS_NBR_MAX
 128u

	)

172 
	e˝u_îr
 {

174 
CPU_ERR_NONE
 = 0u,

175 
CPU_ERR_NULL_PTR
 = 10u,

177 
CPU_ERR_NAME_SIZE
 = 1000u,

179 
CPU_ERR_TS_FREQ_INVALID
 = 2000u

181 } 
	tCPU_ERR
;

193 
CPU_INT32U
 
	tCPU_TS32
;

194 
CPU_INT64U
 
	tCPU_TS64
;

196 
CPU_TS32
 
	tCPU_TS
;

199 #i‡ (
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

200 #i‡ (
CPU_CFG_TS_TMR_SIZE
 =
CPU_WORD_SIZE_08
)

201 
CPU_INT08U
 
	tCPU_TS_TMR
;

202 #ñi‡ (
CPU_CFG_TS_TMR_SIZE
 =
CPU_WORD_SIZE_16
)

203 
CPU_INT16U
 
	tCPU_TS_TMR
;

204 #ñi‡ (
CPU_CFG_TS_TMR_SIZE
 =
CPU_WORD_SIZE_64
)

205 
CPU_INT64U
 
	tCPU_TS_TMR
;

207 
CPU_INT32U
 
	tCPU_TS_TMR
;

218 
CPU_INT32U
 
	tCPU_TS_TMR_FREQ
;

227 #i‡ (
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

228 
CPU_CORE_EXT
 
CPU_CHAR
 
CPU_Name
[
CPU_CFG_NAME_SIZE
];

232 #i‡((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

233 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
))

234 
CPU_CORE_EXT
 
CPU_TS32
 
CPU_TS_32_Accum
;

235 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_TS_32_TmrPªv
;

238 #i‡((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
) && \

239 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
))

240 
CPU_CORE_EXT
 
CPU_TS64
 
CPU_TS_64_Accum
;

241 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_TS_64_TmrPªv
;

244 #i‡ (
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

245 
CPU_CORE_EXT
 
CPU_TS_TMR_FREQ
 
CPU_TS_TmrFªq_Hz
;

249 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


250 
CPU_CORE_EXT
 
CPU_INT16U
 
CPU_I¡DisMósCå
;

251 
CPU_CORE_EXT
 
CPU_INT16U
 
CPU_I¡DisNe°Cå
;

253 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósSèπ_˙ts
;

254 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósSt›_˙ts
;

255 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósOvrhd_˙ts
;

256 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósMaxCur_˙ts
;

257 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósMax_˙ts
;

377 #i‚de‡ 
CPU_SW_EXCEPTION


378 
	#CPU_SW_EXCEPTION
(
îr_πn_vÆ
) do { \

379 
	`CPU_SW_Ex˚±i⁄
(); \

380 
	}
} 0)

	)

401 
	#CPU_VAL_UNUSED
(
vÆ
Ë(()&(vÆ));

	)

404 
	#CPU_VAL_IGNORED
(
vÆ
Ë
	`CPU_VAL_UNUSED
(vÆ)

	)

447 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

448 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)) | \

449 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

450 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)) | \

451 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (0u * 
DEF_OCTET_NBR_BITS
)))

	)

455 #i‡ ((
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_64
) || \

456 (
	gCPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
))

457 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (0u * 
DEF_OCTET_NBR_BITS
)) | \

458 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)) | \

459 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

460 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)))

	)

463 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

464 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

465 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)) | \

466 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (0u * 
DEF_OCTET_NBR_BITS
)) | \

467 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)))

	)

470 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)) | \

471 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

472 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)) | \

473 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (0u * 
DEF_OCTET_NBR_BITS
)))

	)

503 
CPU_Inô
 ();

505 
CPU_SW_Ex˚±i⁄
 ();

509 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

510 
CPU_NameCÃ
 ();

512 
CPU_NameGë
 ( 
CPU_CHAR
 *
p_«me
,

513 
CPU_ERR
 *
p_îr
);

515 
CPU_NameSë
 (c⁄° 
CPU_CHAR
 *
p_«me
,

516 
CPU_ERR
 *
p_îr
);

522 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
)

523 
CPU_TS32
 
CPU_TS_Gë32
 ();

526 #i‡(
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
)

527 
CPU_TS64
 
CPU_TS_Gë64
 ();

530 #i‡(
CPU_CFG_TS_EN
 =
DEF_ENABLED
)

531 
CPU_TS_Upd©e
 ();

535 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

536 
CPU_TS_TMR_FREQ
 
CPU_TS_TmrFªqGë
 (
CPU_ERR
 *
p_îr
);

538 
CPU_TS_TmrFªqSë
 (
CPU_TS_TMR_FREQ
 
‰eq_hz
);

543 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


545 
CPU_TS_TMR
 
CPU_I¡DisMósMaxCurRe£t
();

547 
CPU_TS_TMR
 
CPU_I¡DisMósMaxCurGë
 ();

549 
CPU_TS_TMR
 
CPU_I¡DisMósMaxGë
 ();

552 
CPU_I¡DisMósSèπ
 ();

554 
CPU_I¡DisMósSt›
 ();

560 #ifde‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


561 #ifde‡
__˝lu•lus


566 
CPU_DATA
 
CPU_C¡LódZîos
 (CPU_DATA 
vÆ
);

568 #ifde‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


569 #ifde‡
__˝lu•lus


574 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_08
)

575 
CPU_DATA
 
CPU_C¡LódZîos08
 (
CPU_INT08U
 
vÆ
);

577 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_16
)

578 
CPU_DATA
 
CPU_C¡LódZîos16
 (
CPU_INT16U
 
vÆ
);

580 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_32
)

581 
CPU_DATA
 
CPU_C¡LódZîos32
 (
CPU_INT32U
 
vÆ
);

583 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_64
)

584 
CPU_DATA
 
CPU_C¡LódZîos64
 (
CPU_INT64U
 
vÆ
);

588 #ifde‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


589 #ifde‡
__˝lu•lus


594 
CPU_DATA
 
CPU_C¡TøûZîos
 (CPU_DATA 
vÆ
);

596 #ifde‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


597 #ifde‡
__˝lu•lus


602 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_08
)

603 
CPU_DATA
 
CPU_C¡TøûZîos08
 (
CPU_INT08U
 
vÆ
);

605 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_16
)

606 
CPU_DATA
 
CPU_C¡TøûZîos16
 (
CPU_INT16U
 
vÆ
);

608 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_32
)

609 
CPU_DATA
 
CPU_C¡TøûZîos32
 (
CPU_INT32U
 
vÆ
);

611 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_64
)

612 
CPU_DATA
 
CPU_C¡TøûZîos64
 (
CPU_INT64U
 
vÆ
);

675 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

676 
CPU_TS_TmrInô
();

762 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

763 
CPU_TS_TMR
 
CPU_TS_TmrRd
();

823 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
)

824 
CPU_INT64U
 
CPU_TS32_to_uSec
(
CPU_TS32
 
ts_˙ts
);

827 #i‡(
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
)

828 
CPU_INT64U
 
CPU_TS64_to_uSec
(
CPU_TS64
 
ts_˙ts
);

838 #i‚de‡ 
CPU_CFG_NAME_EN


843 #ñi‡ ((
CPU_CFG_NAME_EN
 !
DEF_ENABLED
 ) && \

844 (
CPU_CFG_NAME_EN
 !
DEF_DISABLED
))

850 #ñi‡ (
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

852 #i‚de‡ 
CPU_CFG_NAME_SIZE


857 #ñi‡ (
DEF_CHK_VAL
(
CPU_CFG_NAME_SIZE
, \

859 
DEF_INT_08U_MAX_VAL
Ë!
DEF_OK
)

870 #i‚de‡ 
CPU_CFG_TS_32_EN


875 #ñi‡ ((
CPU_CFG_TS_32_EN
 !
DEF_DISABLED
) && \

876 (
CPU_CFG_TS_32_EN
 !
DEF_ENABLED
 ))

884 #i‚de‡ 
CPU_CFG_TS_64_EN


889 #ñi‡ ((
CPU_CFG_TS_64_EN
 !
DEF_DISABLED
) && \

890 (
CPU_CFG_TS_64_EN
 !
DEF_ENABLED
 ))

898 #i‚de‡ 
CPU_CFG_TS_EN


903 #ñi‡ ((
CPU_CFG_TS_EN
 !
DEF_DISABLED
) && \

904 (
CPU_CFG_TS_EN
 !
DEF_ENABLED
 ))

913 #i‚de‡ 
CPU_CFG_TS_TMR_EN


918 #ñi‡ ((
CPU_CFG_TS_TMR_EN
 !
DEF_DISABLED
) && \

919 (
CPU_CFG_TS_TMR_EN
 !
DEF_ENABLED
 ))

925 #ñi‡ (
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

927 #i‚de‡ 
CPU_CFG_TS_TMR_SIZE


934 #ñi‡ ((
CPU_CFG_TS_TMR_SIZE
 !
CPU_WORD_SIZE_08
) && \

935 (
CPU_CFG_TS_TMR_SIZE
 !
CPU_WORD_SIZE_16
) && \

936 (
CPU_CFG_TS_TMR_SIZE
 !
CPU_WORD_SIZE_32
) && \

937 (
CPU_CFG_TS_TMR_SIZE
 !
CPU_WORD_SIZE_64
))

949 #i‚de‡ 
CPU_CFG_INT_DIS_MEAS_EN


956 #i‚de‡ 
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR


961 #ñi‡ (
DEF_CHK_VAL
(
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
, \

962 
CPU_TIME_MEAS_NBR_MIN
, \

963 
CPU_TIME_MEAS_NBR_MAX
Ë!
DEF_OK
)

975 #i‚de‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


982 #i‚de‡ 
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT


995 #i‚de‡ 
CPU_CFG_ADDR_SIZE


999 #i‚de‡ 
CPU_CFG_DATA_SIZE


1003 #i‚de‡ 
CPU_CFG_DATA_SIZE_MAX


1015 #i‡ (
LIB_VERSION
 < 13500u)

	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/cpu_def.h

43 #i‚de‡ 
CPU_DEF_MODULE_PRESENT


44 
	#CPU_DEF_MODULE_PRESENT


	)

74 
	#CPU_CORE_VERSION
 12902u

	)

98 
	#CPU_WORD_SIZE_08
 1

	)

99 
	#CPU_WORD_SIZE_16
 2

	)

100 
	#CPU_WORD_SIZE_32
 4

	)

101 
	#CPU_WORD_SIZE_64
 8

	)

105 
	#CPU_ENDIAN_TYPE_NONE
 0u

	)

106 
	#CPU_ENDIAN_TYPE_BIG
 1u

	)

107 
	#CPU_ENDIAN_TYPE_LITTLE
 2u

	)

124 
	#CPU_STK_GROWTH_NONE
 0u

	)

125 
	#CPU_STK_GROWTH_LO_TO_HI
 1u

	)

126 
	#CPU_STK_GROWTH_HI_TO_LO
 2u

	)

203 
	#CPU_CRITICAL_METHOD_NONE
 0u

	)

204 
	#CPU_CRITICAL_METHOD_INT_DIS_EN
 1u

	)

205 
	#CPU_CRITICAL_METHOD_STATUS_STK
 2u

	)

206 
	#CPU_CRITICAL_METHOD_STATUS_LOCAL
 3u

	)

	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_ascii.c

83 
	#MICRIUM_SOURCE


	)

84 
	#LIB_ASCII_MODULE


	)

85 
	~<lib_ascii.h
>

156 
CPU_BOOLEAN
 
	$ASCII_IsAÕha
 (
CPU_CHAR
 
c
)

158 
CPU_BOOLEAN
 
Æpha
;

161 
Æpha
 = 
	`ASCII_IS_ALPHA
(
c
);

163  (
Æpha
);

164 
	}
}

186 
CPU_BOOLEAN
 
	$ASCII_IsAÕhaNum
 (
CPU_CHAR
 
c
)

188 
CPU_BOOLEAN
 
Æpha_num
;

191 
Æpha_num
 = 
	`ASCII_IS_ALPHA_NUM
(
c
);

193  (
Æpha_num
);

194 
	}
}

216 
CPU_BOOLEAN
 
	$ASCII_IsLowî
 (
CPU_CHAR
 
c
)

218 
CPU_BOOLEAN
 
lowî
;

221 
lowî
 = 
	`ASCII_IS_LOWER
(
c
);

223  (
lowî
);

224 
	}
}

246 
CPU_BOOLEAN
 
	$ASCII_IsUµî
 (
CPU_CHAR
 
c
)

248 
CPU_BOOLEAN
 
uµî
;

251 
uµî
 = 
	`ASCII_IS_UPPER
(
c
);

253  (
uµî
);

254 
	}
}

276 
CPU_BOOLEAN
 
	$ASCII_IsDig
 (
CPU_CHAR
 
c
)

278 
CPU_BOOLEAN
 
dig
;

281 
dig
 = 
	`ASCII_IS_DIG
(
c
);

283  (
dig
);

284 
	}
}

305 
CPU_BOOLEAN
 
	$ASCII_IsDigO˘
 (
CPU_CHAR
 
c
)

307 
CPU_BOOLEAN
 
dig_o˘
;

310 
dig_o˘
 = 
	`ASCII_IS_DIG_OCT
(
c
);

312  (
dig_o˘
);

313 
	}
}

335 
CPU_BOOLEAN
 
	$ASCII_IsDigHex
 (
CPU_CHAR
 
c
)

337 
CPU_BOOLEAN
 
dig_hex
;

340 
dig_hex
 = 
	`ASCII_IS_DIG_HEX
(
c
);

342  (
dig_hex
);

343 
	}
}

368 
CPU_BOOLEAN
 
	$ASCII_IsBœnk
 (
CPU_CHAR
 
c
)

370 
CPU_BOOLEAN
 
bœnk
;

373 
bœnk
 = 
	`ASCII_IS_BLANK
(
c
);

375  (
bœnk
);

376 
	}
}

402 
CPU_BOOLEAN
 
	$ASCII_IsS∑˚
 (
CPU_CHAR
 
c
)

404 
CPU_BOOLEAN
 
•a˚
;

407 
•a˚
 = 
	`ASCII_IS_SPACE
(
c
);

409  (
•a˚
);

410 
	}
}

436 
CPU_BOOLEAN
 
	$ASCII_IsPröt
 (
CPU_CHAR
 
c
)

438 
CPU_BOOLEAN
 
¥öt
;

441 
¥öt
 = 
	`ASCII_IS_PRINT
(
c
);

443  (
¥öt
);

444 
	}
}

470 
CPU_BOOLEAN
 
	$ASCII_IsGøph
 (
CPU_CHAR
 
c
)

472 
CPU_BOOLEAN
 
gøph
;

475 
gøph
 = 
	`ASCII_IS_GRAPH
(
c
);

477  (
gøph
);

478 
	}
}

500 
CPU_BOOLEAN
 
	$ASCII_IsPun˘
 (
CPU_CHAR
 
c
)

502 
CPU_BOOLEAN
 
pun˘
;

505 
pun˘
 = 
	`ASCII_IS_PUNCT
(
c
);

507  (
pun˘
);

508 
	}
}

534 
CPU_BOOLEAN
 
	$ASCII_IsCål
 (
CPU_CHAR
 
c
)

536 
CPU_BOOLEAN
 
˘æ
;

539 
˘æ
 = 
	`ASCII_IS_CTRL
(
c
);

541  (
˘æ
);

542 
	}
}

572 
CPU_CHAR
 
	$ASCII_ToLowî
 (
CPU_CHAR
 
c
)

574 
CPU_CHAR
 
lowî
;

577 
lowî
 = 
	`ASCII_TO_LOWER
(
c
);

579  (
lowî
);

580 
	}
}

610 
CPU_CHAR
 
	$ASCII_ToUµî
 (
CPU_CHAR
 
c
)

612 
CPU_CHAR
 
uµî
;

615 
uµî
 = 
	`ASCII_TO_UPPER
(
c
);

617  (
uµî
);

618 
	}
}

641 
CPU_BOOLEAN
 
	$ASCII_Cmp
 (
CPU_CHAR
 
c1
,

642 
CPU_CHAR
 
c2
)

644 
CPU_CHAR
 
c1_uµî
;

645 
CPU_CHAR
 
c2_uµî
;

646 
CPU_BOOLEAN
 
cmp
;

649 
c1_uµî
 = 
	`ASCII_ToUµî
(
c1
);

650 
c2_uµî
 = 
	`ASCII_ToUµî
(
c2
);

651 
cmp
 = (
c1_uµî
 =
c2_uµî
Ë? (
DEF_YES
Ë: (
DEF_NO
);

653  (
cmp
);

654 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_ascii.h

85 #i‚de‡ 
LIB_ASCII_MODULE_PRESENT


86 
	#LIB_ASCII_MODULE_PRESENT


	)

121 
	~<˝u.h
>

122 
	~<lib_def.h
>

131 #ifde‡ 
LIB_ASCII_MODULE


132 
	#LIB_ASCII_EXT


	)

134 
	#LIB_ASCII_EXT
 

	)

151 
	#ASCII_CHAR_NULL
 0x00

	)

152 
	#ASCII_CHAR_START_OF_HEADING
 0x01

	)

153 
	#ASCII_CHAR_START_OF_TEXT
 0x02

	)

154 
	#ASCII_CHAR_END_OF_TEXT
 0x03

	)

155 
	#ASCII_CHAR_END_OF_TRANSMISSION
 0x04

	)

156 
	#ASCII_CHAR_ENQUIRY
 0x05

	)

157 
	#ASCII_CHAR_ACKNOWLEDGE
 0x06

	)

158 
	#ASCII_CHAR_BELL
 0x07

	)

159 
	#ASCII_CHAR_BACKSPACE
 0x08

	)

160 
	#ASCII_CHAR_CHARACTER_TABULATION
 0x09

	)

161 
	#ASCII_CHAR_LINE_FEED
 0x0A

	)

162 
	#ASCII_CHAR_LINE_TABULATION
 0x0B

	)

163 
	#ASCII_CHAR_FORM_FEED
 0x0C

	)

164 
	#ASCII_CHAR_CARRIAGE_RETURN
 0x0D

	)

165 
	#ASCII_CHAR_SHIFT_OUT
 0x0E

	)

166 
	#ASCII_CHAR_SHIFT_IN
 0x0F

	)

167 
	#ASCII_CHAR_DATA_LINK_ESCAPE
 0x10

	)

168 
	#ASCII_CHAR_DEVICE_CONTROL_ONE
 0x11

	)

169 
	#ASCII_CHAR_DEVICE_CONTROL_TWO
 0x12

	)

170 
	#ASCII_CHAR_DEVICE_CONTROL_THREE
 0x13

	)

171 
	#ASCII_CHAR_DEVICE_CONTROL_FOUR
 0x14

	)

172 
	#ASCII_CHAR_NEGATIVE_ACKNOWLEDGE
 0x15

	)

173 
	#ASCII_CHAR_SYNCHRONOUS_IDLE
 0x16

	)

174 
	#ASCII_CHAR_END_OF_TRANSMISSION_BLOCK
 0x17

	)

175 
	#ASCII_CHAR_CANCEL
 0x18

	)

176 
	#ASCII_CHAR_END_OF_MEDIUM
 0x19

	)

177 
	#ASCII_CHAR_SUBSITUTE
 0x1A

	)

178 
	#ASCII_CHAR_ESCAPE
 0x1B

	)

179 
	#ASCII_CHAR_INFO_SEPARATOR_FOUR
 0x1C

	)

180 
	#ASCII_CHAR_INFO_SEPARATOR_THREE
 0x1D

	)

181 
	#ASCII_CHAR_INFO_SEPARATOR_TWO
 0x1E

	)

182 
	#ASCII_CHAR_INFO_SEPARATOR_ONE
 0x1F

	)

184 
	#ASCII_CHAR_NUL
 
ASCII_CHAR_NULL


	)

185 
	#ASCII_CHAR_SOH
 
ASCII_CHAR_START_OF_HEADING


	)

186 
	#ASCII_CHAR_START_HEADING
 
ASCII_CHAR_START_OF_HEADING


	)

187 
	#ASCII_CHAR_STX
 
ASCII_CHAR_START_OF_TEXT


	)

188 
	#ASCII_CHAR_START_TEXT
 
ASCII_CHAR_START_OF_TEXT


	)

189 
	#ASCII_CHAR_ETX
 
ASCII_CHAR_END_OF_TEXT


	)

190 
	#ASCII_CHAR_END_TEXT
 
ASCII_CHAR_END_OF_TEXT


	)

191 
	#ASCII_CHAR_EOT
 
ASCII_CHAR_END_OF_TRANSMISSION


	)

192 
	#ASCII_CHAR_END_TRANSMISSION
 
ASCII_CHAR_END_OF_TRANSMISSION


	)

193 
	#ASCII_CHAR_ENQ
 
ASCII_CHAR_ENQUIRY


	)

194 
	#ASCII_CHAR_ACK
 
ASCII_CHAR_ACKNOWLEDGE


	)

195 
	#ASCII_CHAR_BEL
 
ASCII_CHAR_BELL


	)

196 
	#ASCII_CHAR_BS
 
ASCII_CHAR_BACKSPACE


	)

197 
	#ASCII_CHAR_HT
 
ASCII_CHAR_CHARACTER_TABULATION


	)

198 
	#ASCII_CHAR_TAB
 
ASCII_CHAR_CHARACTER_TABULATION


	)

199 
	#ASCII_CHAR_LF
 
ASCII_CHAR_LINE_FEED


	)

200 
	#ASCII_CHAR_VT
 
ASCII_CHAR_LINE_TABULATION


	)

201 
	#ASCII_CHAR_FF
 
ASCII_CHAR_FORM_FEED


	)

202 
	#ASCII_CHAR_CR
 
ASCII_CHAR_CARRIAGE_RETURN


	)

203 
	#ASCII_CHAR_SO
 
ASCII_CHAR_SHIFT_OUT


	)

204 
	#ASCII_CHAR_SI
 
ASCII_CHAR_SHIFT_IN


	)

205 
	#ASCII_CHAR_DLE
 
ASCII_CHAR_DATA_LINK_ESCAPE


	)

206 
	#ASCII_CHAR_DC1
 
ASCII_CHAR_DEVICE_CONTROL_ONE


	)

207 
	#ASCII_CHAR_DC2
 
ASCII_CHAR_DEVICE_CONTROL_TWO


	)

208 
	#ASCII_CHAR_DC3
 
ASCII_CHAR_DEVICE_CONTROL_THREE


	)

209 
	#ASCII_CHAR_DC4
 
ASCII_CHAR_DEVICE_CONTROL_FOUR


	)

210 
	#ASCII_CHAR_DEV_CTRL_ONE
 
ASCII_CHAR_DEVICE_CONTROL_ONE


	)

211 
	#ASCII_CHAR_DEV_CTRL_TWO
 
ASCII_CHAR_DEVICE_CONTROL_TWO


	)

212 
	#ASCII_CHAR_DEV_CTRL_THREE
 
ASCII_CHAR_DEVICE_CONTROL_THREE


	)

213 
	#ASCII_CHAR_DEV_CTRL_FOUR
 
ASCII_CHAR_DEVICE_CONTROL_FOUR


	)

214 
	#ASCII_CHAR_NAK
 
ASCII_CHAR_NEGATIVE_ACKNOWLEDGE


	)

215 
	#ASCII_CHAR_NEG_ACK
 
ASCII_CHAR_NEGATIVE_ACKNOWLEDGE


	)

216 
	#ASCII_CHAR_SYN
 
ASCII_CHAR_SYNCHRONOUS_IDLE


	)

217 
	#ASCII_CHAR_SYNC_IDLE
 
ASCII_CHAR_SYNCHRONOUS_IDLE


	)

218 
	#ASCII_CHAR_ETB
 
ASCII_CHAR_END_OF_TRANSMISSION_BLOCK


	)

219 
	#ASCII_CHAR_END_TRANSMISSION_BLK
 
ASCII_CHAR_END_OF_TRANSMISSION_BLOCK


	)

220 
	#ASCII_CHAR_CAN
 
ASCII_CHAR_CANCEL


	)

221 
	#ASCII_CHAR_EM
 
ASCII_CHAR_END_OF_MEDIUM


	)

222 
	#ASCII_CHAR_END_MEDIUM
 
ASCII_CHAR_END_OF_MEDIUM


	)

223 
	#ASCII_CHAR_SUB
 
ASCII_CHAR_SUBSITUTE


	)

224 
	#ASCII_CHAR_ESC
 
ASCII_CHAR_ESCAPE


	)

225 
	#ASCII_CHAR_IS1
 
ASCII_CHAR_INFO_SEPARATOR_ONE


	)

226 
	#ASCII_CHAR_IS2
 
ASCII_CHAR_INFO_SEPARATOR_TWO


	)

227 
	#ASCII_CHAR_IS3
 
ASCII_CHAR_INFO_SEPARATOR_THREE


	)

228 
	#ASCII_CHAR_IS4
 
ASCII_CHAR_INFO_SEPARATOR_FOUR


	)

232 
	#ASCII_CHAR_SPACE
 0x20

	)

233 
	#ASCII_CHAR_EXCLAMATION_MARK
 0x21

	)

234 
	#ASCII_CHAR_QUOTATION_MARK
 0x22

	)

235 
	#ASCII_CHAR_NUMBER_SIGN
 0x23

	)

236 
	#ASCII_CHAR_DOLLAR_SIGN
 0x24

	)

237 
	#ASCII_CHAR_PERCENTAGE_SIGN
 0x25

	)

238 
	#ASCII_CHAR_AMPERSAND
 0x26

	)

239 
	#ASCII_CHAR_APOSTROPHE
 0x27

	)

240 
	#ASCII_CHAR_LEFT_PARENTHESIS
 0x28

	)

241 
	#ASCII_CHAR_RIGHT_PARENTHESIS
 0x29

	)

242 
	#ASCII_CHAR_ASTERISK
 0x2A

	)

243 
	#ASCII_CHAR_PLUS_SIGN
 0x2B

	)

244 
	#ASCII_CHAR_COMMA
 0x2C

	)

245 
	#ASCII_CHAR_HYPHEN_MINUS
 0x2D

	)

246 
	#ASCII_CHAR_FULL_STOP
 0x2E

	)

247 
	#ASCII_CHAR_SOLIDUS
 0x2F

	)

249 
	#ASCII_CHAR_PAREN_LEFT
 
ASCII_CHAR_LEFT_PARENTHESIS


	)

250 
	#ASCII_CHAR_PAREN_RIGHT
 
ASCII_CHAR_RIGHT_PARENTHESIS


	)

254 
	#ASCII_CHAR_DIGIT_ZERO
 0x30

	)

255 
	#ASCII_CHAR_DIGIT_ONE
 0x31

	)

256 
	#ASCII_CHAR_DIGIT_TWO
 0x32

	)

257 
	#ASCII_CHAR_DIGIT_THREE
 0x33

	)

258 
	#ASCII_CHAR_DIGIT_FOUR
 0x34

	)

259 
	#ASCII_CHAR_DIGIT_FIVE
 0x35

	)

260 
	#ASCII_CHAR_DIGIT_SIX
 0x36

	)

261 
	#ASCII_CHAR_DIGIT_SEVEN
 0x37

	)

262 
	#ASCII_CHAR_DIGIT_EIGHT
 0x38

	)

263 
	#ASCII_CHAR_DIGIT_NINE
 0x39

	)

265 
	#ASCII_CHAR_DIG_ZERO
 
ASCII_CHAR_DIGIT_ZERO


	)

266 
	#ASCII_CHAR_DIG_ONE
 
ASCII_CHAR_DIGIT_ONE


	)

267 
	#ASCII_CHAR_DIG_TWO
 
ASCII_CHAR_DIGIT_TWO


	)

268 
	#ASCII_CHAR_DIG_THREE
 
ASCII_CHAR_DIGIT_THREE


	)

269 
	#ASCII_CHAR_DIG_FOUR
 
ASCII_CHAR_DIGIT_FOUR


	)

270 
	#ASCII_CHAR_DIG_FIVE
 
ASCII_CHAR_DIGIT_FIVE


	)

271 
	#ASCII_CHAR_DIG_SIX
 
ASCII_CHAR_DIGIT_SIX


	)

272 
	#ASCII_CHAR_DIG_SEVEN
 
ASCII_CHAR_DIGIT_SEVEN


	)

273 
	#ASCII_CHAR_DIG_EIGHT
 
ASCII_CHAR_DIGIT_EIGHT


	)

274 
	#ASCII_CHAR_DIG_NINE
 
ASCII_CHAR_DIGIT_NINE


	)

278 
	#ASCII_CHAR_COLON
 0x3A

	)

279 
	#ASCII_CHAR_SEMICOLON
 0x3B

	)

280 
	#ASCII_CHAR_LESS_THAN_SIGN
 0x3C

	)

281 
	#ASCII_CHAR_EQUALS_SIGN
 0x3D

	)

282 
	#ASCII_CHAR_GREATER_THAN_SIGN
 0x3E

	)

283 
	#ASCII_CHAR_QUESTION_MARK
 0x3F

	)

284 
	#ASCII_CHAR_COMMERCIAL_AT
 0x40

	)

286 
	#ASCII_CHAR_AT_SIGN
 
ASCII_CHAR_COMMERCIAL_AT


	)

290 
	#ASCII_CHAR_LATIN_UPPER_A
 0x41

	)

291 
	#ASCII_CHAR_LATIN_UPPER_B
 0x42

	)

292 
	#ASCII_CHAR_LATIN_UPPER_C
 0x43

	)

293 
	#ASCII_CHAR_LATIN_UPPER_D
 0x44

	)

294 
	#ASCII_CHAR_LATIN_UPPER_E
 0x45

	)

295 
	#ASCII_CHAR_LATIN_UPPER_F
 0x46

	)

296 
	#ASCII_CHAR_LATIN_UPPER_G
 0x47

	)

297 
	#ASCII_CHAR_LATIN_UPPER_H
 0x48

	)

298 
	#ASCII_CHAR_LATIN_UPPER_I
 0x49

	)

299 
	#ASCII_CHAR_LATIN_UPPER_J
 0x4A

	)

300 
	#ASCII_CHAR_LATIN_UPPER_K
 0x4B

	)

301 
	#ASCII_CHAR_LATIN_UPPER_L
 0x4C

	)

302 
	#ASCII_CHAR_LATIN_UPPER_M
 0x4D

	)

303 
	#ASCII_CHAR_LATIN_UPPER_N
 0x4E

	)

304 
	#ASCII_CHAR_LATIN_UPPER_O
 0x4F

	)

305 
	#ASCII_CHAR_LATIN_UPPER_P
 0x50

	)

306 
	#ASCII_CHAR_LATIN_UPPER_Q
 0x51

	)

307 
	#ASCII_CHAR_LATIN_UPPER_R
 0x52

	)

308 
	#ASCII_CHAR_LATIN_UPPER_S
 0x53

	)

309 
	#ASCII_CHAR_LATIN_UPPER_T
 0x54

	)

310 
	#ASCII_CHAR_LATIN_UPPER_U
 0x55

	)

311 
	#ASCII_CHAR_LATIN_UPPER_V
 0x56

	)

312 
	#ASCII_CHAR_LATIN_UPPER_W
 0x57

	)

313 
	#ASCII_CHAR_LATIN_UPPER_X
 0x58

	)

314 
	#ASCII_CHAR_LATIN_UPPER_Y
 0x59

	)

315 
	#ASCII_CHAR_LATIN_UPPER_Z
 0x5A

	)

319 
	#ASCII_CHAR_LEFT_SQUARE_BRACKET
 0x5B

	)

320 
	#ASCII_CHAR_REVERSE_SOLIDUS
 0x5C

	)

321 
	#ASCII_CHAR_RIGHT_SQUARE_BRACKET
 0x5D

	)

322 
	#ASCII_CHAR_CIRCUMFLEX_ACCENT
 0x5E

	)

323 
	#ASCII_CHAR_LOW_LINE
 0x5F

	)

324 
	#ASCII_CHAR_GRAVE_ACCENT
 0x60

	)

326 
	#ASCII_CHAR_BRACKET_SQUARE_LEFT
 
ASCII_CHAR_LEFT_SQUARE_BRACKET


	)

327 
	#ASCII_CHAR_BRACKET_SQUARE_RIGHT
 
ASCII_CHAR_RIGHT_SQUARE_BRACKET


	)

331 
	#ASCII_CHAR_LATIN_LOWER_A
 0x61

	)

332 
	#ASCII_CHAR_LATIN_LOWER_B
 0x62

	)

333 
	#ASCII_CHAR_LATIN_LOWER_C
 0x63

	)

334 
	#ASCII_CHAR_LATIN_LOWER_D
 0x64

	)

335 
	#ASCII_CHAR_LATIN_LOWER_E
 0x65

	)

336 
	#ASCII_CHAR_LATIN_LOWER_F
 0x66

	)

337 
	#ASCII_CHAR_LATIN_LOWER_G
 0x67

	)

338 
	#ASCII_CHAR_LATIN_LOWER_H
 0x68

	)

339 
	#ASCII_CHAR_LATIN_LOWER_I
 0x69

	)

340 
	#ASCII_CHAR_LATIN_LOWER_J
 0x6A

	)

341 
	#ASCII_CHAR_LATIN_LOWER_K
 0x6B

	)

342 
	#ASCII_CHAR_LATIN_LOWER_L
 0x6C

	)

343 
	#ASCII_CHAR_LATIN_LOWER_M
 0x6D

	)

344 
	#ASCII_CHAR_LATIN_LOWER_N
 0x6E

	)

345 
	#ASCII_CHAR_LATIN_LOWER_O
 0x6F

	)

346 
	#ASCII_CHAR_LATIN_LOWER_P
 0x70

	)

347 
	#ASCII_CHAR_LATIN_LOWER_Q
 0x71

	)

348 
	#ASCII_CHAR_LATIN_LOWER_R
 0x72

	)

349 
	#ASCII_CHAR_LATIN_LOWER_S
 0x73

	)

350 
	#ASCII_CHAR_LATIN_LOWER_T
 0x74

	)

351 
	#ASCII_CHAR_LATIN_LOWER_U
 0x75

	)

352 
	#ASCII_CHAR_LATIN_LOWER_V
 0x76

	)

353 
	#ASCII_CHAR_LATIN_LOWER_W
 0x77

	)

354 
	#ASCII_CHAR_LATIN_LOWER_X
 0x78

	)

355 
	#ASCII_CHAR_LATIN_LOWER_Y
 0x79

	)

356 
	#ASCII_CHAR_LATIN_LOWER_Z
 0x7A

	)

360 
	#ASCII_CHAR_LEFT_CURLY_BRACKET
 0x7B

	)

361 
	#ASCII_CHAR_VERTICAL_LINE
 0x7C

	)

362 
	#ASCII_CHAR_RIGHT_CURLY_BRACKET
 0x7D

	)

363 
	#ASCII_CHAR_TILDE
 0x7E

	)

365 
	#ASCII_CHAR_BRACKET_CURLY_LEFT
 
ASCII_CHAR_LEFT_CURLY_BRACKET


	)

366 
	#ASCII_CHAR_BRACKET_CURLY_RIGHT
 
ASCII_CHAR_RIGHT_CURLY_BRACKET


	)

370 
	#ASCII_CHAR_DELETE
 0x7F

	)

372 
	#ASCII_CHAR_DEL
 
ASCII_CHAR_DELETE


	)

424 
	#ASCII_IS_DIG
(
c
Ë((((cË>
ASCII_CHAR_DIG_ZERO
Ë&& ((cË<
ASCII_CHAR_DIG_NINE
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

445 
	#ASCII_IS_DIG_OCT
(
c
Ë((((cË>
ASCII_CHAR_DIG_ZERO
Ë&& ((cË<
ASCII_CHAR_DIG_SEVEN
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

467 
	#ASCII_IS_DIG_HEX
(
c
Ë(((((cË>
ASCII_CHAR_DIG_ZERO
 ) && ((cË<
ASCII_CHAR_DIG_NINE
 )) || \

468 (((
c
Ë>
ASCII_CHAR_LATIN_UPPER_A
Ë&& ((cË<
ASCII_CHAR_LATIN_UPPER_F
)) || \

469 (((
c
Ë>
ASCII_CHAR_LATIN_LOWER_A
Ë&& ((cË<
ASCII_CHAR_LATIN_LOWER_F
))Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

491 
	#ASCII_IS_LOWER
(
c
Ë((((cË>
ASCII_CHAR_LATIN_LOWER_A
Ë&& ((cË<
ASCII_CHAR_LATIN_LOWER_Z
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

513 
	#ASCII_IS_UPPER
(
c
Ë((((cË>
ASCII_CHAR_LATIN_UPPER_A
Ë&& ((cË<
ASCII_CHAR_LATIN_UPPER_Z
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

535 
	#ASCII_IS_ALPHA
(
c
Ë((((
	`ASCII_IS_UPPER
(c)Ë=
DEF_YES
) || \

536 ((
	`ASCII_IS_LOWER
(
c
)Ë=
DEF_YES
)Ë? (DEF_YESË: (
DEF_NO
))

	)

558 
	#ASCII_IS_ALPHA_NUM
(
c
Ë((((
	`ASCII_IS_ALPHA
(c)Ë=
DEF_YES
) || \

559 ((
	`ASCII_IS_DIG
 (
c
)Ë=
DEF_YES
)Ë? (DEF_YESË: (
DEF_NO
))

	)

584 
	#ASCII_IS_BLANK
(
c
Ë((((cË=
ASCII_CHAR_SPACE
Ë|| ((cË=
ASCII_CHAR_HT
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

610 
	#ASCII_IS_SPACE
(
c
Ë((((cË=
ASCII_CHAR_SPACE
Ë|| ((cË=
ASCII_CHAR_CR
) || \

611 ((
c
Ë=
ASCII_CHAR_LF
 ) || ((cË=
ASCII_CHAR_FF
) || \

612 ((
c
Ë=
ASCII_CHAR_HT
 ) || ((cË=
ASCII_CHAR_VT
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

638 
	#ASCII_IS_PRINT
(
c
Ë((((cË>
ASCII_CHAR_SPACE
Ë&& ((cË<
ASCII_CHAR_TILDE
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

664 
	#ASCII_IS_GRAPH
(
c
Ë((((cË>
ASCII_CHAR_EXCLAMATION_MARK
Ë&& ((cË<
ASCII_CHAR_TILDE
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

686 
	#ASCII_IS_PUNCT
(
c
Ë((((
	`ASCII_IS_PRINT
(c)Ë=
DEF_YES
) && \

687 ((
	`ASCII_IS_SPACE
(
c
)Ë=
DEF_NO
 ) && \

688 ((
	`ASCII_IS_ALPHA_NUM
(
c
)Ë=
DEF_NO
 )Ë? (
DEF_YES
Ë: (DEF_NO))

	)

714 
	#ASCII_IS_CTRL
(
c
Ë(((((
CPU_INT08S
)(cË>
ASCII_CHAR_NULL
 ) && ((cË<
ASCII_CHAR_IS1
)) || \

715 ((
c
Ë=
ASCII_CHAR_DEL
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

751 
	#ASCII_TO_LOWER
(
c
Ë(((
	`ASCII_IS_UPPER
(c)Ë=
DEF_YES
Ë? ((cË+ (
ASCII_CHAR_LATIN_LOWER_A
 - 
ASCII_CHAR_LATIN_UPPER_A
)Ë: (c))

	)

781 
	#ASCII_TO_UPPER
(
c
Ë(((
	`ASCII_IS_LOWER
(c)Ë=
DEF_YES
Ë? ((cË- (
ASCII_CHAR_LATIN_LOWER_A
 - 
ASCII_CHAR_LATIN_UPPER_A
)Ë: (c))

	)

790 
CPU_BOOLEAN
 
ASCII_IsAÕha
 (
CPU_CHAR
 
c
);

792 
CPU_BOOLEAN
 
ASCII_IsAÕhaNum
(
CPU_CHAR
 
c
);

794 
CPU_BOOLEAN
 
ASCII_IsLowî
 (
CPU_CHAR
 
c
);

796 
CPU_BOOLEAN
 
ASCII_IsUµî
 (
CPU_CHAR
 
c
);

798 
CPU_BOOLEAN
 
ASCII_IsDig
 (
CPU_CHAR
 
c
);

800 
CPU_BOOLEAN
 
ASCII_IsDigO˘
 (
CPU_CHAR
 
c
);

802 
CPU_BOOLEAN
 
ASCII_IsDigHex
 (
CPU_CHAR
 
c
);

804 
CPU_BOOLEAN
 
ASCII_IsBœnk
 (
CPU_CHAR
 
c
);

806 
CPU_BOOLEAN
 
ASCII_IsS∑˚
 (
CPU_CHAR
 
c
);

808 
CPU_BOOLEAN
 
ASCII_IsPröt
 (
CPU_CHAR
 
c
);

810 
CPU_BOOLEAN
 
ASCII_IsGøph
 (
CPU_CHAR
 
c
);

812 
CPU_BOOLEAN
 
ASCII_IsPun˘
 (
CPU_CHAR
 
c
);

814 
CPU_BOOLEAN
 
ASCII_IsCål
 (
CPU_CHAR
 
c
);

817 
CPU_CHAR
 
ASCII_ToLowî
 (CPU_CHAR 
c
);

819 
CPU_CHAR
 
ASCII_ToUµî
 (CPU_CHAR 
c
);

822 
CPU_BOOLEAN
 
ASCII_Cmp
 (
CPU_CHAR
 
c1
,

823 
CPU_CHAR
 
c2
);

	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_def.h

69 #i‚de‡ 
LIB_DEF_MODULE_PRESENT


70 
	#LIB_DEF_MODULE_PRESENT


	)

100 
	#LIB_VERSION
 13801u

	)

133 
	~<˝u_def.h
>

134 
	~<˝u.h
>

143 
	#DEF_NULL
 0

	)

147 
	#DEF_FALSE
 0u

	)

148 
	#DEF_TRUE
 1u

	)

150 
	#DEF_NO
 0u

	)

151 
	#DEF_YES
 1u

	)

153 
	#DEF_DISABLED
 0u

	)

154 
	#DEF_ENABLED
 1u

	)

156 
	#DEF_INACTIVE
 0u

	)

157 
	#DEF_ACTIVE
 1u

	)

159 
	#DEF_INVALID
 0u

	)

160 
	#DEF_VALID
 1u

	)

162 
	#DEF_OFF
 0u

	)

163 
	#DEF_ON
 1u

	)

165 
	#DEF_CLR
 0u

	)

166 
	#DEF_SET
 1u

	)

168 
	#DEF_FAIL
 0u

	)

169 
	#DEF_OK
 1u

	)

173 
	#DEF_BIT_NONE
 0x00u

	)

175 
	#DEF_BIT_00
 0x01u

	)

176 
	#DEF_BIT_01
 0x02u

	)

177 
	#DEF_BIT_02
 0x04u

	)

178 
	#DEF_BIT_03
 0x08u

	)

179 
	#DEF_BIT_04
 0x10u

	)

180 
	#DEF_BIT_05
 0x20u

	)

181 
	#DEF_BIT_06
 0x40u

	)

182 
	#DEF_BIT_07
 0x80u

	)

184 
	#DEF_BIT_08
 0x0100u

	)

185 
	#DEF_BIT_09
 0x0200u

	)

186 
	#DEF_BIT_10
 0x0400u

	)

187 
	#DEF_BIT_11
 0x0800u

	)

188 
	#DEF_BIT_12
 0x1000u

	)

189 
	#DEF_BIT_13
 0x2000u

	)

190 
	#DEF_BIT_14
 0x4000u

	)

191 
	#DEF_BIT_15
 0x8000u

	)

193 
	#DEF_BIT_16
 0x00010000u

	)

194 
	#DEF_BIT_17
 0x00020000u

	)

195 
	#DEF_BIT_18
 0x00040000u

	)

196 
	#DEF_BIT_19
 0x00080000u

	)

197 
	#DEF_BIT_20
 0x00100000u

	)

198 
	#DEF_BIT_21
 0x00200000u

	)

199 
	#DEF_BIT_22
 0x00400000u

	)

200 
	#DEF_BIT_23
 0x00800000u

	)

202 
	#DEF_BIT_24
 0x01000000u

	)

203 
	#DEF_BIT_25
 0x02000000u

	)

204 
	#DEF_BIT_26
 0x04000000u

	)

205 
	#DEF_BIT_27
 0x08000000u

	)

206 
	#DEF_BIT_28
 0x10000000u

	)

207 
	#DEF_BIT_29
 0x20000000u

	)

208 
	#DEF_BIT_30
 0x40000000u

	)

209 
	#DEF_BIT_31
 0x80000000u

	)

210 
	#DEF_BIT_32
 0x0000000100000000u

	)

211 
	#DEF_BIT_33
 0x0000000200000000u

	)

212 
	#DEF_BIT_34
 0x0000000400000000u

	)

213 
	#DEF_BIT_35
 0x0000000800000000u

	)

214 
	#DEF_BIT_36
 0x0000001000000000u

	)

215 
	#DEF_BIT_37
 0x0000002000000000u

	)

216 
	#DEF_BIT_38
 0x0000004000000000u

	)

217 
	#DEF_BIT_39
 0x0000008000000000u

	)

219 
	#DEF_BIT_40
 0x0000010000000000u

	)

220 
	#DEF_BIT_41
 0x0000020000000000u

	)

221 
	#DEF_BIT_42
 0x0000040000000000u

	)

222 
	#DEF_BIT_43
 0x0000080000000000u

	)

223 
	#DEF_BIT_44
 0x0000100000000000u

	)

224 
	#DEF_BIT_45
 0x0000200000000000u

	)

225 
	#DEF_BIT_46
 0x0000400000000000u

	)

226 
	#DEF_BIT_47
 0x0000800000000000u

	)

228 
	#DEF_BIT_48
 0x0001000000000000u

	)

229 
	#DEF_BIT_49
 0x0002000000000000u

	)

230 
	#DEF_BIT_50
 0x0004000000000000u

	)

231 
	#DEF_BIT_51
 0x0008000000000000u

	)

232 
	#DEF_BIT_52
 0x0010000000000000u

	)

233 
	#DEF_BIT_53
 0x0020000000000000u

	)

234 
	#DEF_BIT_54
 0x0040000000000000u

	)

235 
	#DEF_BIT_55
 0x0080000000000000u

	)

237 
	#DEF_BIT_56
 0x0100000000000000u

	)

238 
	#DEF_BIT_57
 0x0200000000000000u

	)

239 
	#DEF_BIT_58
 0x0400000000000000u

	)

240 
	#DEF_BIT_59
 0x0800000000000000u

	)

241 
	#DEF_BIT_60
 0x1000000000000000u

	)

242 
	#DEF_BIT_61
 0x2000000000000000u

	)

243 
	#DEF_BIT_62
 0x4000000000000000u

	)

244 
	#DEF_BIT_63
 0x8000000000000000u

	)

248 
	#DEF_ALIGN_MAX_NBR_OCTETS
 4096u

	)

252 
	#DEF_OCTET_NBR_BITS
 8u

	)

253 
	#DEF_OCTET_MASK
 0xFFu

	)

255 
	#DEF_OCTET_TO_BIT_NBR_BITS
 3u

	)

256 
	#DEF_OCTET_TO_BIT_SHIFT
 
DEF_OCTET_TO_BIT_NBR_BITS


	)

257 
	#DEF_OCTET_TO_BIT_MASK
 0x07u

	)

260 
	#DEF_NIBBLE_NBR_BITS
 4u

	)

261 
	#DEF_NIBBLE_MASK
 0x0Fu

	)

265 
	#DEF_NBR_BASE_BIN
 2u

	)

266 
	#DEF_NBR_BASE_OCT
 8u

	)

267 
	#DEF_NBR_BASE_DEC
 10u

	)

268 
	#DEF_NBR_BASE_HEX
 16u

	)

272 
	#DEF_INT_08_NBR_BITS
 8u

	)

273 
	#DEF_INT_08_MASK
 0xFFu

	)

275 
	#DEF_INT_08U_MIN_VAL
 0u

	)

276 
	#DEF_INT_08U_MAX_VAL
 255u

	)

278 
	#DEF_INT_08S_MIN_VAL_ONES_CPL
 (-127)

	)

279 
	#DEF_INT_08S_MAX_VAL_ONES_CPL
 127

	)

281 
	#DEF_INT_08S_MIN_VAL
 (
DEF_INT_08S_MIN_VAL_ONES_CPL
 - 1)

	)

282 
	#DEF_INT_08S_MAX_VAL
 
DEF_INT_08S_MAX_VAL_ONES_CPL


	)

284 
	#DEF_INT_08U_NBR_DIG_MIN
 1u

	)

285 
	#DEF_INT_08U_NBR_DIG_MAX
 3u

	)

287 
	#DEF_INT_08S_NBR_DIG_MIN
 3u

	)

288 
	#DEF_INT_08S_NBR_DIG_MAX
 3u

	)

292 
	#DEF_INT_16_NBR_BITS
 16u

	)

293 
	#DEF_INT_16_MASK
 0xFFFFu

	)

295 
	#DEF_INT_16U_MIN_VAL
 0u

	)

296 
	#DEF_INT_16U_MAX_VAL
 65535u

	)

298 
	#DEF_INT_16S_MIN_VAL_ONES_CPL
 (-32767)

	)

299 
	#DEF_INT_16S_MAX_VAL_ONES_CPL
 32767

	)

301 
	#DEF_INT_16S_MIN_VAL
 (
DEF_INT_16S_MIN_VAL_ONES_CPL
 - 1)

	)

302 
	#DEF_INT_16S_MAX_VAL
 
DEF_INT_16S_MAX_VAL_ONES_CPL


	)

304 
	#DEF_INT_16U_NBR_DIG_MIN
 1u

	)

305 
	#DEF_INT_16U_NBR_DIG_MAX
 5u

	)

307 
	#DEF_INT_16S_NBR_DIG_MIN
 5u

	)

308 
	#DEF_INT_16S_NBR_DIG_MAX
 5u

	)

312 
	#DEF_INT_32_NBR_BITS
 32u

	)

313 
	#DEF_INT_32_MASK
 0xFFFFFFFFu

	)

315 
	#DEF_INT_32U_MIN_VAL
 0u

	)

316 
	#DEF_INT_32U_MAX_VAL
 4294967295u

	)

318 
	#DEF_INT_32S_MIN_VAL_ONES_CPL
 (-2147483647)

	)

319 
	#DEF_INT_32S_MAX_VAL_ONES_CPL
 2147483647

	)

321 
	#DEF_INT_32S_MIN_VAL
 (
DEF_INT_32S_MIN_VAL_ONES_CPL
 - 1)

	)

322 
	#DEF_INT_32S_MAX_VAL
 
DEF_INT_32S_MAX_VAL_ONES_CPL


	)

324 
	#DEF_INT_32U_NBR_DIG_MIN
 1u

	)

325 
	#DEF_INT_32U_NBR_DIG_MAX
 10u

	)

327 
	#DEF_INT_32S_NBR_DIG_MIN
 10u

	)

328 
	#DEF_INT_32S_NBR_DIG_MAX
 10u

	)

332 
	#DEF_INT_64_NBR_BITS
 64u

	)

333 
	#DEF_INT_64_MASK
 0xFFFFFFFFFFFFFFFFu

	)

335 
	#DEF_INT_64U_MIN_VAL
 0u

	)

336 
	#DEF_INT_64U_MAX_VAL
 18446744073709551615u

	)

338 
	#DEF_INT_64S_MIN_VAL_ONES_CPL
 (-9223372036854775807)

	)

339 
	#DEF_INT_64S_MAX_VAL_ONES_CPL
 9223372036854775807

	)

341 
	#DEF_INT_64S_MIN_VAL
 (
DEF_INT_64S_MIN_VAL_ONES_CPL
 - 1)

	)

342 
	#DEF_INT_64S_MAX_VAL
 
DEF_INT_64S_MAX_VAL_ONES_CPL


	)

344 
	#DEF_INT_64U_NBR_DIG_MIN
 1u

	)

345 
	#DEF_INT_64U_NBR_DIG_MAX
 20u

	)

347 
	#DEF_INT_64S_NBR_DIG_MIN
 19u

	)

348 
	#DEF_INT_64S_NBR_DIG_MAX
 19u

	)

352 
	#DEF_INT_CPU_NBR_BITS
 (
CPU_CFG_DATA_SIZE
 * 
DEF_OCTET_NBR_BITS
)

	)

353 
	#DEF_INT_CPU_NBR_BITS_MAX
 (
CPU_CFG_DATA_SIZE_MAX
 * 
DEF_OCTET_NBR_BITS
)

	)

357 #i‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_08_NBR_BITS
)

360 
	#DEF_INT_CPU_MASK
 
DEF_INT_08_MASK


	)

362 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_08U_MIN_VAL


	)

363 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_08U_MAX_VAL


	)

365 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_08S_MIN_VAL


	)

366 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_08S_MAX_VAL


	)

368 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_08S_MIN_VAL_ONES_CPL


	)

369 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_08S_MAX_VAL_ONES_CPL


	)

373 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_16_NBR_BITS
)

376 
	#DEF_INT_CPU_MASK
 
DEF_INT_16_MASK


	)

378 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_16U_MIN_VAL


	)

379 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_16U_MAX_VAL


	)

381 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_16S_MIN_VAL


	)

382 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_16S_MAX_VAL


	)

384 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_16S_MIN_VAL_ONES_CPL


	)

385 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_16S_MAX_VAL_ONES_CPL


	)

389 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_32_NBR_BITS
)

392 
	#DEF_INT_CPU_MASK
 
DEF_INT_32_MASK


	)

394 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_32U_MIN_VAL


	)

395 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_32U_MAX_VAL


	)

397 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_32S_MIN_VAL


	)

398 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_32S_MAX_VAL


	)

400 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_32S_MIN_VAL_ONES_CPL


	)

401 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_32S_MAX_VAL_ONES_CPL


	)

405 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_64_NBR_BITS
)

408 
	#DEF_INT_CPU_MASK
 
DEF_INT_64_MASK


	)

410 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_64U_MIN_VAL


	)

411 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_64U_MAX_VAL


	)

413 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_64S_MIN_VAL


	)

414 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_64S_MAX_VAL


	)

416 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_64S_MIN_VAL_ONES_CPL


	)

417 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_64S_MAX_VAL_ONES_CPL


	)

430 
	#DEF_TIME_NBR_DAY_PER_WK
 7u

	)

431 
	#DEF_TIME_NBR_DAY_PER_YR
 365u

	)

432 
	#DEF_TIME_NBR_DAY_PER_YR_LEAP
 366u

	)

434 
	#DEF_TIME_NBR_HR_PER_DAY
 24u

	)

435 
	#DEF_TIME_NBR_HR_PER_WK
 (
DEF_TIME_NBR_HR_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_WK
 )

	)

436 
	#DEF_TIME_NBR_HR_PER_YR
 (
DEF_TIME_NBR_HR_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR
 )

	)

437 
	#DEF_TIME_NBR_HR_PER_YR_LEAP
 (
DEF_TIME_NBR_HR_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR_LEAP
)

	)

439 
	#DEF_TIME_NBR_MIN_PER_HR
 60u

	)

440 
	#DEF_TIME_NBR_MIN_PER_DAY
 (
DEF_TIME_NBR_MIN_PER_HR
 * 
DEF_TIME_NBR_HR_PER_DAY
 )

	)

441 
	#DEF_TIME_NBR_MIN_PER_WK
 (
DEF_TIME_NBR_MIN_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_WK
 )

	)

442 
	#DEF_TIME_NBR_MIN_PER_YR
 (
DEF_TIME_NBR_MIN_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR
 )

	)

443 
	#DEF_TIME_NBR_MIN_PER_YR_LEAP
 (
DEF_TIME_NBR_MIN_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR_LEAP
)

	)

445 
	#DEF_TIME_NBR_SEC_PER_MIN
 60u

	)

446 
	#DEF_TIME_NBR_SEC_PER_HR
 (
DEF_TIME_NBR_SEC_PER_MIN
 * 
DEF_TIME_NBR_MIN_PER_HR
 )

	)

447 
	#DEF_TIME_NBR_SEC_PER_DAY
 (
DEF_TIME_NBR_SEC_PER_HR
 * 
DEF_TIME_NBR_HR_PER_DAY
 )

	)

448 
	#DEF_TIME_NBR_SEC_PER_WK
 (
DEF_TIME_NBR_SEC_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_WK
 )

	)

449 
	#DEF_TIME_NBR_SEC_PER_YR
 (
DEF_TIME_NBR_SEC_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR
 )

	)

450 
	#DEF_TIME_NBR_SEC_PER_YR_LEAP
 (
DEF_TIME_NBR_SEC_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR_LEAP
)

	)

452 
	#DEF_TIME_NBR_mS_PER_SEC
 1000u

	)

453 
	#DEF_TIME_NBR_uS_PER_SEC
 1000000u

	)

454 
	#DEF_TIME_NBR_nS_PER_SEC
 1000000000u

	)

465 
	elib_îr
 {

467 
	mLIB_ERR_NONE
 = 0u,

469 
	mLIB_MEM_ERR_NONE
 = 10000u,

470 
	mLIB_MEM_ERR_NULL_PTR
 = 10001u,

472 
	mLIB_MEM_ERR_INVALID_MEM_SIZE
 = 10100u,

473 
	mLIB_MEM_ERR_INVALID_MEM_ALIGN
 = 10101u,

474 
	mLIB_MEM_ERR_INVALID_SEG_SIZE
 = 10110u,

475 
	mLIB_MEM_ERR_INVALID_SEG_OVERLAP
 = 10111u,

476 
	mLIB_MEM_ERR_INVALID_SEG_EXISTS
 = 10112u,

477 
	mLIB_MEM_ERR_INVALID_POOL
 = 10120u,

478 
	mLIB_MEM_ERR_INVALID_BLK_NBR
 = 10130u,

479 
	mLIB_MEM_ERR_INVALID_BLK_SIZE
 = 10131u,

480 
	mLIB_MEM_ERR_INVALID_BLK_ALIGN
 = 10132u,

481 
	mLIB_MEM_ERR_INVALID_BLK_IX
 = 10133u,

482 
	mLIB_MEM_ERR_INVALID_BLK_ADDR
 = 10135u,

483 
	mLIB_MEM_ERR_INVALID_BLK_ADDR_IN_POOL
 = 10136u,

485 
	mLIB_MEM_ERR_SEG_EMPTY
 = 10200u,

486 
	mLIB_MEM_ERR_SEG_OVF
 = 10201u,

487 
	mLIB_MEM_ERR_POOL_FULL
 = 10205u,

488 
	mLIB_MEM_ERR_POOL_EMPTY
 = 10206u,

489 
	mLIB_MEM_ERR_POOL_UNLIMITED
 = 10207u,

491 
	mLIB_MEM_ERR_HEAP_EMPTY
 = 10210u,

492 
	mLIB_MEM_ERR_HEAP_OVF
 = 10211u,

493 
	mLIB_MEM_ERR_HEAP_NOT_FOUND
 = 10215u

495 } 
	tLIB_ERR
;

519 #i‚de‡ 
TRACE_LEVEL_OFF


520 
	#TRACE_LEVEL_OFF
 0u

	)

523 #i‚de‡ 
TRACE_LEVEL_INFO


524 
	#TRACE_LEVEL_INFO
 1u

	)

527 #i‚de‡ 
TRACE_LEVEL_DBG


528 
	#TRACE_LEVEL_DBG
 2u

	)

531 #i‚de‡ 
TRACE_LEVEL_LOG


532 
	#TRACE_LEVEL_LOG
 3u

	)

561 
	#DEF_BIT
(
bô
Ë(1u << (bô))

	)

589 
	#DEF_BIT08
(
bô
Ë((
CPU_INT08U
)((CPU_INT08U)1u << (bô)))

	)

591 
	#DEF_BIT16
(
bô
Ë((
CPU_INT16U
)((CPU_INT16U)1u << (bô)))

	)

593 
	#DEF_BIT32
(
bô
Ë((
CPU_INT32U
)((CPU_INT32U)1u << (bô)))

	)

595 
	#DEF_BIT64
(
bô
Ë((
CPU_INT64U
)((CPU_INT64U)1u << (bô)))

	)

621 
	#DEF_BIT_MASK
(
bô_mask
, 
bô_shi·
Ë((bô_maskË<< (bô_shi·))

	)

647 
	#DEF_BIT_MASK_08
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT08U
)((CPU_INT08U)(bô_maskË<< (bô_shi·)))

	)

649 
	#DEF_BIT_MASK_16
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT16U
)((CPU_INT16U)(bô_maskË<< (bô_shi·)))

	)

651 
	#DEF_BIT_MASK_32
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT32U
)((CPU_INT32U)(bô_maskË<< (bô_shi·)))

	)

653 
	#DEF_BIT_MASK_64
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT64U
)((CPU_INT64U)(bô_maskË<< (bô_shi·)))

	)

689 
	#DEF_BIT_FIELD
(
bô_fõld
, 
bô_shi·
Ë((((bô_fõldË>
DEF_INT_CPU_NBR_BITS
Ë? (
DEF_INT_CPU_U_MAX_VAL
) \

690 : (
	`DEF_BIT
(
bô_fõld
) - 1uL)) \

691 << (
bô_shi·
))

	)

718 
	#DEF_BIT_FIELD_08
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT08U
)((((CPU_INT08U)(bô_fõldË>(CPU_INT08U)
DEF_INT_08_NBR_BITS
Ë? (CPU_INT08U)(
DEF_INT_08U_MAX_VAL
) \

719 : (
CPU_INT08U
)(
	`DEF_BIT08
(
bô_fõld
) - (CPU_INT08U)1u)) \

720 << (
bô_shi·
)))

	)

722 
	#DEF_BIT_FIELD_16
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT16U
)((((CPU_INT16U)(bô_fõldË>(CPU_INT16U)
DEF_INT_16_NBR_BITS
Ë? (CPU_INT16U)(
DEF_INT_16U_MAX_VAL
) \

723 : (
CPU_INT16U
)(
	`DEF_BIT16
(
bô_fõld
) - (CPU_INT16U)1u)) \

724 << (
bô_shi·
)))

	)

726 
	#DEF_BIT_FIELD_32
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT32U
)((((CPU_INT32U)(bô_fõldË>(CPU_INT32U)
DEF_INT_32_NBR_BITS
Ë? (CPU_INT32U)(
DEF_INT_32U_MAX_VAL
) \

727 : (
CPU_INT32U
)(
	`DEF_BIT32
(
bô_fõld
) - (CPU_INT32U)1u)) \

728 << (
bô_shi·
)))

	)

730 
	#DEF_BIT_FIELD_64
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT64U
)((((CPU_INT64U)(bô_fõldË>(CPU_INT64U)
DEF_INT_64_NBR_BITS
Ë? (CPU_INT64U)(
DEF_INT_64U_MAX_VAL
) \

731 : (
CPU_INT64U
)(
	`DEF_BIT64
(
bô_fõld
) - (CPU_INT64U)1u)) \

732 << (
bô_shi·
)))

	)

753 
	#DEF_BIT_SET
(
vÆ
, 
mask
Ë((vÆË((vÆË| (mask)))

	)

776 
	#DEF_BIT_SET_08
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
((vÆ), (mask))

	)

778 
	#DEF_BIT_SET_16
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
((vÆ), (mask))

	)

780 
	#DEF_BIT_SET_32
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
((vÆ), (mask))

	)

782 
	#DEF_BIT_SET_64
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
((vÆ), (mask))

	)

803 
	#DEF_BIT_CLR
(
vÆ
, 
mask
Ë((vÆË((vÆË& ~(mask)))

	)

826 
	#DEF_BIT_CLR_08
(
vÆ
, 
mask
Ë
	`DEF_BIT_CLR
((vÆ), (mask))

	)

828 
	#DEF_BIT_CLR_16
(
vÆ
, 
mask
Ë
	`DEF_BIT_CLR
((vÆ), (mask))

	)

830 
	#DEF_BIT_CLR_32
(
vÆ
, 
mask
Ë
	`DEF_BIT_CLR
((vÆ), (mask))

	)

832 
	#DEF_BIT_CLR_64
(
vÆ
, 
mask
Ë
	`DEF_BIT_CLR
((vÆ), (mask))

	)

853 
	#DEF_BIT_TOGGLE
(
vÆ
, 
mask
Ë((vÆË^(mask))

	)

878 
	#DEF_BIT_FIELD_RD
(
vÆ
, 
fõld_mask
Ë(((vÆË& (fõld_mask)Ë/ ((fõld_maskË& ~((fõld_maskË<< 1u)))

	)

901 
	#DEF_BIT_FIELD_ENC
(
fõld_vÆ
, 
fõld_mask
Ë(((fõld_vÆË* ((fõld_maskË& ~((fõld_maskË<< 1u))Ë& (fõld_mask))

	)

926 
	#DEF_BIT_FIELD_WR
(
v¨
, 
fõld_vÆ
, 
fõld_mask
Ë(v¨Ë(((v¨Ë& ~(fõld_mask)Ë| 
	`DEF_BIT_FIELD_ENC
((fõld_vÆ), (fõld_mask)))

	)

951 
	#DEF_BIT_IS_SET
(
vÆ
, 
mask
) (((((val) & (mask)) == (mask)) && \

952 ((
mask
Ë!0u)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

977 
	#DEF_BIT_IS_CLR
(
vÆ
, 
mask
) (((((val) & (mask)) == 0u) && \

978 ((
mask
Ë!0u)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

1003 
	#DEF_BIT_IS_SET_ANY
(
vÆ
, 
mask
Ë((((vÆË& (mask)Ë=0uË? (
DEF_NO
 ) : (
DEF_YES
))

	)

1026 
	#DEF_BIT_IS_CLR_ANY
(
vÆ
, 
mask
Ë((((vÆË& (mask)Ë=(mask)Ë? (
DEF_NO
 ) : (
DEF_YES
))

	)

1079 
	#DEF_CHK_VAL_MIN
(
vÆ
, 
vÆ_mö
) (((!(((val) >= 1) && ((val_min) < 1))) && \

1080 ((((
vÆ_mö
Ë>1Ë&& ((
vÆ
) < 1)) || \

1081 ((
vÆ
Ë< (
vÆ_mö
)))Ë? 
DEF_FAIL
 : 
DEF_OK
)

	)

1128 
	#DEF_CHK_VAL_MAX
(
vÆ
, 
vÆ_max
) (((!(((val_max) >= 1) && ((val) < 1))) && \

1129 ((((
vÆ
Ë>1Ë&& ((
vÆ_max
) < 1)) || \

1130 ((
vÆ
Ë> (
vÆ_max
)))Ë? 
DEF_FAIL
 : 
DEF_OK
)

	)

1181 
	#DEF_CHK_VAL
(
vÆ
, 
vÆ_mö
, 
vÆ_max
Ë(((
	`DEF_CHK_VAL_MIN
((vÆ), (vÆ_mö)Ë=
DEF_FAIL
) || \

1182 (
	`DEF_CHK_VAL_MAX
((
vÆ
), (
vÆ_max
)Ë=
DEF_FAIL
)Ë? DEF_FAIL : 
DEF_OK
)

	)

1205 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_08
)

1207 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : 0)

	)

1210 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_16
)

1212 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : \

1213 (((
obj
Ë=
CPU_WORD_SIZE_16
Ë? 
DEF_INT_16U_MAX_VAL
 : 0))

	)

1216 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_32
)

1218 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : \

1219 (((
obj
Ë=
CPU_WORD_SIZE_16
Ë? 
DEF_INT_16U_MAX_VAL
 : \

1220 (((
obj
Ë=
CPU_WORD_SIZE_32
Ë? 
DEF_INT_32U_MAX_VAL
 : 0)))

	)

1223 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_64
)

1225 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : \

1226 (((
obj
Ë=
CPU_WORD_SIZE_16
Ë? 
DEF_INT_16U_MAX_VAL
 : \

1227 (((
obj
Ë=
CPU_WORD_SIZE_32
Ë? 
DEF_INT_32U_MAX_VAL
 : \

1228 (((
obj
Ë=
CPU_WORD_SIZE_64
Ë? 
DEF_INT_64U_MAX_VAL
 : 0))))

	)

1268 
	#DEF_MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

1287 
	#DEF_MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

1306 
	#DEF_ABS
(
a
Ë((◊Ë< 0Ë? (-◊)Ë: (a))

	)

1330 #i‡ (
CPU_CORE_VERSION
 < 12900u)

	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_math.c

70 
	#MICRIUM_SOURCE


	)

71 
	#LIB_MATH_MODULE


	)

72 
	~<lib_m©h.h
>

109 
RAND_NBR
 
	gM©h_R™dSìdCur
;

147 
	$M©h_Inô
 ()

149 
	`M©h_R™dSëSìd
((
RAND_NBR
)
RAND_SEED_INIT_VAL
);

150 
	}
}

175 
	$M©h_R™dSëSìd
 (
RAND_NBR
 
£ed
)

177 
	`CPU_SR_ALLOC
();

180 
	`CPU_CRITICAL_ENTER
();

181 
M©h_R™dSìdCur
 = 
£ed
;

182 
	`CPU_CRITICAL_EXIT
();

183 
	}
}

215 
RAND_NBR
 
	$M©h_R™d
 ()

217 
RAND_NBR
 
£ed
;

218 
RAND_NBR
 
ønd_nbr
;

219 
	`CPU_SR_ALLOC
();

222 
	`CPU_CRITICAL_ENTER
();

223 
£ed
 = 
M©h_R™dSìdCur
;

224 
ønd_nbr
 = 
	`M©h_R™dSìd
(
£ed
);

225 
M©h_R™dSìdCur
 = 
ønd_nbr
;

226 
	`CPU_CRITICAL_EXIT
();

228  (
ønd_nbr
);

229 
	}
}

272 
RAND_NBR
 
	$M©h_R™dSìd
 (
RAND_NBR
 
£ed
)

274 
RAND_NBR
 
ønd_nbr
;

277 
ønd_nbr
 = (((
RAND_NBR
)
RAND_LCG_PARAM_A
 * 
£ed
Ë+ (RAND_NBR)
RAND_LCG_PARAM_B
Ë% ((RAND_NBR)
RAND_LCG_PARAM_M
 + 1u);

279  (
ønd_nbr
);

280 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_math.h

73 #i‚de‡ 
LIB_MATH_MODULE_PRESENT


74 
	#LIB_MATH_MODULE_PRESENT


	)

109 
	~<˝u.h
>

110 
	~<˝u_c‹e.h
>

112 
	~<lib_def.h
>

121 #ifde‡ 
LIB_MATH_MODULE


122 
	#LIB_MATH_EXT


	)

124 
	#LIB_MATH_EXT
 

	)

168 
	#RAND_SEED_INIT_VAL
 1u

	)

170 
	#RAND_LCG_PARAM_M
 0x7FFFFFFFu

	)

171 
	#RAND_LCG_PARAM_A
 1103515245u

	)

172 
	#RAND_LCG_PARAM_B
 12345u

	)

187 
CPU_INT32U
 
	tRAND_NBR
;

221 
	#MATH_IS_PWR2
(
nbr
Ë(((“brË!0uË&& ((“brË& (“brË- 1u)Ë=0u)Ë? 
DEF_YES
 : 
DEF_NO
)

	)

242 
	#MATH_ROUND_INC_UP_PWR2
(
nbr
, 
öc
Ë((“brË& ~((öcË- 1)Ë+ ((“brË& ((öcË- 1)Ë=0 ? 0 : (öc)))

	)

263 
	#MATH_ROUND_INC_UP
(
nbr
, 
öc
Ë((“brË+ ((öcË- 1)Ë/ (öcË* (öc))

	)

272 
M©h_Inô
 ();

275 
M©h_R™dSëSìd
(
RAND_NBR
 
£ed
);

277 
RAND_NBR
 
M©h_R™d
 ();

279 
RAND_NBR
 
M©h_R™dSìd
 (RAND_NBR 
£ed
);

	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_mem.c

62 
	#MICRIUM_SOURCE


	)

63 
	#LIB_MEM_MODULE


	)

64 
	~"lib_mem.h
"

65 
	~"lib_m©h.h
"

66 
	~"lib_°r.h
"

104 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

105 #i‚de‡ 
LIB_MEM_CFG_HEAP_BASE_ADDR


106 
CPU_INT08U
 
	gMem_Hóp
[
LIB_MEM_CFG_HEAP_SIZE
];

109 
MEM_SEG
 
	gMem_SegHóp
;

112 
MEM_SEG
 *
	gMem_SegHódPå
;

121 
Mem_SegCª©eCrôiˇl
 (c⁄° 
CPU_CHAR
 *
p_«me
,

122 
MEM_SEG
 *
p_£g
,

123 
CPU_ADDR
 
£g_ba£_addr
,

124 
CPU_SIZE_T
 
∑ddög_Æign
,

125 
CPU_SIZE_T
 
size
);

127 
MEM_SEG
 *
Mem_SegOvîœpChkCrôiˇl
–
CPU_ADDR
 
£g_ba£_addr
,

128 
CPU_SIZE_T
 
size
,

129 
LIB_ERR
 *
p_îr
);

131 *
Mem_SegAŒocI¡î«l
 (c⁄° 
CPU_CHAR
 *
p_«me
,

132 
MEM_SEG
 *
p_£g
,

133 
CPU_SIZE_T
 
size
,

134 
CPU_SIZE_T
 
Æign
,

135 
CPU_SIZE_T
 
∑ddög_Æign
,

136 
CPU_SIZE_T
 *
p_byãs_ªqd
,

137 
LIB_ERR
 *
p_îr
);

139 *
Mem_SegAŒocExtCrôiˇl
 ( 
MEM_SEG
 *
p_£g
,

140 
CPU_SIZE_T
 
size
,

141 
CPU_SIZE_T
 
Æign
,

142 
CPU_SIZE_T
 
∑ddög_Æign
,

143 
CPU_SIZE_T
 *
p_byãs_ªqd
,

144 
LIB_ERR
 *
p_îr
);

146 
Mem_DynPoﬁCª©eI¡î«l
(c⁄° 
CPU_CHAR
 *
p_«me
,

147 
MEM_DYN_POOL
 *
p_poﬁ
,

148 
MEM_SEG
 *
p_£g
,

149 
CPU_SIZE_T
 
blk_size
,

150 
CPU_SIZE_T
 
blk_Æign
,

151 
CPU_SIZE_T
 
blk_∑ddög_Æign
,

152 
CPU_SIZE_T
 
blk_qty_öô
,

153 
CPU_SIZE_T
 
blk_qty_max
,

154 
LIB_ERR
 *
p_îr
);

156 #i‡(
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_ENABLED
)

157 
Mem_SegAŒocTøckCrôiˇl
(c⁄° 
CPU_CHAR
 *
p_«me
,

158 
MEM_SEG
 *
p_£g
,

159 
CPU_SIZE_T
 
size
,

160 
LIB_ERR
 *
p_îr
);

163 #i‡((
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
) && \

164 (
	gLIB_MEM_CFG_HEAP_SIZE
 > 0u))

165 
CPU_BOOLEAN
 
Mem_PoﬁBlkIsVÆidAddr
 ( 
MEM_POOL
 *
p_poﬁ
,

166 *
p_mem
);

207 
	$Mem_Inô
 ()

211 
Mem_SegHódPå
 = 
DEF_NULL
;

213 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

215 
LIB_ERR
 
îr
;

216 
CPU_ADDR
 
hóp_ba£_addr
;

220 #ifde‡ 
LIB_MEM_CFG_HEAP_BASE_ADDR


221 
hóp_ba£_addr
 = 
LIB_MEM_CFG_HEAP_BASE_ADDR
;

223 
hóp_ba£_addr
 = (
CPU_ADDR
)&
Mem_Hóp
[0u];

226 
	`Mem_SegCª©e
("Heap",

227 &
Mem_SegHóp
,

228 
hóp_ba£_addr
,

229 
LIB_MEM_CFG_HEAP_SIZE
,

230 
LIB_MEM_PADDING_ALIGN_NONE
,

231 &
îr
);

232 i‡(
îr
 !
LIB_MEM_ERR_NONE
) {

233 
	`CPU_SW_EXCEPTION
(;);

237 
	}
}

262 
	$Mem_CÃ
 (*
pmem
,

263 
CPU_SIZE_T
 
size
)

265 
	`Mem_Së
(
pmem
,

267 
size
);

268 
	}
}

303 
	$Mem_Së
 (*
pmem
,

304 
CPU_INT08U
 
d©a_vÆ
,

305 
CPU_SIZE_T
 
size
)

307 
CPU_SIZE_T
 
size_ªm
;

308 
CPU_ALIGN
 
d©a_Æign
;

309 
CPU_ALIGN
 *
pmem_Æign
;

310 
CPU_INT08U
 *
pmem_08
;

311 
CPU_DATA
 
mem_Æign_mod
;

312 
CPU_DATA
 
i
;

315 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

316 i‡(
size
 < 1) {

319 i‡(
pmem
 == (*)0) {

325 
d©a_Æign
 = 0u;

326 
i
 = 0u; i < (
CPU_ALIGN
); i++) {

327 
d©a_Æign
 <<
DEF_OCTET_NBR_BITS
;

328 
d©a_Æign
 |(
CPU_ALIGN
)
d©a_vÆ
;

331 
size_ªm
 = 
size
;

332 
mem_Æign_mod
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem
 % (
CPU_ALIGN
));

334 
pmem_08
 = (
CPU_INT08U
 *)
pmem
;

335 i‡(
mem_Æign_mod
 != 0u) {

336 
i
 = 
mem_Æign_mod
;

337 (
size_ªm
 > 0) &&

338 (
i
 < (
CPU_ALIGN
 ))) {

339 *
pmem_08
++ = 
d©a_vÆ
;

340 
size_ªm
 -(
CPU_INT08U
);

341 
i
++;

345 
pmem_Æign
 = (
CPU_ALIGN
 *)
pmem_08
;

346 
size_ªm
 >(
CPU_ALIGN
)) {

347 *
pmem_Æign
++ = 
d©a_Æign
;

348 
size_ªm
 -(
CPU_ALIGN
);

351 
pmem_08
 = (
CPU_INT08U
 *)
pmem_Æign
;

352 
size_ªm
 > 0) {

353 *
pmem_08
++ = 
d©a_vÆ
;

354 
size_ªm
 -(
CPU_INT08U
);

356 
	}
}

410 #i‡(
LIB_MEM_CFG_OPTIMIZE_ASM_EN
 !
DEF_ENABLED
)

411 
	$Mem_C›y
 ( *
pde°
,

412 c⁄° *
p§c
,

413 
CPU_SIZE_T
 
size
)

415 
CPU_SIZE_T
 
size_ªm
;

416 
CPU_SIZE_T
 
mem_g≠_o˘ës
;

417 
CPU_ALIGN
 *
pmem_Æign_de°
;

418 c⁄° 
CPU_ALIGN
 *
pmem_Æign_§c
;

419 
CPU_INT08U
 *
pmem_08_de°
;

420 c⁄° 
CPU_INT08U
 *
pmem_08_§c
;

421 
CPU_DATA
 
i
;

422 
CPU_DATA
 
mem_Æign_mod_de°
;

423 
CPU_DATA
 
mem_Æign_mod_§c
;

424 
CPU_BOOLEAN
 
mem_Æig√d
;

427 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

428 i‡(
size
 < 1) {

431 i‡(
pde°
 == (*)0) {

434 i‡(
p§c
 == (*)0) {

440 
size_ªm
 = 
size
;

442 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pde°
;

443 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
p§c
;

445 
mem_g≠_o˘ës
 = 
pmem_08_§c
 - 
pmem_08_de°
;

448 i‡(
mem_g≠_o˘ës
 >(
CPU_ALIGN
)) {

450 
mem_Æign_mod_de°
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem_08_de°
 % (
CPU_ALIGN
));

451 
mem_Æign_mod_§c
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem_08_§c
 % (
CPU_ALIGN
));

453 
mem_Æig√d
 = (
mem_Æign_mod_de°
 =
mem_Æign_mod_§c
Ë? 
DEF_YES
 : 
DEF_NO
;

455 i‡(
mem_Æig√d
 =
DEF_YES
) {

457 i‡(
mem_Æign_mod_de°
 != 0u) {

458 
i
 = 
mem_Æign_mod_de°
;

459 (
size_ªm
 > 0) &&

460 (
i
 < (
CPU_ALIGN
 ))) {

461 *
pmem_08_de°
++ = *
pmem_08_§c
++;

462 
size_ªm
 -(
CPU_INT08U
);

463 
i
++;

467 
pmem_Æign_de°
 = ( 
CPU_ALIGN
 *)
pmem_08_de°
;

468 
pmem_Æign_§c
 = (c⁄° 
CPU_ALIGN
 *)
pmem_08_§c
;

469 
size_ªm
 >(
CPU_ALIGN
)) {

470 *
pmem_Æign_de°
++ = *
pmem_Æign_§c
++;

471 
size_ªm
 -(
CPU_ALIGN
);

474 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pmem_Æign_de°
;

475 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
pmem_Æign_§c
;

479 
size_ªm
 > 0) {

480 *
pmem_08_de°
++ = *
pmem_08_§c
++;

481 
size_ªm
 -(
CPU_INT08U
);

483 
	}
}

522 
	$Mem_Move
 ( *
pde°
,

523 c⁄° *
p§c
,

524 
CPU_SIZE_T
 
size
)

526 
CPU_SIZE_T
 
size_ªm
;

527 
CPU_SIZE_T
 
mem_g≠_o˘ës
;

528 
CPU_ALIGN
 *
pmem_Æign_de°
;

529 c⁄° 
CPU_ALIGN
 *
pmem_Æign_§c
;

530 
CPU_INT08U
 *
pmem_08_de°
;

531 c⁄° 
CPU_INT08U
 *
pmem_08_§c
;

532 
CPU_INT08S
 
i
;

533 
CPU_DATA
 
mem_Æign_mod_de°
;

534 
CPU_DATA
 
mem_Æign_mod_§c
;

535 
CPU_BOOLEAN
 
mem_Æig√d
;

538 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

539 i‡(
size
 < 1) {

542 i‡(
pde°
 == (*)0) {

545 i‡(
p§c
 == (*)0) {

550 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
p§c
;

551 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pde°
;

552 i‡(
pmem_08_§c
 > 
pmem_08_de°
) {

553 
	`Mem_C›y
(
pde°
, 
p§c
, 
size
);

557 
size_ªm
 = 
size
;

559 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pde°
 + 
size
 - 1;

560 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
p§c
 + 
size
 - 1;

562 
mem_g≠_o˘ës
 = 
pmem_08_de°
 - 
pmem_08_§c
;

565 i‡(
mem_g≠_o˘ës
 >(
CPU_ALIGN
)) {

568 
mem_Æign_mod_de°
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem_08_de°
 % (
CPU_ALIGN
));

569 
mem_Æign_mod_§c
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem_08_§c
 % (
CPU_ALIGN
));

571 
mem_Æig√d
 = (
mem_Æign_mod_de°
 =
mem_Æign_mod_§c
Ë? 
DEF_YES
 : 
DEF_NO
;

573 i‡(
mem_Æig√d
 =
DEF_YES
) {

575 i‡(
mem_Æign_mod_de°
 !((
CPU_ALIGN
) - 1)) {

576 
i
 = 
mem_Æign_mod_de°
;

577 (
size_ªm
 > 0) &&

578 (
i
 >= 0)) {

579 *
pmem_08_de°
-- = *
pmem_08_§c
--;

580 
size_ªm
 -(
CPU_INT08U
);

581 
i
--;

586 
pmem_Æign_de°
 = ( 
CPU_ALIGN
 *)((
CPU_INT08U
 *)
pmem_08_de°
 - (CPU_ALIGN) + 1);

587 
pmem_Æign_§c
 = (c⁄° 
CPU_ALIGN
 *)((
CPU_INT08U
 *)
pmem_08_§c
 - (CPU_ALIGN) + 1);

588 
size_ªm
 >(
CPU_ALIGN
)) {

589 *
pmem_Æign_de°
-- = *
pmem_Æign_§c
--;

590 
size_ªm
 -(
CPU_ALIGN
);

593 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pmem_Æign_de°
 + (
CPU_ALIGN
) - 1;

594 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
pmem_Æign_§c
 + (
CPU_ALIGN
) - 1;

599 
size_ªm
 > 0) {

600 *
pmem_08_de°
-- = *
pmem_08_§c
--;

601 
size_ªm
 -(
CPU_INT08U
);

603 
	}
}

646 
CPU_BOOLEAN
 
	$Mem_Cmp
 (c⁄° *
p1_mem
,

647 c⁄° *
p2_mem
,

648 
CPU_SIZE_T
 
size
)

650 
CPU_SIZE_T
 
size_ªm
;

651 
CPU_ALIGN
 *
p1_mem_Æign
;

652 
CPU_ALIGN
 *
p2_mem_Æign
;

653 c⁄° 
CPU_INT08U
 *
p1_mem_08
;

654 c⁄° 
CPU_INT08U
 *
p2_mem_08
;

655 
CPU_DATA
 
i
;

656 
CPU_DATA
 
mem_Æign_mod_1
;

657 
CPU_DATA
 
mem_Æign_mod_2
;

658 
CPU_BOOLEAN
 
mem_Æig√d
;

659 
CPU_BOOLEAN
 
mem_cmp
;

662 i‡(
size
 < 1) {

663  (
DEF_YES
);

665 i‡(
p1_mem
 == (*)0) {

666  (
DEF_NO
);

668 i‡(
p2_mem
 == (*)0) {

669  (
DEF_NO
);

673 
mem_cmp
 = 
DEF_YES
;

674 
size_ªm
 = 
size
;

676 
p1_mem_08
 = (c⁄° 
CPU_INT08U
 *)
p1_mem
 + 
size
;

677 
p2_mem_08
 = (c⁄° 
CPU_INT08U
 *)
p2_mem
 + 
size
;

679 
mem_Æign_mod_1
 = (
CPU_INT08U
)((
CPU_ADDR
)
p1_mem_08
 % (
CPU_ALIGN
));

680 
mem_Æign_mod_2
 = (
CPU_INT08U
)((
CPU_ADDR
)
p2_mem_08
 % (
CPU_ALIGN
));

682 
mem_Æig√d
 = (
mem_Æign_mod_1
 =
mem_Æign_mod_2
Ë? 
DEF_YES
 : 
DEF_NO
;

684 i‡(
mem_Æig√d
 =
DEF_YES
) {

686 i‡(
mem_Æign_mod_1
 != 0u) {

687 
i
 = 
mem_Æign_mod_1
;

688 (
mem_cmp
 =
DEF_YES
) &&

689 (
size_ªm
 > 0) &&

690 (
i
 > 0)) {

691 
p1_mem_08
--;

692 
p2_mem_08
--;

693 i‡(*
p1_mem_08
 !*
p2_mem_08
) {

694 
mem_cmp
 = 
DEF_NO
;

696 
size_ªm
 -(
CPU_INT08U
);

697 
i
--;

701 i‡(
mem_cmp
 =
DEF_YES
) {

702 
p1_mem_Æign
 = (
CPU_ALIGN
 *)
p1_mem_08
;

703 
p2_mem_Æign
 = (
CPU_ALIGN
 *)
p2_mem_08
;

705 (
mem_cmp
 =
DEF_YES
) &&

706 (
size_ªm
 >(
CPU_ALIGN
))) {

707 
p1_mem_Æign
--;

708 
p2_mem_Æign
--;

709 i‡(*
p1_mem_Æign
 !*
p2_mem_Æign
) {

710 
mem_cmp
 = 
DEF_NO
;

712 
size_ªm
 -(
CPU_ALIGN
);

715 
p1_mem_08
 = (
CPU_INT08U
 *)
p1_mem_Æign
;

716 
p2_mem_08
 = (
CPU_INT08U
 *)
p2_mem_Æign
;

720 (
mem_cmp
 =
DEF_YES
) &&

721 (
size_ªm
 > 0)) {

722 
p1_mem_08
--;

723 
p2_mem_08
--;

724 i‡(*
p1_mem_08
 !*
p2_mem_08
) {

725 
mem_cmp
 = 
DEF_NO
;

727 
size_ªm
 -(
CPU_INT08U
);

730  (
mem_cmp
);

731 
	}
}

774 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

775 *
	$Mem_HópAŒoc
 (
CPU_SIZE_T
 
size
,

776 
CPU_SIZE_T
 
Æign
,

777 
CPU_SIZE_T
 *
p_byãs_ªqd
,

778 
LIB_ERR
 *
p_îr
)

780 *
p_mem
;

783 
p_mem
 = 
	`Mem_SegAŒocI¡î«l
(
DEF_NULL
,

784 &
Mem_SegHóp
,

785 
size
,

786 
Æign
,

787 
LIB_MEM_CFG_HEAP_PADDING_ALIGN
,

788 
p_byãs_ªqd
,

789 
p_îr
);

790 i‡(*
p_îr
 =
LIB_MEM_ERR_SEG_OVF
) {

791 *
p_îr
 = 
LIB_MEM_ERR_HEAP_OVF
;

794  (
p_mem
);

795 
	}
}

826 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

827 
CPU_SIZE_T
 
	$Mem_HópGëSizeRem
 (
CPU_SIZE_T
 
Æign
,

828 
LIB_ERR
 *
p_îr
)

830 
CPU_SIZE_T
 
ªm_size
;

833 
ªm_size
 = 
	`Mem_SegRemSizeGë
(&
Mem_SegHóp
,

834 
Æign
,

835 
DEF_NULL
,

836 
p_îr
);

837 i‡(*
p_îr
 !
LIB_MEM_ERR_NONE
) {

841  (
ªm_size
);

842 
	}
}

885 
	$Mem_SegCª©e
 (c⁄° 
CPU_CHAR
 *
p_«me
,

886 
MEM_SEG
 *
p_£g
,

887 
CPU_ADDR
 
£g_ba£_addr
,

888 
CPU_SIZE_T
 
size
,

889 
CPU_SIZE_T
 
∑ddög_Æign
,

890 
LIB_ERR
 *
p_îr
)

892 
	`CPU_SR_ALLOC
();

895 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

896 i‡(
p_îr
 =
DEF_NULL
) {

897 
	`CPU_SW_EXCEPTION
(;);

900 i‡(
p_£g
 =
DEF_NULL
) {

901 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

905 i‡(
size
 < 1u) {

906 *
p_îr
 = 
LIB_MEM_ERR_INVALID_SEG_SIZE
;

910 i‡(
£g_ba£_addr
 + (
size
 - 1u) < seg_base_addr) {

911 *
p_îr
 = 
LIB_MEM_ERR_INVALID_SEG_SIZE
;

915 i‡((
∑ddög_Æign
 !
LIB_MEM_PADDING_ALIGN_NONE
) &&

916 (
	`MATH_IS_PWR2
(
∑ddög_Æign
Ë!
DEF_YES
)) {

917 *
p_îr
 = 
LIB_MEM_ERR_INVALID_MEM_ALIGN
;

922 
	`CPU_CRITICAL_ENTER
();

923 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

924 ()
	`Mem_SegOvîœpChkCrôiˇl
(
£g_ba£_addr
,

925 
size
,

926 
p_îr
);

927 i‡(*
p_îr
 !
LIB_MEM_ERR_NONE
) {

928 
	`CPU_CRITICAL_EXIT
();

933 
	`Mem_SegCª©eCrôiˇl
(
p_«me
,

934 
p_£g
,

935 
£g_ba£_addr
,

936 
∑ddög_Æign
,

937 
size
);

938 
	`CPU_CRITICAL_EXIT
();

940 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

941 
	}
}

968 #i‡(
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_DISABLED
)

969 
	$Mem_SegCÃ
 (
MEM_SEG
 *
p_£g
,

970 
LIB_ERR
 *
p_îr
)

972 
	`CPU_SR_ALLOC
();

975 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

976 i‡(
p_îr
 =
DEF_NULL
) {

977 
	`CPU_SW_EXCEPTION
(;);

980 i‡(
p_£g
 =
DEF_NULL
) {

981 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

986 
	`CPU_CRITICAL_ENTER
();

987 
p_£g
->
AddrNext
 =Ö_£g->
AddrBa£
;

988 
	`CPU_CRITICAL_EXIT
();

990 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

991 
	}
}

1025 
CPU_SIZE_T
 
	$Mem_SegRemSizeGë
 (
MEM_SEG
 *
p_£g
,

1026 
CPU_SIZE_T
 
Æign
,

1027 
MEM_SEG_INFO
 *
p_£g_öfo
,

1028 
LIB_ERR
 *
p_îr
)

1030 
CPU_SIZE_T
 
ªm_size
;

1031 
CPU_SIZE_T
 
tŸÆ_size
;

1032 
CPU_SIZE_T
 
u£d_size
;

1033 
CPU_ADDR
 
√xt_addr_Æign
;

1034 
	`CPU_SR_ALLOC
();

1037 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1038 i‡(
p_îr
 =
DEF_NULL
) {

1039 
	`CPU_SW_EXCEPTION
(
£g_öfo
);

1042 i‡(
	`MATH_IS_PWR2
(
Æign
Ë!
DEF_YES
) {

1043 *
p_îr
 = 
LIB_MEM_ERR_INVALID_MEM_ALIGN
;

1048 i‡(
p_£g
 =
DEF_NULL
) {

1049 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

1050 
p_£g
 = &
Mem_SegHóp
;

1052 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

1057 
	`CPU_CRITICAL_ENTER
();

1058 
√xt_addr_Æign
 = 
	`MATH_ROUND_INC_UP_PWR2
(
p_£g
->
AddrNext
, 
Æign
);

1059 
	`CPU_CRITICAL_EXIT
();

1061 
tŸÆ_size
 = 
p_£g
->
AddrEnd
 -Ö_£g->
AddrBa£
 + 1u;

1062 
u£d_size
 = 
√xt_addr_Æign
 - 
p_£g
->
AddrBa£
;

1063 
ªm_size
 = 
tŸÆ_size
 - 
u£d_size
;

1065 i‡(
p_£g_öfo
 !
DEF_NULL
) {

1066 
p_£g_öfo
->
TŸÆSize
 = 
tŸÆ_size
;

1067 
p_£g_öfo
->
U£dSize
 = 
u£d_size
;

1068 
p_£g_öfo
->
AddrBa£
 = 
p_£g
->AddrBase;

1069 
p_£g_öfo
->
AddrNextAŒoc
 = 
√xt_addr_Æign
;

1072 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

1074  (
ªm_size
);

1075 
	}
}

1114 *
	$Mem_SegAŒoc
 (c⁄° 
CPU_CHAR
 *
p_«me
,

1115 
MEM_SEG
 *
p_£g
,

1116 
CPU_SIZE_T
 
size
,

1117 
LIB_ERR
 *
p_îr
)

1119 *
p_blk
;

1122 i‡(
p_£g
 =
DEF_NULL
) {

1123 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

1124 
p_£g
 = &
Mem_SegHóp
;

1126 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

1127  (
DEF_NULL
);

1131 
p_blk
 = 
	`Mem_SegAŒocI¡î«l
(
p_«me
,

1132 
p_£g
,

1133 
size
,

1134 (
CPU_ALIGN
),

1135 
LIB_MEM_PADDING_ALIGN_NONE
,

1136 
DEF_NULL
,

1137 
p_îr
);

1139  (
p_blk
);

1140 
	}
}

1181 *
	$Mem_SegAŒocExt
 (c⁄° 
CPU_CHAR
 *
p_«me
,

1182 
MEM_SEG
 *
p_£g
,

1183 
CPU_SIZE_T
 
size
,

1184 
CPU_SIZE_T
 
Æign
,

1185 
CPU_SIZE_T
 *
p_byãs_ªqd
,

1186 
LIB_ERR
 *
p_îr
)

1188 *
p_blk
;

1191 i‡(
p_£g
 =
DEF_NULL
) {

1192 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

1193 
p_£g
 = &
Mem_SegHóp
;

1195 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

1196  (
DEF_NULL
);

1200 
p_blk
 = 
	`Mem_SegAŒocI¡î«l
(
p_«me
,

1201 
p_£g
,

1202 
size
,

1203 
Æign
,

1204 
LIB_MEM_PADDING_ALIGN_NONE
,

1205 
p_byãs_ªqd
,

1206 
p_îr
);

1208  (
p_blk
);

1209 
	}
}

1251 *
	$Mem_SegAŒocHW
 (c⁄° 
CPU_CHAR
 *
p_«me
,

1252 
MEM_SEG
 *
p_£g
,

1253 
CPU_SIZE_T
 
size
,

1254 
CPU_SIZE_T
 
Æign
,

1255 
CPU_SIZE_T
 *
p_byãs_ªqd
,

1256 
LIB_ERR
 *
p_îr
)

1258 *
p_blk
;

1261 i‡(
p_£g
 =
DEF_NULL
) {

1262 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

1263 
p_£g
 = &
Mem_SegHóp
;

1265 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

1266  (
DEF_NULL
);

1270 
p_blk
 = 
	`Mem_SegAŒocI¡î«l
(
p_«me
,

1271 
p_£g
,

1272 
size
,

1273 
Æign
,

1274 
p_£g
->
PaddögAlign
,

1275 
p_byãs_ªqd
,

1276 
p_îr
);

1278  (
p_blk
);

1279 
	}
}

1350 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

1351 
	$Mem_PoﬁCª©e
 (
MEM_POOL
 *
p_poﬁ
,

1352 *
p_mem_ba£
,

1353 
CPU_SIZE_T
 
mem_size
,

1354 
MEM_POOL_BLK_QTY
 
blk_nbr
,

1355 
CPU_SIZE_T
 
blk_size
,

1356 
CPU_SIZE_T
 
blk_Æign
,

1357 
CPU_SIZE_T
 *
p_byãs_ªqd
,

1358 
LIB_ERR
 *
p_îr
)

1360 
MEM_SEG
 *
p_£g
;

1361 *
p_poﬁ_mem
;

1362 
CPU_SIZE_T
 
poﬁ_size
;

1363 
CPU_SIZE_T
 
blk_size_Æign
;

1364 
CPU_ADDR
 
poﬁ_addr_íd
;

1365 
MEM_POOL_BLK_QTY
 
blk_ix
;

1366 
CPU_INT08U
 *
p_blk
;

1367 
	`CPU_SR_ALLOC
();

1370 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1371 i‡(
p_îr
 =
DEF_NULL
) {

1372 
	`CPU_SW_EXCEPTION
(;);

1376 i‡(
p_poﬁ
 =
DEF_NULL
) {

1377 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

1381 i‡(
p_mem_ba£
 !
DEF_NULL
) {

1382 i‡(
mem_size
 < 1u) {

1383 *
p_îr
 = 
LIB_MEM_ERR_INVALID_SEG_SIZE
;

1388 i‡(
blk_nbr
 < 1u) {

1389 *
p_îr
 = 
LIB_MEM_ERR_INVALID_BLK_NBR
;

1393 i‡(
blk_size
 < 1u) {

1394 *
p_îr
 = 
LIB_MEM_ERR_INVALID_BLK_SIZE
;

1398 i‡(
	`MATH_IS_PWR2
(
blk_Æign
Ë!
DEF_YES
) {

1399 *
p_îr
 = 
LIB_MEM_ERR_INVALID_BLK_ALIGN
;

1404 
	`Mem_PoﬁCÃ
(
p_poﬁ
, 
p_îr
);

1405 i‡(*
p_îr
 !
LIB_MEM_ERR_NONE
) {

1410 i‡(
p_mem_ba£
 =
DEF_NULL
) {

1411 
p_£g
 = &
Mem_SegHóp
;

1413 
	`CPU_CRITICAL_ENTER
();

1414 
p_£g
 = 
	`Mem_SegOvîœpChkCrôiˇl
((
CPU_ADDR
)
p_mem_ba£
,

1415 
mem_size
,

1416 
p_îr
);

1417 *
p_îr
) {

1418 
LIB_MEM_ERR_INVALID_SEG_EXISTS
:

1421 
LIB_MEM_ERR_NONE
:

1422 
p_£g
 = (
MEM_SEG
 *)
	`Mem_SegAŒocExtCrôiˇl
(&
Mem_SegHóp
,

1423 (
MEM_SEG
),

1424 (
CPU_ALIGN
),

1425 
LIB_MEM_PADDING_ALIGN_NONE
,

1426 
p_byãs_ªqd
,

1427 
p_îr
);

1428 i‡(*
p_îr
 !
LIB_MEM_ERR_NONE
) {

1429 
	`CPU_CRITICAL_EXIT
();

1433 #i‡(
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_ENABLED
)

1434 
	`Mem_SegAŒocTøckCrôiˇl
("Unknown segment data",

1435 &
Mem_SegHóp
,

1436 (
MEM_SEG
),

1437 
p_îr
);

1438 i‡(*
p_îr
 !
LIB_MEM_ERR_NONE
) {

1439 
	`CPU_CRITICAL_EXIT
();

1444 
	`Mem_SegCª©eCrôiˇl
–
DEF_NULL
,

1445 
p_£g
,

1446 (
CPU_ADDR
)
p_mem_ba£
,

1447 
LIB_MEM_PADDING_ALIGN_NONE
,

1448 
mem_size
);

1452 
LIB_MEM_ERR_INVALID_SEG_OVERLAP
:

1454 
	`CPU_CRITICAL_EXIT
();

1458 
	`CPU_CRITICAL_EXIT
();

1464 
blk_size_Æign
 = 
	`MATH_ROUND_INC_UP_PWR2
(
blk_size
, 
blk_Æign
);

1465 
poﬁ_size
 = 
blk_size_Æign
 * 
blk_nbr
;

1468 
p_poﬁ_mem
 = (*)
	`Mem_SegAŒocI¡î«l
("Unnamed staticÖool",

1469 
p_£g
,

1470 
poﬁ_size
,

1471 
blk_Æign
,

1472 
LIB_MEM_PADDING_ALIGN_NONE
,

1473 
p_byãs_ªqd
,

1474 
p_îr
);

1475 i‡(*
p_îr
 !
LIB_MEM_ERR_NONE
) {

1480 
p_poﬁ
->
BlkFªeTbl
 = (*)
	`Mem_SegAŒocI¡î«l
("Unnamed staticÖool free blkÅbl",

1481 &
Mem_SegHóp
,

1482 
blk_nbr
 * (*),

1483 (
CPU_ALIGN
),

1484 
LIB_MEM_PADDING_ALIGN_NONE
,

1485 
p_byãs_ªqd
,

1486 
p_îr
);

1487 i‡(*
p_îr
 !
LIB_MEM_ERR_NONE
) {

1492 
p_blk
 = (
CPU_INT08U
 *)
p_poﬁ_mem
;

1493 
blk_ix
 = 0; blk_ix < 
blk_nbr
; blk_ix++) {

1494 
p_poﬁ
->
BlkFªeTbl
[
blk_ix
] = 
p_blk
;

1495 
p_blk
 +
blk_size_Æign
;

1500 
poﬁ_addr_íd
 = (
CPU_ADDR
)
p_poﬁ_mem
 + (
poﬁ_size
 - 1u);

1501 
p_poﬁ
->
PoﬁAddrSèπ
 = 
p_poﬁ_mem
;

1502 
p_poﬁ
->
PoﬁAddrEnd
 = (*)
poﬁ_addr_íd
;

1503 
p_poﬁ
->
BlkNbr
 = 
blk_nbr
;

1504 
p_poﬁ
->
BlkSize
 = 
blk_size_Æign
;

1505 
p_poﬁ
->
BlkFªeTblIx
 = 
blk_nbr
;

1506 
	}
}

1541 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

1542 
	$Mem_PoﬁCÃ
 (
MEM_POOL
 *
p_poﬁ
,

1543 
LIB_ERR
 *
p_îr
)

1545 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1546 i‡(
p_îr
 =
DEF_NULL
) {

1547 
	`CPU_SW_EXCEPTION
(;);

1551 i‡(
p_poﬁ
 =
DEF_NULL
) {

1552 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

1557 
p_poﬁ
->
PoﬁAddrSèπ
 = 
DEF_NULL
;

1558 
p_poﬁ
->
PoﬁAddrEnd
 = 
DEF_NULL
;

1559 
p_poﬁ
->
BlkSize
 = 0u;

1560 
p_poﬁ
->
BlkNbr
 = 0u;

1561 
p_poﬁ
->
BlkFªeTbl
 = 
DEF_NULL
;

1562 
p_poﬁ
->
BlkFªeTblIx
 = 0u;

1564 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

1565 
	}
}

1597 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

1598 *
	$Mem_PoﬁBlkGë
 (
MEM_POOL
 *
p_poﬁ
,

1599 
CPU_SIZE_T
 
size
,

1600 
LIB_ERR
 *
p_îr
)

1602 
CPU_INT08U
 *
p_blk
;

1603 
	`CPU_SR_ALLOC
();

1606 ()&
size
;

1608 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1609 i‡(
p_îr
 =
DEF_NULL
) {

1610 
	`CPU_SW_EXCEPTION
(
DEF_NULL
);

1613 i‡(
p_poﬁ
 =
DEF_NULL
) {

1614 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

1615  (
DEF_NULL
);

1618 i‡(
size
 < 1u) {

1619 *
p_îr
 = 
LIB_MEM_ERR_INVALID_BLK_SIZE
;

1620  (
DEF_NULL
);

1623 i‡(
size
 > 
p_poﬁ
->
BlkSize
) {

1624 *
p_îr
 = 
LIB_MEM_ERR_INVALID_BLK_SIZE
;

1625  (
DEF_NULL
);

1631 
p_blk
 = 
DEF_NULL
;

1632 
	`CPU_CRITICAL_ENTER
();

1633 i‡(
p_poﬁ
->
BlkFªeTblIx
 > 0u) {

1634 
p_poﬁ
->
BlkFªeTblIx
 -= 1u;

1635 
p_blk
 = 
p_poﬁ
->
BlkFªeTbl
[p_poﬁ->
BlkFªeTblIx
];

1636 
p_poﬁ
->
BlkFªeTbl
[p_poﬁ->
BlkFªeTblIx
] = 
DEF_NULL
;

1638 
	`CPU_CRITICAL_EXIT
();

1640 i‡(
p_blk
 =
DEF_NULL
) {

1641 *
p_îr
 = 
LIB_MEM_ERR_POOL_EMPTY
;

1643 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

1646  (
p_blk
);

1647 
	}
}

1680 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

1681 
	$Mem_PoﬁBlkFªe
 (
MEM_POOL
 *
p_poﬁ
,

1682 *
p_blk
,

1683 
LIB_ERR
 *
p_îr
)

1685 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1686 
CPU_SIZE_T
 
tbl_ix
;

1687 
CPU_BOOLEAN
 
addr_vÆid
;

1689 
	`CPU_SR_ALLOC
();

1692 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1693 i‡(
p_îr
 =
DEF_NULL
) {

1694 
	`CPU_SW_EXCEPTION
(;);

1697 i‡(
p_poﬁ
 =
DEF_NULL
) {

1698 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

1702 i‡(
p_blk
 =
DEF_NULL
) {

1703 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

1707 
addr_vÆid
 = 
	`Mem_PoﬁBlkIsVÆidAddr
(
p_poﬁ
, 
p_blk
);

1708 i‡(
addr_vÆid
 !
DEF_OK
) {

1709 *
p_îr
 = 
LIB_MEM_ERR_INVALID_BLK_ADDR
;

1713 
	`CPU_CRITICAL_ENTER
();

1714 
tbl_ix
 = 0u;Åbl_ix < 
p_poﬁ
->
BlkNbr
;Åbl_ix++) {

1715 i‡(
p_poﬁ
->
BlkFªeTbl
[
tbl_ix
] =
p_blk
) {

1716 
	`CPU_CRITICAL_EXIT
();

1717 *
p_îr
 = 
LIB_MEM_ERR_INVALID_BLK_ADDR_IN_POOL
;

1722 
	`CPU_CRITICAL_ENTER
();

1725 i‡(
p_poﬁ
->
BlkFªeTblIx
 >p_poﬁ->
BlkNbr
) {

1726 
	`CPU_CRITICAL_EXIT
();

1727 *
p_îr
 = 
LIB_MEM_ERR_POOL_FULL
;

1731 
p_poﬁ
->
BlkFªeTbl
[p_poﬁ->
BlkFªeTblIx
] = 
p_blk
;

1732 
p_poﬁ
->
BlkFªeTblIx
 += 1u;

1733 
	`CPU_CRITICAL_EXIT
();

1735 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

1736 
	}
}

1764 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

1765 
MEM_POOL_BLK_QTY
 
	$Mem_PoﬁBlkGëNbrAvaû
 (
MEM_POOL
 *
p_poﬁ
,

1766 
LIB_ERR
 *
p_îr
)

1768 
CPU_SIZE_T
 
nbr_avaû
;

1769 
	`CPU_SR_ALLOC
();

1772 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1774 i‡(
p_îr
 =
DEF_NULL
) {

1775 
	`CPU_SW_EXCEPTION
(0u);

1778 i‡(
p_poﬁ
 =
DEF_NULL
) {

1779 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

1784 
	`CPU_CRITICAL_ENTER
();

1785 
nbr_avaû
 = 
p_poﬁ
->
BlkFªeTblIx
;

1786 
	`CPU_CRITICAL_EXIT
();

1788 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

1790  (
nbr_avaû
);

1791 
	}
}

1840 
	$Mem_DynPoﬁCª©e
 (c⁄° 
CPU_CHAR
 *
p_«me
,

1841 
MEM_DYN_POOL
 *
p_poﬁ
,

1842 
MEM_SEG
 *
p_£g
,

1843 
CPU_SIZE_T
 
blk_size
,

1844 
CPU_SIZE_T
 
blk_Æign
,

1845 
CPU_SIZE_T
 
blk_qty_öô
,

1846 
CPU_SIZE_T
 
blk_qty_max
,

1847 
LIB_ERR
 *
p_îr
)

1849 i‡(
p_£g
 =
DEF_NULL
) {

1850 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

1851 
p_£g
 = &
Mem_SegHóp
;

1853 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

1858 
	`Mem_DynPoﬁCª©eI¡î«l
(
p_«me
,

1859 
p_poﬁ
,

1860 
p_£g
,

1861 
blk_size
,

1862 
blk_Æign
,

1863 
LIB_MEM_PADDING_ALIGN_NONE
,

1864 
blk_qty_öô
,

1865 
blk_qty_max
,

1866 
p_îr
);

1867 
	}
}

1912 
	$Mem_DynPoﬁCª©eHW
 (c⁄° 
CPU_CHAR
 *
p_«me
,

1913 
MEM_DYN_POOL
 *
p_poﬁ
,

1914 
MEM_SEG
 *
p_£g
,

1915 
CPU_SIZE_T
 
blk_size
,

1916 
CPU_SIZE_T
 
blk_Æign
,

1917 
CPU_SIZE_T
 
blk_qty_öô
,

1918 
CPU_SIZE_T
 
blk_qty_max
,

1919 
LIB_ERR
 *
p_îr
)

1921 i‡(
p_£g
 =
DEF_NULL
) {

1922 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

1923 
p_£g
 = &
Mem_SegHóp
;

1925 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

1930 
	`Mem_DynPoﬁCª©eI¡î«l
(
p_«me
,

1931 
p_poﬁ
,

1932 
p_£g
,

1933 
blk_size
,

1934 
blk_Æign
,

1935 
p_£g
->
PaddögAlign
,

1936 
blk_qty_öô
,

1937 
blk_qty_max
,

1938 
p_îr
);

1939 
	}
}

1972 *
	$Mem_DynPoﬁBlkGë
 (
MEM_DYN_POOL
 *
p_poﬁ
,

1973 
LIB_ERR
 *
p_îr
)

1975 *
p_blk
;

1976 c⁄° 
CPU_CHAR
 *
p_poﬁ_«me
;

1977 
	`CPU_SR_ALLOC
();

1980 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1981 i‡(
p_îr
 =
DEF_NULL
) {

1982 
	`CPU_SW_EXCEPTION
(
DEF_NULL
);

1985 i‡(
p_poﬁ
 =
DEF_NULL
) {

1986 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

1987  (
DEF_NULL
);

1992 i‡(
p_poﬁ
->
BlkQtyMax
 !
LIB_MEM_BLK_QTY_UNLIMITED
) {

1993 
	`CPU_CRITICAL_ENTER
();

1994 i‡(
p_poﬁ
->
BlkAŒocC¡
 >p_poﬁ->
BlkQtyMax
) {

1995 
	`CPU_CRITICAL_EXIT
();

1997 *
p_îr
 = 
LIB_MEM_ERR_POOL_EMPTY
;

1998  (
DEF_NULL
);

2001 
p_poﬁ
->
BlkAŒocC¡
++;

2002 
	`CPU_CRITICAL_EXIT
();

2006 
	`CPU_CRITICAL_ENTER
();

2007 i‡(
p_poﬁ
->
BlkFªePå
 !
DEF_NULL
) {

2008 
p_blk
 = 
p_poﬁ
->
BlkFªePå
;

2009 
p_poﬁ
->
BlkFªePå
 = *((**)
p_blk
);

2010 
	`CPU_CRITICAL_EXIT
();

2012 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

2014  (
p_blk
);

2016 
	`CPU_CRITICAL_EXIT
();

2019 #i‡(
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_ENABLED
)

2020 
p_poﬁ_«me
 = 
p_poﬁ
->
NamePå
;

2022 
p_poﬁ_«me
 = 
DEF_NULL
;

2024 
p_blk
 = 
	`Mem_SegAŒocI¡î«l
(
p_poﬁ_«me
,

2025 
p_poﬁ
->
PoﬁSegPå
,

2026 
p_poﬁ
->
BlkSize
,

2027 
p_poﬁ
->
BlkAlign
,

2028 
p_poﬁ
->
BlkPaddögAlign
,

2029 
DEF_NULL
,

2030 
p_îr
);

2031 i‡(*
p_îr
 !
LIB_MEM_ERR_NONE
) {

2032  (
DEF_NULL
);

2035  (
p_blk
);

2036 
	}
}

2063 
	$Mem_DynPoﬁBlkFªe
 (
MEM_DYN_POOL
 *
p_poﬁ
,

2064 *
p_blk
,

2065 
LIB_ERR
 *
p_îr
)

2067 
	`CPU_SR_ALLOC
();

2070 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2071 i‡(
p_îr
 =
DEF_NULL
) {

2072 
	`CPU_SW_EXCEPTION
(;);

2075 i‡(
p_poﬁ
 =
DEF_NULL
) {

2076 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

2080 i‡(
p_blk
 =
DEF_NULL
) {

2081 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

2086 i‡(
p_poﬁ
->
BlkQtyMax
 !
LIB_MEM_BLK_QTY_UNLIMITED
) {

2087 
	`CPU_CRITICAL_ENTER
();

2088 i‡(
p_poﬁ
->
BlkAŒocC¡
 == 0u) {

2089 
	`CPU_CRITICAL_EXIT
();

2091 *
p_îr
 = 
LIB_MEM_ERR_POOL_FULL
;

2095 
p_poﬁ
->
BlkAŒocC¡
--;

2096 
	`CPU_CRITICAL_EXIT
();

2099 
	`CPU_CRITICAL_ENTER
();

2100 *((**)
p_blk
Ë
p_poﬁ
->
BlkFªePå
;

2101 
p_poﬁ
->
BlkFªePå
 = 
p_blk
;

2102 
	`CPU_CRITICAL_EXIT
();

2104 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

2105 
	}
}

2133 
CPU_SIZE_T
 
	$Mem_DynPoﬁBlkNbrAvaûGë
 (
MEM_DYN_POOL
 *
p_poﬁ
,

2134 
LIB_ERR
 *
p_îr
)

2136 
CPU_SIZE_T
 
blk_nbr_avaû
;

2137 
	`CPU_SR_ALLOC
();

2140 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2141 i‡(
p_îr
 =
DEF_NULL
) {

2142 
	`CPU_SW_EXCEPTION
(;);

2145 i‡(
p_poﬁ
 =
DEF_NULL
) {

2146 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

2151 i‡(
p_poﬁ
->
BlkQtyMax
 !
LIB_MEM_BLK_QTY_UNLIMITED
) {

2152 
	`CPU_CRITICAL_ENTER
();

2153 
blk_nbr_avaû
 = 
p_poﬁ
->
BlkQtyMax
 -Ö_poﬁ->
BlkAŒocC¡
;

2154 
	`CPU_CRITICAL_EXIT
();

2156 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

2158 
blk_nbr_avaû
 = 0u;

2159 *
p_îr
 = 
LIB_MEM_ERR_POOL_UNLIMITED
;

2162  (
blk_nbr_avaû
);

2163 
	}
}

2194 #i‡(
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_ENABLED
)

2195 
Mem_OuçutUßge
((*
out_‚˘
Ë(
CPU_CHAR
 *),

2196 
LIB_ERR
 *
p_îr
)

2198 
CPU_CHAR
 
°r
[
DEF_INT_32U_NBR_DIG_MAX
];

2199 
MEM_SEG
 *
p_£g
;

2200 
	`CPU_SR_ALLOC
();

2203 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2204 i‡(
p_îr
 =
DEF_NULL
) {

2205 
	`CPU_SW_EXCEPTION
(;);

2208 i‡(
out_‚˘
 =
DEF_NULL
) {

2209 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

2214 
	`out_‚˘
("---------------- Memoryállocation info ----------------\r\n");

2215 
	`out_‚˘
("| Type | Size | Free size | Name\r\n");

2216 
	`out_‚˘
("|---------|------------|------------|-------------------\r\n");

2218 
	`CPU_CRITICAL_ENTER
();

2219 
p_£g
 = 
Mem_SegHódPå
;

2220 
p_£g
 !
DEF_NULL
) {

2221 
CPU_SIZE_T
 
ªm_size
;

2222 
MEM_SEG_INFO
 
£g_öfo
;

2223 
MEM_ALLOC_INFO
 *
p_Æloc
;

2226 
ªm_size
 = 
	`Mem_SegRemSizeGë
(
p_£g
, 1u, &
£g_öfo
, 
p_îr
);

2227 i‡(*
p_îr
 !
LIB_MEM_ERR_NONE
) {

2231 
	`out_‚˘
("| Section | ");

2233 ()
	`Så_FmtNbr_I¡32U
(
£g_öfo
.
TŸÆSize
,

2235 
DEF_NBR_BASE_DEC
,

2237 
DEF_NO
,

2238 
DEF_YES
,

2239 &
°r
[0u]);

2241 
	`out_‚˘
(
°r
);

2242 
	`out_‚˘
(" | ");

2244 ()
	`Så_FmtNbr_I¡32U
(
ªm_size
,

2246 
DEF_NBR_BASE_DEC
,

2248 
DEF_NO
,

2249 
DEF_YES
,

2250 &
°r
[0u]);

2252 
	`out_‚˘
(
°r
);

2253 
	`out_‚˘
(" | ");

2254 
	`out_‚˘
((
p_£g
->
NamePå
 !
DEF_NULL
Ë? (
CPU_CHAR
 *)p_seg->NamePtr : (CPU_CHAR *)"Unknown");

2255 
	`out_‚˘
("\r\n");

2257 
p_Æloc
 = 
p_£g
->
AŒocInfoHódPå
;

2258 
p_Æloc
 !
DEF_NULL
) {

2259 
	`out_‚˘
("| -> Obj | ");

2261 ()
	`Så_FmtNbr_I¡32U
(
p_Æloc
->
Size
,

2263 
DEF_NBR_BASE_DEC
,

2265 
DEF_NO
,

2266 
DEF_YES
,

2267 &
°r
[0u]);

2269 
	`out_‚˘
(
°r
);

2270 
	`out_‚˘
(" | | ");

2272 
	`out_‚˘
((
p_Æloc
->
NamePå
 !
DEF_NULL
Ë? (
CPU_CHAR
 *)p_alloc->NamePtr : (CPU_CHAR *)"Unknown");

2273 
	`out_‚˘
("\r\n");

2275 
p_Æloc
 =Ö_Æloc->
NextPå
;

2278 
p_£g
 =Ö_£g->
NextPå
;

2280 
	`CPU_CRITICAL_EXIT
();

2282 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

2283 
	}
}

2327 
	$Mem_SegCª©eCrôiˇl
(c⁄° 
CPU_CHAR
 *
p_«me
,

2328 
MEM_SEG
 *
p_£g
,

2329 
CPU_ADDR
 
£g_ba£_addr
,

2330 
CPU_SIZE_T
 
∑ddög_Æign
,

2331 
CPU_SIZE_T
 
size
)

2333 
p_£g
->
AddrBa£
 = 
£g_ba£_addr
;

2334 
p_£g
->
AddrEnd
 = (
£g_ba£_addr
 + (
size
 - 1u));

2335 
p_£g
->
AddrNext
 = 
£g_ba£_addr
;

2336 
p_£g
->
NextPå
 = 
Mem_SegHódPå
;

2337 
p_£g
->
PaddögAlign
 = 
∑ddög_Æign
;

2339 #i‡(
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_ENABLED
)

2340 
p_£g
->
NamePå
 = 
p_«me
;

2341 
p_£g
->
AŒocInfoHódPå
 = 
DEF_NULL
;

2343 ()&
p_«me
;

2346 
Mem_SegHódPå
 = 
p_£g
;

2347 
	}
}

2376 
MEM_SEG
 *
	$Mem_SegOvîœpChkCrôiˇl
 (
CPU_ADDR
 
£g_ba£_addr
,

2377 
CPU_SIZE_T
 
size
,

2378 
LIB_ERR
 *
p_îr
)

2380 
MEM_SEG
 *
p_£g_chk
;

2381 
CPU_ADDR
 
£g_√w_íd
;

2382 
CPU_ADDR
 
£g_chk_°¨t
;

2383 
CPU_ADDR
 
£g_chk_íd
;

2386 
£g_√w_íd
 = 
£g_ba£_addr
 + (
size
 - 1u);

2387 
p_£g_chk
 = 
Mem_SegHódPå
;

2389 
p_£g_chk
 !
DEF_NULL
) {

2390 
£g_chk_°¨t
 = (
CPU_ADDR
)
p_£g_chk
->
AddrBa£
;

2391 
£g_chk_íd
 = (
CPU_ADDR
)
p_£g_chk
->
AddrEnd
;

2393 i‡((
£g_ba£_addr
 =
£g_chk_°¨t
Ë&& (
£g_√w_íd
 =
£g_chk_íd
)) {

2394 *
p_îr
 = 
LIB_MEM_ERR_INVALID_SEG_EXISTS
;

2395  (
p_£g_chk
);

2396 } i‡(((
£g_ba£_addr
 >
£g_chk_°¨t
Ë&& (£g_ba£_add∏<
£g_chk_íd
)) ||

2397 ((
£g_ba£_addr
 <
£g_chk_°¨t
Ë&& (
£g_√w_íd
 >= seg_chk_start))) {

2398 *
p_îr
 = 
LIB_MEM_ERR_INVALID_SEG_OVERLAP
;

2399  (
p_£g_chk
);

2402 
p_£g_chk
 =Ö_£g_chk->
NextPå
;

2405 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

2407  (
DEF_NULL
);

2408 
	}
}

2458 *
	$Mem_SegAŒocI¡î«l
 (c⁄° 
CPU_CHAR
 *
p_«me
,

2459 
MEM_SEG
 *
p_£g
,

2460 
CPU_SIZE_T
 
size
,

2461 
CPU_SIZE_T
 
Æign
,

2462 
CPU_SIZE_T
 
∑ddög_Æign
,

2463 
CPU_SIZE_T
 *
p_byãs_ªqd
,

2464 
LIB_ERR
 *
p_îr
)

2466 *
p_blk
;

2467 
	`CPU_SR_ALLOC
();

2470 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2471 i‡(
p_îr
 =
DEF_NULL
) {

2472 
	`CPU_SW_EXCEPTION
(
DEF_NULL
);

2475 i‡(
size
 < 1u) {

2476 *
p_îr
 = 
LIB_MEM_ERR_INVALID_MEM_SIZE
;

2477  (
DEF_NULL
);

2480 i‡(
	`MATH_IS_PWR2
(
Æign
Ë!
DEF_YES
) {

2481 *
p_îr
 = 
LIB_MEM_ERR_INVALID_MEM_ALIGN
;

2482  (
DEF_NULL
);

2486 
	`CPU_CRITICAL_ENTER
();

2487 
p_blk
 = 
	`Mem_SegAŒocExtCrôiˇl
(
p_£g
,

2488 
size
,

2489 
Æign
,

2490 
∑ddög_Æign
,

2491 
p_byãs_ªqd
,

2492 
p_îr
);

2493 i‡(*
p_îr
 !
LIB_MEM_ERR_NONE
) {

2494 
	`CPU_CRITICAL_EXIT
();

2495  (
DEF_NULL
);

2498 #i‡(
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_ENABLED
)

2499 
	`Mem_SegAŒocTøckCrôiˇl
(
p_«me
,

2500 
p_£g
,

2501 
size
,

2502 
p_îr
);

2503 i‡(*
p_îr
 !
LIB_MEM_ERR_NONE
) {

2504 
	`CPU_CRITICAL_EXIT
();

2505  (
DEF_NULL
);

2508 ()&
p_«me
;

2510 
	`CPU_CRITICAL_EXIT
();

2512  (
p_blk
);

2513 
	}
}

2551 *
	$Mem_SegAŒocExtCrôiˇl
 (
MEM_SEG
 *
p_£g
,

2552 
CPU_SIZE_T
 
size
,

2553 
CPU_SIZE_T
 
Æign
,

2554 
CPU_SIZE_T
 
∑ddög_Æign
,

2555 
CPU_SIZE_T
 *
p_byãs_ªqd
,

2556 
LIB_ERR
 *
p_îr
)

2558 
CPU_ADDR
 
blk_addr
;

2559 
CPU_ADDR
 
addr_√xt
;

2560 
CPU_SIZE_T
 
size_ªm_£g
;

2561 
CPU_SIZE_T
 
size_tŸ_blk
;

2562 
CPU_SIZE_T
 
blk_Æign
 = 
	`DEF_MAX
(
Æign
, 
∑ddög_Æign
);

2565 
blk_addr
 = 
	`MATH_ROUND_INC_UP_PWR2
(
p_£g
->
AddrNext
,

2566 
blk_Æign
);

2567 
addr_√xt
 = 
	`MATH_ROUND_INC_UP_PWR2
(
blk_addr
 + 
size
,

2568 
∑ddög_Æign
);

2569 
size_ªm_£g
 = 
p_£g
->
AddrEnd
 -Ö_£g->
AddrNext
 + 1u;

2570 
size_tŸ_blk
 = 
addr_√xt
 - 
p_£g
->
AddrNext
;

2571 i‡(
size_ªm_£g
 < 
size_tŸ_blk
) {

2572 i‡(
p_byãs_ªqd
 !
DEF_NULL
) {

2573 *
p_byãs_ªqd
 = 
size_tŸ_blk
 - 
size_ªm_£g
;

2576 *
p_îr
 = 
LIB_MEM_ERR_SEG_OVF
;

2577  (
DEF_NULL
);

2580 
p_£g
->
AddrNext
 = 
addr_√xt
;

2582 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

2584  ((*)
blk_addr
);

2585 
	}
}

2617 #i‡(
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_ENABLED
)

2618 
	$Mem_SegAŒocTøckCrôiˇl
 (c⁄° 
CPU_CHAR
 *
p_«me
,

2619 
MEM_SEG
 *
p_£g
,

2620 
CPU_SIZE_T
 
size
,

2621 
LIB_ERR
 *
p_îr
)

2623 
MEM_ALLOC_INFO
 *
p_Æloc
;

2627 
p_Æloc
 = 
p_£g
->
AŒocInfoHódPå
;

2628 
p_Æloc
 !
DEF_NULL
) {

2629 i‡(
p_Æloc
->
NamePå
 =
p_«me
) {

2630 
p_Æloc
->
Size
 +
size
;

2631 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

2635 
p_Æloc
 =Ö_Æloc->
NextPå
;

2639 
p_Æloc
 = 
	`Mem_SegAŒocExtCrôiˇl
(&
Mem_SegHóp
,

2640 (
MEM_ALLOC_INFO
),

2641 (
CPU_ALIGN
),

2642 
LIB_MEM_PADDING_ALIGN_NONE
,

2643 
DEF_NULL
,

2644 
p_îr
);

2645 i‡(*
p_îr
 !
LIB_MEM_ERR_NONE
) {

2649 
p_Æloc
->
NamePå
 = 
p_«me
;

2650 
p_Æloc
->
Size
 = 
size
;

2652 
p_Æloc
->
NextPå
 = 
p_£g
->
AŒocInfoHódPå
;

2653 
p_£g
->
AŒocInfoHódPå
 = 
p_Æloc
;

2654 
	}
}

2706 
	$Mem_DynPoﬁCª©eI¡î«l
 (c⁄° 
CPU_CHAR
 *
p_«me
,

2707 
MEM_DYN_POOL
 *
p_poﬁ
,

2708 
MEM_SEG
 *
p_£g
,

2709 
CPU_SIZE_T
 
blk_size
,

2710 
CPU_SIZE_T
 
blk_Æign
,

2711 
CPU_SIZE_T
 
blk_∑ddög_Æign
,

2712 
CPU_SIZE_T
 
blk_qty_öô
,

2713 
CPU_SIZE_T
 
blk_qty_max
,

2714 
LIB_ERR
 *
p_îr
)

2716 
CPU_INT08U
 *
p_blks
;

2717 
CPU_SIZE_T
 
blk_size_Æign
;

2718 
CPU_SIZE_T
 
blk_Æign_w‹°
 = 
	`DEF_MAX
(
blk_Æign
, 
blk_∑ddög_Æign
);

2721 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2722 i‡(
p_îr
 =
DEF_NULL
) {

2723 
	`CPU_SW_EXCEPTION
(
DEF_NULL
);

2726 i‡(
p_poﬁ
 =
DEF_NULL
) {

2727 *
p_îr
 = 
LIB_MEM_ERR_NULL_PTR
;

2731 i‡(
blk_size
 < 1u) {

2732 *
p_îr
 = 
LIB_MEM_ERR_INVALID_BLK_SIZE
;

2736 i‡((
blk_qty_max
 !
LIB_MEM_BLK_QTY_UNLIMITED
) &&

2737 (
blk_qty_öô
 > 
blk_qty_max
)) {

2738 *
p_îr
 = 
LIB_MEM_ERR_INVALID_BLK_NBR
;

2742 i‡(
	`MATH_IS_PWR2
(
blk_Æign
Ë!
DEF_YES
) {

2743 *
p_îr
 = 
LIB_MEM_ERR_INVALID_BLK_ALIGN
;

2749 i‡(
blk_size
 < (*)) {

2751 
blk_size_Æign
 = 
	`MATH_ROUND_INC_UP_PWR2
((*), 
blk_Æign_w‹°
);

2753 
blk_size_Æign
 = 
	`MATH_ROUND_INC_UP_PWR2
(
blk_size
, 
blk_Æign_w‹°
);

2756 i‡(
blk_qty_öô
 != 0u) {

2757 
p_blks
 = (
CPU_INT08U
 *)
	`Mem_SegAŒocI¡î«l
(
p_«me
,

2758 
p_£g
,

2759 
blk_size_Æign
 * 
blk_qty_öô
,

2760 
blk_Æign_w‹°
,

2761 
LIB_MEM_PADDING_ALIGN_NONE
,

2762 
DEF_NULL
,

2763 
p_îr
);

2764 i‡(*
p_îr
 !
LIB_MEM_ERR_NONE
) {

2771 
p_poﬁ
->
PoﬁSegPå
 = 
p_£g
;

2772 
p_poﬁ
->
BlkSize
 = 
blk_size
;

2773 
p_poﬁ
->
BlkAlign
 = 
blk_Æign_w‹°
;

2774 
p_poﬁ
->
BlkPaddögAlign
 = 
blk_∑ddög_Æign
;

2775 
p_poﬁ
->
BlkQtyMax
 = 
blk_qty_max
;

2776 
p_poﬁ
->
BlkAŒocC¡
 = 0u;

2778 i‡(
blk_qty_öô
 != 0u) {

2779 
CPU_SIZE_T
 
i
;

2782 
p_poﬁ
->
BlkFªePå
 = (*)
p_blks
;

2783 
i
 = 0u; i < 
blk_qty_öô
 - 1u; i++) {

2784 *((**)
p_blks
Ëp_blk†+ 
blk_size_Æign
;

2785 
p_blks
 +
blk_size_Æign
;

2787 *((**)
p_blks
Ë
DEF_NULL
;

2789 
p_poﬁ
->
BlkFªePå
 = 
DEF_NULL
;

2792 #i‡(
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_ENABLED
)

2793 
p_poﬁ
->
NamePå
 = 
p_«me
;

2796 *
p_îr
 = 
LIB_MEM_ERR_NONE
;

2797 
	}
}

2822 #i‡((
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
) && \

2823 (
	gLIB_MEM_CFG_HEAP_SIZE
 > 0u))

2824 
CPU_BOOLEAN
 
	$Mem_PoﬁBlkIsVÆidAddr
 (
MEM_POOL
 *
p_poﬁ
,

2825 *
p_mem
)

2827 
CPU_ADDR
 
poﬁ_off£t
;

2830 i‡((
p_mem
 < 
p_poﬁ
->
PoﬁAddrSèπ
) ||

2831 (
p_mem
 > 
p_poﬁ
->
PoﬁAddrEnd
)) {

2832  (
DEF_FALSE
);

2835 
poﬁ_off£t
 = (
CPU_ADDR
)
p_mem
 - (CPU_ADDR)
p_poﬁ
->
PoﬁAddrSèπ
;

2836 i‡(
poﬁ_off£t
 % 
p_poﬁ
->
BlkSize
 != 0u) {

2837  (
DEF_FALSE
);

2839  (
DEF_TRUE
);

2841 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_mem.h

69 #i‚de‡ 
LIB_MEM_MODULE_PRESENT


70 
	#LIB_MEM_MODULE_PRESENT


	)

110 
	~<˝u.h
>

111 
	~<˝u_c‹e.h
>

113 
	~<lib_def.h
>

114 
	~<lib_cfg.h
>

123 #ifde‡ 
LIB_MEM_MODULE


124 
	#LIB_MEM_EXT


	)

126 
	#LIB_MEM_EXT
 

	)

136 
	#LIB_MEM_PADDING_ALIGN_NONE
 1u

	)

138 
	#LIB_MEM_BLK_QTY_UNLIMITED
 0u

	)

163 #i‚de‡ 
LIB_MEM_CFG_ARG_CHK_EXT_EN


164 
	#LIB_MEM_CFG_ARG_CHK_EXT_EN
 
DEF_DISABLED


	)

180 #i‚de‡ 
LIB_MEM_CFG_OPTIMIZE_ASM_EN


181 
	#LIB_MEM_CFG_OPTIMIZE_ASM_EN
 
DEF_DISABLED


	)

196 #i‚de‡ 
LIB_MEM_CFG_DBG_INFO_EN


197 
	#LIB_MEM_CFG_DBG_INFO_EN
 
DEF_DISABLED


	)

210 #i‚de‡ 
LIB_MEM_CFG_HEAP_PADDING_ALIGN


211 
	#LIB_MEM_CFG_HEAP_PADDING_ALIGN
 
LIB_MEM_PADDING_ALIGN_NONE


	)

230 
CPU_INT32U
 
	tLIB_MEM_TYPE
;

239 
CPU_SIZE_T
 
	tMEM_POOL_BLK_QTY
;

248 
MEM_POOL_BLK_QTY
 
	tMEM_POOL_IX
;

257 #i‡(
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_ENABLED
)

258 
mem_Æloc_öfo
 
	tMEM_ALLOC_INFO
;

260 
	smem_Æloc_öfo
 {

261 c⁄° 
CPU_CHAR
 *
	mNamePå
;

262 
CPU_SIZE_T
 
	mSize
;

263 
MEM_ALLOC_INFO
 *
	mNextPå
;

274 
mem_£g
 
	tMEM_SEG
;

276 
	smem_£g
 {

277 
CPU_ADDR
 
	mAddrBa£
;

278 
CPU_ADDR
 
	mAddrEnd
;

279 
CPU_ADDR
 
	mAddrNext
;

281 
MEM_SEG
 *
	mNextPå
;

283 
CPU_SIZE_T
 
	mPaddögAlign
;

285 #i‡(
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_ENABLED
)

286 c⁄° 
CPU_CHAR
 *
	mNamePå
;

287 
MEM_ALLOC_INFO
 *
	mAŒocInfoHódPå
;

291 
	smem_£g_öfo
 {

292 
CPU_SIZE_T
 
	mU£dSize
;

293 
CPU_SIZE_T
 
	mTŸÆSize
;

295 
CPU_ADDR
 
	mAddrBa£
;

296 
CPU_ADDR
 
	mAddrNextAŒoc
;

297 } 
	tMEM_SEG_INFO
;

325 
	smem_poﬁ
 {

326 *
	mPoﬁAddrSèπ
;

327 *
	mPoﬁAddrEnd
;

328 
MEM_POOL_BLK_QTY
 
	mBlkNbr
;

329 
CPU_SIZE_T
 
	mBlkSize
;

330 **
	mBlkFªeTbl
;

331 
CPU_SIZE_T
 
	mBlkFªeTblIx
;

332 } 
	tMEM_POOL
;

358 
	smem_dyn_poﬁ
 {

359 
MEM_SEG
 *
	mPoﬁSegPå
;

360 
CPU_SIZE_T
 
	mBlkSize
;

361 
CPU_SIZE_T
 
	mBlkAlign
;

362 
CPU_SIZE_T
 
	mBlkPaddögAlign
;

363 *
	mBlkFªePå
;

365 
CPU_SIZE_T
 
	mBlkQtyMax
;

366 
CPU_SIZE_T
 
	mBlkAŒocC¡
;

368 #i‡(
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_ENABLED
)

369 c⁄° 
CPU_CHAR
 *
	mNamePå
;

371 } 
	tMEM_DYN_POOL
;

460 #i‡ ((
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_64
) || \

461 (
	gCPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
))

463 
	#MEM_VAL_BIG_TO_LITTLE_16
(
vÆ
Ë((
CPU_INT16U
)(((CPU_INT16U)((((CPU_INT16U)(vÆ)Ë& (CPU_INT16UË0xFF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

464 ((
CPU_INT16U
)((((CPU_INT16U)(
vÆ
)Ë& (CPU_INT16UË0x00FFuË<< (1u * 
DEF_OCTET_NBR_BITS
)))))

	)

466 
	#MEM_VAL_BIG_TO_LITTLE_32
(
vÆ
Ë((
CPU_INT32U
)(((CPU_INT32U)((((CPU_INT32U)(vÆ)Ë& (CPU_INT32U)0xFF000000uË>> (3u * 
DEF_OCTET_NBR_BITS
))) | \

467 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x00FF0000uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

468 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x0000FF00uË<< (1u * 
DEF_OCTET_NBR_BITS
))) | \

469 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x000000FFuË<< (3u * 
DEF_OCTET_NBR_BITS
)))))

	)

471 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

473 
	#MEM_VAL_BIG_TO_LITTLE_16
(
vÆ
Ë((
CPU_INT16U
)(((CPU_INT16U)((((CPU_INT16U)(vÆ)Ë& (CPU_INT16UË0xFF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

474 ((
CPU_INT16U
)((((CPU_INT16U)(
vÆ
)Ë& (CPU_INT16UË0x00FFuË<< (1u * 
DEF_OCTET_NBR_BITS
)))))

	)

476 
	#MEM_VAL_BIG_TO_LITTLE_32
(
vÆ
Ë((
CPU_INT32U
)(((CPU_INT32U)((((CPU_INT32U)(vÆ)Ë& (CPU_INT32U)0xFF000000uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

477 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x00FF0000uË<< (1u * 
DEF_OCTET_NBR_BITS
))) | \

478 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x0000FF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

479 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x000000FFuË<< (1u * 
DEF_OCTET_NBR_BITS
)))))

	)

483 
	#MEM_VAL_BIG_TO_LITTLE_16
(
vÆ
Ë(vÆ)

	)

484 
	#MEM_VAL_BIG_TO_LITTLE_32
(
vÆ
Ë(vÆ)

	)

489 
	#MEM_VAL_LITTLE_TO_BIG_16
(
vÆ
Ë
	`MEM_VAL_BIG_TO_LITTLE_16
(vÆ)

	)

490 
	#MEM_VAL_LITTLE_TO_BIG_32
(
vÆ
Ë
	`MEM_VAL_BIG_TO_LITTLE_32
(vÆ)

	)

494 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

496 
	#MEM_VAL_BIG_TO_HOST_16
(
vÆ
Ë(vÆ)

	)

497 
	#MEM_VAL_BIG_TO_HOST_32
(
vÆ
Ë(vÆ)

	)

498 
	#MEM_VAL_LITTLE_TO_HOST_16
(
vÆ
Ë
	`MEM_VAL_LITTLE_TO_BIG_16
(vÆ)

	)

499 
	#MEM_VAL_LITTLE_TO_HOST_32
(
vÆ
Ë
	`MEM_VAL_LITTLE_TO_BIG_32
(vÆ)

	)

501 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

503 
	#MEM_VAL_BIG_TO_HOST_16
(
vÆ
Ë
	`MEM_VAL_BIG_TO_LITTLE_16
(vÆ)

	)

504 
	#MEM_VAL_BIG_TO_HOST_32
(
vÆ
Ë
	`MEM_VAL_BIG_TO_LITTLE_32
(vÆ)

	)

505 
	#MEM_VAL_LITTLE_TO_HOST_16
(
vÆ
Ë(vÆ)

	)

506 
	#MEM_VAL_LITTLE_TO_HOST_32
(
vÆ
Ë(vÆ)

	)

516 
	#MEM_VAL_HOST_TO_BIG_16
(
vÆ
Ë
	`MEM_VAL_BIG_TO_HOST_16
(vÆ)

	)

517 
	#MEM_VAL_HOST_TO_BIG_32
(
vÆ
Ë
	`MEM_VAL_BIG_TO_HOST_32
(vÆ)

	)

518 
	#MEM_VAL_HOST_TO_LITTLE_16
(
vÆ
Ë
	`MEM_VAL_LITTLE_TO_HOST_16
(vÆ)

	)

519 
	#MEM_VAL_HOST_TO_LITTLE_32
(
vÆ
Ë
	`MEM_VAL_LITTLE_TO_HOST_32
(vÆ)

	)

573 
	#MEM_VAL_GET_INT08U_BIG
(
addr
Ë((
CPU_INT08U
Ë((CPU_INT08U)(((CPU_INT08U)(*(((CPU_INT08U *)◊ddr)Ë+ 0))Ë<< (0u * 
DEF_OCTET_NBR_BITS
))))

	)

575 
	#MEM_VAL_GET_INT16U_BIG
(
addr
Ë((
CPU_INT16U
)(((CPU_INT16U)(((CPU_INT16U)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (1u * 
DEF_OCTET_NBR_BITS
))) + \

576 ((
CPU_INT16U
)(((CPU_INT16U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (0u * 
DEF_OCTET_NBR_BITS
)))))

	)

578 
	#MEM_VAL_GET_INT32U_BIG
(
addr
Ë((
CPU_INT32U
)(((CPU_INT32U)(((CPU_INT32U)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (3u * 
DEF_OCTET_NBR_BITS
))) + \

579 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (2u * 
DEF_OCTET_NBR_BITS
))) + \

580 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 2))Ë<< (1u * 
DEF_OCTET_NBR_BITS
))) + \

581 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 3))Ë<< (0u * 
DEF_OCTET_NBR_BITS
)))))

	)

585 
	#MEM_VAL_GET_INT08U_LITTLE
(
addr
Ë((
CPU_INT08U
Ë((CPU_INT08U)(((CPU_INT08U)(*(((CPU_INT08U *)◊ddr)Ë+ 0))Ë<< (0u * 
DEF_OCTET_NBR_BITS
))))

	)

587 
	#MEM_VAL_GET_INT16U_LITTLE
(
addr
Ë((
CPU_INT16U
)(((CPU_INT16U)(((CPU_INT16U)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (0u * 
DEF_OCTET_NBR_BITS
))) + \

588 ((
CPU_INT16U
)(((CPU_INT16U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (1u * 
DEF_OCTET_NBR_BITS
)))))

	)

590 
	#MEM_VAL_GET_INT32U_LITTLE
(
addr
Ë((
CPU_INT32U
)(((CPU_INT32U)(((CPU_INT32U)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (0u * 
DEF_OCTET_NBR_BITS
))) + \

591 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (1u * 
DEF_OCTET_NBR_BITS
))) + \

592 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 2))Ë<< (2u * 
DEF_OCTET_NBR_BITS
))) + \

593 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 3))Ë<< (3u * 
DEF_OCTET_NBR_BITS
)))))

	)

597 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

599 
	#MEM_VAL_GET_INT08U
(
addr
Ë
	`MEM_VAL_GET_INT08U_BIG
◊ddr)

	)

600 
	#MEM_VAL_GET_INT16U
(
addr
Ë
	`MEM_VAL_GET_INT16U_BIG
◊ddr)

	)

601 
	#MEM_VAL_GET_INT32U
(
addr
Ë
	`MEM_VAL_GET_INT32U_BIG
◊ddr)

	)

603 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

605 
	#MEM_VAL_GET_INT08U
(
addr
Ë
	`MEM_VAL_GET_INT08U_LITTLE
◊ddr)

	)

606 
	#MEM_VAL_GET_INT16U
(
addr
Ë
	`MEM_VAL_GET_INT16U_LITTLE
◊ddr)

	)

607 
	#MEM_VAL_GET_INT32U
(
addr
Ë
	`MEM_VAL_GET_INT32U_LITTLE
◊ddr)

	)

669 
	#MEM_VAL_SET_INT08U_BIG
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((CPU_INT08U)(vÆ)Ë& (CPU_INT08UË0xFFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

671 
	#MEM_VAL_SET_INT16U_BIG
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT16U
)(vÆ)Ë& (CPU_INT16UË0xFF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))); \

672 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT16U
)(
vÆ
)Ë& (CPU_INT16UË0x00FFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

674 
	#MEM_VAL_SET_INT32U_BIG
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT32U
)(vÆ)Ë& (CPU_INT32U)0xFF000000uË>> (3u * 
DEF_OCTET_NBR_BITS
))); \

675 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x00FF0000uË>> (2u * 
DEF_OCTET_NBR_BITS
))); \

676 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 2)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x0000FF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))); \

677 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 3)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x000000FFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

681 
	#MEM_VAL_SET_INT08U_LITTLE
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((CPU_INT08U)(vÆ)Ë& (CPU_INT08UË0xFFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

683 
	#MEM_VAL_SET_INT16U_LITTLE
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT16U
)(vÆ)Ë& (CPU_INT16UË0x00FFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); \

684 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT16U
)(
vÆ
)Ë& (CPU_INT16UË0xFF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

686 
	#MEM_VAL_SET_INT32U_LITTLE
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT32U
)(vÆ)Ë& (CPU_INT32U)0x000000FFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); \

687 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x0000FF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))); \

688 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 2)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x00FF0000uË>> (2u * 
DEF_OCTET_NBR_BITS
))); \

689 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 3)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0xFF000000uË>> (3u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

693 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

695 
	#MEM_VAL_SET_INT08U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT08U_BIG
◊ddr, vÆ)

	)

696 
	#MEM_VAL_SET_INT16U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT16U_BIG
◊ddr, vÆ)

	)

697 
	#MEM_VAL_SET_INT32U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT32U_BIG
◊ddr, vÆ)

	)

699 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

701 
	#MEM_VAL_SET_INT08U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT08U_LITTLE
◊ddr, vÆ)

	)

702 
	#MEM_VAL_SET_INT16U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT16U_LITTLE
◊ddr, vÆ)

	)

703 
	#MEM_VAL_SET_INT32U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT32U_LITTLE
◊ddr, vÆ)

	)

775 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

778 
	#MEM_VAL_COPY_GET_INT08U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

780 
	#MEM_VAL_COPY_GET_INT16U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

781 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 1)); } 0)

	)

783 
	#MEM_VAL_COPY_GET_INT32U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

784 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

785 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

786 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 3)); } 0)

	)

790 
	#MEM_VAL_COPY_GET_INT08U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

792 
	#MEM_VAL_COPY_GET_INT16U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \

793 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); } 0)

	)

795 
	#MEM_VAL_COPY_GET_INT32U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \

796 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

797 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

798 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); } 0)

	)

802 
	#MEM_VAL_COPY_GET_INT08U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_BIG
◊ddr_de°,áddr_§c)

	)

803 
	#MEM_VAL_COPY_GET_INT16U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_BIG
◊ddr_de°,áddr_§c)

	)

804 
	#MEM_VAL_COPY_GET_INT32U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_BIG
◊ddr_de°,áddr_§c)

	)

809 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

812 
	#MEM_VAL_COPY_GET_INT08U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

814 
	#MEM_VAL_COPY_GET_INT16U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \

815 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); } 0)

	)

817 
	#MEM_VAL_COPY_GET_INT32U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \

818 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

819 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

820 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); } 0)

	)

824 
	#MEM_VAL_COPY_GET_INT08U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

826 
	#MEM_VAL_COPY_GET_INT16U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

827 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 1)); } 0)

	)

829 
	#MEM_VAL_COPY_GET_INT32U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

830 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

831 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

832 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 3)); } 0)

	)

836 
	#MEM_VAL_COPY_GET_INT08U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_LITTLE
◊ddr_de°,áddr_§c)

	)

837 
	#MEM_VAL_COPY_GET_INT16U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_LITTLE
◊ddr_de°,áddr_§c)

	)

838 
	#MEM_VAL_COPY_GET_INT32U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_LITTLE
◊ddr_de°,áddr_§c)

	)

923 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

926 
	#MEM_VAL_COPY_GET_INTU_BIG
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

927 
CPU_SIZE_T
 
_i
; \

929 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

930 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)) + _i)); \

932 } 0)

	)

935 
	#MEM_VAL_COPY_GET_INTU_LITTLE
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

936 
CPU_SIZE_T
 
_i
; \

937 
CPU_SIZE_T
 
_j
; \

940 
_j
 = (
vÆ_size
) - 1; \

942 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

943 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 
_j
)); \

944 
_j
--; \

946 } 0)

	)

949 
	#MEM_VAL_COPY_GET_INTU
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU_BIG
◊ddr_de°,áddr_§c, vÆ_size)

	)

954 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

957 
	#MEM_VAL_COPY_GET_INTU_BIG
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

958 
CPU_SIZE_T
 
_i
; \

959 
CPU_SIZE_T
 
_j
; \

962 
_j
 = (
vÆ_size
) - 1; \

964 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

965 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 
_j
)); \

966 
_j
--; \

968 } 0)

	)

971 
	#MEM_VAL_COPY_GET_INTU_LITTLE
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

972 
CPU_SIZE_T
 
_i
; \

974 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

975 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)) + _i)); \

977 } 0)

	)

980 
	#MEM_VAL_COPY_GET_INTU
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU_LITTLE
◊ddr_de°,áddr_§c, vÆ_size)

	)

1050 
	#MEM_VAL_COPY_SET_INT08U_BIG
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_BIG
◊ddr_de°,áddr_§c)

	)

1051 
	#MEM_VAL_COPY_SET_INT16U_BIG
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_BIG
◊ddr_de°,áddr_§c)

	)

1052 
	#MEM_VAL_COPY_SET_INT32U_BIG
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_BIG
◊ddr_de°,áddr_§c)

	)

1054 
	#MEM_VAL_COPY_SET_INT08U_LITTLE
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_LITTLE
◊ddr_de°,áddr_§c)

	)

1055 
	#MEM_VAL_COPY_SET_INT16U_LITTLE
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_LITTLE
◊ddr_de°,áddr_§c)

	)

1056 
	#MEM_VAL_COPY_SET_INT32U_LITTLE
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_LITTLE
◊ddr_de°,áddr_§c)

	)

1059 
	#MEM_VAL_COPY_SET_INT08U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U
◊ddr_de°,áddr_§c)

	)

1060 
	#MEM_VAL_COPY_SET_INT16U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U
◊ddr_de°,áddr_§c)

	)

1061 
	#MEM_VAL_COPY_SET_INT32U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U
◊ddr_de°,áddr_§c)

	)

1124 
	#MEM_VAL_COPY_SET_INTU_BIG
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU_BIG
◊ddr_de°,áddr_§c, vÆ_size)

	)

1125 
	#MEM_VAL_COPY_SET_INTU_LITTLE
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU_LITTLE
◊ddr_de°,áddr_§c, vÆ_size)

	)

1126 
	#MEM_VAL_COPY_SET_INTU
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU
◊ddr_de°,áddr_§c, vÆ_size)

	)

1177 
	#MEM_VAL_COPY_08
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

1179 
	#MEM_VAL_COPY_16
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

1180 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 1)); } 0)

	)

1182 
	#MEM_VAL_COPY_32
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

1183 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

1184 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

1185 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 3)); } 0)

	)

1188 
	#MEM_VAL_COPY
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

1189 
CPU_SIZE_T
 
_i
; \

1191 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

1192 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)) +_i)); \

1194 } 0)

	)

1203 
Mem_Inô
 ( );

1206 
Mem_CÃ
 ( *
pmem
,

1207 
CPU_SIZE_T
 
size
);

1209 
Mem_Së
 ( *
pmem
,

1210 
CPU_INT08U
 
d©a_vÆ
,

1211 
CPU_SIZE_T
 
size
);

1213 
Mem_C›y
 ( *
pde°
,

1214 c⁄° *
p§c
,

1215 
CPU_SIZE_T
 
size
);

1217 
Mem_Move
 ( *
pde°
,

1218 c⁄° *
p§c
,

1219 
CPU_SIZE_T
 
size
);

1221 
CPU_BOOLEAN
 
Mem_Cmp
 (c⁄° *
p1_mem
,

1222 c⁄° *
p2_mem
,

1223 
CPU_SIZE_T
 
size
);

1227 #i‡(
LIB_MEM_CFG_HEAP_SIZE
 > 0u)

1228 *
Mem_HópAŒoc
 ( 
CPU_SIZE_T
 
size
,

1229 
CPU_SIZE_T
 
Æign
,

1230 
CPU_SIZE_T
 *
p_byãs_ªqd
,

1231 
LIB_ERR
 *
p_îr
);

1233 
CPU_SIZE_T
 
Mem_HópGëSizeRem
 ( CPU_SIZE_T 
Æign
,

1234 
LIB_ERR
 *
p_îr
);

1238 
Mem_SegCª©e
 (c⁄° 
CPU_CHAR
 *
p_«me
,

1239 
MEM_SEG
 *
p_£g
,

1240 
CPU_ADDR
 
£g_ba£_addr
,

1241 
CPU_SIZE_T
 
size
,

1242 
CPU_SIZE_T
 
∑ddög_Æign
,

1243 
LIB_ERR
 *
p_îr
);

1245 
Mem_SegCÃ
 ( 
MEM_SEG
 *
p_£g
,

1246 
LIB_ERR
 *
p_îr
);

1248 *
Mem_SegAŒoc
 (c⁄° 
CPU_CHAR
 *
p_«me
,

1249 
MEM_SEG
 *
p_£g
,

1250 
CPU_SIZE_T
 
size
,

1251 
LIB_ERR
 *
p_îr
);

1253 *
Mem_SegAŒocExt
 (c⁄° 
CPU_CHAR
 *
p_«me
,

1254 
MEM_SEG
 *
p_£g
,

1255 
CPU_SIZE_T
 
size
,

1256 
CPU_SIZE_T
 
Æign
,

1257 
CPU_SIZE_T
 *
p_byãs_ªqd
,

1258 
LIB_ERR
 *
p_îr
);

1260 *
Mem_SegAŒocHW
 (c⁄° 
CPU_CHAR
 *
p_«me
,

1261 
MEM_SEG
 *
p_£g
,

1262 
CPU_SIZE_T
 
size
,

1263 
CPU_SIZE_T
 
Æign
,

1264 
CPU_SIZE_T
 *
p_byãs_ªqd
,

1265 
LIB_ERR
 *
p_îr
);

1267 
CPU_SIZE_T
 
Mem_SegRemSizeGë
 ( 
MEM_SEG
 *
p_£g
,

1268 
CPU_SIZE_T
 
Æign
,

1269 
MEM_SEG_INFO
 *
p_£g_öfo
,

1270 
LIB_ERR
 *
p_îr
);

1272 #i‡(
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_ENABLED
)

1273 
Mem_OuçutUßge
 ( (*
out_‚˘
Ë(
CPU_CHAR
 *),

1274 
LIB_ERR
 *
p_îr
);

1278 
	`Mem_PoﬁCª©e
 ( 
MEM_POOL
 *
p_poﬁ
,

1279 *
p_mem_ba£
,

1280 
CPU_SIZE_T
 
mem_size
,

1281 
MEM_POOL_BLK_QTY
 
blk_nbr
,

1282 
CPU_SIZE_T
 
blk_size
,

1283 
CPU_SIZE_T
 
blk_Æign
,

1284 
CPU_SIZE_T
 *
p_byãs_ªqd
,

1285 
LIB_ERR
 *
p_îr
);

1287 
	`Mem_PoﬁCÃ
 ( 
MEM_POOL
 *
p_poﬁ
,

1288 
LIB_ERR
 *
p_îr
);

1290 *
	`Mem_PoﬁBlkGë
 ( 
MEM_POOL
 *
p_poﬁ
,

1291 
CPU_SIZE_T
 
size
,

1292 
LIB_ERR
 *
p_îr
);

1294 
	`Mem_PoﬁBlkFªe
 ( 
MEM_POOL
 *
p_poﬁ
,

1295 *
p_blk
,

1296 
LIB_ERR
 *
p_îr
);

1298 
MEM_POOL_BLK_QTY
 
	`Mem_PoﬁBlkGëNbrAvaû
 ( 
MEM_POOL
 *
p_poﬁ
,

1299 
LIB_ERR
 *
p_îr
);

1302 
	`Mem_DynPoﬁCª©e
 (c⁄° 
CPU_CHAR
 *
p_«me
,

1303 
MEM_DYN_POOL
 *
p_poﬁ
,

1304 
MEM_SEG
 *
p_£g
,

1305 
CPU_SIZE_T
 
blk_size
,

1306 
CPU_SIZE_T
 
blk_Æign
,

1307 
CPU_SIZE_T
 
blk_qty_öô
,

1308 
CPU_SIZE_T
 
blk_qty_max
,

1309 
LIB_ERR
 *
p_îr
);

1311 
	`Mem_DynPoﬁCª©eHW
 (c⁄° 
CPU_CHAR
 *
p_«me
,

1312 
MEM_DYN_POOL
 *
p_poﬁ
,

1313 
MEM_SEG
 *
p_£g
,

1314 
CPU_SIZE_T
 
blk_size
,

1315 
CPU_SIZE_T
 
blk_Æign
,

1316 
CPU_SIZE_T
 
blk_qty_öô
,

1317 
CPU_SIZE_T
 
blk_qty_max
,

1318 
LIB_ERR
 *
p_îr
);

1320 *
	`Mem_DynPoﬁBlkGë
 ( 
MEM_DYN_POOL
 *
p_poﬁ
,

1321 
LIB_ERR
 *
p_îr
);

1323 
	`Mem_DynPoﬁBlkFªe
 ( 
MEM_DYN_POOL
 *
p_poﬁ
,

1324 *
p_blk
,

1325 
LIB_ERR
 *
p_îr
);

1327 
CPU_SIZE_T
 
	`Mem_DynPoﬁBlkNbrAvaûGë
–
MEM_DYN_POOL
 *
p_poﬁ
,

1328 
LIB_ERR
 *
p_îr
);

1337 #i‚de‡ 
LIB_MEM_CFG_ARG_CHK_EXT_EN


1342 #ñi‡ ((
LIB_MEM_CFG_ARG_CHK_EXT_EN
 !
DEF_DISABLED
) && \

1343 (
LIB_MEM_CFG_ARG_CHK_EXT_EN
 !
DEF_ENABLED
 ))

1351 #i‚de‡ 
LIB_MEM_CFG_OPTIMIZE_ASM_EN


1356 #ñi‡ ((
LIB_MEM_CFG_OPTIMIZE_ASM_EN
 !
DEF_DISABLED
) && \

1357 (
LIB_MEM_CFG_OPTIMIZE_ASM_EN
 !
DEF_ENABLED
 ))

1364 #i‚de‡ 
LIB_MEM_CFG_HEAP_SIZE


1370 #ifde‡ 
LIB_MEM_CFG_HEAP_BASE_ADDR


1371 #i‡ (
LIB_MEM_CFG_HEAP_BASE_ADDR
 == 0x0)

1378 #i‡ ((
LIB_MEM_CFG_DBG_INFO_EN
 !
DEF_DISABLED
) && \

1379 (
LIB_MEM_CFG_DBG_INFO_EN
 !
DEF_ENABLED
 ))

1384 #ñi‡ ((
LIB_MEM_CFG_HEAP_SIZE
 == 0u) && \

1385 (
LIB_MEM_CFG_DBG_INFO_EN
 =
DEF_ENABLED
))

1398 #i‡ (
CPU_CORE_VERSION
 < 127u)

	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_str.c

71 
	#MICRIUM_SOURCE


	)

72 
	#LIB_STR_MODULE


	)

73 
	~<lib_°r.h
>

103 c⁄° 
CPU_INT32U
 
	gSå_Mu…OvfThTbl_I¡32U
[] = {

104 (
CPU_INT32U
Ë
DEF_INT_32U_MAX_VAL
,

105 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 1u),

106 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 2u),

107 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 3u),

108 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 4u),

109 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 5u),

110 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 6u),

111 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 7u),

112 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 8u),

113 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 9u),

114 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 10u),

115 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 11u),

116 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 12u),

117 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 13u),

118 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 14u),

119 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 15u),

120 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 16u),

121 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 17u),

122 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 18u),

123 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 19u),

124 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 20u),

125 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 21u),

126 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 22u),

127 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 23u),

128 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 24u),

129 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 25u),

130 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 26u),

131 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 27u),

132 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 28u),

133 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 29u),

134 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 30u),

135 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 31u),

136 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 32u),

137 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 33u),

138 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 34u),

139 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 35u),

140 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 36u)

157 
CPU_CHAR
 *
Så_FmtNbr_I¡32
 ( 
CPU_INT32U
 
nbr
,

158 
CPU_INT08U
 
nbr_dig
,

159 
CPU_INT08U
 
nbr_ba£
,

160 
CPU_BOOLEAN
 
nbr_√g
,

161 
CPU_CHAR
 
Àad_ch¨
,

162 
CPU_BOOLEAN
 
lowî_ˇ£
,

163 
CPU_BOOLEAN
 
nul
,

164 
CPU_CHAR
 *
p°r
);

166 
CPU_INT32U
 
Så_P¨£Nbr_I¡32
(c⁄° 
CPU_CHAR
 *
p°r
,

167 
CPU_CHAR
 **
p°r_√xt
,

168 
CPU_INT08U
 
nbr_ba£
,

169 
CPU_BOOLEAN
 
nbr_sig√d
,

170 
CPU_BOOLEAN
 *
≤br_√g
);

219 
CPU_SIZE_T
 
	$Så_Lí
 (c⁄° 
CPU_CHAR
 *
p°r
)

221 
CPU_SIZE_T
 
Àn
;

224 
Àn
 = 
	`Så_Lí_N
(
p°r
,

225 
DEF_INT_CPU_U_MAX_VAL
);

227  (
Àn
);

228 
	}
}

278 
CPU_SIZE_T
 
	$Så_Lí_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

279 
CPU_SIZE_T
 
Àn_max
)

281 c⁄° 
CPU_CHAR
 *
p°r_Àn
;

282 
CPU_SIZE_T
 
Àn
;

285 
p°r_Àn
 = 
p°r
;

286 
Àn
 = 0u;

287 –
p°r_Àn
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

288 (*
p°r_Àn
 !–
CPU_CHAR
 )'\0') &&

289 –
Àn
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

290 
p°r_Àn
++;

291 
Àn
++;

294  (
Àn
);

295 
	}
}

350 
CPU_CHAR
 *
	$Så_C›y
 ( 
CPU_CHAR
 *
p°r_de°
,

351 c⁄° 
CPU_CHAR
 *
p°r_§c
)

353 
CPU_CHAR
 *
p°r_πn
;

356 
p°r_πn
 = 
	`Så_C›y_N
(
p°r_de°
,

357 
p°r_§c
,

358 
DEF_INT_CPU_U_MAX_VAL
);

360  (
p°r_πn
);

361 
	}
}

440 
CPU_CHAR
 *
	$Så_C›y_N
 ( 
CPU_CHAR
 *
p°r_de°
,

441 c⁄° 
CPU_CHAR
 *
p°r_§c
,

442 
CPU_SIZE_T
 
Àn_max
)

444 
CPU_CHAR
 *
p°r_c›y_de°
;

445 c⁄° 
CPU_CHAR
 *
p°r_c›y_§c
;

446 
CPU_SIZE_T
 
Àn_c›y
;

449 i‡(
p°r_de°
 =(
CPU_CHAR
 *)0) {

450  ((
CPU_CHAR
 *)0);

452 i‡(
p°r_§c
 =(c⁄° 
CPU_CHAR
 *)0) {

453  ((
CPU_CHAR
 *)0);

457 
p°r_c›y_de°
 = 
p°r_de°
;

458 
p°r_c›y_§c
 = 
p°r_§c
;

459 
Àn_c›y
 = 0u;

461 –
p°r_c›y_de°
 !–
CPU_CHAR
 *) 0 ) &&

462 –
p°r_c›y_§c
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

463 (*
p°r_c›y_§c
 !–
CPU_CHAR
 )'\0') &&

464 –
Àn_c›y
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

465 *
p°r_c›y_de°
 = *
p°r_c›y_§c
;

466 
p°r_c›y_de°
++;

467 
p°r_c›y_§c
++;

468 
Àn_c›y
++;

471 i‡((
p°r_c›y_de°
 =–
CPU_CHAR
 *)0) ||

472 (
p°r_c›y_§c
 =(c⁄° 
CPU_CHAR
 *)0)) {

473  ((
CPU_CHAR
 *)0);

476 i‡(
Àn_c›y
 < 
Àn_max
) {

477 *
p°r_c›y_de°
 = (
CPU_CHAR
)'\0';

481  (
p°r_de°
);

482 
	}
}

541 
CPU_CHAR
 *
	$Så_C©
 ( 
CPU_CHAR
 *
p°r_de°
,

542 c⁄° 
CPU_CHAR
 *
p°r_ˇt
)

544 
CPU_CHAR
 *
p°r_πn
;

547 
p°r_πn
 = 
	`Så_C©_N
(
p°r_de°
,

548 
p°r_ˇt
,

549 
DEF_INT_CPU_U_MAX_VAL
);

551  (
p°r_πn
);

552 
	}
}

623 
CPU_CHAR
 *
	$Så_C©_N
 ( 
CPU_CHAR
 *
p°r_de°
,

624 c⁄° 
CPU_CHAR
 *
p°r_ˇt
,

625 
CPU_SIZE_T
 
Àn_max
)

627 
CPU_CHAR
 *
p°r_ˇt_de°
;

628 c⁄° 
CPU_CHAR
 *
p°r_ˇt_§c
;

629 
CPU_SIZE_T
 
Àn_ˇt
;

632 i‡(
p°r_de°
 =(
CPU_CHAR
 *)0) {

633  ((
CPU_CHAR
 *)0);

635 i‡(
p°r_ˇt
 =(c⁄° 
CPU_CHAR
 *)0) {

636  ((
CPU_CHAR
 *)0);

639 i‡(
Àn_max
 < 1) {

640  ((
CPU_CHAR
 *)
p°r_de°
);

644 
p°r_ˇt_de°
 = 
p°r_de°
;

645 –
p°r_ˇt_de°
 !(
CPU_CHAR
 *) 0 ) &&

646 (*
p°r_ˇt_de°
 !(
CPU_CHAR
 )'\0')) {

647 
p°r_ˇt_de°
++;

649 i‡(
p°r_ˇt_de°
 =(
CPU_CHAR
 *)0) {

650  ((
CPU_CHAR
 *)0);

653 
p°r_ˇt_§c
 = 
p°r_ˇt
;

654 
Àn_ˇt
 = 0u;

656 –
p°r_ˇt_de°
 !–
CPU_CHAR
 *) 0 ) &&

657 –
p°r_ˇt_§c
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

658 (*
p°r_ˇt_§c
 !–
CPU_CHAR
 )'\0') &&

659 –
Àn_ˇt
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

660 *
p°r_ˇt_de°
 = *
p°r_ˇt_§c
;

661 
p°r_ˇt_de°
++;

662 
p°r_ˇt_§c
++;

663 
Àn_ˇt
++;

666 i‡((
p°r_ˇt_de°
 =–
CPU_CHAR
 *)0) ||

667 (
p°r_ˇt_§c
 =(c⁄° 
CPU_CHAR
 *)0)) {

668  ((
CPU_CHAR
 *)0);

671 *
p°r_ˇt_de°
 = (
CPU_CHAR
)'\0';

674  (
p°r_de°
);

675 
	}
}

753 
CPU_INT16S
 
	$Så_Cmp
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

754 c⁄° 
CPU_CHAR
 *
p2_°r
)

756 
CPU_INT16S
 
cmp_vÆ
;

759 
cmp_vÆ
 = 
	`Så_Cmp_N
(
p1_°r
,

760 
p2_°r
,

761 
DEF_INT_CPU_U_MAX_VAL
);

763  (
cmp_vÆ
);

764 
	}
}

854 
CPU_INT16S
 
	$Så_Cmp_N
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

855 c⁄° 
CPU_CHAR
 *
p2_°r
,

856 
CPU_SIZE_T
 
Àn_max
)

858 c⁄° 
CPU_CHAR
 *
p1_°r_cmp
;

859 c⁄° 
CPU_CHAR
 *
p2_°r_cmp
;

860 c⁄° 
CPU_CHAR
 *
p1_°r_cmp_√xt
;

861 c⁄° 
CPU_CHAR
 *
p2_°r_cmp_√xt
;

862 
CPU_INT16S
 
cmp_vÆ
;

863 
CPU_SIZE_T
 
cmp_Àn
;

866 i‡(
Àn_max
 < 1) {

870 i‡(
p1_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

871 i‡(
p2_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

874 
cmp_vÆ
 = (
CPU_INT16S
)((CPU_INT16S)0 - (CPU_INT16S)(*
p2_°r
));

875  (
cmp_vÆ
);

877 i‡(
p2_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

878 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r
);

879  (
cmp_vÆ
);

883 
p1_°r_cmp
 = 
p1_°r
;

884 
p2_°r_cmp
 = 
p2_°r
;

885 
p1_°r_cmp_√xt
 = 
p1_°r_cmp
;

886 
p2_°r_cmp_√xt
 = 
p2_°r_cmp
;

887 
p1_°r_cmp_√xt
++;

888 
p2_°r_cmp_√xt
++;

889 
cmp_Àn
 = 0u;

891 (*
p1_°r_cmp
 =*
p2_°r_cmp
) &&

892 (*
p1_°r_cmp
 !–
CPU_CHAR
 )'\0') &&

893 –
p1_°r_cmp_√xt
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

894 –
p2_°r_cmp_√xt
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

895 –
cmp_Àn
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

896 
p1_°r_cmp
++;

897 
p2_°r_cmp
++;

898 
p1_°r_cmp_√xt
++;

899 
p2_°r_cmp_√xt
++;

900 
cmp_Àn
++;

904 i‡(
cmp_Àn
 =
Àn_max
) {

908 i‡(*
p1_°r_cmp
 !*
p2_°r_cmp
) {

910 
cmp_vÆ
 = (
CPU_INT16S
)((CPU_INT16S)(*
p1_°r_cmp
Ë- (CPU_INT16S)(*
p2_°r_cmp
));

912 } i‡(*
p1_°r_cmp
 =(
CPU_CHAR
)'\0') {

913 
cmp_vÆ
 = (
CPU_INT16S
)0;

916 i‡(
p1_°r_cmp_√xt
 =(c⁄° 
CPU_CHAR
 *)0) {

917 i‡(
p2_°r_cmp_√xt
 =(c⁄° 
CPU_CHAR
 *)0) {

918 
cmp_vÆ
 = (
CPU_INT16S
)0;

921 
cmp_vÆ
 = (
CPU_INT16S
)((CPU_INT16S)0 - (CPU_INT16S)(*
p2_°r_cmp_√xt
));

924 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r_cmp_√xt
);

929  (
cmp_vÆ
);

930 
	}
}

1018 
CPU_INT16S
 
	$Så_CmpIgn‹eCa£
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

1019 c⁄° 
CPU_CHAR
 *
p2_°r
)

1021 
CPU_INT16S
 
cmp_vÆ
;

1024 
cmp_vÆ
 = 
	`Så_CmpIgn‹eCa£_N
(
p1_°r
,

1025 
p2_°r
,

1026 
DEF_INT_CPU_U_MAX_VAL
);

1028  (
cmp_vÆ
);

1029 
	}
}

1129 
CPU_INT16S
 
	$Så_CmpIgn‹eCa£_N
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

1130 c⁄° 
CPU_CHAR
 *
p2_°r
,

1131 
CPU_SIZE_T
 
Àn_max
)

1133 c⁄° 
CPU_CHAR
 *
p1_°r_cmp
;

1134 c⁄° 
CPU_CHAR
 *
p2_°r_cmp
;

1135 c⁄° 
CPU_CHAR
 *
p1_°r_cmp_√xt
;

1136 c⁄° 
CPU_CHAR
 *
p2_°r_cmp_√xt
;

1137 
CPU_CHAR
 
ch¨_1
;

1138 
CPU_CHAR
 
ch¨_2
;

1139 
CPU_INT16S
 
cmp_vÆ
;

1140 
CPU_SIZE_T
 
cmp_Àn
;

1143 i‡(
Àn_max
 < 1) {

1147 i‡(
p1_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1148 i‡(
p2_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1151 
ch¨_2
 = 
	`ASCII_ToLowî
(*
p2_°r
);

1152 
cmp_vÆ
 = (
CPU_INT16S
)((CPU_INT16S)0 - (CPU_INT16S)
ch¨_2
);

1153  (
cmp_vÆ
);

1155 i‡(
p2_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1156 
ch¨_1
 = 
	`ASCII_ToLowî
(*
p1_°r
);

1157 
cmp_vÆ
 = (
CPU_INT16S
)
ch¨_1
;

1158  (
cmp_vÆ
);

1162 
p1_°r_cmp
 = 
p1_°r
;

1163 
p2_°r_cmp
 = 
p2_°r
;

1164 
p1_°r_cmp_√xt
 = 
p1_°r_cmp
;

1165 
p2_°r_cmp_√xt
 = 
p2_°r_cmp
;

1166 
p1_°r_cmp_√xt
++;

1167 
p2_°r_cmp_√xt
++;

1168 
ch¨_1
 = 
	`ASCII_ToLowî
(*
p1_°r_cmp
);

1169 
ch¨_2
 = 
	`ASCII_ToLowî
(*
p2_°r_cmp
);

1170 
cmp_Àn
 = 0u;

1172 –
ch¨_1
 =
ch¨_2
) &&

1173 (*
p1_°r_cmp
 !–
CPU_CHAR
 )'\0') &&

1174 –
p1_°r_cmp_√xt
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

1175 –
p2_°r_cmp_√xt
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

1176 –
cmp_Àn
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

1177 
p1_°r_cmp
++;

1178 
p2_°r_cmp
++;

1179 
p1_°r_cmp_√xt
++;

1180 
p2_°r_cmp_√xt
++;

1181 
cmp_Àn
++;

1182 
ch¨_1
 = 
	`ASCII_ToLowî
(*
p1_°r_cmp
);

1183 
ch¨_2
 = 
	`ASCII_ToLowî
(*
p2_°r_cmp
);

1187 i‡(
cmp_Àn
 =
Àn_max
) {

1191 i‡(
ch¨_1
 !
ch¨_2
) {

1193 
cmp_vÆ
 = (
CPU_INT16S
)((CPU_INT16S)
ch¨_1
 - (CPU_INT16S)
ch¨_2
);

1195 } i‡(
ch¨_1
 =(
CPU_CHAR
)'\0') {

1196 
cmp_vÆ
 = (
CPU_INT16S
)0;

1199 i‡(
p1_°r_cmp_√xt
 =(c⁄° 
CPU_CHAR
 *)0) {

1200 i‡(
p2_°r_cmp_√xt
 =(c⁄° 
CPU_CHAR
 *)0) {

1201 
cmp_vÆ
 = (
CPU_INT16S
)0;

1203 
ch¨_2
 = 
	`ASCII_ToLowî
(*
p2_°r_cmp_√xt
);

1205 
cmp_vÆ
 = (
CPU_INT16S
)((CPU_INT16S)0 - (CPU_INT16S)
ch¨_2
);

1208 
ch¨_1
 = 
	`ASCII_ToLowî
(*
p1_°r_cmp_√xt
);

1209 
cmp_vÆ
 = (
CPU_INT16S
)
ch¨_1
;

1214  (
cmp_vÆ
);

1215 
	}
}

1270 
CPU_CHAR
 *
	$Så_Ch¨
 (c⁄° 
CPU_CHAR
 *
p°r
,

1271 
CPU_CHAR
 
§ch_ch¨
)

1273 
CPU_CHAR
 *
p°r_πn
;

1276 
p°r_πn
 = 
	`Så_Ch¨_N
(
p°r
,

1277 
DEF_INT_CPU_U_MAX_VAL
,

1278 
§ch_ch¨
);

1280  (
p°r_πn
);

1281 
	}
}

1350 
CPU_CHAR
 *
	$Så_Ch¨_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

1351 
CPU_SIZE_T
 
Àn_max
,

1352 
CPU_CHAR
 
§ch_ch¨
)

1354 c⁄° 
CPU_CHAR
 *
p°r_ch¨
;

1355 
CPU_SIZE_T
 
Àn_§ch
;

1358 i‡(
p°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1359  ((
CPU_CHAR
 *)0);

1362 i‡(
Àn_max
 < 1) {

1363  ((
CPU_CHAR
 *)0);

1367 
p°r_ch¨
 = 
p°r
;

1368 
Àn_§ch
 = 0u;

1370 –
p°r_ch¨
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

1371 (*
p°r_ch¨
 !–
CPU_CHAR
 )'\0') &&

1372 (*
p°r_ch¨
 !–
CPU_CHAR
 )
§ch_ch¨
) &&

1373 –
Àn_§ch
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

1374 
p°r_ch¨
++;

1375 
Àn_§ch
++;

1379 i‡(
p°r_ch¨
 =(c⁄° 
CPU_CHAR
 *)0) {

1380  ((
CPU_CHAR
 *)0);

1383 i‡(
Àn_§ch
 >
Àn_max
) {

1384  ((
CPU_CHAR
 *)0);

1387 i‡(*
p°r_ch¨
 !
§ch_ch¨
) {

1388  ((
CPU_CHAR
 *)0);

1392  ((
CPU_CHAR
 *)
p°r_ch¨
);

1393 
	}
}

1447 
CPU_CHAR
 *
	$Så_Ch¨_La°
 (c⁄° 
CPU_CHAR
 *
p°r
,

1448 
CPU_CHAR
 
§ch_ch¨
)

1450 
CPU_CHAR
 *
p°r_πn
;

1453 
p°r_πn
 = 
	`Så_Ch¨_La°_N
(
p°r
,

1454 
DEF_INT_CPU_U_MAX_VAL
,

1455 
§ch_ch¨
);

1457  (
p°r_πn
);

1458 
	}
}

1529 
CPU_CHAR
 *
	$Så_Ch¨_La°_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

1530 
CPU_SIZE_T
 
Àn_max
,

1531 
CPU_CHAR
 
§ch_ch¨
)

1533 c⁄° 
CPU_CHAR
 *
p°r_ch¨
;

1534 
CPU_SIZE_T
 
°r_Àn_max
;

1535 
CPU_SIZE_T
 
°r_Àn
;

1538 i‡(
p°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1539  ((
CPU_CHAR
 *)0);

1542 i‡(
Àn_max
 < 1) {

1543  ((
CPU_CHAR
 *)0);

1547 
p°r_ch¨
 = 
p°r
;

1548 
°r_Àn_max
 = 
Àn_max
 - ((
CPU_CHAR
)'\0');

1549 
°r_Àn
 = 
	`Så_Lí_N
(
p°r_ch¨
, 
°r_Àn_max
);

1550 
p°r_ch¨
 +
°r_Àn
;

1552 i‡(
p°r_ch¨
 =(c⁄° 
CPU_CHAR
 *)0) {

1553  ((
CPU_CHAR
 *)0);

1556 –
p°r_ch¨
 !
p°r
) &&

1557 (*
p°r_ch¨
 !
§ch_ch¨
)) {

1558 
p°r_ch¨
--;

1562 i‡(*
p°r_ch¨
 !
§ch_ch¨
) {

1563  ((
CPU_CHAR
 *)0);

1567  ((
CPU_CHAR
 *)
p°r_ch¨
);

1568 
	}
}

1608 
CPU_CHAR
 *
	$Så_Ch¨_Rïœ˚
 (
CPU_CHAR
 *
p°r
,

1609 
CPU_CHAR
 
ch¨_§ch
,

1610 
CPU_CHAR
 
ch¨_ª∂a˚
)

1612 
CPU_CHAR
 *
p°r_πn
;

1615 
p°r_πn
 = 
	`Så_Ch¨_Rïœ˚_N
(
p°r
,

1616 
ch¨_§ch
,

1617 
ch¨_ª∂a˚
,

1618 
DEF_INT_CPU_U_MAX_VAL
);

1620  (
p°r_πn
);

1621 
	}
}

1670 
CPU_CHAR
 *
	$Så_Ch¨_Rïœ˚_N
 (
CPU_CHAR
 *
p°r
,

1671 
CPU_CHAR
 
ch¨_§ch
,

1672 
CPU_CHAR
 
ch¨_ª∂a˚
,

1673 
CPU_SIZE_T
 
Àn_max
)

1675 
CPU_CHAR
 *
p°r_ch¨
;

1676 
CPU_SIZE_T
 
Àn
;

1679 i‡(
p°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1680  ((
CPU_CHAR
 *)0);

1683 i‡(
Àn_max
 < 1) {

1684  ((
CPU_CHAR
 *)0);

1687 
p°r_ch¨
 = 
p°r
;

1688 
Àn
 = 
Àn_max
;

1690 –
p°r_ch¨
 !(c⁄° 
CPU_CHAR
 *)0) &&

1691 (*
p°r_ch¨
 !
ASCII_CHAR_NULL
 ) &&

1692 –
Àn
 > 0)) {

1694 i‡(*
p°r_ch¨
 =
ch¨_§ch
) {

1695 *
p°r_ch¨
 = 
ch¨_ª∂a˚
;

1698 
p°r_ch¨
++;

1699 
Àn
--;

1702  (
p°r
);

1703 
	}
}

1766 
CPU_CHAR
 *
	$Så_Så
 (c⁄° 
CPU_CHAR
 *
p°r
,

1767 c⁄° 
CPU_CHAR
 *
p°r_§ch
)

1769 
CPU_CHAR
 *
p°r_πn
;

1772 
p°r_πn
 = 
	`Så_Så_N
(
p°r
,

1773 
p°r_§ch
,

1774 
DEF_INT_CPU_U_MAX_VAL
);

1776  (
p°r_πn
);

1777 
	}
}

1850 
CPU_CHAR
 *
	$Så_Så_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

1851 c⁄° 
CPU_CHAR
 *
p°r_§ch
,

1852 
CPU_SIZE_T
 
Àn_max
)

1854 
CPU_SIZE_T
 
°r_Àn
;

1855 
CPU_SIZE_T
 
°r_Àn_§ch
;

1856 
CPU_SIZE_T
 
Àn_max_§ch
;

1857 
CPU_SIZE_T
 
§ch_Àn
;

1858 
CPU_SIZE_T
 
§ch_ix
;

1859 
CPU_BOOLEAN
 
§ch_d⁄e
;

1860 
CPU_INT16S
 
§ch_cmp
;

1861 c⁄° 
CPU_CHAR
 *
p°r_°r
;

1862 c⁄° 
CPU_CHAR
 *
p°r_§ch_ix
;

1865 i‡(
p°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1866  ((
CPU_CHAR
 *)0);

1868 i‡(
p°r_§ch
 =(c⁄° 
CPU_CHAR
 *)0) {

1869  ((
CPU_CHAR
 *)0);

1872 i‡(
Àn_max
 < 1) {

1873  ((
CPU_CHAR
 *)0);

1877 
Àn_max_§ch
 = (
Àn_max
 < 
DEF_INT_CPU_U_MAX_VAL
)

1878 ? (
Àn_max
 + 1uË: 
DEF_INT_CPU_U_MAX_VAL
;

1880 
°r_Àn
 = 
	`Så_Lí_N
(
p°r
, 
Àn_max
);

1881 
°r_Àn_§ch
 = 
	`Så_Lí_N
(
p°r_§ch
, 
Àn_max_§ch
);

1882 i‡(
°r_Àn_§ch
 < 1) {

1883  ((
CPU_CHAR
 *)
p°r
);

1885 i‡(
°r_Àn_§ch
 > 
°r_Àn
) {

1886  ((
CPU_CHAR
 *)0);

1889 
p°r_°r
 = 
p°r
 + 
°r_Àn
;

1890 i‡(
p°r_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1891  ((
CPU_CHAR
 *)0);

1893 
p°r_°r
 = 
p°r_§ch
 + 
°r_Àn_§ch
;

1894 i‡(
p°r_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1895  ((
CPU_CHAR
 *)0);

1899 
§ch_Àn
 = 
°r_Àn
 - 
°r_Àn_§ch
;

1900 
§ch_ix
 = 0u;

1901 
§ch_d⁄e
 = 
DEF_NO
;

1904 
p°r_§ch_ix
 = (c⁄° 
CPU_CHAR
 *)(
p°r
 + 
§ch_ix
);

1905 
§ch_cmp
 = 
	`Så_Cmp_N
(
p°r_§ch_ix
, 
p°r_§ch
, 
°r_Àn_§ch
);

1906 
§ch_d⁄e
 = (
§ch_cmp
 =0Ë? 
DEF_YES
 : 
DEF_NO
;

1907 
§ch_ix
++;

1908 } (
§ch_d⁄e
 =
DEF_NO
Ë&& (
§ch_ix
 <
§ch_Àn
));

1911 i‡(
§ch_cmp
 != 0) {

1912  ((
CPU_CHAR
 *)0);

1915  ((
CPU_CHAR
 *)
p°r_§ch_ix
);

1916 
	}
}

2043 
CPU_CHAR
 *
	$Så_FmtNbr_I¡32U
 (
CPU_INT32U
 
nbr
,

2044 
CPU_INT08U
 
nbr_dig
,

2045 
CPU_INT08U
 
nbr_ba£
,

2046 
CPU_CHAR
 
Àad_ch¨
,

2047 
CPU_BOOLEAN
 
lowî_ˇ£
,

2048 
CPU_BOOLEAN
 
nul
,

2049 
CPU_CHAR
 *
p°r
)

2051 
CPU_CHAR
 *
p°r_fmt
;

2054 
p°r_fmt
 = 
	`Så_FmtNbr_I¡32
(
nbr
,

2055 
nbr_dig
,

2056 
nbr_ba£
,

2057 
DEF_NO
,

2058 
Àad_ch¨
,

2059 
lowî_ˇ£
,

2060 
nul
,

2061 
p°r
);

2063  (
p°r_fmt
);

2064 
	}
}

2259 
CPU_CHAR
 *
	$Så_FmtNbr_I¡32S
 (
CPU_INT32S
 
nbr
,

2260 
CPU_INT08U
 
nbr_dig
,

2261 
CPU_INT08U
 
nbr_ba£
,

2262 
CPU_CHAR
 
Àad_ch¨
,

2263 
CPU_BOOLEAN
 
lowî_ˇ£
,

2264 
CPU_BOOLEAN
 
nul
,

2265 
CPU_CHAR
 *
p°r
)

2267 
CPU_CHAR
 *
p°r_fmt
;

2268 
CPU_INT32S
 
nbr_fmt
;

2269 
CPU_BOOLEAN
 
nbr_√g
;

2272 i‡(
nbr
 < 0) {

2273 
nbr_fmt
 = -
nbr
;

2274 
nbr_√g
 = 
DEF_YES
;

2276 
nbr_fmt
 = 
nbr
;

2277 
nbr_√g
 = 
DEF_NO
;

2280 
p°r_fmt
 = 
	`Så_FmtNbr_I¡32
((
CPU_INT32U
)
nbr_fmt
,

2281 
nbr_dig
,

2282 
nbr_ba£
,

2283 
nbr_√g
,

2284 
Àad_ch¨
,

2285 
lowî_ˇ£
,

2286 
nul
,

2287 
p°r
);

2289  (
p°r_fmt
);

2290 
	}
}

2572 #i‡(
LIB_STR_CFG_FP_EN
 =
DEF_ENABLED
)

2573 
CPU_CHAR
 *
	$Så_FmtNbr_32
 (
CPU_FP32
 
nbr
,

2574 
CPU_INT08U
 
nbr_dig
,

2575 
CPU_INT08U
 
nbr_dp
,

2576 
CPU_CHAR
 
Àad_ch¨
,

2577 
CPU_BOOLEAN
 
nul
,

2578 
CPU_CHAR
 *
p°r
)

2580 
CPU_CHAR
 *
p°r_fmt
;

2581 
CPU_DATA
 
i
;

2582 
CPU_FP32
 
nbr_fmt
;

2583 
CPU_FP32
 
nbr_log
;

2584 
CPU_INT32U
 
nbr_shi·d
;

2585 
CPU_INT16U
 
nbr_dig_max
;

2586 
CPU_INT16U
 
nbr_dig_sig
;

2587 
CPU_INT08U
 
nbr_√g_sign
;

2588 
CPU_INT08U
 
dig_vÆ
;

2589 
CPU_FP32
 
dig_exp
;

2590 
CPU_FP32
 
dp_exp
;

2591 
CPU_BOOLEAN
 
Àad_ch¨_dig
;

2592 
CPU_BOOLEAN
 
Àad_ch¨_fmtd
;

2593 
CPU_BOOLEAN
 
Àad_ch¨_0
;

2594 
CPU_BOOLEAN
 
fmt_övÆid
;

2595 
CPU_BOOLEAN
 
¥öt_ch¨
;

2596 
CPU_BOOLEAN
 
nbr_√g
;

2597 
CPU_BOOLEAN
 
nbr_√g_fmtd
;

2601 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

2602  ((
CPU_CHAR
 *)0);

2605 
dig_exp
 = 1.0f;

2606 
fmt_övÆid
 = 
DEF_NO
;

2607 
Àad_ch¨_0
 = (
Àad_ch¨
 ='0'Ë? 
DEF_YES
 : 
DEF_NO
;

2608 
nbr_fmt
 = 0.0f;

2609 
nbr_√g
 = 
DEF_NO
;

2611 i‡((
nbr_dig
 < 1Ë&& (
nbr_dp
 < 1)) {

2612 
fmt_övÆid
 = 
DEF_YES
;

2615 i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

2616 
¥öt_ch¨
 = 
	`ASCII_IsPröt
(
Àad_ch¨
);

2617 i‡(
¥öt_ch¨
 !
DEF_YES
) {

2618 
fmt_övÆid
 = 
DEF_YES
;

2620 } i‡(
Àad_ch¨
 != '0') {

2621 
Àad_ch¨_dig
 = 
	`ASCII_IsDig
(
Àad_ch¨
);

2622 i‡(
Àad_ch¨_dig
 =
DEF_YES
) {

2623 
fmt_övÆid
 = 
DEF_YES
;

2630 
p°r_fmt
 = 
p°r
;

2632 i‡(
fmt_övÆid
 =
DEF_NO
) {

2633 i‡(
nbr
 < 0.0f) {

2634 
nbr_fmt
 = -
nbr
;

2635 
nbr_√g_sign
 = 1u;

2636 
nbr_√g
 = 
DEF_YES
;

2638 
nbr_fmt
 = 
nbr
;

2639 
nbr_√g_sign
 = 0u;

2640 
nbr_√g
 = 
DEF_NO
;

2643 
nbr_log
 = 
nbr_fmt
;

2644 
nbr_dig_max
 = 0u;

2645 
nbr_log
 >= 1.0f) {

2646 
nbr_dig_max
++;

2647 
nbr_log
 /= 10.0f;

2650 i‡(((
nbr_dig
 >(
nbr_dig_max
 + 
nbr_√g_sign
)) ||

2651 (
nbr_dig_max
 < 1)) &&

2652 ((
nbr_dig
 > 1) ||

2653 (
nbr_dp
 > 0) ||

2654 (
nbr_√g
 =
DEF_NO
))) {

2656 
i
 = 1u; i < 
nbr_dig
; i++) {

2657 
dig_exp
 *= 10.0f;

2660 
nbr_√g_fmtd
 = 
DEF_NO
;

2661 
nbr_dig_sig
 = 0u;

2662 
Àad_ch¨_fmtd
 = 
DEF_NO
;

2664 
fmt_övÆid
 = 
DEF_YES
;

2670 
i
 = 
nbr_dig
; i > 0; i--) {

2671 i‡(
fmt_övÆid
 =
DEF_NO
) {

2672 i‡(
nbr_dig_sig
 < 
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
) {

2673 
nbr_shi·d
 = (
CPU_INT32U
)(
nbr_fmt
 / 
dig_exp
);

2674 i‡((
nbr_shi·d
 > 0) ||

2675 (
i
 == 1u)) {

2677 i‡((
nbr_√g
 =
DEF_YES
) &&

2678 (
nbr_√g_fmtd
 =
DEF_NO
 )) {

2680 i‡(
Àad_ch¨_fmtd
 =
DEF_YES
) {

2681 
p°r_fmt
--;

2683 *
p°r_fmt
++ = '-';

2684 
nbr_√g_fmtd
 = 
DEF_YES
;

2687 i‡(
nbr_shi·d
 > 0) {

2688 
dig_vÆ
 = (
CPU_INT08U
)(
nbr_shi·d
 % 10u);

2689 *
p°r_fmt
++ = (
CPU_CHAR
 )(
dig_vÆ
 + '0');

2691 
nbr_dig_sig
++;

2693 } i‡((
nbr_dig
 > 1) ||

2694 (
nbr_√g
 =
DEF_NO
)) {

2695 *
p°r_fmt
++ = '0';

2698 } i‡((
nbr_√g
 =
DEF_YES
) &&

2699 (
Àad_ch¨_0
 =
DEF_YES
) &&

2700 (
nbr_√g_fmtd
 =
DEF_NO
 )) {

2702 *
p°r_fmt
++ = '-';

2703 
nbr_√g_fmtd
 = 
DEF_YES
;

2705 } i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

2706 *
p°r_fmt
++ = 
Àad_ch¨
;

2707 
Àad_ch¨_fmtd
 = 
DEF_YES
;

2710 
dig_exp
 /= 10.0f;

2713 *
p°r_fmt
++ = '0';

2717 *
p°r_fmt
++ = '?';

2722 i‡(
nbr_dp
 > 0) {

2723 i‡(
nbr_dig
 < 1) {

2724 i‡(
fmt_övÆid
 =
DEF_NO
) {

2725 i‡((
nbr_√g
 =
DEF_YES
) &&

2726 (
nbr_√g_fmtd
 =
DEF_NO
 )) {

2727 *
p°r_fmt
++ = '-';

2729 *
p°r_fmt
++ = '0';

2732 *
p°r_fmt
++ = '?';

2736 i‡(
fmt_övÆid
 =
DEF_NO
) {

2737 *
p°r_fmt
++ = '.';

2739 *
p°r_fmt
++ = '?';

2742 
dp_exp
 = 10.0f;

2743 
i
 = 0u; i < 
nbr_dp
; i++) {

2744 i‡(
fmt_övÆid
 =
DEF_NO
) {

2746 i‡(
nbr_dig_sig
 < 
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
) {

2747 
nbr_shi·d
 = (
CPU_INT32U
)(
nbr_fmt
 * 
dp_exp
);

2748 
dig_vÆ
 = (
CPU_INT08U
)(
nbr_shi·d
 % 10u);

2749 *
p°r_fmt
++ = (
CPU_CHAR
 )(
dig_vÆ
 + '0');

2750 
dp_exp
 *= 10.0f;

2752 i‡((
nbr_shi·d
 > 0) ||

2753 (
nbr_dig_sig
 > 0)) {

2754 
nbr_dig_sig
++;

2758 *
p°r_fmt
++ = '0';

2762 *
p°r_fmt
++ = '?';

2768 i‡(
nul
 !
DEF_NO
) {

2769 *
p°r_fmt
 = (
CPU_CHAR
)'\0';

2773 i‡(
fmt_övÆid
 !
DEF_NO
) {

2774  ((
CPU_CHAR
 *)0);

2778  (
p°r
);

2779 
	}
}

2977 
CPU_INT32U
 
	$Så_P¨£Nbr_I¡32U
 (c⁄° 
CPU_CHAR
 *
p°r
,

2978 
CPU_CHAR
 **
p°r_√xt
,

2979 
CPU_INT08U
 
nbr_ba£
)

2981 
CPU_INT32U
 
nbr
;

2984 
nbr
 = 
	`Så_P¨£Nbr_I¡32
–
p°r
,

2985 
p°r_√xt
,

2986 
nbr_ba£
,

2987 
DEF_NO
,

2988 (
CPU_BOOLEAN
 *)0);

2990  (
nbr
);

2991 
	}
}

3193 
CPU_INT32S
 
	$Så_P¨£Nbr_I¡32S
 (c⁄° 
CPU_CHAR
 *
p°r
,

3194 
CPU_CHAR
 **
p°r_√xt
,

3195 
CPU_INT08U
 
nbr_ba£
)

3197 
CPU_INT32S
 
nbr
;

3198 
CPU_INT32U
 
nbr_abs
;

3199 
CPU_BOOLEAN
 
nbr_√g
;

3202 
nbr_abs
 = 
	`Så_P¨£Nbr_I¡32
(
p°r
,

3203 
p°r_√xt
,

3204 
nbr_ba£
,

3205 
DEF_YES
,

3206 &
nbr_√g
);

3208 i‡(
nbr_√g
 =
DEF_NO
) {

3209 
nbr
 = (
nbr_abs
 > (
CPU_INT32U
Ë
DEF_INT_32S_MAX_VAL
Ë? (
CPU_INT32S
)DEF_INT_32S_MAX_VAL

3210 : (
CPU_INT32S
)
nbr_abs
;

3212 
nbr
 = (
nbr_abs
 > (
CPU_INT32U
)-
DEF_INT_32S_MIN_VAL_ONES_CPL
Ë? (
CPU_INT32S
)
DEF_INT_32S_MIN_VAL


3213 : -(
CPU_INT32S
)
nbr_abs
;

3216  (
nbr
);

3217 
	}
}

3448 
CPU_CHAR
 *
	$Så_FmtNbr_I¡32
 (
CPU_INT32U
 
nbr
,

3449 
CPU_INT08U
 
nbr_dig
,

3450 
CPU_INT08U
 
nbr_ba£
,

3451 
CPU_BOOLEAN
 
nbr_√g
,

3452 
CPU_CHAR
 
Àad_ch¨
,

3453 
CPU_BOOLEAN
 
lowî_ˇ£
,

3454 
CPU_BOOLEAN
 
nul
,

3455 
CPU_CHAR
 *
p°r
)

3457 
CPU_CHAR
 *
p°r_fmt
;

3458 
CPU_DATA
 
i
;

3459 
CPU_INT32U
 
nbr_fmt
;

3460 
CPU_INT32U
 
nbr_log
;

3461 
CPU_INT08U
 
nbr_dig_max
;

3462 
CPU_INT08U
 
nbr_dig_mö
;

3463 
CPU_INT08U
 
nbr_dig_fmtd
;

3464 
CPU_INT08U
 
nbr_√g_sign
;

3465 
CPU_INT08U
 
nbr_Àad_ch¨
;

3466 
CPU_INT08U
 
dig_vÆ
;

3467 
CPU_INT08U
 
Àad_ch¨_dñè_0
;

3468 
CPU_INT08U
 
Àad_ch¨_dñè_a
;

3469 
CPU_BOOLEAN
 
Àad_ch¨_dig
;

3470 
CPU_BOOLEAN
 
Àad_ch¨_0
;

3471 
CPU_BOOLEAN
 
fmt_övÆid
;

3472 
CPU_BOOLEAN
 
¥öt_ch¨
;

3473 
CPU_BOOLEAN
 
nbr_√g_fmtd
;

3477 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

3478  ((
CPU_CHAR
 *)0);

3481 
fmt_övÆid
 = 
DEF_NO
;

3482 
Àad_ch¨_0
 = 
DEF_NO
;

3484 i‡(
nbr_dig
 < 1) {

3485 
fmt_övÆid
 = 
DEF_YES
;

3488 i‡((
nbr_ba£
 < 2u) ||

3489 (
nbr_ba£
 > 36u)) {

3490 
fmt_övÆid
 = 
DEF_YES
;

3493 i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

3494 
¥öt_ch¨
 = 
	`ASCII_IsPröt
(
Àad_ch¨
);

3495 i‡(
¥öt_ch¨
 !
DEF_YES
) {

3496 
fmt_övÆid
 = 
DEF_YES
;

3498 } i‡(
Àad_ch¨
 != '0') {

3499 
Àad_ch¨_dñè_0
 = (
CPU_INT08U
)(
Àad_ch¨
 - '0');

3500 i‡(
lowî_ˇ£
 !
DEF_YES
) {

3501 
Àad_ch¨_dñè_a
 = (
CPU_INT08U
)(
Àad_ch¨
 - 'A');

3503 
Àad_ch¨_dñè_a
 = (
CPU_INT08U
)(
Àad_ch¨
 - 'a');

3506 
Àad_ch¨_dig
 = (((
nbr_ba£
 <10uË&& (
Àad_ch¨_dñè_0
 <Çbr_base)) ||

3507 ((
nbr_ba£
 > 10uË&& ((
Àad_ch¨_dñè_0
 < 10u) ||

3508 (
Àad_ch¨_dñè_a
 < (
nbr_ba£
 - 10u))))Ë? 
DEF_YES
 : 
DEF_NO
;

3510 i‡(
Àad_ch¨_dig
 =
DEF_YES
) {

3511 
fmt_övÆid
 = 
DEF_YES
;

3518 
p°r_fmt
 = 
p°r
;

3519 
Àad_ch¨_0
 = 
DEF_NO
;

3521 i‡(
fmt_övÆid
 =
DEF_NO
) {

3522 
nbr_fmt
 = 
nbr
;

3523 
nbr_log
 = 
nbr
;

3524 
nbr_dig_max
 = 1u;

3525 
nbr_log
 >
nbr_ba£
) {

3526 
nbr_dig_max
++;

3527 
nbr_log
 /
nbr_ba£
;

3530 
nbr_√g_sign
 = (
nbr_√g
 =
DEF_YES
) ? 1u : 0u;

3531 i‡(
nbr_dig
 >(
nbr_dig_max
 + 
nbr_√g_sign
)) {

3532 
nbr_√g_fmtd
 = 
DEF_NO
;

3533 
nbr_dig_mö
 = 
	`DEF_MIN
(
nbr_dig_max
, 
nbr_dig
);

3535 i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

3536 
nbr_dig_fmtd
 = 
nbr_dig
;

3537 
nbr_Àad_ch¨
 = 
nbr_dig
 -

3538 
nbr_dig_mö
 - 
nbr_√g_sign
;

3540 
nbr_dig_fmtd
 = 
nbr_dig_mö
 + 
nbr_√g_sign
;

3541 
nbr_Àad_ch¨
 = 0u;

3544 i‡(
nbr_Àad_ch¨
 > 0) {

3545 
Àad_ch¨_0
 = (
Àad_ch¨
 == '0')

3546 ? 
DEF_YES
 : 
DEF_NO
;

3550 
fmt_övÆid
 = 
DEF_YES
;

3554 i‡(
fmt_övÆid
 !
DEF_NO
) {

3555 
nbr_dig_fmtd
 = 
nbr_dig
;

3560 
p°r_fmt
 +
nbr_dig_fmtd
;

3562 i‡(
nul
 !
DEF_NO
) {

3563 *
p°r_fmt
 = (
CPU_CHAR
)'\0';

3565 
p°r_fmt
--;

3568 
i
 = 0u; i < 
nbr_dig_fmtd
; i++) {

3569 i‡(
fmt_övÆid
 =
DEF_NO
) {

3570 i‡((
nbr_fmt
 > 0) ||

3571 (
i
 == 0u)) {

3573 
dig_vÆ
 = (
CPU_INT08U
)(
nbr_fmt
 % 
nbr_ba£
);

3574 i‡(
dig_vÆ
 < 10u) {

3575 *
p°r_fmt
-- = (
CPU_CHAR
)(
dig_vÆ
 + '0');

3577 i‡(
lowî_ˇ£
 !
DEF_YES
) {

3578 *
p°r_fmt
-- = (
CPU_CHAR
)((
dig_vÆ
 - 10u) + 'A');

3580 *
p°r_fmt
-- = (
CPU_CHAR
)((
dig_vÆ
 - 10u) + 'a');

3584 
nbr_fmt
 /
nbr_ba£
;

3586 } i‡((
nbr_√g
 =
DEF_YES
) &&

3587 (((
Àad_ch¨_0
 =
DEF_NO
 ) &&

3588 (
nbr_√g_fmtd
 =
DEF_NO
 )) ||

3589 ((
Àad_ch¨_0
 !
DEF_NO
 ) &&

3590 (
i
 =(
nbr_dig_fmtd
 - 1u))))) {

3592 *
p°r_fmt
-- = '-';

3593 
nbr_√g_fmtd
 = 
DEF_YES
;

3595 } i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

3596 *
p°r_fmt
-- = 
Àad_ch¨
;

3600 *
p°r_fmt
-- = '?';

3605 i‡(
fmt_övÆid
 !
DEF_NO
) {

3606  ((
CPU_CHAR
 *)0);

3610  (
p°r
);

3611 
	}
}

3840 
CPU_INT32U
 
	$Så_P¨£Nbr_I¡32
 (c⁄° 
CPU_CHAR
 *
p°r
,

3841 
CPU_CHAR
 **
p°r_√xt
,

3842 
CPU_INT08U
 
nbr_ba£
,

3843 
CPU_BOOLEAN
 
nbr_sig√d
,

3844 
CPU_BOOLEAN
 *
≤br_√g
)

3846 c⁄° 
CPU_CHAR
 *
p°r_∑r£
;

3847 c⁄° 
CPU_CHAR
 *
p°r_∑r£_nbr
;

3848 
CPU_CHAR
 *
p°r_∑r£_unu£d
;

3849 
CPU_CHAR
 
∑r£_ch¨
;

3850 
CPU_INT08U
 
∑r£_dig
;

3851 
CPU_INT32U
 
nbr
;

3852 
CPU_BOOLEAN
 
nbr_√g_unu£d
;

3853 
CPU_BOOLEAN
 
nbr_dig
;

3854 
CPU_BOOLEAN
 
nbr_Æpha
;

3855 
CPU_BOOLEAN
 
nbr_hex
;

3856 
CPU_BOOLEAN
 
nbr_hex_lowî
;

3857 
CPU_BOOLEAN
 
whôe•a˚
;

3858 
CPU_BOOLEAN
 
√g
;

3859 
CPU_BOOLEAN
 
ovf
;

3860 
CPU_BOOLEAN
 
d⁄e
;

3863 i‡(
p°r_√xt
 =(
CPU_CHAR
 **) 0) {

3864 
p°r_√xt
 = (
CPU_CHAR
 **)&
p°r_∑r£_unu£d
;

3865 ()&
p°r_∑r£_unu£d
;

3867 *
p°r_√xt
 = (
CPU_CHAR
 *)
p°r
;

3869 i‡(
≤br_√g
 =(
CPU_BOOLEAN
 *) 0) {

3870 
≤br_√g
 = (
CPU_BOOLEAN
 *)&
nbr_√g_unu£d
;

3871 ()&
nbr_√g_unu£d
;

3873 *
≤br_√g
 = 
DEF_NO
;

3876 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

3880 i‡((
nbr_ba£
 == 1u) ||

3881 (
nbr_ba£
 > 36u)) {

3887 
p°r_∑r£
 = 
p°r
;

3889 
whôe•a˚
 = 
	`ASCII_IsS∑˚
(*
p°r_∑r£
);

3890 
whôe•a˚
 =
DEF_YES
) {

3891 
p°r_∑r£
++;

3892 
whôe•a˚
 = 
	`ASCII_IsS∑˚
(*
p°r_∑r£
);

3895 *
p°r_∑r£
) {

3897 
p°r_∑r£
++;

3898 
√g
 = 
DEF_NO
;

3903 i‡(
nbr_sig√d
 =
DEF_YES
) {

3904 
p°r_∑r£
++;

3906 
√g
 = 
DEF_YES
;

3911 
√g
 = 
DEF_NO
;

3917 
p°r_∑r£_nbr
 = 
p°r_∑r£
;

3919 
nbr_ba£
) {

3921 i‡(*
p°r_∑r£
 == '0') {

3922 
p°r_∑r£
++;

3923 *
p°r_∑r£
) {

3926 
nbr_ba£
 = 16u;

3927 
∑r£_ch¨
 = (
CPU_CHAR
)(*(
p°r_∑r£
 + 1));

3928 
nbr_hex
 = 
	`ASCII_IsDigHex
(
∑r£_ch¨
);

3929 i‡(
nbr_hex
 =
DEF_YES
) {

3930 
p°r_∑r£
++;

3936 
nbr_ba£
 = 8u;

3941 
nbr_ba£
 = 10u;

3947 i‡(*
p°r_∑r£
 == '0') {

3948 
p°r_∑r£
++;

3954 i‡(*
p°r_∑r£
 == '0') {

3955 
p°r_∑r£
++;

3956 *
p°r_∑r£
) {

3959 
∑r£_ch¨
 = (
CPU_CHAR
)(*(
p°r_∑r£
 + 1));

3960 
nbr_hex
 = 
	`ASCII_IsDigHex
(
∑r£_ch¨
);

3961 i‡(
nbr_hex
 =
DEF_YES
) {

3962 
p°r_∑r£
++;

3980 
nbr
 = 0u;

3981 
ovf
 = 
DEF_NO
;

3982 
d⁄e
 = 
DEF_NO
;

3984 
d⁄e
 =
DEF_NO
) {

3985 
∑r£_ch¨
 = (
CPU_CHAR
)*
p°r_∑r£
;

3986 
nbr_Æpha
 = 
	`ASCII_IsAÕhaNum
(
∑r£_ch¨
);

3987 i‡(
nbr_Æpha
 =
DEF_YES
) {

3989 
nbr_dig
 = 
	`ASCII_IsDig
(
∑r£_ch¨
);

3990 i‡(
nbr_dig
 =
DEF_YES
) {

3991 
∑r£_dig
 = (
CPU_INT08U
)(
∑r£_ch¨
 - '0');

3993 
nbr_hex_lowî
 = 
	`ASCII_IsLowî
(
∑r£_ch¨
);

3994 i‡(
nbr_hex_lowî
 =
DEF_YES
) {

3995 
∑r£_dig
 = (
CPU_INT08U
)((
∑r£_ch¨
 - 'a') + 10u);

3997 
∑r£_dig
 = (
CPU_INT08U
)((
∑r£_ch¨
 - 'A') + 10u);

4001 i‡(
∑r£_dig
 < 
nbr_ba£
) {

4002 i‡(
ovf
 =
DEF_NO
) {

4003 i‡(
nbr
 <
Så_Mu…OvfThTbl_I¡32U
[
nbr_ba£
]) {

4005 
nbr
 *
nbr_ba£
;

4006 
nbr
 +
∑r£_dig
;

4007 i‡(
nbr
 < 
∑r£_dig
) {

4008 
ovf
 = 
DEF_YES
;

4011 
ovf
 = 
DEF_YES
;

4014 
p°r_∑r£
++;

4017 
d⁄e
 = 
DEF_YES
;

4021 
d⁄e
 = 
DEF_YES
;

4025 i‡(
ovf
 =
DEF_YES
) {

4026 
nbr
 = 
DEF_INT_32U_MAX_VAL
;

4030 i‡(
p°r_∑r£
 !
p°r_∑r£_nbr
) {

4031 *
p°r_√xt
 = (
CPU_CHAR
 *)
p°r_∑r£
;

4033 *
p°r_√xt
 = (
CPU_CHAR
 *)
p°r
;

4036 *
≤br_√g
 = 
√g
;

4039  (
nbr
);

4040 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_str.h

62 #i‚de‡ 
LIB_STR_MODULE_PRESENT


63 
	#LIB_STR_MODULE_PRESENT


	)

109 
	#LIB_STR_FP_MAX_NBR_DIG_SIG_MIN
 1u

	)

110 
	#LIB_STR_FP_MAX_NBR_DIG_SIG_MAX
 9u

	)

111 
	#LIB_STR_FP_MAX_NBR_DIG_SIG_DFLT
 7u

	)

156 
	~<˝u.h
>

158 
	~<lib_def.h
>

159 
	~<lib_ascii.h
>

161 
	~<lib_cfg.h
>

164 
	~<°dio.h
>

174 #ifde‡ 
LIB_STR_MODULE


175 
	#LIB_STR_EXT


	)

177 
	#LIB_STR_EXT
 

	)

201 #i‚de‡ 
LIB_STR_CFG_FP_EN


202 
	#LIB_STR_CFG_FP_EN
 
DEF_DISABLED


	)

209 #i‚de‡ 
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG


210 
	#LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
 
LIB_STR_FP_MAX_NBR_DIG_SIG_DFLT


	)

220 
	#STR_CR_LF
 "\r\n"

	)

221 
	#STR_LF_CR
 "\n\r"

	)

222 
	#STR_NEW_LINE
 
STR_CR_LF


	)

223 
	#STR_PARENT_PATH
 ".."

	)

225 
	#STR_CR_LF_LEN
 ((
STR_CR_LF
Ë- 1)

	)

226 
	#STR_LF_CR_LEN
 ((
STR_LF_CR
Ë- 1)

	)

227 
	#STR_NEW_LINE_LEN
 ((
STR_NEW_LINE
Ë- 1)

	)

228 
	#STR_PARENT_PATH_LEN
 ((
STR_PARENT_PATH
Ë- 1)

	)

265 
	#Så_FmtPröt
 
¢¥ötf


	)

266 
	#Så_FmtSˇn
 
ssˇnf


	)

276 
CPU_SIZE_T
 
Så_Lí
 (c⁄° 
CPU_CHAR
 *
p°r
);

278 
CPU_SIZE_T
 
Så_Lí_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

279 
CPU_SIZE_T
 
Àn_max
);

283 
CPU_CHAR
 *
Så_C›y
 ( CPU_CHAR *
p°r_de°
,

284 c⁄° 
CPU_CHAR
 *
p°r_§c
);

286 
CPU_CHAR
 *
Så_C›y_N
 ( CPU_CHAR *
p°r_de°
,

287 c⁄° 
CPU_CHAR
 *
p°r_§c
,

288 
CPU_SIZE_T
 
Àn_max
);

291 
CPU_CHAR
 *
Så_C©
 ( CPU_CHAR *
p°r_de°
,

292 c⁄° 
CPU_CHAR
 *
p°r_ˇt
);

294 
CPU_CHAR
 *
Så_C©_N
 ( CPU_CHAR *
p°r_de°
,

295 c⁄° 
CPU_CHAR
 *
p°r_ˇt
,

296 
CPU_SIZE_T
 
Àn_max
);

300 
CPU_INT16S
 
Så_Cmp
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

301 c⁄° 
CPU_CHAR
 *
p2_°r
);

303 
CPU_INT16S
 
Så_Cmp_N
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

304 c⁄° 
CPU_CHAR
 *
p2_°r
,

305 
CPU_SIZE_T
 
Àn_max
);

307 
CPU_INT16S
 
Så_CmpIgn‹eCa£
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

308 c⁄° 
CPU_CHAR
 *
p2_°r
);

310 
CPU_INT16S
 
Så_CmpIgn‹eCa£_N
(c⁄° 
CPU_CHAR
 *
p1_°r
,

311 c⁄° 
CPU_CHAR
 *
p2_°r
,

312 
CPU_SIZE_T
 
Àn_max
);

316 
CPU_CHAR
 *
Så_Ch¨
 (c⁄° CPU_CHAR *
p°r
,

317 
CPU_CHAR
 
§ch_ch¨
);

319 
CPU_CHAR
 *
Så_Ch¨_N
 (c⁄° CPU_CHAR *
p°r
,

320 
CPU_SIZE_T
 
Àn_max
,

321 
CPU_CHAR
 
§ch_ch¨
);

323 
CPU_CHAR
 *
Så_Ch¨_La°
 (c⁄° CPU_CHAR *
p°r
,

324 
CPU_CHAR
 
§ch_ch¨
);

326 
CPU_CHAR
 *
Så_Ch¨_La°_N
 (c⁄° CPU_CHAR *
p°r
,

327 
CPU_SIZE_T
 
Àn_max
,

328 
CPU_CHAR
 
§ch_ch¨
);

330 
CPU_CHAR
 *
Så_Ch¨_Rïœ˚
 ( CPU_CHAR *
p°r
,

331 
CPU_CHAR
 
ch¨_§ch
,

332 
CPU_CHAR
 
ch¨_ª∂a˚
);

334 
CPU_CHAR
 *
Så_Ch¨_Rïœ˚_N
 ( CPU_CHAR *
p°r
,

335 
CPU_CHAR
 
ch¨_§ch
,

336 
CPU_CHAR
 
ch¨_ª∂a˚
,

337 
CPU_SIZE_T
 
Àn_max
);

339 
CPU_CHAR
 *
Så_Så
 (c⁄° CPU_CHAR *
p°r
,

340 c⁄° 
CPU_CHAR
 *
p°r_§ch
);

342 
CPU_CHAR
 *
Så_Så_N
 (c⁄° CPU_CHAR *
p°r
,

343 c⁄° 
CPU_CHAR
 *
p°r_§ch
,

344 
CPU_SIZE_T
 
Àn_max
);

348 
CPU_CHAR
 *
Så_FmtNbr_I¡32U
 ( 
CPU_INT32U
 
nbr
,

349 
CPU_INT08U
 
nbr_dig
,

350 
CPU_INT08U
 
nbr_ba£
,

351 
CPU_CHAR
 
Àad_ch¨
,

352 
CPU_BOOLEAN
 
lowî_ˇ£
,

353 
CPU_BOOLEAN
 
nul
,

354 
CPU_CHAR
 *
p°r
);

356 
CPU_CHAR
 *
Så_FmtNbr_I¡32S
 ( 
CPU_INT32S
 
nbr
,

357 
CPU_INT08U
 
nbr_dig
,

358 
CPU_INT08U
 
nbr_ba£
,

359 
CPU_CHAR
 
Àad_ch¨
,

360 
CPU_BOOLEAN
 
lowî_ˇ£
,

361 
CPU_BOOLEAN
 
nul
,

362 
CPU_CHAR
 *
p°r
);

364 #i‡(
LIB_STR_CFG_FP_EN
 =
DEF_ENABLED
)

365 
CPU_CHAR
 *
Så_FmtNbr_32
 ( 
CPU_FP32
 
nbr
,

366 
CPU_INT08U
 
nbr_dig
,

367 
CPU_INT08U
 
nbr_dp
,

368 
CPU_CHAR
 
Àad_ch¨
,

369 
CPU_BOOLEAN
 
nul
,

370 
CPU_CHAR
 *
p°r
);

375 
CPU_INT32U
 
Så_P¨£Nbr_I¡32U
(c⁄° 
CPU_CHAR
 *
p°r
,

376 
CPU_CHAR
 **
p°r_√xt
,

377 
CPU_INT08U
 
nbr_ba£
);

379 
CPU_INT32S
 
Så_P¨£Nbr_I¡32S
(c⁄° 
CPU_CHAR
 *
p°r
,

380 
CPU_CHAR
 **
p°r_√xt
,

381 
CPU_INT08U
 
nbr_ba£
);

390 #i‚de‡ 
LIB_STR_CFG_FP_EN


395 #ñi‡ ((
LIB_STR_CFG_FP_EN
 !
DEF_DISABLED
) && \

396 (
	gLIB_STR_CFG_FP_EN
 !
DEF_ENABLED
 ))

402 #ñi‡ (
LIB_STR_CFG_FP_EN
 =
DEF_ENABLED
)

404 #i‚de‡ 
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG


409 #ñi‡ (
DEF_CHK_VAL
(
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
, \

410 
LIB_STR_FP_MAX_NBR_DIG_SIG_MIN
, \

411 
LIB_STR_FP_MAX_NBR_DIG_SIG_MAX
Ë!
DEF_OK
)

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Ports/ARM-Cortex-M0/Generic/IAR/os_cpu.h

40 #i‚de‡ 
OS_CPU_H


41 
	#OS_CPU_H


	)

43 #ifde‡ 
OS_CPU_GLOBALS


44 
	#OS_CPU_EXT


	)

46 
	#OS_CPU_EXT
 

	)

49 #ifde‡
__˝lu•lus


66 
	#OS_TASK_SW
(Ë
	`OSCtxSw
()

	)

86 #i‡ 
OS_CFG_TS_EN
 == 1u

87 
	#OS_TS_GET
(Ë(
CPU_TS
)
	`CPU_TS_TmrRd
(Ë

	)

89 
	#OS_TS_GET
(Ë(
CPU_TS
)0u

	)

92 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

93 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)

122 
	#OS_CPU_CFG_SYSTICK_PRIO
 0u

	)

130 
OS_CPU_EXT
 
CPU_STK
 *
OS_CPU_Ex˚±StkBa£
;

138 
OSCtxSw
 ();

139 
OSI¡CtxSw
 ();

140 
OSSèπHighRdy
 ();

142 
OS_CPU_PídSVH™dÀr
 ();

145 
OS_CPU_SysTickH™dÀr
();

146 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
);

149 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Ports/ARM-Cortex-M0/Generic/IAR/os_cpu_c.c

42 
	#OS_CPU_GLOBALS


	)

44 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


45 c⁄° 
CPU_CHAR
 *
	gos_˝u_c__c
 = "$Id: $";

55 
	~<os.h
>

58 #ifde‡
__˝lu•lus


76 
OSIdÀTaskHook
 ()

78 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

79 i‡(
OS_AµIdÀTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

80 (*
OS_AµIdÀTaskHookPå
)();

99 
OSInôHook
 ()

102 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)(
OSCfg_ISRStkBa£På
 + 
OSCfg_ISRStkSize
);

103 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);

122 
OSSètTaskHook
 ()

124 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

125 i‡(
OS_AµSètTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

126 (*
OS_AµSètTaskHookPå
)();

145 
OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

147 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

148 i‡(
OS_AµTaskCª©eHookPå
 !(
OS_APP_HOOK_TCB
)0) {

149 (*
OS_AµTaskCª©eHookPå
)(
p_tcb
);

152 ()
p_tcb
;

170 
OSTaskDñHook
 (
OS_TCB
 *
p_tcb
)

172 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

173 i‡(
OS_AµTaskDñHookPå
 !(
OS_APP_HOOK_TCB
)0) {

174 (*
OS_AµTaskDñHookPå
)(
p_tcb
);

177 ()
p_tcb
;

196 
OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

198 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

199 i‡(
OS_AµTaskRëu∫HookPå
 !(
OS_APP_HOOK_TCB
)0) {

200 (*
OS_AµTaskRëu∫HookPå
)(
p_tcb
);

203 ()
p_tcb
;

295 
CPU_STK
 *
OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

296 *
p_¨g
,

297 
CPU_STK
 *
p_°k_ba£
,

298 
CPU_STK
 *
p_°k_limô
,

299 
CPU_STK_SIZE
 
°k_size
,

300 
OS_OPT
 
›t
)

302 
CPU_STK
 *
p_°k
;

305 ()
›t
;

307 
p_°k
 = &
p_°k_ba£
[
°k_size
];

309 
p_°k
 = (
CPU_STK
 *)((CPU_STK)(p_stk) & 0xFFFFFFF8);

311 *--
p_°k
 = (
CPU_STK
)0x01000000u;

312 *--
p_°k
 = (
CPU_STK
)
p_èsk
;

313 *--
p_°k
 = (
CPU_STK
)
OS_TaskRëu∫
;

314 *--
p_°k
 = (
CPU_STK
)0x12121212u;

315 *--
p_°k
 = (
CPU_STK
)0x03030303u;

316 *--
p_°k
 = (
CPU_STK
)0x02020202u;

317 *--
p_°k
 = (
CPU_STK
)
p_°k_limô
;

318 *--
p_°k
 = (
CPU_STK
)
p_¨g
;

320 *--
p_°k
 = (
CPU_STK
)0x07070707u;

321 *--
p_°k
 = (
CPU_STK
)0x06060606u;

322 *--
p_°k
 = (
CPU_STK
)0x05050505u;

323 *--
p_°k
 = (
CPU_STK
)0x04040404u;

325  (
p_°k
);

346 
OSTaskSwHook
 ()

348 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

349 
CPU_TS
 
ts
;

351 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


352 
CPU_TS
 
öt_dis_time
;

355 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

356 i‡(
OS_AµTaskSwHookPå
 !(
OS_APP_HOOK_VOID
)0) {

357 (*
OS_AµTaskSwHookPå
)();

361 #i‡(
deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

362 
TRACE_OS_TASK_SWITCHED_IN
(
OSTCBHighRdyPå
);

365 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

366 
ts
 = 
OS_TS_GET
();

367 i‡(
OSTCBCurPå
 !
OSTCBHighRdyPå
) {

368 
OSTCBCurPå
->
Cy˛esDñè
 = 
ts
 - OSTCBCurPå->
Cy˛esSèπ
;

369 
OSTCBCurPå
->
Cy˛esTŸÆ
 +(
OS_CYCLES
)OSTCBCurPå->
Cy˛esDñè
;

372 
OSTCBHighRdyPå
->
Cy˛esSèπ
 = 
ts
;

375 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


376 
öt_dis_time
 = 
CPU_I¡DisMósMaxCurRe£t
();

377 i‡(
OSTCBCurPå
->
I¡DisTimeMax
 < 
öt_dis_time
) {

378 
OSTCBCurPå
->
I¡DisTimeMax
 = 
öt_dis_time
;

382 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

384 i‡(
OSTCBCurPå
->
SchedLockTimeMax
 < 
OSSchedLockTimeMaxCur
) {

385 
OSTCBCurPå
->
SchedLockTimeMax
 = 
OSSchedLockTimeMaxCur
;

387 
OSSchedLockTimeMaxCur
 = (
CPU_TS
)0;

405 
OSTimeTickHook
 ()

407 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

408 i‡(
OS_AµTimeTickHookPå
 !(
OS_APP_HOOK_VOID
)0) {

409 (*
OS_AµTimeTickHookPå
)();

429 
OS_CPU_SysTickH™dÀr
 ()

431 
CPU_SR_ALLOC
();

434 
CPU_CRITICAL_ENTER
();

435 
OSI¡Ne°ögCå
++;

436 
CPU_CRITICAL_EXIT
();

438 
OSTimeTick
();

440 
OSI¡Exô
();

457 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
)

459 
CPU_INT32U
 
¥io
;

462 
CPU_REG_NVIC_ST_RELOAD
 = 
˙ts
 - 1u;

465 
¥io
 = 
CPU_REG_NVIC_SHPRI3
;

466 
¥io
 &
DEF_BIT_FIELD
(24, 0);

467 
¥io
 |
DEF_BIT_MASK
(
OS_CPU_CFG_SYSTICK_PRIO
, 24);

469 
CPU_REG_NVIC_SHPRI3
 = 
¥io
;

472 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 |

473 
CPU_REG_NVIC_ST_CTRL_ENABLE
;

475 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_TICKINT
;

478 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Ports/ARM-Cortex-M0/Generic/RealView/os_cpu.h

25 #i‚de‡ 
OS_CPU_H


26 
	#OS_CPU_H


	)

29 #ifde‡ 
OS_CPU_GLOBALS


30 
	#OS_CPU_EXT


	)

32 
	#OS_CPU_EXT
 

	)

35 #ifde‡
__˝lu•lus


52 
	#OS_TASK_SW
(Ë
	`OSCtxSw
()

	)

54 
	#OS_TASK_SW_SYNC
(Ë
	`__isb
(0xF)

	)

75 #i‡ 
OS_CFG_TS_EN
 == 1u

76 
	#OS_TS_GET
(Ë(
CPU_TS
)
	`CPU_TS_TmrRd
(Ë

	)

78 
	#OS_TS_GET
(Ë(
CPU_TS
)0u

	)

81 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

82 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)

112 
	#OS_CPU_CFG_SYSTICK_PRIO
 0u

	)

120 
OS_CPU_EXT
 
CPU_STK
 *
OS_CPU_Ex˚±StkBa£
;

128 
OSCtxSw
 ();

129 
OSI¡CtxSw
 ();

130 
OSSèπHighRdy
 ();

132 
OS_CPU_PídSVH™dÀr
 ();

135 
OS_CPU_SysTickH™dÀr
();

136 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
);

139 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Ports/ARM-Cortex-M0/Generic/RealView/os_cpu_c.c

26 
	#OS_CPU_GLOBALS


	)

28 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


29 c⁄° 
CPU_CHAR
 *
	gos_˝u_c__c
 = "$Id: $";

39 
	~"../../../../Sour˚/os.h
"

42 #ifde‡
__˝lu•lus


60 
OSIdÀTaskHook
 ()

62 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

63 i‡(
OS_AµIdÀTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

64 (*
OS_AµIdÀTaskHookPå
)();

83 
OSInôHook
 ()

86 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)(
OSCfg_ISRStkBa£På
 + 
OSCfg_ISRStkSize
);

87 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);

106 
OSSètTaskHook
 ()

108 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

109 i‡(
OS_AµSètTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

110 (*
OS_AµSètTaskHookPå
)();

129 
OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

131 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

132 i‡(
OS_AµTaskCª©eHookPå
 !(
OS_APP_HOOK_TCB
)0) {

133 (*
OS_AµTaskCª©eHookPå
)(
p_tcb
);

136 ()
p_tcb
;

154 
OSTaskDñHook
 (
OS_TCB
 *
p_tcb
)

156 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

157 i‡(
OS_AµTaskDñHookPå
 !(
OS_APP_HOOK_TCB
)0) {

158 (*
OS_AµTaskDñHookPå
)(
p_tcb
);

161 ()
p_tcb
;

180 
OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

182 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

183 i‡(
OS_AµTaskRëu∫HookPå
 !(
OS_APP_HOOK_TCB
)0) {

184 (*
OS_AµTaskRëu∫HookPå
)(
p_tcb
);

187 ()
p_tcb
;

279 
CPU_STK
 *
OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

280 *
p_¨g
,

281 
CPU_STK
 *
p_°k_ba£
,

282 
CPU_STK
 *
p_°k_limô
,

283 
CPU_STK_SIZE
 
°k_size
,

284 
OS_OPT
 
›t
)

286 
CPU_STK
 *
p_°k
;

289 ()
›t
;

291 
p_°k
 = &
p_°k_ba£
[
°k_size
];

293 
p_°k
 = (
CPU_STK
 *)((CPU_STK)(p_stk) & 0xFFFFFFF8);

295 *--
p_°k
 = (
CPU_STK
)0x01000000u;

296 *--
p_°k
 = (
CPU_STK
)
p_èsk
;

297 *--
p_°k
 = (
CPU_STK
)
OS_TaskRëu∫
;

298 *--
p_°k
 = (
CPU_STK
)0x12121212u;

299 *--
p_°k
 = (
CPU_STK
)0x03030303u;

300 *--
p_°k
 = (
CPU_STK
)0x02020202u;

301 *--
p_°k
 = (
CPU_STK
)
p_°k_limô
;

302 *--
p_°k
 = (
CPU_STK
)
p_¨g
;

304 *--
p_°k
 = (
CPU_STK
)0x07070707u;

305 *--
p_°k
 = (
CPU_STK
)0x06060606u;

306 *--
p_°k
 = (
CPU_STK
)0x05050505u;

307 *--
p_°k
 = (
CPU_STK
)0x04040404u;

309  (
p_°k
);

330 
OSTaskSwHook
 ()

332 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

333 
CPU_TS
 
ts
;

335 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


336 
CPU_TS
 
öt_dis_time
;

339 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

340 i‡(
OS_AµTaskSwHookPå
 !(
OS_APP_HOOK_VOID
)0) {

341 (*
OS_AµTaskSwHookPå
)();

345 #i‡(
deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

346 
TRACE_OS_TASK_SWITCHED_IN
(
OSTCBHighRdyPå
);

349 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

350 
ts
 = 
OS_TS_GET
();

351 i‡(
OSTCBCurPå
 !
OSTCBHighRdyPå
) {

352 
OSTCBCurPå
->
Cy˛esDñè
 = 
ts
 - OSTCBCurPå->
Cy˛esSèπ
;

353 
OSTCBCurPå
->
Cy˛esTŸÆ
 +(
OS_CYCLES
)OSTCBCurPå->
Cy˛esDñè
;

356 
OSTCBHighRdyPå
->
Cy˛esSèπ
 = 
ts
;

359 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


360 
öt_dis_time
 = 
CPU_I¡DisMósMaxCurRe£t
();

361 i‡(
OSTCBCurPå
->
I¡DisTimeMax
 < 
öt_dis_time
) {

362 
OSTCBCurPå
->
I¡DisTimeMax
 = 
öt_dis_time
;

366 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

368 i‡(
OSTCBCurPå
->
SchedLockTimeMax
 < 
OSSchedLockTimeMaxCur
) {

369 
OSTCBCurPå
->
SchedLockTimeMax
 = 
OSSchedLockTimeMaxCur
;

371 
OSSchedLockTimeMaxCur
 = (
CPU_TS
)0;

389 
OSTimeTickHook
 ()

391 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

392 i‡(
OS_AµTimeTickHookPå
 !(
OS_APP_HOOK_VOID
)0) {

393 (*
OS_AµTimeTickHookPå
)();

413 
OS_CPU_SysTickH™dÀr
 ()

415 
CPU_SR_ALLOC
();

418 
CPU_CRITICAL_ENTER
();

419 
OSI¡Ne°ögCå
++;

420 
CPU_CRITICAL_EXIT
();

422 
OSTimeTick
();

424 
OSI¡Exô
();

441 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
)

443 
CPU_INT32U
 
¥io
;

446 
CPU_REG_NVIC_ST_RELOAD
 = 
˙ts
 - 1u;

449 
¥io
 = 
CPU_REG_NVIC_SHPRI3
;

450 
¥io
 &
DEF_BIT_FIELD
(24, 0);

451 
¥io
 |
DEF_BIT_MASK
(
OS_CPU_CFG_SYSTICK_PRIO
, 24);

453 
CPU_REG_NVIC_SHPRI3
 = 
¥io
;

456 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 |

457 
CPU_REG_NVIC_ST_CTRL_ENABLE
;

459 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_TICKINT
;

462 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Ports/ARM-Cortex-M4/Generic/RealView/os_cpu.h

41 #i‚de‡ 
OS_CPU_H


42 
	#OS_CPU_H


	)

44 #ifde‡ 
OS_CPU_GLOBALS


45 
	#OS_CPU_EXT


	)

47 
	#OS_CPU_EXT
 

	)

50 #ifde‡
__˝lu•lus


61 #i‚de‡ 
__TARGET_FPU_SOFTVFP


62 
	#OS_CPU_ARM_FP_EN
 
DEF_ENABLED


	)

64 
	#OS_CPU_ARM_FP_EN
 
DEF_DISABLED


	)

67 
	#OS_CPU_ARM_FP_REG_NBR
 32u

	)

76 
	#OS_TASK_SW
(Ë
	`OSCtxSw
()

	)

78 
	#OS_TASK_SW_SYNC
(Ë
	`__isb
(0xF)

	)

99 #i‡ 
OS_CFG_TS_EN
 == 1u

100 
	#OS_TS_GET
(Ë(
CPU_TS
)
	`CPU_TS_TmrRd
(Ë

	)

102 
	#OS_TS_GET
(Ë(
CPU_TS
)0u

	)

105 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

106 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)

135 
	#OS_CPU_CFG_SYSTICK_PRIO
 0u

	)

144 
OS_CPU_EXT
 
CPU_STK
 *
OS_CPU_Ex˚±StkBa£
;

153 
OSCtxSw
 ();

154 
OSI¡CtxSw
 ();

155 
OSSèπHighRdy
 ();

157 
OS_CPU_PídSVH™dÀr
 ();

160 
OS_CPU_SysTickH™dÀr
();

161 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
);

163 #i‡(
OS_CPU_ARM_FP_EN
 =
DEF_ENABLED
)

164 
OS_CPU_FP_Reg_Push
 (
CPU_STK
 *
°kPå
);

165 
OS_CPU_FP_Reg_P›
 (
CPU_STK
 *
°kPå
);

169 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Ports/ARM-Cortex-M4/Generic/RealView/os_cpu_c.c

42 
	#OS_CPU_GLOBALS


	)

44 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


45 c⁄° 
CPU_CHAR
 *
	gos_˝u_c__c
 = "$Id: $";

55 
	~"../../../../Sour˚/os.h
"

58 #ifde‡
__˝lu•lus


76 
OSIdÀTaskHook
 ()

78 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

79 i‡(
OS_AµIdÀTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

80 (*
OS_AµIdÀTaskHookPå
)();

98 
OSInôHook
 ()

101 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)(
OSCfg_ISRStkBa£På
 + 
OSCfg_ISRStkSize
);

102 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);

119 
OSSètTaskHook
 ()

121 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

122 i‡(
OS_AµSètTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

123 (*
OS_AµSètTaskHookPå
)();

141 
OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

143 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

144 i‡(
OS_AµTaskCª©eHookPå
 !(
OS_APP_HOOK_TCB
)0) {

145 (*
OS_AµTaskCª©eHookPå
)(
p_tcb
);

148 ()
p_tcb
;

165 
OSTaskDñHook
 (
OS_TCB
 *
p_tcb
)

167 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

168 i‡(
OS_AµTaskDñHookPå
 !(
OS_APP_HOOK_TCB
)0) {

169 (*
OS_AµTaskDñHookPå
)(
p_tcb
);

172 ()
p_tcb
;

190 
OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

192 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

193 i‡(
OS_AµTaskRëu∫HookPå
 !(
OS_APP_HOOK_TCB
)0) {

194 (*
OS_AµTaskRëu∫HookPå
)(
p_tcb
);

197 ()
p_tcb
;

230 
CPU_STK
 *
OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

231 *
p_¨g
,

232 
CPU_STK
 *
p_°k_ba£
,

233 
CPU_STK
 *
p_°k_limô
,

234 
CPU_STK_SIZE
 
°k_size
,

235 
OS_OPT
 
›t
)

237 
CPU_STK
 *
p_°k
;

240 ()
›t
;

242 
p_°k
 = &
p_°k_ba£
[
°k_size
];

244 
p_°k
 = (
CPU_STK
 *)((CPU_STK)(p_stk) & 0xFFFFFFF8);

246 *--
p_°k
 = (
CPU_STK
)0x01000000u;

247 *--
p_°k
 = (
CPU_STK
)
p_èsk
;

248 *--
p_°k
 = (
CPU_STK
)
OS_TaskRëu∫
;

249 *--
p_°k
 = (
CPU_STK
)0x12121212u;

250 *--
p_°k
 = (
CPU_STK
)0x03030303u;

251 *--
p_°k
 = (
CPU_STK
)0x02020202u;

252 *--
p_°k
 = (
CPU_STK
)
p_°k_limô
;

253 *--
p_°k
 = (
CPU_STK
)
p_¨g
;

255 *--
p_°k
 = (
CPU_STK
)0x11111111u;

256 *--
p_°k
 = (
CPU_STK
)0x10101010u;

257 *--
p_°k
 = (
CPU_STK
)0x09090909u;

258 *--
p_°k
 = (
CPU_STK
)0x08080808u;

259 *--
p_°k
 = (
CPU_STK
)0x07070707u;

260 *--
p_°k
 = (
CPU_STK
)0x06060606u;

261 *--
p_°k
 = (
CPU_STK
)0x05050505u;

262 *--
p_°k
 = (
CPU_STK
)0x04040404u;

264 #i‡(
OS_CPU_ARM_FP_EN
 =
DEF_ENABLED
)

265 i‡((
›t
 & 
OS_OPT_TASK_SAVE_FP
Ë!(
OS_OPT
)0) {

266 *--
p_°k
 = (
CPU_STK
)0x02000000u;

268 *--
p_°k
 = (
CPU_STK
)0x41F80000u;

269 *--
p_°k
 = (
CPU_STK
)0x41F00000u;

270 *--
p_°k
 = (
CPU_STK
)0x41E80000u;

271 *--
p_°k
 = (
CPU_STK
)0x41E00000u;

272 *--
p_°k
 = (
CPU_STK
)0x41D80000u;

273 *--
p_°k
 = (
CPU_STK
)0x41D00000u;

274 *--
p_°k
 = (
CPU_STK
)0x41C80000u;

275 *--
p_°k
 = (
CPU_STK
)0x41C00000u;

276 *--
p_°k
 = (
CPU_STK
)0x41B80000u;

277 *--
p_°k
 = (
CPU_STK
)0x41B00000u;

278 *--
p_°k
 = (
CPU_STK
)0x41A80000u;

279 *--
p_°k
 = (
CPU_STK
)0x41A00000u;

280 *--
p_°k
 = (
CPU_STK
)0x41980000u;

281 *--
p_°k
 = (
CPU_STK
)0x41900000u;

282 *--
p_°k
 = (
CPU_STK
)0x41880000u;

283 *--
p_°k
 = (
CPU_STK
)0x41800000u;

284 *--
p_°k
 = (
CPU_STK
)0x41700000u;

285 *--
p_°k
 = (
CPU_STK
)0x41600000u;

286 *--
p_°k
 = (
CPU_STK
)0x41500000u;

287 *--
p_°k
 = (
CPU_STK
)0x41400000u;

288 *--
p_°k
 = (
CPU_STK
)0x41300000u;

289 *--
p_°k
 = (
CPU_STK
)0x41200000u;

290 *--
p_°k
 = (
CPU_STK
)0x41100000u;

291 *--
p_°k
 = (
CPU_STK
)0x41000000u;

292 *--
p_°k
 = (
CPU_STK
)0x40E00000u;

293 *--
p_°k
 = (
CPU_STK
)0x40C00000u;

294 *--
p_°k
 = (
CPU_STK
)0x40A00000u;

295 *--
p_°k
 = (
CPU_STK
)0x40800000u;

296 *--
p_°k
 = (
CPU_STK
)0x40400000u;

297 *--
p_°k
 = (
CPU_STK
)0x40000000u;

298 *--
p_°k
 = (
CPU_STK
)0x3F800000u;

299 *--
p_°k
 = (
CPU_STK
)0x00000000u;

303  (
p_°k
);

323 
OSTaskSwHook
 ()

325 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

326 
CPU_TS
 
ts
;

328 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


329 
CPU_TS
 
öt_dis_time
;

333 #i‡(
OS_CPU_ARM_FP_EN
 =
DEF_ENABLED
)

334 i‡((
OSTCBCurPå
->
O±
 & 
OS_OPT_TASK_SAVE_FP
Ë!(
OS_OPT
)0) {

335 
OS_CPU_FP_Reg_Push
(
OSTCBCurPå
->
StkPå
);

338 i‡((
OSTCBHighRdyPå
->
O±
 & 
OS_OPT_TASK_SAVE_FP
Ë!(
OS_OPT
)0) {

339 
OS_CPU_FP_Reg_P›
(
OSTCBHighRdyPå
->
StkPå
);

343 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

344 i‡(
OS_AµTaskSwHookPå
 !(
OS_APP_HOOK_VOID
)0) {

345 (*
OS_AµTaskSwHookPå
)();

349 #i‡(
deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

350 
TRACE_OS_TASK_SWITCHED_IN
(
OSTCBHighRdyPå
);

353 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

354 
ts
 = 
OS_TS_GET
();

355 i‡(
OSTCBCurPå
 !
OSTCBHighRdyPå
) {

356 
OSTCBCurPå
->
Cy˛esDñè
 = 
ts
 - OSTCBCurPå->
Cy˛esSèπ
;

357 
OSTCBCurPå
->
Cy˛esTŸÆ
 +(
OS_CYCLES
)OSTCBCurPå->
Cy˛esDñè
;

360 
OSTCBHighRdyPå
->
Cy˛esSèπ
 = 
ts
;

363 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


364 
öt_dis_time
 = 
CPU_I¡DisMósMaxCurRe£t
();

365 i‡(
OSTCBCurPå
->
I¡DisTimeMax
 < 
öt_dis_time
) {

366 
OSTCBCurPå
->
I¡DisTimeMax
 = 
öt_dis_time
;

370 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

372 i‡(
OSTCBCurPå
->
SchedLockTimeMax
 < 
OSSchedLockTimeMaxCur
) {

373 
OSTCBCurPå
->
SchedLockTimeMax
 = 
OSSchedLockTimeMaxCur
;

375 
OSSchedLockTimeMaxCur
 = (
CPU_TS
)0;

392 
OSTimeTickHook
 ()

394 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

395 i‡(
OS_AµTimeTickHookPå
 !(
OS_APP_HOOK_VOID
)0) {

396 (*
OS_AµTimeTickHookPå
)();

415 
OS_CPU_SysTickH™dÀr
 ()

417 
CPU_SR_ALLOC
();

420 
CPU_CRITICAL_ENTER
();

421 
OSI¡Ne°ögCå
++;

422 
CPU_CRITICAL_EXIT
();

424 
OSTimeTick
();

426 
OSI¡Exô
();

442 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
)

444 
CPU_INT32U
 
¥io
;

447 
CPU_REG_NVIC_ST_RELOAD
 = 
˙ts
 - 1u;

450 
¥io
 = 
CPU_REG_NVIC_SHPRI3
;

451 
¥io
 &
DEF_BIT_FIELD
(24, 0);

452 
¥io
 |
DEF_BIT_MASK
(
OS_CPU_CFG_SYSTICK_PRIO
, 24);

454 
CPU_REG_NVIC_SHPRI3
 = 
¥io
;

457 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 |

458 
CPU_REG_NVIC_ST_CTRL_ENABLE
;

460 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_TICKINT
;

463 #ifde‡
__˝lu•lus


	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os.h

38 #i‚de‡ 
OS_H


39 
	#OS_H


	)

47 
	#OS_VERSION
 30402u

	)

55 
	~<os_cfg.h
>

56 
	~<˝u_c‹e.h
>

57 
	~<lib_def.h
>

58 
	~<os_ty≥.h
>

59 
	~<os_˝u.h
>

60 #i‡ (
deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

61 
	~<åa˚_os.h
>

72 #i‡ 
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u && 
deföed
(
CPU_CFG_INT_DIS_MEAS_EN
)

73 
	#OS_SCHED_LOCK_TIME_MEAS_START
(Ë
	`OS_SchedLockTimeMósSèπ
()

	)

75 
	#OS_SCHED_LOCK_TIME_MEAS_START
()

	)

79 #i‡ 
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u && 
deföed
(
CPU_CFG_INT_DIS_MEAS_EN
)

80 
	#OS_SCHED_LOCK_TIME_MEAS_STOP
(Ë
	`OS_SchedLockTimeMósSt›
()

	)

82 
	#OS_SCHED_LOCK_TIME_MEAS_STOP
()

	)

85 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

87 
	#OS_CRITICAL_ENTER
() \

89 
	`CPU_CRITICAL_ENTER
(); \

90 
OSSchedLockNe°ögCå
++; \

91 i‡(
OSSchedLockNe°ögCå
 == 1u) { \

92 
	`OS_SCHED_LOCK_TIME_MEAS_START
(); \

94 
	`CPU_CRITICAL_EXIT
(); \

95 } 0)

	)

97 
	#OS_CRITICAL_ENTER_CPU_EXIT
() \

99 
OSSchedLockNe°ögCå
++; \

101 i‡(
OSSchedLockNe°ögCå
 == 1u) { \

102 
	`OS_SCHED_LOCK_TIME_MEAS_START
(); \

104 
	`CPU_CRITICAL_EXIT
(); \

105 } 0)

	)

108 
	#OS_CRITICAL_EXIT
() \

110 
	`CPU_CRITICAL_ENTER
(); \

111 
OSSchedLockNe°ögCå
--; \

112 i‡(
OSSchedLockNe°ögCå
 =(
OS_NESTING_CTR
)0) { \

113 
	`OS_SCHED_LOCK_TIME_MEAS_STOP
(); \

114 i‡(
OSI¡QNbrE¡rõs
 > (
OS_OBJ_QTY
)0) { \

115 
	`CPU_CRITICAL_EXIT
(); \

116 
	`OS_Sched0
(); \

118 
	`CPU_CRITICAL_EXIT
(); \

121 
	`CPU_CRITICAL_EXIT
(); \

123 } 0)

	)

125 
	#OS_CRITICAL_EXIT_NO_SCHED
() \

127 
	`CPU_CRITICAL_ENTER
(); \

128 
OSSchedLockNe°ögCå
--; \

129 i‡(
OSSchedLockNe°ögCå
 =(
OS_NESTING_CTR
)0) { \

130 
	`OS_SCHED_LOCK_TIME_MEAS_STOP
(); \

132 
	`CPU_CRITICAL_EXIT
(); \

133 } 0)

	)

139 
	#OS_CRITICAL_ENTER
(Ë
	`CPU_CRITICAL_ENTER
()

	)

141 
	#OS_CRITICAL_ENTER_CPU_EXIT
()

	)

143 
	#OS_CRITICAL_EXIT
(Ë
	`CPU_CRITICAL_EXIT
()

	)

145 
	#OS_CRITICAL_EXIT_NO_SCHED
(Ë
	`CPU_CRITICAL_EXIT
()

	)

155 #ifde‡ 
OS_GLOBALS


156 
	#OS_EXT


	)

158 
	#OS_EXT
 

	)

162 
	#OS_PRIO_TBL_SIZE
 ((
OS_CFG_PRIO_MAX
 - 1uË/ (
DEF_INT_CPU_NBR_BITS
Ë+ 1u)

	)

164 
	#OS_MSG_EN
 (((
OS_CFG_TASK_Q_EN
 > 0uË|| (
OS_CFG_Q_EN
 > 0u)Ë? 1u : 0u)

	)

166 
	#OS_OBJ_TYPE_REQ
 (((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_OBJ_TYPE_CHK_EN
 > 0uË|| (
OS_CFG_PEND_MULTI_EN
 > 0u) \

167 || (
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)Ë? 1u : 0u)

	)

184 
	#OS_STATE_OS_STOPPED
 (
OS_STATE
)(0u)

	)

185 
	#OS_STATE_OS_RUNNING
 (
OS_STATE
)(1u)

	)

187 
	#OS_STATE_NOT_RDY
 (
CPU_BOOLEAN
)(0u)

	)

188 
	#OS_STATE_RDY
 (
CPU_BOOLEAN
)(1u)

	)

192 
	#OS_TASK_STATE_BIT_DLY
 (
OS_STATE
)(0x01uË

	)

194 
	#OS_TASK_STATE_BIT_PEND
 (
OS_STATE
)(0x02uË

	)

196 
	#OS_TASK_STATE_BIT_SUSPENDED
 (
OS_STATE
)(0x04uË

	)

200 
	#OS_TASK_STATE_RDY
 (
OS_STATE
)–0uË

	)

201 
	#OS_TASK_STATE_DLY
 (
OS_STATE
)–1uË

	)

202 
	#OS_TASK_STATE_PEND
 (
OS_STATE
)–2uË

	)

203 
	#OS_TASK_STATE_PEND_TIMEOUT
 (
OS_STATE
)–3uË

	)

204 
	#OS_TASK_STATE_SUSPENDED
 (
OS_STATE
)–4uË

	)

205 
	#OS_TASK_STATE_DLY_SUSPENDED
 (
OS_STATE
)–5uË

	)

206 
	#OS_TASK_STATE_PEND_SUSPENDED
 (
OS_STATE
)–6uË

	)

207 
	#OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
 (
OS_STATE
)–7uË

	)

208 
	#OS_TASK_STATE_DEL
 (
OS_STATE
)(255u)

	)

211 
	#OS_TASK_PEND_ON_NOTHING
 (
OS_STATE
)–0uË

	)

212 
	#OS_TASK_PEND_ON_FLAG
 (
OS_STATE
)–1uË

	)

213 
	#OS_TASK_PEND_ON_TASK_Q
 (
OS_STATE
)–2uË

	)

214 
	#OS_TASK_PEND_ON_MULTI
 (
OS_STATE
)–3uË

	)

215 
	#OS_TASK_PEND_ON_MUTEX
 (
OS_STATE
)–4uË

	)

216 
	#OS_TASK_PEND_ON_Q
 (
OS_STATE
)–5uË

	)

217 
	#OS_TASK_PEND_ON_SEM
 (
OS_STATE
)–6uË

	)

218 
	#OS_TASK_PEND_ON_TASK_SEM
 (
OS_STATE
)–7uË

	)

227 
	#OS_STATUS_PEND_OK
 (
OS_STATUS
)–0uË

	)

228 
	#OS_STATUS_PEND_ABORT
 (
OS_STATUS
)–1uË

	)

229 
	#OS_STATUS_PEND_DEL
 (
OS_STATUS
)–2uË

	)

230 
	#OS_STATUS_PEND_TIMEOUT
 (
OS_STATUS
)–3uË

	)

242 
	#OS_OBJ_TYPE_NONE
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('N', 'O', 'N', 'E')

	)

243 
	#OS_OBJ_TYPE_FLAG
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('F', 'L', 'A', 'G')

	)

244 
	#OS_OBJ_TYPE_MEM
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('M', 'E', 'M', ' ')

	)

245 
	#OS_OBJ_TYPE_MUTEX
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('M', 'U', 'T', 'X')

	)

246 
	#OS_OBJ_TYPE_Q
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('Q', 'U', 'E', 'U')

	)

247 
	#OS_OBJ_TYPE_SEM
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('S', 'E', 'M', 'A')

	)

248 
	#OS_OBJ_TYPE_TASK_MSG
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'M', 'S', 'G')

	)

249 
	#OS_OBJ_TYPE_TASK_RESUME
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'R', 'E', 'S')

	)

250 
	#OS_OBJ_TYPE_TASK_SIGNAL
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'S', 'I', 'G')

	)

251 
	#OS_OBJ_TYPE_TASK_SUSPEND
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'S', 'U', 'S')

	)

252 
	#OS_OBJ_TYPE_TICK
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'I', 'C', 'K')

	)

253 
	#OS_OBJ_TYPE_TMR
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'M', 'R', ' ')

	)

261 
	#OS_OPT_NONE
 (
OS_OPT
)(0x0000u)

	)

269 
	#OS_OPT_DEL_NO_PEND
 (
OS_OPT
)(0x0000u)

	)

270 
	#OS_OPT_DEL_ALWAYS
 (
OS_OPT
)(0x0001u)

	)

278 
	#OS_OPT_PEND_FLAG_MASK
 (
OS_OPT
)(0x000Fu)

	)

279 
	#OS_OPT_PEND_FLAG_CLR_ALL
 (
OS_OPT
)(0x0001uË

	)

280 
	#OS_OPT_PEND_FLAG_CLR_AND
 (
OS_OPT
)(0x0001u)

	)

282 
	#OS_OPT_PEND_FLAG_CLR_ANY
 (
OS_OPT
)(0x0002uË

	)

283 
	#OS_OPT_PEND_FLAG_CLR_OR
 (
OS_OPT
)(0x0002u)

	)

285 
	#OS_OPT_PEND_FLAG_SET_ALL
 (
OS_OPT
)(0x0004uË

	)

286 
	#OS_OPT_PEND_FLAG_SET_AND
 (
OS_OPT
)(0x0004u)

	)

288 
	#OS_OPT_PEND_FLAG_SET_ANY
 (
OS_OPT
)(0x0008uË

	)

289 
	#OS_OPT_PEND_FLAG_SET_OR
 (
OS_OPT
)(0x0008u)

	)

291 
	#OS_OPT_PEND_FLAG_CONSUME
 (
OS_OPT
)(0x0100uË

	)

294 
	#OS_OPT_PEND_BLOCKING
 (
OS_OPT
)(0x0000u)

	)

295 
	#OS_OPT_PEND_NON_BLOCKING
 (
OS_OPT
)(0x8000u)

	)

303 
	#OS_OPT_PEND_ABORT_1
 (
OS_OPT
)(0x0000uË

	)

304 
	#OS_OPT_PEND_ABORT_ALL
 (
OS_OPT
)(0x0100uË

	)

313 
	#OS_OPT_POST_NONE
 (
OS_OPT
)(0x0000u)

	)

315 
	#OS_OPT_POST_FLAG_SET
 (
OS_OPT
)(0x0000u)

	)

316 
	#OS_OPT_POST_FLAG_CLR
 (
OS_OPT
)(0x0001u)

	)

318 
	#OS_OPT_POST_FIFO
 (
OS_OPT
)(0x0000uË

	)

319 
	#OS_OPT_POST_LIFO
 (
OS_OPT
)(0x0010uË

	)

320 
	#OS_OPT_POST_1
 (
OS_OPT
)(0x0000uË

	)

321 
	#OS_OPT_POST_ALL
 (
OS_OPT
)(0x0200uË

	)

323 
	#OS_OPT_POST_NO_SCHED
 (
OS_OPT
)(0x8000uË

	)

331 
	#OS_OPT_TASK_NONE
 (
OS_OPT
)(0x0000uË

	)

332 
	#OS_OPT_TASK_STK_CHK
 (
OS_OPT
)(0x0001uË

	)

333 
	#OS_OPT_TASK_STK_CLR
 (
OS_OPT
)(0x0002uË

	)

334 
	#OS_OPT_TASK_SAVE_FP
 (
OS_OPT
)(0x0004uË

	)

335 
	#OS_OPT_TASK_NO_TLS
 (
OS_OPT
)(0x0008uË

	)

343 
	#OS_OPT_TIME_DLY
 
DEF_BIT_NONE


	)

344 
	#OS_OPT_TIME_TIMEOUT
 ((
OS_OPT
)
DEF_BIT_01
)

	)

345 
	#OS_OPT_TIME_MATCH
 ((
OS_OPT
)
DEF_BIT_02
)

	)

346 
	#OS_OPT_TIME_PERIODIC
 ((
OS_OPT
)
DEF_BIT_03
)

	)

348 
	#OS_OPT_TIME_HMSM_STRICT
 ((
OS_OPT
)
DEF_BIT_NONE
)

	)

349 
	#OS_OPT_TIME_HMSM_NON_STRICT
 ((
OS_OPT
)
DEF_BIT_04
)

	)

351 
	#OS_OPT_TIME_MASK
 ((
OS_OPT
)(
OS_OPT_TIME_DLY
 | \

352 
OS_OPT_TIME_TIMEOUT
 | \

353 
OS_OPT_TIME_PERIODIC
 | \

354 
OS_OPT_TIME_MATCH
))

	)

356 
	#OS_OPT_TIME_OPTS_MASK
 (
OS_OPT_TIME_DLY
 | \

357 
OS_OPT_TIME_TIMEOUT
 | \

358 
OS_OPT_TIME_PERIODIC
 | \

359 
OS_OPT_TIME_MATCH
 | \

360 
OS_OPT_TIME_HMSM_NON_STRICT
)

	)

368 
	#OS_OPT_TMR_NONE
 (
OS_OPT
)(0uË

	)

370 
	#OS_OPT_TMR_ONE_SHOT
 (
OS_OPT
)(1uË

	)

371 
	#OS_OPT_TMR_PERIODIC
 (
OS_OPT
)(2uË

	)

373 
	#OS_OPT_TMR_CALLBACK
 (
OS_OPT
)(3uË

	)

374 
	#OS_OPT_TMR_CALLBACK_ARG
 (
OS_OPT
)(4uË

	)

382 
	#OS_TMR_STATE_UNUSED
 (
OS_STATE
)(0u)

	)

383 
	#OS_TMR_STATE_STOPPED
 (
OS_STATE
)(1u)

	)

384 
	#OS_TMR_STATE_RUNNING
 (
OS_STATE
)(2u)

	)

385 
	#OS_TMR_STATE_COMPLETED
 (
OS_STATE
)(3u)

	)

393 
	#OS_PRIO_INIT
 (
OS_PRIO
)(
OS_CFG_PRIO_MAX
)

	)

401 
	#OS_TICK_TH_INIT
 (
OS_TICK
)(
	`DEF_BIT
 (((OS_TICKË* 
DEF_OCTET_NBR_BITS
Ë- 1u))

	)

404 
	#OS_TICK_TH_RDY
 (
OS_TICK
)(
	`DEF_BIT_FIELD
((((OS_TICKË* 
DEF_OCTET_NBR_BITS
) / 2u), \

405 (((
OS_TICK
Ë* 
DEF_OCTET_NBR_BITS
Ë/ 2u)))

	)

422 
	eos_îr
 {

423 
OS_ERR_NONE
 = 0u,

425 
OS_ERR_A
 = 10000u,

426 
OS_ERR_ACCEPT_ISR
 = 10001u,

428 
OS_ERR_B
 = 11000u,

430 
OS_ERR_C
 = 12000u,

431 
OS_ERR_CREATE_ISR
 = 12001u,

433 
OS_ERR_D
 = 13000u,

434 
OS_ERR_DEL_ISR
 = 13001u,

436 
OS_ERR_E
 = 14000u,

438 
OS_ERR_F
 = 15000u,

439 
OS_ERR_FATAL_RETURN
 = 15001u,

441 
OS_ERR_FLAG_GRP_DEPLETED
 = 15101u,

442 
OS_ERR_FLAG_NOT_RDY
 = 15102u,

443 
OS_ERR_FLAG_PEND_OPT
 = 15103u,

444 
OS_ERR_FLUSH_ISR
 = 15104u,

446 
OS_ERR_G
 = 16000u,

448 
OS_ERR_H
 = 17000u,

450 
OS_ERR_I
 = 18000u,

451 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
 = 18001u,

452 
OS_ERR_INT_Q
 = 18002u,

453 
OS_ERR_INT_Q_FULL
 = 18003u,

454 
OS_ERR_INT_Q_SIZE
 = 18004u,

455 
OS_ERR_INT_Q_STK_INVALID
 = 18005u,

456 
OS_ERR_INT_Q_STK_SIZE_INVALID
 = 18006u,

458 
OS_ERR_J
 = 19000u,

460 
OS_ERR_K
 = 20000u,

462 
OS_ERR_L
 = 21000u,

463 
OS_ERR_LOCK_NESTING_OVF
 = 21001u,

465 
OS_ERR_M
 = 22000u,

467 
OS_ERR_MEM_CREATE_ISR
 = 22201u,

468 
OS_ERR_MEM_FULL
 = 22202u,

469 
OS_ERR_MEM_INVALID_P_ADDR
 = 22203u,

470 
OS_ERR_MEM_INVALID_BLKS
 = 22204u,

471 
OS_ERR_MEM_INVALID_PART
 = 22205u,

472 
OS_ERR_MEM_INVALID_P_BLK
 = 22206u,

473 
OS_ERR_MEM_INVALID_P_MEM
 = 22207u,

474 
OS_ERR_MEM_INVALID_P_DATA
 = 22208u,

475 
OS_ERR_MEM_INVALID_SIZE
 = 22209u,

476 
OS_ERR_MEM_NO_FREE_BLKS
 = 22210u,

478 
OS_ERR_MSG_POOL_EMPTY
 = 22301u,

479 
OS_ERR_MSG_POOL_NULL_PTR
 = 22302u,

481 
OS_ERR_MUTEX_NOT_OWNER
 = 22401u,

482 
OS_ERR_MUTEX_OWNER
 = 22402u,

483 
OS_ERR_MUTEX_NESTING
 = 22403u,

485 
OS_ERR_N
 = 23000u,

486 
OS_ERR_NAME
 = 23001u,

487 
OS_ERR_NO_MORE_ID_AVAIL
 = 23002u,

489 
OS_ERR_O
 = 24000u,

490 
OS_ERR_OBJ_CREATED
 = 24001u,

491 
OS_ERR_OBJ_DEL
 = 24002u,

492 
OS_ERR_OBJ_PTR_NULL
 = 24003u,

493 
OS_ERR_OBJ_TYPE
 = 24004u,

495 
OS_ERR_OPT_INVALID
 = 24101u,

497 
OS_ERR_OS_NOT_RUNNING
 = 24201u,

498 
OS_ERR_OS_RUNNING
 = 24202u,

500 
OS_ERR_P
 = 25000u,

501 
OS_ERR_PEND_ABORT
 = 25001u,

502 
OS_ERR_PEND_ABORT_ISR
 = 25002u,

503 
OS_ERR_PEND_ABORT_NONE
 = 25003u,

504 
OS_ERR_PEND_ABORT_SELF
 = 25004u,

505 
OS_ERR_PEND_DEL
 = 25005u,

506 
OS_ERR_PEND_ISR
 = 25006u,

507 
OS_ERR_PEND_LOCKED
 = 25007u,

508 
OS_ERR_PEND_WOULD_BLOCK
 = 25008u,

510 
OS_ERR_POST_NULL_PTR
 = 25101u,

511 
OS_ERR_POST_ISR
 = 25102u,

513 
OS_ERR_PRIO_EXIST
 = 25201u,

514 
OS_ERR_PRIO
 = 25202u,

515 
OS_ERR_PRIO_INVALID
 = 25203u,

517 
OS_ERR_PTR_INVALID
 = 25301u,

519 
OS_ERR_Q
 = 26000u,

520 
OS_ERR_Q_FULL
 = 26001u,

521 
OS_ERR_Q_EMPTY
 = 26002u,

522 
OS_ERR_Q_MAX
 = 26003u,

523 
OS_ERR_Q_SIZE
 = 26004u,

525 
OS_ERR_R
 = 27000u,

526 
OS_ERR_REG_ID_INVALID
 = 27001u,

527 
OS_ERR_ROUND_ROBIN_1
 = 27002u,

528 
OS_ERR_ROUND_ROBIN_DISABLED
 = 27003u,

530 
OS_ERR_S
 = 28000u,

531 
OS_ERR_SCHED_INVALID_TIME_SLICE
 = 28001u,

532 
OS_ERR_SCHED_LOCK_ISR
 = 28002u,

533 
OS_ERR_SCHED_LOCKED
 = 28003u,

534 
OS_ERR_SCHED_NOT_LOCKED
 = 28004u,

535 
OS_ERR_SCHED_UNLOCK_ISR
 = 28005u,

537 
OS_ERR_SEM_OVF
 = 28101u,

538 
OS_ERR_SET_ISR
 = 28102u,

540 
OS_ERR_STAT_RESET_ISR
 = 28201u,

541 
OS_ERR_STAT_PRIO_INVALID
 = 28202u,

542 
OS_ERR_STAT_STK_INVALID
 = 28203u,

543 
OS_ERR_STAT_STK_SIZE_INVALID
 = 28204u,

544 
OS_ERR_STATE_INVALID
 = 28205u,

545 
OS_ERR_STATUS_INVALID
 = 28206u,

546 
OS_ERR_STK_INVALID
 = 28207u,

547 
OS_ERR_STK_SIZE_INVALID
 = 28208u,

548 
OS_ERR_STK_LIMIT_INVALID
 = 28209u,

550 
OS_ERR_T
 = 29000u,

551 
OS_ERR_TASK_CHANGE_PRIO_ISR
 = 29001u,

552 
OS_ERR_TASK_CREATE_ISR
 = 29002u,

553 
OS_ERR_TASK_DEL
 = 29003u,

554 
OS_ERR_TASK_DEL_IDLE
 = 29004u,

555 
OS_ERR_TASK_DEL_INVALID
 = 29005u,

556 
OS_ERR_TASK_DEL_ISR
 = 29006u,

557 
OS_ERR_TASK_INVALID
 = 29007u,

558 
OS_ERR_TASK_NO_MORE_TCB
 = 29008u,

559 
OS_ERR_TASK_NOT_DLY
 = 29009u,

560 
OS_ERR_TASK_NOT_EXIST
 = 29010u,

561 
OS_ERR_TASK_NOT_SUSPENDED
 = 29011u,

562 
OS_ERR_TASK_OPT
 = 29012u,

563 
OS_ERR_TASK_RESUME_ISR
 = 29013u,

564 
OS_ERR_TASK_RESUME_PRIO
 = 29014u,

565 
OS_ERR_TASK_RESUME_SELF
 = 29015u,

566 
OS_ERR_TASK_RUNNING
 = 29016u,

567 
OS_ERR_TASK_STK_CHK_ISR
 = 29017u,

568 
OS_ERR_TASK_SUSPENDED
 = 29018u,

569 
OS_ERR_TASK_SUSPEND_IDLE
 = 29019u,

570 
OS_ERR_TASK_SUSPEND_INT_HANDLER
 = 29020u,

571 
OS_ERR_TASK_SUSPEND_ISR
 = 29021u,

572 
OS_ERR_TASK_SUSPEND_PRIO
 = 29022u,

573 
OS_ERR_TASK_WAITING
 = 29023u,

575 
OS_ERR_TCB_INVALID
 = 29101u,

577 
OS_ERR_TLS_ID_INVALID
 = 29120u,

578 
OS_ERR_TLS_ISR
 = 29121u,

579 
OS_ERR_TLS_NO_MORE_AVAIL
 = 29122u,

580 
OS_ERR_TLS_NOT_EN
 = 29123u,

581 
OS_ERR_TLS_DESTRUCT_ASSIGNED
 = 29124u,

583 
OS_ERR_TICK_PRIO_INVALID
 = 29201u,

584 
OS_ERR_TICK_STK_INVALID
 = 29202u,

585 
OS_ERR_TICK_STK_SIZE_INVALID
 = 29203u,

586 
OS_ERR_TICK_WHEEL_SIZE
 = 29204u,

588 
OS_ERR_TIME_DLY_ISR
 = 29301u,

589 
OS_ERR_TIME_DLY_RESUME_ISR
 = 29302u,

590 
OS_ERR_TIME_GET_ISR
 = 29303u,

591 
OS_ERR_TIME_INVALID_HOURS
 = 29304u,

592 
OS_ERR_TIME_INVALID_MINUTES
 = 29305u,

593 
OS_ERR_TIME_INVALID_SECONDS
 = 29306u,

594 
OS_ERR_TIME_INVALID_MILLISECONDS
 = 29307u,

595 
OS_ERR_TIME_NOT_DLY
 = 29308u,

596 
OS_ERR_TIME_SET_ISR
 = 29309u,

597 
OS_ERR_TIME_ZERO_DLY
 = 29310u,

599 
OS_ERR_TIMEOUT
 = 29401u,

601 
OS_ERR_TMR_INACTIVE
 = 29501u,

602 
OS_ERR_TMR_INVALID_DEST
 = 29502u,

603 
OS_ERR_TMR_INVALID_DLY
 = 29503u,

604 
OS_ERR_TMR_INVALID_PERIOD
 = 29504u,

605 
OS_ERR_TMR_INVALID_STATE
 = 29505u,

606 
OS_ERR_TMR_INVALID
 = 29506u,

607 
OS_ERR_TMR_ISR
 = 29507u,

608 
OS_ERR_TMR_NO_CALLBACK
 = 29508u,

609 
OS_ERR_TMR_NON_AVAIL
 = 29509u,

610 
OS_ERR_TMR_PRIO_INVALID
 = 29510u,

611 
OS_ERR_TMR_STK_INVALID
 = 29511u,

612 
OS_ERR_TMR_STK_SIZE_INVALID
 = 29512u,

613 
OS_ERR_TMR_STOPPED
 = 29513u,

615 
OS_ERR_U
 = 30000u,

617 
OS_ERR_V
 = 31000u,

619 
OS_ERR_W
 = 32000u,

621 
OS_ERR_X
 = 33000u,

623 
OS_ERR_Y
 = 34000u,

624 
OS_ERR_YIELD_ISR
 = 34001u,

626 
OS_ERR_Z
 = 35000u

627 } 
	tOS_ERR
;

638 
os_Êag_gΩ
 
	tOS_FLAG_GRP
;

640 
os_mem
 
	tOS_MEM
;

642 
os_msg
 
	tOS_MSG
;

643 
os_msg_poﬁ
 
	tOS_MSG_POOL
;

644 
os_msg_q
 
	tOS_MSG_Q
;

646 
os_muãx
 
	tOS_MUTEX
;

648 
os_öt_q
 
	tOS_INT_Q
;

650 
os_q
 
	tOS_Q
;

652 
os_£m
 
	tOS_SEM
;

654 (*
	tOS_TASK_PTR
)(*
	tp_¨g
);

656 
os_tcb
 
	tOS_TCB
;

658 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

659 *
	tOS_TLS
;

661 
CPU_DATA
 
	tOS_TLS_ID
;

663 (*
	tOS_TLS_DESTRUCT_PTR
)(
	tOS_TCB
 *
	tp_tcb
,

664 
	tOS_TLS_ID
 
	tid
,

665 
	tOS_TLS
 
	tvÆue
);

668 
os_rdy_li°
 
	tOS_RDY_LIST
;

670 
os_tick_li°
 
	tOS_TICK_LIST
;

672 (*
	tOS_TMR_CALLBACK_PTR
)(*
	tp_tmr
, *
	tp_¨g
);

673 
os_tmr
 
	tOS_TMR
;

675 
os_≥nd_d©a
 
	tOS_PEND_DATA
;

676 
os_≥nd_li°
 
	tOS_PEND_LIST
;

677 
os_≥nd_obj
 
	tOS_PEND_OBJ
;

679 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

680 (*
	tOS_APP_HOOK_VOID
)();

681 (*
	tOS_APP_HOOK_TCB
)(
	tOS_TCB
 *
	tp_tcb
);

699 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

700 
	sos_öt_q
 {

701 
OS_OBJ_TYPE
 
Ty≥
;

702 
OS_INT_Q
 *
NextPå
;

703 *
ObjPå
;

704 *
MsgPå
;

705 
OS_MSG_SIZE
 
MsgSize
;

706 
OS_FLAGS
 
Fœgs
;

707 
OS_OPT
 
O±
;

708 
CPU_TS
 
TS
;

718 
	sos_rdy_li°
 {

719 
OS_TCB
 *
HódPå
;

720 
OS_TCB
 *
TaûPå
;

721 
OS_OBJ_QTY
 
NbrE¡rõs
;

731 
	sos_≥nd_d©a
 {

732 
OS_PEND_DATA
 *
PªvPå
;

733 
OS_PEND_DATA
 *
NextPå
;

734 
OS_TCB
 *
TCBPå
;

735 
OS_PEND_OBJ
 *
PídObjPå
;

736 
OS_PEND_OBJ
 *
RdyObjPå
;

737 *
RdyMsgPå
;

738 
OS_MSG_SIZE
 
RdyMsgSize
;

739 
CPU_TS
 
RdyTS
;

743 
	sos_≥nd_li°
 {

744 
OS_PEND_DATA
 *
HódPå
;

745 
OS_PEND_DATA
 *
TaûPå
;

746 
OS_OBJ_QTY
 
NbrE¡rõs
;

765 
	sos_≥nd_obj
 {

766 #i‡
OS_OBJ_TYPE_REQ
 > 0u

767 
OS_OBJ_TYPE
 
Ty≥
;

769 #i‡
OS_CFG_DBG_EN
 > 0u

770 
CPU_CHAR
 *
NamePå
;

772 
OS_PEND_LIST
 
PídLi°
;

773 #i‡
OS_CFG_DBG_EN
 > 0u

774 *
DbgPªvPå
;

775 *
DbgNextPå
;

776 
CPU_CHAR
 *
DbgNamePå
;

790 
	sos_Êag_gΩ
 {

792 #i‡
OS_OBJ_TYPE_REQ
 > 0u

793 
OS_OBJ_TYPE
 
Ty≥
;

795 #i‡
OS_CFG_DBG_EN
 > 0u

796 
CPU_CHAR
 *
NamePå
;

798 
OS_PEND_LIST
 
PídLi°
;

799 #i‡
OS_CFG_DBG_EN
 > 0u

800 
OS_FLAG_GRP
 *
DbgPªvPå
;

801 
OS_FLAG_GRP
 *
DbgNextPå
;

802 
CPU_CHAR
 *
DbgNamePå
;

805 
OS_FLAGS
 
Fœgs
;

806 
CPU_TS
 
TS
;

807 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

808 
CPU_INT32U
 
FœgID
;

820 
	sos_mem
 {

821 #i‡
OS_OBJ_TYPE_REQ
 > 0u

822 
OS_OBJ_TYPE
 
Ty≥
;

824 *
AddrPå
;

825 #i‡
OS_CFG_DBG_EN
 > 0u

826 
CPU_CHAR
 *
NamePå
;

828 *
FªeLi°På
;

829 
OS_MEM_SIZE
 
BlkSize
;

830 
OS_MEM_QTY
 
NbrMax
;

831 
OS_MEM_QTY
 
NbrFªe
;

832 #i‡
OS_CFG_DBG_EN
 > 0u

833 
OS_MEM
 *
DbgPªvPå
;

834 
OS_MEM
 *
DbgNextPå
;

836 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

837 
CPU_INT32U
 
MemID
;

848 
	sos_msg
 {

849 
OS_MSG
 *
NextPå
;

850 *
MsgPå
;

851 
OS_MSG_SIZE
 
MsgSize
;

852 
CPU_TS
 
MsgTS
;

858 
	sos_msg_poﬁ
 {

859 
OS_MSG
 *
NextPå
;

860 
OS_MSG_QTY
 
NbrFªe
;

861 
OS_MSG_QTY
 
NbrU£d
;

862 #i‡
OS_CFG_DBG_EN
 > 0u

863 
OS_MSG_QTY
 
NbrU£dMax
;

869 
	sos_msg_q
 {

870 
OS_MSG
 *
InPå
;

871 
OS_MSG
 *
OutPå
;

872 
OS_MSG_QTY
 
NbrE¡rõsSize
;

873 
OS_MSG_QTY
 
NbrE¡rõs
;

874 #i‡
OS_CFG_DBG_EN
 > 0u

875 
OS_MSG_QTY
 
NbrE¡rõsMax
;

877 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

878 
CPU_INT32U
 
MsgQID
;

891 
	sos_muãx
 {

893 #i‡
OS_OBJ_TYPE_REQ
 > 0u

894 
OS_OBJ_TYPE
 
Ty≥
;

896 #i‡
OS_CFG_DBG_EN
 > 0u

897 
CPU_CHAR
 *
NamePå
;

899 
OS_PEND_LIST
 
PídLi°
;

900 #i‡
OS_CFG_DBG_EN
 > 0u

901 
OS_MUTEX
 *
DbgPªvPå
;

902 
OS_MUTEX
 *
DbgNextPå
;

903 
CPU_CHAR
 *
DbgNamePå
;

906 
OS_TCB
 *
Ow√rTCBPå
;

907 
OS_PRIO
 
Ow√rOrigöÆPrio
;

908 
OS_NESTING_CTR
 
Ow√rNe°ögCå
;

909 
CPU_TS
 
TS
;

910 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

911 
CPU_INT08U
 
MuãxID
;

924 
	sos_q
 {

926 #i‡
OS_OBJ_TYPE_REQ
 > 0u

927 
OS_OBJ_TYPE
 
Ty≥
;

929 #i‡
OS_CFG_DBG_EN
 > 0u

930 
CPU_CHAR
 *
NamePå
;

932 
OS_PEND_LIST
 
PídLi°
;

933 #i‡
OS_CFG_DBG_EN
 > 0u

934 
OS_Q
 *
DbgPªvPå
;

935 
OS_Q
 *
DbgNextPå
;

936 
CPU_CHAR
 *
DbgNamePå
;

939 
OS_MSG_Q
 
MsgQ
;

940 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

941 
CPU_INT08U
 
MsgQID
;

954 
	sos_£m
 {

956 #i‡
OS_OBJ_TYPE_REQ
 > 0u

957 
OS_OBJ_TYPE
 
Ty≥
;

959 #i‡
OS_CFG_DBG_EN
 > 0u

960 
CPU_CHAR
 *
NamePå
;

962 
OS_PEND_LIST
 
PídLi°
;

963 #i‡
OS_CFG_DBG_EN
 > 0u

964 
OS_SEM
 *
DbgPªvPå
;

965 
OS_SEM
 *
DbgNextPå
;

966 
CPU_CHAR
 *
DbgNamePå
;

969 
OS_SEM_CTR
 
Cå
;

970 
CPU_TS
 
TS
;

971 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

972 
CPU_INT08U
 
SemID
;

983 
	sos_tcb
 {

984 
CPU_STK
 *
StkPå
;

986 *
ExtPå
;

988 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

989 
CPU_STK
 *
StkLimôPå
;

992 
OS_TCB
 *
NextPå
;

993 
OS_TCB
 *
PªvPå
;

995 
OS_TCB
 *
TickNextPå
;

996 
OS_TCB
 *
TickPªvPå
;

998 
OS_TICK_LIST
 *
TickLi°På
;

1000 #i‡
OS_CFG_DBG_EN
 > 0u

1001 
CPU_CHAR
 *
NamePå
;

1004 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

1005 
CPU_STK
 *
StkBa£På
;

1008 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

1009 
OS_TLS
 
TLS_Tbl
[
OS_CFG_TLS_TBL_SIZE
];

1012 #i‡
OS_CFG_DBG_EN
 > 0u

1013 
OS_TASK_PTR
 
TaskE¡ryAddr
;

1014 *
TaskE¡ryArg
;

1017 
OS_PEND_DATA
 *
PídD©aTblPå
;

1018 
OS_STATE
 
PídOn
;

1019 
OS_STATUS
 
PídSètus
;

1021 
OS_STATE
 
TaskSèã
;

1022 
OS_PRIO
 
Prio
;

1023 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

1024 
CPU_STK_SIZE
 
StkSize
;

1026 
OS_OPT
 
O±
;

1028 
OS_OBJ_QTY
 
PídD©aTblE¡rõs
;

1030 
CPU_TS
 
TS
;

1031 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1032 
CPU_INT08U
 
SemID
;

1034 
OS_SEM_CTR
 
SemCå
;

1037 
OS_TICK
 
TickRemaö
;

1038 
OS_TICK
 
TickCåPªv
;

1040 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1041 
OS_TICK
 
TimeQu™è
;

1042 
OS_TICK
 
TimeQu™èCå
;

1045 #i‡
OS_MSG_EN
 > 0u

1046 *
MsgPå
;

1047 
OS_MSG_SIZE
 
MsgSize
;

1050 #i‡
OS_CFG_TASK_Q_EN
 > 0u

1051 
OS_MSG_Q
 
MsgQ
;

1052 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1053 
CPU_TS
 
MsgQPídTime
;

1054 
CPU_TS
 
MsgQPídTimeMax
;

1058 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1059 
OS_REG
 
RegTbl
[
OS_CFG_TASK_REG_TBL_SIZE
];

1062 #i‡
OS_CFG_FLAG_EN
 > 0u

1063 
OS_FLAGS
 
FœgsPíd
;

1064 
OS_FLAGS
 
FœgsRdy
;

1065 
OS_OPT
 
FœgsO±
;

1068 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1069 
OS_NESTING_CTR
 
Su•ídCå
;

1072 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1073 
OS_CPU_USAGE
 
CPUUßge
;

1074 
OS_CPU_USAGE
 
CPUUßgeMax
;

1075 
OS_CTX_SW_CTR
 
CtxSwCå
;

1076 
CPU_TS
 
Cy˛esDñè
;

1077 
CPU_TS
 
Cy˛esSèπ
;

1078 
OS_CYCLES
 
Cy˛esTŸÆ
;

1079 
OS_CYCLES
 
Cy˛esTŸÆPªv
;

1081 
CPU_TS
 
SemPídTime
;

1082 
CPU_TS
 
SemPídTimeMax
;

1085 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

1086 
CPU_STK_SIZE
 
StkU£d
;

1087 
CPU_STK_SIZE
 
StkFªe
;

1090 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


1091 
CPU_TS
 
I¡DisTimeMax
;

1093 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

1094 
CPU_TS
 
SchedLockTimeMax
;

1097 #i‡
OS_CFG_DBG_EN
 > 0u

1098 
OS_TCB
 *
DbgPªvPå
;

1099 
OS_TCB
 *
DbgNextPå
;

1100 
CPU_CHAR
 *
DbgNamePå
;

1102 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1103 
CPU_INT08U
 
TaskID
;

1114 
	sos_tick_li°
 {

1115 
OS_TCB
 *
TCB_På
;

1116 #i‡
OS_CFG_DBG_EN
 > 0u

1117 
OS_OBJ_QTY
 
NbrE¡rõs
;

1118 
OS_OBJ_QTY
 
NbrUpd©ed
;

1129 
	sos_tmr
 {

1130 #i‡
OS_OBJ_TYPE_REQ
 > 0u

1131 
OS_OBJ_TYPE
 
Ty≥
;

1133 #i‡
OS_CFG_DBG_EN
 > 0u

1134 
CPU_CHAR
 *
NamePå
;

1136 
OS_TMR_CALLBACK_PTR
 
CÆlbackPå
;

1137 *
CÆlbackPåArg
;

1138 
OS_TMR
 *
NextPå
;

1139 
OS_TMR
 *
PªvPå
;

1140 
OS_TICK
 
Remaö
;

1141 
OS_TICK
 
Dly
;

1142 
OS_TICK
 
Pîiod
;

1143 
OS_OPT
 
O±
;

1144 
OS_STATE
 
Sèã
;

1145 #i‡
OS_CFG_DBG_EN
 > 0u

1146 
OS_TMR
 *
DbgPªvPå
;

1147 
OS_TMR
 *
DbgNextPå
;

1160 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

1161 
OS_EXT
 
OS_APP_HOOK_TCB
 
OS_AµTaskCª©eHookPå
;

1162 
OS_EXT
 
OS_APP_HOOK_TCB
 
OS_AµTaskDñHookPå
;

1163 
OS_EXT
 
OS_APP_HOOK_TCB
 
OS_AµTaskRëu∫HookPå
;

1165 
OS_EXT
 
OS_APP_HOOK_VOID
 
OS_AµIdÀTaskHookPå
;

1166 
OS_EXT
 
OS_APP_HOOK_VOID
 
OS_AµSètTaskHookPå
;

1167 
OS_EXT
 
OS_APP_HOOK_VOID
 
OS_AµTaskSwHookPå
;

1168 
OS_EXT
 
OS_APP_HOOK_VOID
 
OS_AµTimeTickHookPå
;

1172 
OS_EXT
 
OS_IDLE_CTR
 
OSIdÀTaskCå
;

1173 
OS_EXT
 
OS_TCB
 
OSIdÀTaskTCB
;

1176 
OS_EXT
 
OS_NESTING_CTR
 
OSI¡Ne°ögCå
;

1177 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


1178 
OS_EXT
 
CPU_TS
 
OSI¡DisTimeMax
;

1181 
OS_EXT
 
OS_STATE
 
OSRu¬ög
;

1185 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1186 
OS_EXT
 
OS_INT_Q
 *
OSI¡QInPå
;

1187 
OS_EXT
 
OS_INT_Q
 *
OSI¡QOutPå
;

1188 
OS_EXT
 
OS_OBJ_QTY
 
OSI¡QNbrE¡rõs
;

1189 
OS_EXT
 
OS_OBJ_QTY
 
OSI¡QNbrE¡rõsMax
;

1190 
OS_EXT
 
OS_OBJ_QTY
 
OSI¡QOvfCå
;

1191 
OS_EXT
 
OS_TCB
 
OSI¡QTaskTCB
;

1192 
OS_EXT
 
CPU_TS
 
OSI¡QTaskTimeMax
;

1196 #i‡
OS_CFG_FLAG_EN
 > 0u

1197 #i‡
OS_CFG_DBG_EN
 > 0u

1198 
OS_EXT
 
OS_FLAG_GRP
 *
OSFœgDbgLi°På
;

1200 
OS_EXT
 
OS_OBJ_QTY
 
OSFœgQty
;

1204 #i‡
OS_CFG_MEM_EN
 > 0u

1205 #i‡
OS_CFG_DBG_EN
 > 0u

1206 
OS_EXT
 
OS_MEM
 *
OSMemDbgLi°På
;

1208 
OS_EXT
 
OS_OBJ_QTY
 
OSMemQty
;

1212 #i‡
OS_MSG_EN
 > 0u

1213 
OS_EXT
 
OS_MSG_POOL
 
OSMsgPoﬁ
;

1217 #i‡
OS_CFG_MUTEX_EN
 > 0u

1218 #i‡
OS_CFG_DBG_EN
 > 0u

1219 
OS_EXT
 
OS_MUTEX
 *
OSMuãxDbgLi°På
;

1221 
OS_EXT
 
OS_OBJ_QTY
 
OSMuãxQty
;

1225 
OS_EXT
 
OS_PRIO
 
OSPrioCur
;

1226 
OS_EXT
 
OS_PRIO
 
OSPrioHighRdy
;

1227 
OS_EXT
 
OS_PRIO
 
OSPrioSaved
;

1228 
CPU_DATA
 
OSPrioTbl
[
OS_PRIO_TBL_SIZE
];

1231 #i‡
OS_CFG_Q_EN
 > 0u

1232 #i‡
OS_CFG_DBG_EN
 > 0u

1233 
OS_EXT
 
OS_Q
 *
OSQDbgLi°På
;

1235 
OS_EXT
 
OS_OBJ_QTY
 
OSQQty
;

1241 
OS_EXT
 
OS_RDY_LIST
 
OSRdyLi°
[
OS_CFG_PRIO_MAX
];

1244 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


1245 
OS_EXT
 
CPU_BOOLEAN
 
OSSa„tyCrôiˇlSèπFœg
;

1248 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

1249 
OS_EXT
 
CPU_TS_TMR
 
OSSchedLockTimeBegö
;

1250 
OS_EXT
 
CPU_TS_TMR
 
OSSchedLockTimeMax
;

1251 
OS_EXT
 
CPU_TS_TMR
 
OSSchedLockTimeMaxCur
;

1254 
OS_EXT
 
OS_NESTING_CTR
 
OSSchedLockNe°ögCå
;

1255 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1256 
OS_EXT
 
OS_TICK
 
OSSchedRoundRoböDÊtTimeQu™è
;

1257 
OS_EXT
 
CPU_BOOLEAN
 
OSSchedRoundRoböEn
;

1260 #i‡
OS_CFG_SEM_EN
 > 0u

1261 #i‡
OS_CFG_DBG_EN
 > 0u

1262 
OS_EXT
 
OS_SEM
 *
OSSemDbgLi°På
;

1264 
OS_EXT
 
OS_OBJ_QTY
 
OSSemQty
;

1268 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

1269 
OS_EXT
 
CPU_BOOLEAN
 
OSSètRe£tFœg
;

1270 
OS_EXT
 
OS_CPU_USAGE
 
OSSètTaskCPUUßge
;

1271 
OS_EXT
 
OS_CPU_USAGE
 
OSSètTaskCPUUßgeMax
;

1272 
OS_EXT
 
OS_TICK
 
OSSètTaskCå
;

1273 
OS_EXT
 
OS_TICK
 
OSSètTaskCåMax
;

1274 
OS_EXT
 
OS_TICK
 
OSSètTaskCåRun
;

1275 
OS_EXT
 
CPU_BOOLEAN
 
OSSètTaskRdy
;

1276 
OS_EXT
 
OS_TCB
 
OSSètTaskTCB
;

1277 
OS_EXT
 
CPU_TS
 
OSSètTaskTimeMax
;

1281 
OS_EXT
 
OS_CTX_SW_CTR
 
OSTaskCtxSwCå
;

1282 #i‡
OS_CFG_DBG_EN
 > 0u

1283 
OS_EXT
 
OS_TCB
 *
OSTaskDbgLi°På
;

1285 
OS_EXT
 
OS_OBJ_QTY
 
OSTaskQty
;

1287 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1288 
OS_EXT
 
OS_REG_ID
 
OSTaskRegNextAvaûID
;

1292 
OS_EXT
 
OS_TICK
 
OSTickCå
;

1293 
OS_EXT
 
OS_TCB
 
OSTickTaskTCB
;

1294 
OS_EXT
 
CPU_TS
 
OSTickTaskTimeMax
;

1295 
OS_EXT
 
OS_TICK_LIST
 
OSTickLi°Dly
;

1296 
OS_EXT
 
OS_TICK_LIST
 
OSTickLi°Timeout
;

1300 #i‡
OS_CFG_TMR_EN
 > 0u

1301 #i‡
OS_CFG_DBG_EN
 > 0u

1302 
OS_EXT
 
OS_TMR
 *
OSTmrDbgLi°På
;

1304 
OS_EXT
 
OS_OBJ_QTY
 
OSTmrLi°E¡rõs
;

1305 
OS_EXT
 
OS_TMR
 *
OSTmrLi°På
;

1306 #i‡
OS_CFG_MUTEX_EN
 > 0u

1307 
OS_EXT
 
OS_MUTEX
 
OSTmrMuãx
;

1309 
OS_EXT
 
OS_OBJ_QTY
 
OSTmrQty
;

1310 
OS_EXT
 
OS_TCB
 
OSTmrTaskTCB
;

1311 
OS_EXT
 
CPU_TS
 
OSTmrTaskTimeMax
;

1312 
OS_EXT
 
OS_TICK
 
OSTmrTickCå
;

1313 
OS_EXT
 
OS_CTR
 
OSTmrUpd©eC¡
;

1314 
OS_EXT
 
OS_CTR
 
OSTmrUpd©eCå
;

1321 
OS_EXT
 
OS_TCB
 *
OSTCBCurPå
;

1322 
OS_EXT
 
OS_TCB
 *
OSTCBHighRdyPå
;

1333 
CPU_STK
 * c⁄° 
OSCfg_IdÀTaskStkBa£På
;

1334 
CPU_STK_SIZE
 c⁄° 
OSCfg_IdÀTaskStkLimô
;

1335 
CPU_STK_SIZE
 c⁄° 
OSCfg_IdÀTaskStkSize
;

1336 
CPU_INT32U
 c⁄° 
OSCfg_IdÀTaskStkSizeRAM
;

1338 
OS_INT_Q
 * c⁄° 
OSCfg_I¡QBa£På
;

1339 
OS_OBJ_QTY
 c⁄° 
OSCfg_I¡QSize
;

1340 
CPU_INT32U
 c⁄° 
OSCfg_I¡QSizeRAM
;

1341 
CPU_STK
 * c⁄° 
OSCfg_I¡QTaskStkBa£På
;

1342 
CPU_STK_SIZE
 c⁄° 
OSCfg_I¡QTaskStkLimô
;

1343 
CPU_STK_SIZE
 c⁄° 
OSCfg_I¡QTaskStkSize
;

1344 
CPU_INT32U
 c⁄° 
OSCfg_I¡QTaskStkSizeRAM
;

1346 
CPU_STK
 * c⁄° 
OSCfg_ISRStkBa£På
;

1347 
CPU_STK_SIZE
 c⁄° 
OSCfg_ISRStkSize
;

1348 
CPU_INT32U
 c⁄° 
OSCfg_ISRStkSizeRAM
;

1350 
OS_MSG_SIZE
 c⁄° 
OSCfg_MsgPoﬁSize
;

1351 
CPU_INT32U
 c⁄° 
OSCfg_MsgPoﬁSizeRAM
;

1352 
OS_MSG
 * c⁄° 
OSCfg_MsgPoﬁBa£På
;

1354 
OS_PRIO
 c⁄° 
OSCfg_SètTaskPrio
;

1355 
OS_RATE_HZ
 c⁄° 
OSCfg_SètTaskR©e_Hz
;

1356 
CPU_STK
 * c⁄° 
OSCfg_SètTaskStkBa£På
;

1357 
CPU_STK_SIZE
 c⁄° 
OSCfg_SètTaskStkLimô
;

1358 
CPU_STK_SIZE
 c⁄° 
OSCfg_SètTaskStkSize
;

1359 
CPU_INT32U
 c⁄° 
OSCfg_SètTaskStkSizeRAM
;

1361 
CPU_STK_SIZE
 c⁄° 
OSCfg_StkSizeMö
;

1363 
OS_RATE_HZ
 c⁄° 
OSCfg_TickR©e_Hz
;

1364 
OS_PRIO
 c⁄° 
OSCfg_TickTaskPrio
;

1365 
CPU_STK
 * c⁄° 
OSCfg_TickTaskStkBa£På
;

1366 
CPU_STK_SIZE
 c⁄° 
OSCfg_TickTaskStkLimô
;

1367 
CPU_STK_SIZE
 c⁄° 
OSCfg_TickTaskStkSize
;

1368 
CPU_INT32U
 c⁄° 
OSCfg_TickTaskStkSizeRAM
;

1370 
OS_PRIO
 c⁄° 
OSCfg_TmrTaskPrio
;

1371 
OS_RATE_HZ
 c⁄° 
OSCfg_TmrTaskR©e_Hz
;

1372 
CPU_STK
 * c⁄° 
OSCfg_TmrTaskStkBa£På
;

1373 
CPU_STK_SIZE
 c⁄° 
OSCfg_TmrTaskStkLimô
;

1374 
CPU_STK_SIZE
 c⁄° 
OSCfg_TmrTaskStkSize
;

1375 
CPU_INT32U
 c⁄° 
OSCfg_TmrTaskStkSizeRAM
;

1378 
CPU_STK
 
OSCfg_IdÀTaskStk
[];

1380 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

1381 
CPU_STK
 
OSCfg_I¡QTaskStk
[];

1382 
OS_INT_Q
 
OSCfg_I¡Q
[];

1385 
CPU_STK
 
OSCfg_ISRStk
[];

1387 #i‡(
OS_MSG_EN
 > 0u)

1388 
OS_MSG
 
OSCfg_MsgPoﬁ
[];

1391 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

1392 
CPU_STK
 
OSCfg_SètTaskStk
[];

1395 
CPU_STK
 
OSCfg_TickTaskStk
[];

1397 #i‡(
OS_CFG_TMR_EN
 > 0u)

1398 
CPU_STK
 
OSCfg_TmrTaskStk
[];

1413 #i‡
OS_CFG_FLAG_EN
 > 0u

1415 
	`OSFœgCª©e
 (
OS_FLAG_GRP
 *
p_gΩ
,

1416 
CPU_CHAR
 *
p_«me
,

1417 
OS_FLAGS
 
Êags
,

1418 
OS_ERR
 *
p_îr
);

1420 #i‡
OS_CFG_FLAG_DEL_EN
 > 0u

1421 
OS_OBJ_QTY
 
	`OSFœgDñ
 (
OS_FLAG_GRP
 *
p_gΩ
,

1422 
OS_OPT
 
›t
,

1423 
OS_ERR
 *
p_îr
);

1426 
OS_FLAGS
 
	`OSFœgPíd
 (
OS_FLAG_GRP
 *
p_gΩ
,

1427 
OS_FLAGS
 
Êags
,

1428 
OS_TICK
 
timeout
,

1429 
OS_OPT
 
›t
,

1430 
CPU_TS
 *
p_ts
,

1431 
OS_ERR
 *
p_îr
);

1433 #i‡
OS_CFG_FLAG_PEND_ABORT_EN
 > 0u

1434 
OS_OBJ_QTY
 
	`OSFœgPídAb‹t
 (
OS_FLAG_GRP
 *
p_gΩ
,

1435 
OS_OPT
 
›t
,

1436 
OS_ERR
 *
p_îr
);

1439 
OS_FLAGS
 
	`OSFœgPídGëFœgsRdy
 (
OS_ERR
 *
p_îr
);

1441 
OS_FLAGS
 
	`OSFœgPo°
 (
OS_FLAG_GRP
 *
p_gΩ
,

1442 
OS_FLAGS
 
Êags
,

1443 
OS_OPT
 
›t
,

1444 
OS_ERR
 *
p_îr
);

1448 
	`OS_FœgCÃ
 (
OS_FLAG_GRP
 *
p_gΩ
);

1450 
	`OS_FœgBlock
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

1451 
OS_FLAG_GRP
 *
p_gΩ
,

1452 
OS_FLAGS
 
Êags
,

1453 
OS_OPT
 
›t
,

1454 
OS_TICK
 
timeout
);

1456 #i‡
OS_CFG_DBG_EN
 > 0u

1457 
	`OS_FœgDbgLi°Add
 (
OS_FLAG_GRP
 *
p_gΩ
);

1459 
	`OS_FœgDbgLi°Remove
 (
OS_FLAG_GRP
 *
p_gΩ
);

1462 
	`OS_FœgInô
 (
OS_ERR
 *
p_îr
);

1464 
OS_FLAGS
 
	`OS_FœgPo°
 (
OS_FLAG_GRP
 *
p_gΩ
,

1465 
OS_FLAGS
 
Êags
,

1466 
OS_OPT
 
›t
,

1467 
CPU_TS
 
ts
,

1468 
OS_ERR
 *
p_îr
);

1470 
	`OS_FœgTaskRdy
 (
OS_TCB
 *
p_tcb
,

1471 
OS_FLAGS
 
Êags_rdy
,

1472 
CPU_TS
 
ts
);

1480 #i‡
OS_CFG_MEM_EN
 > 0u

1482 
	`OSMemCª©e
 (
OS_MEM
 *
p_mem
,

1483 
CPU_CHAR
 *
p_«me
,

1484 *
p_addr
,

1485 
OS_MEM_QTY
 
n_blks
,

1486 
OS_MEM_SIZE
 
blk_size
,

1487 
OS_ERR
 *
p_îr
);

1489 *
	`OSMemGë
 (
OS_MEM
 *
p_mem
,

1490 
OS_ERR
 *
p_îr
);

1492 
	`OSMemPut
 (
OS_MEM
 *
p_mem
,

1493 *
p_blk
,

1494 
OS_ERR
 *
p_îr
);

1498 #i‡
OS_CFG_DBG_EN
 > 0u

1499 
	`OS_MemDbgLi°Add
 (
OS_MEM
 *
p_mem
);

1502 
	`OS_MemInô
 (
OS_ERR
 *
p_îr
);

1511 #i‡
OS_CFG_MUTEX_EN
 > 0u

1513 
	`OSMuãxCª©e
 (
OS_MUTEX
 *
p_muãx
,

1514 
CPU_CHAR
 *
p_«me
,

1515 
OS_ERR
 *
p_îr
);

1517 #i‡
OS_CFG_MUTEX_DEL_EN
 > 0u

1518 
OS_OBJ_QTY
 
	`OSMuãxDñ
 (
OS_MUTEX
 *
p_muãx
,

1519 
OS_OPT
 
›t
,

1520 
OS_ERR
 *
p_îr
);

1523 
	`OSMuãxPíd
 (
OS_MUTEX
 *
p_muãx
,

1524 
OS_TICK
 
timeout
,

1525 
OS_OPT
 
›t
,

1526 
CPU_TS
 *
p_ts
,

1527 
OS_ERR
 *
p_îr
);

1529 #i‡
OS_CFG_MUTEX_PEND_ABORT_EN
 > 0u

1530 
OS_OBJ_QTY
 
	`OSMuãxPídAb‹t
 (
OS_MUTEX
 *
p_muãx
,

1531 
OS_OPT
 
›t
,

1532 
OS_ERR
 *
p_îr
);

1535 
	`OSMuãxPo°
 (
OS_MUTEX
 *
p_muãx
,

1536 
OS_OPT
 
›t
,

1537 
OS_ERR
 *
p_îr
);

1542 
	`OS_MuãxCÃ
 (
OS_MUTEX
 *
p_muãx
);

1544 #i‡
OS_CFG_DBG_EN
 > 0u

1545 
	`OS_MuãxDbgLi°Add
 (
OS_MUTEX
 *
p_muãx
);

1547 
	`OS_MuãxDbgLi°Remove
 (
OS_MUTEX
 *
p_muãx
);

1550 
	`OS_MuãxInô
 (
OS_ERR
 *
p_îr
);

1558 #i‡
OS_CFG_PEND_MULTI_EN
 > 0u

1560 
OS_OBJ_QTY
 
	`OSPídMu…i
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1561 
OS_OBJ_QTY
 
tbl_size
,

1562 
OS_TICK
 
timeout
,

1563 
OS_OPT
 
›t
,

1564 
OS_ERR
 *
p_îr
);

1568 
OS_OBJ_QTY
 
	`OS_PídMu…iGëRdy
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1569 
OS_OBJ_QTY
 
tbl_size
);

1571 
CPU_BOOLEAN
 
	`OS_PídMu…iVÆid©e
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1572 
OS_OBJ_QTY
 
tbl_size
);

1574 
	`OS_PídMu…iWaô
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1575 
OS_OBJ_QTY
 
tbl_size
,

1576 
OS_TICK
 
timeout
);

1583 #i‡
OS_CFG_Q_EN
 > 0u

1585 
	`OSQCª©e
 (
OS_Q
 *
p_q
,

1586 
CPU_CHAR
 *
p_«me
,

1587 
OS_MSG_QTY
 
max_qty
,

1588 
OS_ERR
 *
p_îr
);

1590 #i‡
OS_CFG_Q_DEL_EN
 > 0u

1591 
OS_OBJ_QTY
 
	`OSQDñ
 (
OS_Q
 *
p_q
,

1592 
OS_OPT
 
›t
,

1593 
OS_ERR
 *
p_îr
);

1596 #i‡
OS_CFG_Q_FLUSH_EN
 > 0u

1597 
OS_MSG_QTY
 
	`OSQFlush
 (
OS_Q
 *
p_q
,

1598 
OS_ERR
 *
p_îr
);

1601 *
	`OSQPíd
 (
OS_Q
 *
p_q
,

1602 
OS_TICK
 
timeout
,

1603 
OS_OPT
 
›t
,

1604 
OS_MSG_SIZE
 *
p_msg_size
,

1605 
CPU_TS
 *
p_ts
,

1606 
OS_ERR
 *
p_îr
);

1608 #i‡
OS_CFG_Q_PEND_ABORT_EN
 > 0u

1609 
OS_OBJ_QTY
 
	`OSQPídAb‹t
 (
OS_Q
 *
p_q
,

1610 
OS_OPT
 
›t
,

1611 
OS_ERR
 *
p_îr
);

1614 
	`OSQPo°
 (
OS_Q
 *
p_q
,

1615 *
p_void
,

1616 
OS_MSG_SIZE
 
msg_size
,

1617 
OS_OPT
 
›t
,

1618 
OS_ERR
 *
p_îr
);

1622 
	`OS_QCÃ
 (
OS_Q
 *
p_q
);

1624 #i‡
OS_CFG_DBG_EN
 > 0u

1625 
	`OS_QDbgLi°Add
 (
OS_Q
 *
p_q
);

1627 
	`OS_QDbgLi°Remove
 (
OS_Q
 *
p_q
);

1630 
	`OS_QInô
 (
OS_ERR
 *
p_îr
);

1632 
	`OS_QPo°
 (
OS_Q
 *
p_q
,

1633 *
p_void
,

1634 
OS_MSG_SIZE
 
msg_size
,

1635 
OS_OPT
 
›t
,

1636 
CPU_TS
 
ts
,

1637 
OS_ERR
 *
p_îr
);

1645 #i‡
OS_CFG_SEM_EN
 > 0u

1647 
	`OSSemCª©e
 (
OS_SEM
 *
p_£m
,

1648 
CPU_CHAR
 *
p_«me
,

1649 
OS_SEM_CTR
 
˙t
,

1650 
OS_ERR
 *
p_îr
);

1652 
OS_OBJ_QTY
 
	`OSSemDñ
 (
OS_SEM
 *
p_£m
,

1653 
OS_OPT
 
›t
,

1654 
OS_ERR
 *
p_îr
);

1656 
OS_SEM_CTR
 
	`OSSemPíd
 (
OS_SEM
 *
p_£m
,

1657 
OS_TICK
 
timeout
,

1658 
OS_OPT
 
›t
,

1659 
CPU_TS
 *
p_ts
,

1660 
OS_ERR
 *
p_îr
);

1662 #i‡
OS_CFG_SEM_PEND_ABORT_EN
 > 0u

1663 
OS_OBJ_QTY
 
	`OSSemPídAb‹t
 (
OS_SEM
 *
p_£m
,

1664 
OS_OPT
 
›t
,

1665 
OS_ERR
 *
p_îr
);

1668 
OS_SEM_CTR
 
	`OSSemPo°
 (
OS_SEM
 *
p_£m
,

1669 
OS_OPT
 
›t
,

1670 
OS_ERR
 *
p_îr
);

1672 #i‡
OS_CFG_SEM_SET_EN
 > 0u

1673 
	`OSSemSë
 (
OS_SEM
 *
p_£m
,

1674 
OS_SEM_CTR
 
˙t
,

1675 
OS_ERR
 *
p_îr
);

1680 
	`OS_SemCÃ
 (
OS_SEM
 *
p_£m
);

1682 #i‡
OS_CFG_DBG_EN
 > 0u

1683 
	`OS_SemDbgLi°Add
 (
OS_SEM
 *
p_£m
);

1685 
	`OS_SemDbgLi°Remove
 (
OS_SEM
 *
p_£m
);

1688 
	`OS_SemInô
 (
OS_ERR
 *
p_îr
);

1690 
OS_SEM_CTR
 
	`OS_SemPo°
 (
OS_SEM
 *
p_£m
,

1691 
OS_OPT
 
›t
,

1692 
CPU_TS
 
ts
,

1693 
OS_ERR
 *
p_îr
);

1701 #i‡
OS_CFG_TASK_CHANGE_PRIO_EN
 > 0u

1702 
	`OSTaskCh™gePrio
 (
OS_TCB
 *
p_tcb
,

1703 
OS_PRIO
 
¥io_√w
,

1704 
OS_ERR
 *
p_îr
);

1707 
	`OSTaskCª©e
 (
OS_TCB
 *
p_tcb
,

1708 
CPU_CHAR
 *
p_«me
,

1709 
OS_TASK_PTR
 
p_èsk
,

1710 *
p_¨g
,

1711 
OS_PRIO
 
¥io
,

1712 
CPU_STK
 *
p_°k_ba£
,

1713 
CPU_STK_SIZE
 
°k_limô
,

1714 
CPU_STK_SIZE
 
°k_size
,

1715 
OS_MSG_QTY
 
q_size
,

1716 
OS_TICK
 
time_qu™è
,

1717 *
p_ext
,

1718 
OS_OPT
 
›t
,

1719 
OS_ERR
 *
p_îr
);

1721 #i‡
OS_CFG_TASK_DEL_EN
 > 0u

1722 
	`OSTaskDñ
 (
OS_TCB
 *
p_tcb
,

1723 
OS_ERR
 *
p_îr
);

1726 #i‡
OS_CFG_TASK_Q_EN
 > 0u

1727 
OS_MSG_QTY
 
	`OSTaskQFlush
 (
OS_TCB
 *
p_tcb
,

1728 
OS_ERR
 *
p_îr
);

1730 *
	`OSTaskQPíd
 (
OS_TICK
 
timeout
,

1731 
OS_OPT
 
›t
,

1732 
OS_MSG_SIZE
 *
p_msg_size
,

1733 
CPU_TS
 *
p_ts
,

1734 
OS_ERR
 *
p_îr
);

1736 
CPU_BOOLEAN
 
	`OSTaskQPídAb‹t
 (
OS_TCB
 *
p_tcb
,

1737 
OS_OPT
 
›t
,

1738 
OS_ERR
 *
p_îr
);

1740 
	`OSTaskQPo°
 (
OS_TCB
 *
p_tcb
,

1741 *
p_void
,

1742 
OS_MSG_SIZE
 
msg_size
,

1743 
OS_OPT
 
›t
,

1744 
OS_ERR
 *
p_îr
);

1748 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1749 
OS_REG
 
	`OSTaskRegGë
 (
OS_TCB
 *
p_tcb
,

1750 
OS_REG_ID
 
id
,

1751 
OS_ERR
 *
p_îr
);

1753 
OS_REG_ID
 
	`OSTaskRegGëID
 (
OS_ERR
 *
p_îr
);

1755 
	`OSTaskRegSë
 (
OS_TCB
 *
p_tcb
,

1756 
OS_REG_ID
 
id
,

1757 
OS_REG
 
vÆue
,

1758 
OS_ERR
 *
p_îr
);

1761 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1762 
	`OSTaskResume
 (
OS_TCB
 *
p_tcb
,

1763 
OS_ERR
 *
p_îr
);

1765 
	`OSTaskSu•íd
 (
OS_TCB
 *
p_tcb
,

1766 
OS_ERR
 *
p_îr
);

1769 
OS_SEM_CTR
 
	`OSTaskSemPíd
 (
OS_TICK
 
timeout
,

1770 
OS_OPT
 
›t
,

1771 
CPU_TS
 *
p_ts
,

1772 
OS_ERR
 *
p_îr
);

1774 #i‡(
OS_CFG_TASK_SEM_PEND_ABORT_EN
 > 0u)

1775 
CPU_BOOLEAN
 
	`OSTaskSemPídAb‹t
 (
OS_TCB
 *
p_tcb
,

1776 
OS_OPT
 
›t
,

1777 
OS_ERR
 *
p_îr
);

1780 
OS_SEM_CTR
 
	`OSTaskSemPo°
 (
OS_TCB
 *
p_tcb
,

1781 
OS_OPT
 
›t
,

1782 
OS_ERR
 *
p_îr
);

1784 
OS_SEM_CTR
 
	`OSTaskSemSë
 (
OS_TCB
 *
p_tcb
,

1785 
OS_SEM_CTR
 
˙t
,

1786 
OS_ERR
 *
p_îr
);

1788 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

1789 
	`OSTaskStkChk
 (
OS_TCB
 *
p_tcb
,

1790 
CPU_STK_SIZE
 *
p_‰ì
,

1791 
CPU_STK_SIZE
 *
p_u£d
,

1792 
OS_ERR
 *
p_îr
);

1795 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1796 
	`OSTaskTimeQu™èSë
 (
OS_TCB
 *
p_tcb
,

1797 
OS_TICK
 
time_qu™è
,

1798 
OS_ERR
 *
p_îr
);

1803 
	`OS_TaskBlock
 (
OS_TCB
 *
p_tcb
,

1804 
OS_TICK
 
timeout
);

1806 #i‡
OS_CFG_DBG_EN
 > 0u

1807 
	`OS_TaskDbgLi°Add
 (
OS_TCB
 *
p_tcb
);

1809 
	`OS_TaskDbgLi°Remove
 (
OS_TCB
 *
p_tcb
);

1812 
	`OS_TaskInô
 (
OS_ERR
 *
p_îr
);

1814 
	`OS_TaskInôTCB
 (
OS_TCB
 *
p_tcb
);

1816 
	`OS_TaskQPo°
 (
OS_TCB
 *
p_tcb
,

1817 *
p_void
,

1818 
OS_MSG_SIZE
 
msg_size
,

1819 
OS_OPT
 
›t
,

1820 
CPU_TS
 
ts
,

1821 
OS_ERR
 *
p_îr
);

1823 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1824 
	`OS_TaskResume
 (
OS_TCB
 *
p_tcb
,

1825 
OS_ERR
 *
p_îr
);

1828 
	`OS_TaskRëu∫
 ();

1830 
OS_SEM_CTR
 
	`OS_TaskSemPo°
 (
OS_TCB
 *
p_tcb
,

1831 
OS_OPT
 
›t
,

1832 
CPU_TS
 
ts
,

1833 
OS_ERR
 *
p_îr
);

1835 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1836 
	`OS_TaskSu•íd
 (
OS_TCB
 *
p_tcb
,

1837 
OS_ERR
 *
p_îr
);

1845 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

1846 
OS_TLS_ID
 
	`OS_TLS_GëID
 (
OS_ERR
 *
p_îr
);

1848 
OS_TLS
 
	`OS_TLS_GëVÆue
 (
OS_TCB
 *
p_tcb
,

1849 
OS_TLS_ID
 
id
,

1850 
OS_ERR
 *
p_îr
);

1852 
	`OS_TLS_Inô
 (
OS_ERR
 *
p_îr
);

1854 
	`OS_TLS_SëVÆue
 (
OS_TCB
 *
p_tcb
,

1855 
OS_TLS_ID
 
id
,

1856 
OS_TLS
 
vÆue
,

1857 
OS_ERR
 *
p_îr
);

1859 
	`OS_TLS_SëDe°ru˘
 (
OS_TLS_ID
 
id
,

1860 
OS_TLS_DESTRUCT_PTR
 
p_de°ru˘
,

1861 
OS_ERR
 *
p_îr
);

1863 
	`OS_TLS_TaskCª©e
 (
OS_TCB
 *
p_tcb
);

1865 
	`OS_TLS_TaskDñ
 (
OS_TCB
 *
p_tcb
);

1867 
	`OS_TLS_TaskSw
 ();

1875 
	`OSTimeDly
 (
OS_TICK
 
dly
,

1876 
OS_OPT
 
›t
,

1877 
OS_ERR
 *
p_îr
);

1879 #i‡
OS_CFG_TIME_DLY_HMSM_EN
 > 0u

1880 
	`OSTimeDlyHMSM
 (
CPU_INT16U
 
hours
,

1881 
CPU_INT16U
 
möuãs
,

1882 
CPU_INT16U
 
£c⁄ds
,

1883 
CPU_INT32U
 
mûli
,

1884 
OS_OPT
 
›t
,

1885 
OS_ERR
 *
p_îr
);

1888 #i‡
OS_CFG_TIME_DLY_RESUME_EN
 > 0u

1889 
	`OSTimeDlyResume
 (
OS_TCB
 *
p_tcb
,

1890 
OS_ERR
 *
p_îr
);

1893 
OS_TICK
 
	`OSTimeGë
 (
OS_ERR
 *
p_îr
);

1895 
	`OSTimeSë
 (
OS_TICK
 
ticks
,

1896 
OS_ERR
 *
p_îr
);

1898 
	`OSTimeTick
 ();

1905 #i‡
OS_CFG_TMR_EN
 > 0u

1906 
	`OSTmrCª©e
 (
OS_TMR
 *
p_tmr
,

1907 
CPU_CHAR
 *
p_«me
,

1908 
OS_TICK
 
dly
,

1909 
OS_TICK
 
≥riod
,

1910 
OS_OPT
 
›t
,

1911 
OS_TMR_CALLBACK_PTR
 
p_ˇŒback
,

1912 *
p_ˇŒback_¨g
,

1913 
OS_ERR
 *
p_îr
);

1915 
CPU_BOOLEAN
 
	`OSTmrDñ
 (
OS_TMR
 *
p_tmr
,

1916 
OS_ERR
 *
p_îr
);

1918 
OS_TICK
 
	`OSTmrRemaöGë
 (
OS_TMR
 *
p_tmr
,

1919 
OS_ERR
 *
p_îr
);

1921 
CPU_BOOLEAN
 
	`OSTmrSèπ
 (
OS_TMR
 *
p_tmr
,

1922 
OS_ERR
 *
p_îr
);

1924 
OS_STATE
 
	`OSTmrSèãGë
 (
OS_TMR
 *
p_tmr
,

1925 
OS_ERR
 *
p_îr
);

1927 
CPU_BOOLEAN
 
	`OSTmrSt›
 (
OS_TMR
 *
p_tmr
,

1928 
OS_OPT
 
›t
,

1929 *
p_ˇŒback_¨g
,

1930 
OS_ERR
 *
p_îr
);

1934 
	`OS_TmrCÃ
 (
OS_TMR
 *
p_tmr
);

1936 #i‡
OS_CFG_DBG_EN
 > 0u

1937 
	`OS_TmrDbgLi°Add
 (
OS_TMR
 *
p_tmr
);

1939 
	`OS_TmrDbgLi°Remove
 (
OS_TMR
 *
p_tmr
);

1942 
	`OS_TmrInô
 (
OS_ERR
 *
p_îr
);

1944 
	`OS_TmrLök
 (
OS_TMR
 *
p_tmr
,

1945 
OS_OPT
 
›t
);

1947 
	`OS_TmrRe£tPók
 ();

1949 
	`OS_TmrU∆ök
 (
OS_TMR
 *
p_tmr
);

1951 
	`OS_TmrTask
 (*
p_¨g
);

1960 
	`OSInô
 (
OS_ERR
 *
p_îr
);

1962 
	`OSI¡E¡î
 ();

1963 
	`OSI¡Exô
 ();

1965 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


1966 
	`OSSa„tyCrôiˇlSèπ
 ();

1969 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1970 
	`OSSchedRoundRoböCfg
 (
CPU_BOOLEAN
 
í
,

1971 
OS_TICK
 
dÊt_time_qu™è
,

1972 
OS_ERR
 *
p_îr
);

1974 
	`OSSchedRoundRoböYõld
 (
OS_ERR
 *
p_îr
);

1978 
	`OSSched
 ();

1980 
	`OSSchedLock
 (
OS_ERR
 *
p_îr
);

1981 
	`OSSchedU∆ock
 (
OS_ERR
 *
p_îr
);

1983 
	`OSSèπ
 (
OS_ERR
 *
p_îr
);

1985 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

1986 
	`OSSètRe£t
 (
OS_ERR
 *
p_îr
);

1988 
	`OSSètTaskCPUUßgeInô
 (
OS_ERR
 *
p_îr
);

1991 
CPU_INT16U
 
	`OSVîsi⁄
 (
OS_ERR
 *
p_îr
);

1995 
	`OS_IdÀTask
 (*
p_¨g
);

1997 
	`OS_IdÀTaskInô
 (
OS_ERR
 *
p_îr
);

1999 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

2000 
	`OS_SètTask
 (*
p_¨g
);

2003 
	`OS_SètTaskInô
 (
OS_ERR
 *
p_îr
);

2005 
	`OS_TickTask
 (*
p_¨g
);

2006 
	`OS_TickTaskInô
 (
OS_ERR
 *
p_îr
);

2017 #ifde‡
__˝lu•lus


2021 
	`OSInôHook
 ();

2023 
	`OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
);

2024 
	`OSTaskDñHook
 (
OS_TCB
 *
p_tcb
);

2026 
	`OSIdÀTaskHook
 ();

2028 
	`OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
);

2030 
	`OSSètTaskHook
 ();

2032 
CPU_STK
 *
	`OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

2033 *
p_¨g
,

2034 
CPU_STK
 *
p_°k_ba£
,

2035 
CPU_STK
 *
p_°k_limô
,

2036 
CPU_STK_SIZE
 
°k_size
,

2037 
OS_OPT
 
›t
);

2039 
	`OSTaskSwHook
 ();

2041 
	`OSTimeTickHook
 ();

2043 #ifde‡
__˝lu•lus


2044 
	}
}

2056 
OSCfg_Inô
 ();

2058 #i‡
OS_CFG_DBG_EN
 > 0u

2059 
OS_Dbg_Inô
 ();

2063 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

2064 
OS_I¡QTaskInô
 (
OS_ERR
 *
p_îr
);

2066 
OS_I¡QPo°
 (
OS_OBJ_TYPE
 
ty≥
,

2067 *
p_obj
,

2068 *
p_void
,

2069 
OS_MSG_SIZE
 
msg_size
,

2070 
OS_FLAGS
 
Êags
,

2071 
OS_OPT
 
›t
,

2072 
CPU_TS
 
ts
,

2073 
OS_ERR
 *
p_îr
);

2075 
OS_I¡QRePo°
 ();

2077 
OS_I¡QTask
 (*
p_¨g
);

2082 
OS_MsgPoﬁInô
 (
OS_ERR
 *
p_îr
);

2084 
OS_MSG_QTY
 
OS_MsgQFªeAŒ
 (
OS_MSG_Q
 *
p_msg_q
);

2086 *
OS_MsgQGë
 (
OS_MSG_Q
 *
p_msg_q
,

2087 
OS_MSG_SIZE
 *
p_msg_size
,

2088 
CPU_TS
 *
p_ts
,

2089 
OS_ERR
 *
p_îr
);

2091 
OS_MsgQInô
 (
OS_MSG_Q
 *
p_msg_q
,

2092 
OS_MSG_QTY
 
size
);

2094 
OS_MsgQPut
 (
OS_MSG_Q
 *
p_msg_q
,

2095 *
p_void
,

2096 
OS_MSG_SIZE
 
msg_size
,

2097 
OS_OPT
 
›t
,

2098 
CPU_TS
 
ts
,

2099 
OS_ERR
 *
p_îr
);

2103 
OS_Píd
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

2104 
OS_PEND_OBJ
 *
p_obj
,

2105 
OS_STATE
 
≥ndög_⁄
,

2106 
OS_TICK
 
timeout
);

2108 
OS_PídAb‹t
 (
OS_PEND_OBJ
 *
p_obj
,

2109 
OS_TCB
 *
p_tcb
,

2110 
CPU_TS
 
ts
);

2112 
OS_PídAb‹t1
 (
OS_PEND_OBJ
 *
p_obj
,

2113 
OS_TCB
 *
p_tcb
,

2114 
CPU_TS
 
ts
);

2116 
OS_PídObjDñ
 (
OS_PEND_OBJ
 *
p_obj
,

2117 
OS_TCB
 *
p_tcb
,

2118 
CPU_TS
 
ts
);

2120 
OS_PídObjDñ1
 (
OS_PEND_OBJ
 *
p_obj
,

2121 
OS_TCB
 *
p_tcb
,

2122 
CPU_TS
 
ts
);

2124 
OS_Po°
 (
OS_PEND_OBJ
 *
p_obj
,

2125 
OS_TCB
 *
p_tcb
,

2126 *
p_void
,

2127 
OS_MSG_SIZE
 
msg_size
,

2128 
CPU_TS
 
ts
);

2130 
OS_Po°1
 (
OS_PEND_OBJ
 *
p_obj
,

2131 
OS_TCB
 *
p_tcb
,

2132 *
p_void
,

2133 
OS_MSG_SIZE
 
msg_size
,

2134 
CPU_TS
 
ts
);

2138 
OS_PrioInô
 ();

2140 
OS_PrioIn£π
 (
OS_PRIO
 
¥io
);

2142 
OS_PrioRemove
 (
OS_PRIO
 
¥io
);

2144 
OS_PRIO
 
OS_PrioGëHighe°
 ();

2148 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

2149 
OS_Sched0
 ();

2152 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

2153 
OS_SchedLockTimeMósSèπ
 ();

2154 
OS_SchedLockTimeMósSt›
 ();

2157 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

2158 
OS_SchedRoundRobö
 (
OS_RDY_LIST
 *
p_rdy_li°
);

2163 
OS_RdyLi°Inô
 ();

2165 
OS_RdyLi°In£π
 (
OS_TCB
 *
p_tcb
);

2167 
OS_RdyLi°In£πHód
 (
OS_TCB
 *
p_tcb
);

2169 
OS_RdyLi°In£πTaû
 (
OS_TCB
 *
p_tcb
);

2171 
OS_RdyLi°MoveHódToTaû
 (
OS_RDY_LIST
 *
p_rdy_li°
);

2173 
OS_RdyLi°Remove
 (
OS_TCB
 *
p_tcb
);

2177 
OS_PídD©aInô
 (
OS_TCB
 *
p_tcb
,

2178 
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

2179 
OS_OBJ_QTY
 
tbl_size
);

2181 #i‡
OS_CFG_DBG_EN
 > 0u

2182 
OS_PídDbgNameAdd
 (
OS_PEND_OBJ
 *
p_obj
,

2183 
OS_TCB
 *
p_tcb
);

2185 
OS_PídDbgNameRemove
 (
OS_PEND_OBJ
 *
p_obj
,

2186 
OS_TCB
 *
p_tcb
);

2189 
OS_PEND_LIST
 *
OS_PídLi°GëPå
 (
OS_PEND_OBJ
 *
p_obj
);

2191 
OS_PídLi°Inô
 (
OS_PEND_LIST
 *
p_≥nd_li°
);

2193 
OS_PídLi°In£πHód
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

2194 
OS_PEND_DATA
 *
p_≥nd_d©a
);

2196 
OS_PídLi°In£πPrio
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

2197 
OS_PEND_DATA
 *
p_≥nd_d©a
);

2199 
OS_PídLi°Ch™gePrio
 (
OS_TCB
 *
p_tcb
,

2200 
OS_PRIO
 
¥io_√w
);

2202 
OS_PídLi°Remove
 (
OS_TCB
 *
p_tcb
);

2204 
OS_PídLi°Remove1
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

2205 
OS_PEND_DATA
 *
p_≥nd_d©a
);

2209 
OS_TickLi°In£π
 (
OS_TICK_LIST
 *
p_li°
,

2210 
OS_TCB
 *
p_tcb
,

2211 
OS_TICK
 
time
);

2213 
OS_TickLi°In£πDly
 (
OS_TCB
 *
p_tcb
,

2214 
OS_TICK
 
time
,

2215 
OS_OPT
 
›t
,

2216 
OS_ERR
 *
p_îr
);

2218 
OS_TickLi°Remove
 (
OS_TCB
 *
p_tcb
);

2220 
OS_TickLi°Re£tPók
 ();

2241 #i‚de‡
OS_CFG_APP_HOOKS_EN


2246 #i‚de‡
OS_CFG_ARG_CHK_EN


2251 #i‚de‡
OS_CFG_DBG_EN


2256 #i‚de‡
OS_CFG_CALLED_FROM_ISR_CHK_EN


2261 #i‚de‡
OS_CFG_OBJ_TYPE_CHK_EN


2266 #i‚de‡
OS_CFG_PEND_MULTI_EN


2271 #i‡ 
OS_CFG_PRIO_MAX
 < 8u

2276 #i‚de‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN


2279 #i‡ (
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u) && \

2280 (
	gOS_CFG_TS_EN
 < 1u)

2286 #i‚de‡
OS_CFG_SCHED_ROUND_ROBIN_EN


2291 #i‚de‡
OS_CFG_STK_SIZE_MIN


2295 #i‚de‡
OS_CFG_TS_EN


2298 #i‡ (
OS_CFG_TS_EN
 > 0u) && \

2299 (
	gCPU_CFG_TS_EN
 =
DEF_DISABLED
)

2310 #i‚de‡
OS_CFG_FLAG_EN


2313 #i‚de‡
OS_CFG_FLAG_DEL_EN


2317 #i‚de‡
OS_CFG_FLAG_MODE_CLR_EN


2321 #i‚de‡
OS_CFG_FLAG_PEND_ABORT_EN


2332 #i‚de‡
OS_CFG_MEM_EN


2342 #i‚de‡
OS_CFG_MUTEX_EN


2345 #i‚de‡
OS_CFG_MUTEX_DEL_EN


2349 #i‚de‡
OS_CFG_MUTEX_PEND_ABORT_EN


2360 #i‚de‡
OS_CFG_Q_EN


2363 #i‚de‡
OS_CFG_Q_DEL_EN


2367 #i‚de‡
OS_CFG_Q_FLUSH_EN


2371 #i‚de‡
OS_CFG_Q_PEND_ABORT_EN


2382 #i‚de‡
OS_CFG_SEM_EN


2385 #i‚de‡
OS_CFG_SEM_DEL_EN


2389 #i‚de‡
OS_CFG_SEM_PEND_ABORT_EN


2393 #i‚de‡
OS_CFG_SEM_SET_EN


2404 #i‚de‡
OS_CFG_STAT_TASK_EN


2408 #i‚de‡
OS_CFG_STAT_TASK_STK_CHK_EN


2412 #i‚de‡
OS_CFG_TASK_CHANGE_PRIO_EN


2416 #i‚de‡
OS_CFG_TASK_DEL_EN


2420 #i‚de‡
OS_CFG_TASK_Q_EN


2424 #i‚de‡
OS_CFG_TASK_Q_PEND_ABORT_EN


2428 #i‚de‡
OS_CFG_TASK_PROFILE_EN


2432 #i‚de‡
OS_CFG_TASK_REG_TBL_SIZE


2436 #i‚de‡
OS_CFG_TASK_SEM_PEND_ABORT_EN


2440 #i‚de‡
OS_CFG_TASK_SUSPEND_EN


2450 #i‚de‡
OS_CFG_TIME_DLY_HMSM_EN


2454 #i‚de‡
OS_CFG_TIME_DLY_RESUME_EN


2464 #i‚de‡
OS_CFG_TMR_EN


2467 #i‚de‡
OS_CFG_TMR_DEL_EN


2479 #i‡
LIB_VERSION
 < 126u

2485 #i‡
CPU_CORE_VERSION
 < 125u

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_cfg_app.c

37 
	#MICRIUM_SOURCE


	)

38 
	~<os_cfg_≠p.h
>

39 
	~"os.h
"

41 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


42 c⁄° 
CPU_CHAR
 *
	gos_cfg_≠p__c
 = "$Id: $";

45 
	#OS_CFG_IDLE_TASK_STK_LIMIT
 ((
OS_CFG_IDLE_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

46 
	#OS_CFG_INT_Q_TASK_STK_LIMIT
 ((
OS_CFG_INT_Q_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

47 
	#OS_CFG_STAT_TASK_STK_LIMIT
 ((
OS_CFG_STAT_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

48 
	#OS_CFG_TICK_TASK_STK_LIMIT
 ((
OS_CFG_TICK_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

49 
	#OS_CFG_TMR_TASK_STK_LIMIT
 ((
OS_CFG_TMR_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

57 
CPU_STK
 
	gOSCfg_IdÀTaskStk
 [
OS_CFG_IDLE_TASK_STK_SIZE
];

59 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

60 
OS_INT_Q
 
	gOSCfg_I¡Q
 [
OS_CFG_INT_Q_SIZE
];

61 
CPU_STK
 
	gOSCfg_I¡QTaskStk
 [
OS_CFG_INT_Q_TASK_STK_SIZE
];

64 #i‡(
OS_CFG_ISR_STK_SIZE
 > 0u)

65 
CPU_STK
 
	gOSCfg_ISRStk
 [
OS_CFG_ISR_STK_SIZE
];

68 #i‡(
OS_MSG_EN
 > 0u)

69 
OS_MSG
 
	gOSCfg_MsgPoﬁ
 [
OS_CFG_MSG_POOL_SIZE
];

72 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

73 
CPU_STK
 
	gOSCfg_SètTaskStk
 [
OS_CFG_STAT_TASK_STK_SIZE
];

76 
CPU_STK
 
	gOSCfg_TickTaskStk
 [
OS_CFG_TICK_TASK_STK_SIZE
];

78 #i‡(
OS_CFG_TMR_EN
 > 0u)

79 
CPU_STK
 
	gOSCfg_TmrTaskStk
 [
OS_CFG_TMR_TASK_STK_SIZE
];

88 
CPU_STK
 * c⁄° 
	gOSCfg_IdÀTaskStkBa£På
 = (CPU_STK *)&
OSCfg_IdÀTaskStk
[0];

89 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_IdÀTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_IDLE_TASK_STK_LIMIT
;

90 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_IdÀTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_IDLE_TASK_STK_SIZE
;

91 
CPU_INT32U
 c⁄° 
	gOSCfg_IdÀTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_IdÀTaskStk
);

94 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

95 
OS_INT_Q
 * c⁄° 
	gOSCfg_I¡QBa£På
 = (OS_INT_Q *)&
OSCfg_I¡Q
[0];

96 
OS_OBJ_QTY
 c⁄° 
	gOSCfg_I¡QSize
 = (OS_OBJ_QTY )
OS_CFG_INT_Q_SIZE
;

97 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QSizeRAM
 = (CPU_INT32U )(
OSCfg_I¡Q
);

98 
CPU_STK
 * c⁄° 
	gOSCfg_I¡QTaskStkBa£På
 = (CPU_STK *)&
OSCfg_I¡QTaskStk
[0];

99 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_INT_Q_TASK_STK_LIMIT
;

100 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_INT_Q_TASK_STK_SIZE
;

101 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_I¡QTaskStk
);

103 
OS_INT_Q
 * c⁄° 
	gOSCfg_I¡QBa£På
 = (OS_INT_Q *)0;

104 
OS_OBJ_QTY
 c⁄° 
	gOSCfg_I¡QSize
 = (OS_OBJ_QTY )0;

105 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QSizeRAM
 = (CPU_INT32U )0;

106 
CPU_STK
 * c⁄° 
	gOSCfg_I¡QTaskStkBa£På
 = (CPU_STK *)0;

107 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkLimô
 = (CPU_STK_SIZE)0;

108 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkSize
 = (CPU_STK_SIZE)0;

109 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QTaskStkSizeRAM
 = (CPU_INT32U )0;

113 #i‡(
OS_CFG_ISR_STK_SIZE
 > 0u)

114 
CPU_STK
 * c⁄° 
	gOSCfg_ISRStkBa£På
 = (CPU_STK *)&
OSCfg_ISRStk
[0];

115 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_ISRStkSize
 = (CPU_STK_SIZE)
OS_CFG_ISR_STK_SIZE
;

116 
CPU_INT32U
 c⁄° 
	gOSCfg_ISRStkSizeRAM
 = (CPU_INT32U )(
OSCfg_ISRStk
);

118 
CPU_STK
 * c⁄° 
	gOSCfg_ISRStkBa£På
 = (CPU_STK *)0;

119 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_ISRStkSize
 = (CPU_STK_SIZE)0;

120 
CPU_INT32U
 c⁄° 
	gOSCfg_ISRStkSizeRAM
 = (CPU_INT32U )0;

124 #i‡(
OS_MSG_EN
 > 0u)

125 
OS_MSG_SIZE
 c⁄° 
	gOSCfg_MsgPoﬁSize
 = (OS_MSG_SIZE)
OS_CFG_MSG_POOL_SIZE
;

126 
CPU_INT32U
 c⁄° 
	gOSCfg_MsgPoﬁSizeRAM
 = (CPU_INT32U )(
OSCfg_MsgPoﬁ
);

127 
OS_MSG
 * c⁄° 
	gOSCfg_MsgPoﬁBa£På
 = (OS_MSG *)&
OSCfg_MsgPoﬁ
[0];

129 
OS_MSG_SIZE
 c⁄° 
	gOSCfg_MsgPoﬁSize
 = (OS_MSG_SIZE)0;

130 
CPU_INT32U
 c⁄° 
	gOSCfg_MsgPoﬁSizeRAM
 = (CPU_INT32U )0;

131 
OS_MSG
 * c⁄° 
	gOSCfg_MsgPoﬁBa£På
 = (OS_MSG *)0;

135 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

136 
OS_PRIO
 c⁄° 
	gOSCfg_SètTaskPrio
 = (OS_PRIO )
OS_CFG_STAT_TASK_PRIO
;

137 
OS_RATE_HZ
 c⁄° 
	gOSCfg_SètTaskR©e_Hz
 = (OS_RATE_HZ )
OS_CFG_STAT_TASK_RATE_HZ
;

138 
CPU_STK
 * c⁄° 
	gOSCfg_SètTaskStkBa£På
 = (CPU_STK *)&
OSCfg_SètTaskStk
[0];

139 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_SètTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_STAT_TASK_STK_LIMIT
;

140 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_SètTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_STAT_TASK_STK_SIZE
;

141 
CPU_INT32U
 c⁄° 
	gOSCfg_SètTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_SètTaskStk
);

143 
OS_PRIO
 c⁄° 
	gOSCfg_SètTaskPrio
 = (OS_PRIO )0;

144 
OS_RATE_HZ
 c⁄° 
	gOSCfg_SètTaskR©e_Hz
 = (OS_RATE_HZ )0;

145 
CPU_STK
 * c⁄° 
	gOSCfg_SètTaskStkBa£På
 = (CPU_STK *)0;

146 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_SètTaskStkLimô
 = (CPU_STK_SIZE)0;

147 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_SètTaskStkSize
 = (CPU_STK_SIZE)0;

148 
CPU_INT32U
 c⁄° 
	gOSCfg_SètTaskStkSizeRAM
 = (CPU_INT32U )0;

152 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_StkSizeMö
 = (CPU_STK_SIZE)
OS_CFG_STK_SIZE_MIN
;

155 
OS_RATE_HZ
 c⁄° 
	gOSCfg_TickR©e_Hz
 = (OS_RATE_HZ )
OS_CFG_TICK_RATE_HZ
;

156 
OS_PRIO
 c⁄° 
	gOSCfg_TickTaskPrio
 = (OS_PRIO )
OS_CFG_TICK_TASK_PRIO
;

157 
CPU_STK
 * c⁄° 
	gOSCfg_TickTaskStkBa£På
 = (CPU_STK *)&
OSCfg_TickTaskStk
[0];

158 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TickTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_TICK_TASK_STK_LIMIT
;

159 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TickTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_TICK_TASK_STK_SIZE
;

160 
CPU_INT32U
 c⁄° 
	gOSCfg_TickTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_TickTaskStk
);

163 #i‡(
OS_CFG_TMR_EN
 > 0u)

164 
OS_PRIO
 c⁄° 
	gOSCfg_TmrTaskPrio
 = (OS_PRIO )
OS_CFG_TMR_TASK_PRIO
;

165 
OS_RATE_HZ
 c⁄° 
	gOSCfg_TmrTaskR©e_Hz
 = (OS_RATE_HZ )
OS_CFG_TMR_TASK_RATE_HZ
;

166 
CPU_STK
 * c⁄° 
	gOSCfg_TmrTaskStkBa£På
 = (CPU_STK *)&
OSCfg_TmrTaskStk
[0];

167 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TmrTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_TMR_TASK_STK_LIMIT
;

168 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TmrTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_TMR_TASK_STK_SIZE
;

169 
CPU_INT32U
 c⁄° 
	gOSCfg_TmrTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_TmrTaskStk
);

171 
OS_PRIO
 c⁄° 
	gOSCfg_TmrTaskPrio
 = (OS_PRIO )0;

172 
OS_RATE_HZ
 c⁄° 
	gOSCfg_TmrTaskR©e_Hz
 = (OS_RATE_HZ )0;

173 
CPU_STK
 * c⁄° 
	gOSCfg_TmrTaskStkBa£På
 = (CPU_STK *)0;

174 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TmrTaskStkLimô
 = (CPU_STK_SIZE)0;

175 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TmrTaskStkSize
 = (CPU_STK_SIZE)0;

176 
CPU_INT32U
 c⁄° 
	gOSCfg_TmrTaskStkSizeRAM
 = (CPU_INT32U )0;

186 
CPU_INT32U
 c⁄° 
	gOSCfg_D©aSizeRAM
 = (
OSCfg_IdÀTaskStk
)

188 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

189 + (
OSCfg_I¡Q
)

190 + (
OSCfg_I¡QTaskStk
)

193 #i‡(
OS_MSG_EN
 > 0u)

194 + (
OSCfg_MsgPoﬁ
)

197 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

198 + (
OSCfg_SètTaskStk
)

201 #i‡(
OS_CFG_TMR_EN
 > 0u)

202 + (
OSCfg_TmrTaskStk
)

205 #i‡(
OS_CFG_ISR_STK_SIZE
 > 0u)

206 + (
OSCfg_ISRStk
)

208 + (
OSCfg_TickTaskStk
);

230 
	$OSCfg_Inô
 ()

232 ()&
OSCfg_D©aSizeRAM
;

234 ()&
OSCfg_IdÀTaskStkBa£På
;

235 ()&
OSCfg_IdÀTaskStkLimô
;

236 ()&
OSCfg_IdÀTaskStkSize
;

237 ()&
OSCfg_IdÀTaskStkSizeRAM
;

239 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

240 ()&
OSCfg_I¡QBa£På
;

241 ()&
OSCfg_I¡QSize
;

242 ()&
OSCfg_I¡QSizeRAM
;

243 ()&
OSCfg_I¡QTaskStkBa£På
;

244 ()&
OSCfg_I¡QTaskStkLimô
;

245 ()&
OSCfg_I¡QTaskStkSize
;

246 ()&
OSCfg_I¡QTaskStkSizeRAM
;

249 ()&
OSCfg_ISRStkBa£På
;

250 ()&
OSCfg_ISRStkSize
;

251 ()&
OSCfg_ISRStkSizeRAM
;

253 #i‡(
OS_MSG_EN
 > 0u)

254 ()&
OSCfg_MsgPoﬁSize
;

255 ()&
OSCfg_MsgPoﬁSizeRAM
;

256 ()&
OSCfg_MsgPoﬁBa£På
;

259 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

260 ()&
OSCfg_SètTaskPrio
;

261 ()&
OSCfg_SètTaskR©e_Hz
;

262 ()&
OSCfg_SètTaskStkBa£På
;

263 ()&
OSCfg_SètTaskStkLimô
;

264 ()&
OSCfg_SètTaskStkSize
;

265 ()&
OSCfg_SètTaskStkSizeRAM
;

268 ()&
OSCfg_StkSizeMö
;

270 ()&
OSCfg_TickR©e_Hz
;

271 ()&
OSCfg_TickTaskPrio
;

272 ()&
OSCfg_TickTaskStkBa£På
;

273 ()&
OSCfg_TickTaskStkLimô
;

274 ()&
OSCfg_TickTaskStkSize
;

275 ()&
OSCfg_TickTaskStkSizeRAM
;

277 #i‡(
OS_CFG_TMR_EN
 > 0u)

278 ()&
OSCfg_TmrTaskPrio
;

279 ()&
OSCfg_TmrTaskR©e_Hz
;

280 ()&
OSCfg_TmrTaskStkBa£På
;

281 ()&
OSCfg_TmrTaskStkLimô
;

282 ()&
OSCfg_TmrTaskStkSize
;

283 ()&
OSCfg_TmrTaskStkSizeRAM
;

285 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_core.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_c‹e__c
 = "$Id: $";

57 
	$OSInô
 (
OS_ERR
 *
p_îr
)

59 
CPU_STK
 *
p_°k
;

60 
CPU_STK_SIZE
 
size
;

64 #ifde‡
OS_SAFETY_CRITICAL


65 i‡(
p_îr
 =(
OS_ERR
 *)0) {

66 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

71 
	`OSInôHook
();

73 
OSI¡Ne°ögCå
 = (
OS_NESTING_CTR
)0;

75 
OSRu¬ög
 = 
OS_STATE_OS_STOPPED
;

77 
OSSchedLockNe°ögCå
 = (
OS_NESTING_CTR
)0;

79 
OSTCBCurPå
 = (
OS_TCB
 *)0;

80 
OSTCBHighRdyPå
 = (
OS_TCB
 *)0;

82 
OSPrioCur
 = (
OS_PRIO
)0;

83 
OSPrioHighRdy
 = (
OS_PRIO
)0;

84 
OSPrioSaved
 = (
OS_PRIO
)0;

86 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

87 
OSSchedLockTimeBegö
 = (
CPU_TS
)0;

88 
OSSchedLockTimeMax
 = (
CPU_TS
)0;

89 
OSSchedLockTimeMaxCur
 = (
CPU_TS
)0;

92 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


93 
OSSa„tyCrôiˇlSèπFœg
 = 
DEF_FALSE
;

96 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

97 
OSSchedRoundRoböEn
 = 
DEF_FALSE
;

98 
OSSchedRoundRoböDÊtTimeQu™è
 = 
OSCfg_TickR©e_Hz
 / 10u;

101 i‡(
OSCfg_ISRStkSize
 > (
CPU_STK_SIZE
)0) {

102 
p_°k
 = 
OSCfg_ISRStkBa£På
;

103 i‡(
p_°k
 !(
CPU_STK
 *)0) {

104 
size
 = 
OSCfg_ISRStkSize
;

105 
size
 > (
CPU_STK_SIZE
)0) {

106 
size
--;

107 *
p_°k
 = (
CPU_STK
)0;

108 
p_°k
++;

113 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

114 
OS_AµTaskCª©eHookPå
 = (
OS_APP_HOOK_TCB
 )0;

115 
OS_AµTaskDñHookPå
 = (
OS_APP_HOOK_TCB
 )0;

116 
OS_AµTaskRëu∫HookPå
 = (
OS_APP_HOOK_TCB
 )0;

118 
OS_AµIdÀTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

119 
OS_AµSètTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

120 
OS_AµTaskSwHookPå
 = (
OS_APP_HOOK_VOID
)0;

121 
OS_AµTimeTickHookPå
 = (
OS_APP_HOOK_VOID
)0;

124 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

125 
OSTaskRegNextAvaûID
 = (
OS_REG_ID
)0;

128 
	`OS_PrioInô
();

130 
	`OS_RdyLi°Inô
();

133 #i‡
OS_CFG_FLAG_EN
 > 0u

134 
	`OS_FœgInô
(
p_îr
);

135 i‡(*
p_îr
 !
OS_ERR_NONE
) {

141 #i‡
OS_CFG_MEM_EN
 > 0u

142 
	`OS_MemInô
(
p_îr
);

143 i‡(*
p_îr
 !
OS_ERR_NONE
) {

149 #i‡(
OS_MSG_EN
) > 0u

150 
	`OS_MsgPoﬁInô
(
p_îr
);

151 i‡(*
p_îr
 !
OS_ERR_NONE
) {

157 #i‡
OS_CFG_MUTEX_EN
 > 0u

158 
	`OS_MuãxInô
(
p_îr
);

159 i‡(*
p_îr
 !
OS_ERR_NONE
) {

165 #i‡
OS_CFG_Q_EN
 > 0u

166 
	`OS_QInô
(
p_îr
);

167 i‡(*
p_îr
 !
OS_ERR_NONE
) {

173 #i‡
OS_CFG_SEM_EN
 > 0u

174 
	`OS_SemInô
(
p_îr
);

175 i‡(*
p_îr
 !
OS_ERR_NONE
) {

181 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

182 
	`OS_TLS_Inô
(
p_îr
);

183 i‡(*
p_îr
 !
OS_ERR_NONE
) {

189 
	`OS_TaskInô
(
p_îr
);

190 i‡(*
p_îr
 !
OS_ERR_NONE
) {

195 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

196 
	`OS_I¡QTaskInô
(
p_îr
);

197 i‡(*
p_îr
 !
OS_ERR_NONE
) {

203 
	`OS_IdÀTaskInô
(
p_îr
);

204 i‡(*
p_îr
 !
OS_ERR_NONE
) {

209 
	`OS_TickTaskInô
(
p_îr
);

210 i‡(*
p_îr
 !
OS_ERR_NONE
) {

215 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

216 
	`OS_SètTaskInô
(
p_îr
);

217 i‡(*
p_îr
 !
OS_ERR_NONE
) {

223 #i‡
OS_CFG_TMR_EN
 > 0u

224 
	`OS_TmrInô
(
p_îr
);

225 i‡(*
p_îr
 !
OS_ERR_NONE
) {

231 #i‡
OS_CFG_DBG_EN
 > 0u

232 
	`OS_Dbg_Inô
();

236 
	`OSCfg_Inô
();

237 
	}
}

268 
	$OSI¡E¡î
 ()

270 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

274 i‡(
OSI¡Ne°ögCå
 >(
OS_NESTING_CTR
)250u) {

278 
OSI¡Ne°ögCå
++;

279 
	}
}

302 
	$OSI¡Exô
 ()

304 
	`CPU_SR_ALLOC
();

308 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

312 
	`CPU_INT_DIS
();

313 i‡(
OSI¡Ne°ögCå
 =(
OS_NESTING_CTR
)0) {

314 
	`CPU_INT_EN
();

317 
OSI¡Ne°ögCå
--;

318 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

319 
	`CPU_INT_EN
();

323 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

324 
	`CPU_INT_EN
();

328 
OSPrioHighRdy
 = 
	`OS_PrioGëHighe°
();

329 
OSTCBHighRdyPå
 = 
OSRdyLi°
[
OSPrioHighRdy
].
HódPå
;

330 i‡(
OSTCBHighRdyPå
 =
OSTCBCurPå
) {

331 
	`CPU_INT_EN
();

335 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

336 
OSTCBHighRdyPå
->
CtxSwCå
++;

338 
OSTaskCtxSwCå
++;

340 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

341 
	`OS_TLS_TaskSw
();

344 
	`OSI¡CtxSw
();

346 
	`CPU_INT_EN
();

347 
	}
}

365 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


366 
	$OSSa„tyCrôiˇlSèπ
 ()

368 
OSSa„tyCrôiˇlSèπFœg
 = 
DEF_TRUE
;

369 
	}
}

390 
	$OSSched
 ()

392 
	`CPU_SR_ALLOC
();

396 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

400 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

404 
	`CPU_INT_DIS
();

405 
OSPrioHighRdy
 = 
	`OS_PrioGëHighe°
();

406 
OSTCBHighRdyPå
 = 
OSRdyLi°
[
OSPrioHighRdy
].
HódPå
;

407 i‡(
OSTCBHighRdyPå
 =
OSTCBCurPå
) {

408 
	`CPU_INT_EN
();

412 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

413 
OSTCBHighRdyPå
->
CtxSwCå
++;

415 
OSTaskCtxSwCå
++;

417 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

418 
	`OS_TLS_TaskSw
();

421 
	`OS_TASK_SW
();

422 
	`CPU_INT_EN
();

423 
	}
}

447 
	$OSSchedLock
 (
OS_ERR
 *
p_îr
)

449 
	`CPU_SR_ALLOC
();

453 #ifde‡
OS_SAFETY_CRITICAL


454 i‡(
p_îr
 =(
OS_ERR
 *)0) {

455 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

460 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

461 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

462 *
p_îr
 = 
OS_ERR_SCHED_LOCK_ISR
;

467 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

468 *
p_îr
 = 
OS_ERR_OS_NOT_RUNNING
;

472 i‡(
OSSchedLockNe°ögCå
 >(
OS_NESTING_CTR
)250u) {

473 *
p_îr
 = 
OS_ERR_LOCK_NESTING_OVF
;

477 
	`CPU_CRITICAL_ENTER
();

478 
OSSchedLockNe°ögCå
++;

479 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

480 
	`OS_SchedLockTimeMósSèπ
();

482 
	`CPU_CRITICAL_EXIT
();

483 *
p_îr
 = 
OS_ERR_NONE
;

484 
	}
}

508 
	$OSSchedU∆ock
 (
OS_ERR
 *
p_îr
)

510 
	`CPU_SR_ALLOC
();

514 #ifde‡
OS_SAFETY_CRITICAL


515 i‡(
p_îr
 =(
OS_ERR
 *)0) {

516 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

521 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

522 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

523 *
p_îr
 = 
OS_ERR_SCHED_UNLOCK_ISR
;

528 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

529 *
p_îr
 = 
OS_ERR_OS_NOT_RUNNING
;

533 i‡(
OSSchedLockNe°ögCå
 =(
OS_NESTING_CTR
)0) {

534 *
p_îr
 = 
OS_ERR_SCHED_NOT_LOCKED
;

538 
	`CPU_CRITICAL_ENTER
();

539 
OSSchedLockNe°ögCå
--;

540 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

541 
	`CPU_CRITICAL_EXIT
();

542 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

546 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

547 
	`OS_SchedLockTimeMósSt›
();

550 
	`CPU_CRITICAL_EXIT
();

551 
	`OSSched
();

552 *
p_îr
 = 
OS_ERR_NONE
;

553 
	}
}

574 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

575 
	$OSSchedRoundRoböCfg
 (
CPU_BOOLEAN
 
í
,

576 
OS_TICK
 
dÊt_time_qu™è
,

577 
OS_ERR
 *
p_îr
)

579 
	`CPU_SR_ALLOC
();

583 #ifde‡
OS_SAFETY_CRITICAL


584 i‡(
p_îr
 =(
OS_ERR
 *)0) {

585 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

590 
	`CPU_CRITICAL_ENTER
();

591 i‡(
í
 !
DEF_ENABLED
) {

592 
OSSchedRoundRoböEn
 = 
DEF_DISABLED
;

594 
OSSchedRoundRoböEn
 = 
DEF_ENABLED
;

597 i‡(
dÊt_time_qu™è
 > (
OS_TICK
)0) {

598 
OSSchedRoundRoböDÊtTimeQu™è
 = 
dÊt_time_qu™è
;

600 
OSSchedRoundRoböDÊtTimeQu™è
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / (
OS_RATE_HZ
)10);

602 
	`CPU_CRITICAL_EXIT
();

603 *
p_îr
 = 
OS_ERR_NONE
;

604 
	}
}

628 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

629 
	$OSSchedRoundRoböYõld
 (
OS_ERR
 *
p_îr
)

631 
OS_RDY_LIST
 *
p_rdy_li°
;

632 
OS_TCB
 *
p_tcb
;

633 
	`CPU_SR_ALLOC
();

637 #ifde‡
OS_SAFETY_CRITICAL


638 i‡(
p_îr
 =(
OS_ERR
 *)0) {

639 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

644 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

645 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

646 *
p_îr
 = 
OS_ERR_YIELD_ISR
;

651 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

652 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

656 i‡(
OSSchedRoundRoböEn
 !
DEF_TRUE
) {

657 *
p_îr
 = 
OS_ERR_ROUND_ROBIN_DISABLED
;

661 
	`CPU_CRITICAL_ENTER
();

662 
p_rdy_li°
 = &
OSRdyLi°
[
OSPrioCur
];

663 i‡(
p_rdy_li°
->
NbrE¡rõs
 < (
OS_OBJ_QTY
)2) {

664 
	`CPU_CRITICAL_EXIT
();

665 *
p_îr
 = 
OS_ERR_ROUND_ROBIN_1
;

669 
	`OS_RdyLi°MoveHódToTaû
(
p_rdy_li°
);

670 
p_tcb
 = 
p_rdy_li°
->
HódPå
;

671 i‡(
p_tcb
->
TimeQu™è
 =(
OS_TICK
)0) {

672 
p_tcb
->
TimeQu™èCå
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

674 
p_tcb
->
TimeQu™èCå
 =Ö_tcb->
TimeQu™è
;

677 
	`CPU_CRITICAL_EXIT
();

679 
	`OSSched
();

680 *
p_îr
 = 
OS_ERR_NONE
;

681 
	}
}

709 
	$OSSèπ
 (
OS_ERR
 *
p_îr
)

711 #ifde‡
OS_SAFETY_CRITICAL


712 i‡(
p_îr
 =(
OS_ERR
 *)0) {

713 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

718 i‡(
OSRu¬ög
 =
OS_STATE_OS_STOPPED
) {

719 
OSPrioHighRdy
 = 
	`OS_PrioGëHighe°
();

720 
OSPrioCur
 = 
OSPrioHighRdy
;

721 
OSTCBHighRdyPå
 = 
OSRdyLi°
[
OSPrioHighRdy
].
HódPå
;

722 
OSTCBCurPå
 = 
OSTCBHighRdyPå
;

723 
OSRu¬ög
 = 
OS_STATE_OS_RUNNING
;

724 
	`OSSèπHighRdy
();

725 *
p_îr
 = 
OS_ERR_FATAL_RETURN
;

727 *
p_îr
 = 
OS_ERR_OS_RUNNING
;

729 
	}
}

748 
CPU_INT16U
 
	$OSVîsi⁄
 (
OS_ERR
 *
p_îr
)

750 #ifde‡
OS_SAFETY_CRITICAL


751 i‡(
p_îr
 =(
OS_ERR
 *)0) {

752 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

753  ((
CPU_INT16U
)0u);

757 *
p_îr
 = 
OS_ERR_NONE
;

758  (
OS_VERSION
);

759 
	}
}

784 
	$OS_IdÀTask
 (*
p_¨g
)

786 
	`CPU_SR_ALLOC
();

790 ()&
p_¨g
;

792 
DEF_ON
) {

793 
	`CPU_CRITICAL_ENTER
();

794 
OSIdÀTaskCå
++;

795 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

796 
OSSètTaskCå
++;

798 
	`CPU_CRITICAL_EXIT
();

800 
	`OSIdÀTaskHook
();

802 
	}
}

819 
	$OS_IdÀTaskInô
 (
OS_ERR
 *
p_îr
)

821 #ifde‡
OS_SAFETY_CRITICAL


822 i‡(
p_îr
 =(
OS_ERR
 *)0) {

823 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

828 
OSIdÀTaskCå
 = (
OS_IDLE_CTR
)0;

830 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSIdÀTaskTCB
,

831 (
CPU_CHAR
 *)((*)"uC/OS-III Idle Task"),

832 (
OS_TASK_PTR
)
OS_IdÀTask
,

834 (
OS_PRIO
 )(
OS_CFG_PRIO_MAX
 - 1u),

835 (
CPU_STK
 *)
OSCfg_IdÀTaskStkBa£På
,

836 (
CPU_STK_SIZE
)
OSCfg_IdÀTaskStkLimô
,

837 (
CPU_STK_SIZE
)
OSCfg_IdÀTaskStkSize
,

838 (
OS_MSG_QTY
 )0u,

839 (
OS_TICK
 )0u,

841 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
 | 
OS_OPT_TASK_NO_TLS
),

842 (
OS_ERR
 *)
p_îr
);

843 
	}
}

876 
	$OS_Píd
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

877 
OS_PEND_OBJ
 *
p_obj
,

878 
OS_STATE
 
≥ndög_⁄
,

879 
OS_TICK
 
timeout
)

881 
OS_PEND_LIST
 *
p_≥nd_li°
;

885 
OSTCBCurPå
->
PídOn
 = 
≥ndög_⁄
;

886 
OSTCBCurPå
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

888 
	`OS_TaskBlock
(
OSTCBCurPå
,

889 
timeout
);

891 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

892 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

893 
p_≥nd_d©a
->
PídObjPå
 = 
p_obj
;

894 
	`OS_PídD©aInô
((
OS_TCB
 *)
OSTCBCurPå
,

895 (
OS_PEND_DATA
 *)
p_≥nd_d©a
,

896 (
OS_OBJ_QTY
 )1);

897 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

898 
p_≥nd_d©a
);

900 
OSTCBCurPå
->
PídD©aTblE¡rõs
 = (
OS_OBJ_QTY
 )0;

901 
OSTCBCurPå
->
PídD©aTblPå
 = (
OS_PEND_DATA
 *)0;

903 #i‡
OS_CFG_DBG_EN
 > 0u

904 
	`OS_PídDbgNameAdd
(
p_obj
,

905 
OSTCBCurPå
);

907 
	}
}

930 
	$OS_PídAb‹t
 (
OS_PEND_OBJ
 *
p_obj
,

931 
OS_TCB
 *
p_tcb
,

932 
CPU_TS
 
ts
)

934 
p_tcb
->
TaskSèã
) {

935 
OS_TASK_STATE_RDY
:

936 
OS_TASK_STATE_DLY
:

937 
OS_TASK_STATE_SUSPENDED
:

938 
OS_TASK_STATE_DLY_SUSPENDED
:

941 
OS_TASK_STATE_PEND
:

942 
OS_TASK_STATE_PEND_TIMEOUT
:

943 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

944 
	`OS_PídAb‹t1
(
p_obj
,

945 
p_tcb
,

946 
ts
);

948 #i‡(
OS_MSG_EN
 > 0u)

949 
p_tcb
->
MsgPå
 = (*)0;

950 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

952 
p_tcb
->
TS
 = 
ts
;

953 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

954 
	`OS_PídLi°Remove
(
p_tcb
);

956 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT
) {

957 
	`OS_TickLi°Remove
(
p_tcb
);

959 
	`OS_RdyLi°In£π
(
p_tcb
);

960 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

961 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_ABORT
;

962 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

965 
OS_TASK_STATE_PEND_SUSPENDED
:

966 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

967 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

968 
	`OS_PídAb‹t1
(
p_obj
,

969 
p_tcb
,

970 
ts
);

972 #i‡(
OS_MSG_EN
 > 0u)

973 
p_tcb
->
MsgPå
 = (*)0;

974 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

976 
p_tcb
->
TS
 = 
ts
;

977 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

978 
	`OS_PídLi°Remove
(
p_tcb
);

980 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
) {

981 
	`OS_TickLi°Remove
(
p_tcb
);

983 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

984 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_ABORT
;

985 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

991 
	}
}

1041 
	$OS_PídAb‹t1
 (
OS_PEND_OBJ
 *
p_obj
,

1042 
OS_TCB
 *
p_tcb
,

1043 
CPU_TS
 
ts
)

1045 
OS_OBJ_QTY
 
n_≥nd_li°
;

1046 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1050 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1051 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1053 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1054 i‡(
p_obj
 =
p_≥nd_d©a
->
PídObjPå
) {

1055 
p_≥nd_d©a
->
RdyObjPå
 = 
p_obj
;

1056 
p_≥nd_d©a
->
RdyTS
 = 
ts
;

1059 
p_≥nd_d©a
++;

1060 
n_≥nd_li°
--;

1062 
	}
}

1106 
	$OS_PídD©aInô
 (
OS_TCB
 *
p_tcb
,

1107 
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1108 
OS_OBJ_QTY
 
tbl_size
)

1110 
OS_OBJ_QTY
 
i
;

1114 
p_tcb
->
PídD©aTblE¡rõs
 = 
tbl_size
;

1115 
p_tcb
->
PídD©aTblPå
 = 
p_≥nd_d©a_tbl
;

1117 
i
 = 0u; i < 
tbl_size
; i++) {

1118 
p_≥nd_d©a_tbl
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1119 
p_≥nd_d©a_tbl
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1120 
p_≥nd_d©a_tbl
->
RdyObjPå
 = (
OS_PEND_OBJ
 *)0;

1121 
p_≥nd_d©a_tbl
->
RdyMsgPå
 = (*)0;

1122 
p_≥nd_d©a_tbl
->
RdyMsgSize
 = (
OS_MSG_SIZE
 )0;

1123 
p_≥nd_d©a_tbl
->
RdyTS
 = (
CPU_TS
 )0;

1124 
p_≥nd_d©a_tbl
->
TCBPå
 = 
p_tcb
;

1125 
p_≥nd_d©a_tbl
++;

1127 
	}
}

1148 #i‡
OS_CFG_DBG_EN
 > 0u

1149 
	$OS_PídDbgNameAdd
 (
OS_PEND_OBJ
 *
p_obj
,

1150 
OS_TCB
 *
p_tcb
)

1152 
OS_PEND_LIST
 *
p_≥nd_li°
;

1153 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1154 
OS_TCB
 *
p_tcb1
;

1157 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

1158 
p_tcb
->
DbgNamePå
 = 
p_obj
->
NamePå
;

1159 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1160 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

1161 
p_tcb1
 = 
p_≥nd_d©a
->
TCBPå
;

1162 
p_obj
->
DbgNamePå
 = 
p_tcb1
->
NamePå
;

1164 
p_tcb
->
PídOn
) {

1165 
OS_TASK_PEND_ON_TASK_Q
:

1166 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)"Task Q");

1169 
OS_TASK_PEND_ON_TASK_SEM
:

1170 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)"Task Sem");

1174 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

1178 
	}
}

1182 
	$OS_PídDbgNameRemove
 (
OS_PEND_OBJ
 *
p_obj
,

1183 
OS_TCB
 *
p_tcb
)

1185 
OS_PEND_LIST
 *
p_≥nd_li°
;

1186 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1187 
OS_TCB
 *
p_tcb1
;

1190 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

1191 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1192 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

1193 i‡(
p_≥nd_d©a
 !(
OS_PEND_DATA
 *)0) {

1194 
p_tcb1
 = 
p_≥nd_d©a
->
TCBPå
;

1195 
p_obj
->
DbgNamePå
 = 
p_tcb1
->
NamePå
;

1197 
p_obj
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

1199 
	}
}

1284 
	$OS_PídLi°Ch™gePrio
 (
OS_TCB
 *
p_tcb
,

1285 
OS_PRIO
 
¥io_√w
)

1287 
OS_OBJ_QTY
 
n_≥nd_li°
;

1288 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1289 
OS_PEND_LIST
 *
p_≥nd_li°
;

1290 
OS_PEND_OBJ
 *
p_obj
;

1293 
p_tcb
->
Prio
 = 
¥io_√w
;

1294 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1295 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1297 
n_≥nd_li°
 > 0u) {

1298 
p_obj
 = 
p_≥nd_d©a
->
PídObjPå
;

1299 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1300 i‡(
p_≥nd_li°
->
NbrE¡rõs
 > 1u) {

1301 
	`OS_PídLi°Remove1
(
p_≥nd_li°
,

1302 
p_≥nd_d©a
);

1303 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

1304 
p_≥nd_d©a
);

1306 
p_≥nd_d©a
++;

1307 
n_≥nd_li°
--;

1309 
	}
}

1327 
	$OS_PídLi°Inô
 (
OS_PEND_LIST
 *
p_≥nd_li°
)

1329 
p_≥nd_li°
->
HódPå
 = (
OS_PEND_DATA
 *)0;

1330 
p_≥nd_li°
->
TaûPå
 = (
OS_PEND_DATA
 *)0;

1331 
p_≥nd_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
 )0;

1332 
	}
}

1381 
	$OS_PídLi°In£πHód
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1382 
OS_PEND_DATA
 *
p_≥nd_d©a
)

1384 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

1388 
p_≥nd_li°
->
NbrE¡rõs
++;

1389 
p_≥nd_d©a
->
NextPå
 = 
p_≥nd_li°
->
HódPå
;

1390 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1391 
p_≥nd_d©a_√xt
 = 
p_≥nd_li°
->
HódPå
;

1392 i‡(
p_≥nd_d©a_√xt
 !(
OS_PEND_DATA
 *)0) {

1393 
p_≥nd_d©a_√xt
->
PªvPå
 = 
p_≥nd_d©a
;

1395 
p_≥nd_li°
->
HódPå
 = 
p_≥nd_d©a
;

1396 i‡(
p_≥nd_li°
->
NbrE¡rõs
 == 1u) {

1397 
p_≥nd_li°
->
TaûPå
 = 
p_≥nd_d©a
;

1399 
	}
}

1469 
	$OS_PídLi°In£πPrio
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1470 
OS_PEND_DATA
 *
p_≥nd_d©a
)

1472 
OS_PRIO
 
¥io
;

1473 
OS_TCB
 *
p_tcb
;

1474 
OS_TCB
 *
p_tcb_√xt
;

1475 
OS_PEND_DATA
 *
p_≥nd_d©a_¥ev
;

1476 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

1480 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

1481 
¥io
 = 
p_tcb
->
Prio
;

1482 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

1483 
p_≥nd_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

1484 
p_≥nd_d©a
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1485 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1486 
p_≥nd_li°
->
HódPå
 = 
p_≥nd_d©a
;

1487 
p_≥nd_li°
->
TaûPå
 = 
p_≥nd_d©a
;

1489 
p_≥nd_li°
->
NbrE¡rõs
++;

1490 
p_≥nd_d©a_√xt
 = 
p_≥nd_li°
->
HódPå
;

1491 
p_≥nd_d©a_√xt
 !(
OS_PEND_DATA
 *)0) {

1492 
p_tcb_√xt
 = 
p_≥nd_d©a_√xt
->
TCBPå
;

1493 i‡(
¥io
 < 
p_tcb_√xt
->
Prio
) {

1496 
p_≥nd_d©a_√xt
 =Ö_≥nd_d©a_√xt->
NextPå
;

1499 i‡(
p_≥nd_d©a_√xt
 =(
OS_PEND_DATA
 *)0) {

1500 
p_≥nd_d©a
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1501 
p_≥nd_d©a_¥ev
 = 
p_≥nd_li°
->
TaûPå
;

1502 
p_≥nd_d©a
->
PªvPå
 = 
p_≥nd_d©a_¥ev
;

1503 
p_≥nd_d©a_¥ev
->
NextPå
 = 
p_≥nd_d©a
;

1504 
p_≥nd_li°
->
TaûPå
 = 
p_≥nd_d©a
;

1506 i‡(
p_≥nd_d©a_√xt
->
PªvPå
 =(
OS_PEND_DATA
 *)0) {

1507 
p_≥nd_d©a_√xt
->
PªvPå
 = 
p_≥nd_d©a
;

1508 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1509 
p_≥nd_d©a
->
NextPå
 = 
p_≥nd_d©a_√xt
;

1510 
p_≥nd_li°
->
HódPå
 = 
p_≥nd_d©a
;

1512 
p_≥nd_d©a_¥ev
 = 
p_≥nd_d©a_√xt
->
PªvPå
;

1513 
p_≥nd_d©a
->
PªvPå
 = 
p_≥nd_d©a_¥ev
;

1514 
p_≥nd_d©a
->
NextPå
 = 
p_≥nd_d©a_√xt
;

1515 
p_≥nd_d©a_¥ev
->
NextPå
 = 
p_≥nd_d©a
;

1516 
p_≥nd_d©a_√xt
->
PªvPå
 = 
p_≥nd_d©a
;

1520 
	}
}

1572 
	$OS_PídLi°Remove
 (
OS_TCB
 *
p_tcb
)

1574 
OS_OBJ_QTY
 
n_≥nd_li°
;

1575 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1576 
OS_PEND_LIST
 *
p_≥nd_li°
;

1577 
OS_PEND_OBJ
 *
p_obj
;

1581 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1582 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1584 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1585 
p_obj
 = 
p_≥nd_d©a
->
PídObjPå
;

1586 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1587 
	`OS_PídLi°Remove1
(
p_≥nd_li°
,

1588 
p_≥nd_d©a
);

1589 
p_≥nd_d©a
++;

1590 
n_≥nd_li°
--;

1592 
p_tcb
->
PídD©aTblE¡rõs
 = (
OS_OBJ_QTY
 )0;

1593 
p_tcb
->
PídD©aTblPå
 = (
OS_PEND_DATA
 *)0;

1594 
	}
}

1647 
	$OS_PídLi°Remove1
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1648 
OS_PEND_DATA
 *
p_≥nd_d©a
)

1650 
OS_PEND_DATA
 *
p_¥ev
;

1651 
OS_PEND_DATA
 *
p_√xt
;

1655 i‡(
p_≥nd_li°
->
NbrE¡rõs
 == 1u) {

1656 
p_≥nd_li°
->
HódPå
 = (
OS_PEND_DATA
 *)0;

1657 
p_≥nd_li°
->
TaûPå
 = (
OS_PEND_DATA
 *)0;

1659 } i‡(
p_≥nd_d©a
->
PªvPå
 =(
OS_PEND_DATA
 *)0) {

1660 
p_√xt
 = 
p_≥nd_d©a
->
NextPå
;

1661 
p_√xt
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1662 
p_≥nd_li°
->
HódPå
 = 
p_√xt
;

1664 } i‡(
p_≥nd_d©a
->
NextPå
 =(
OS_PEND_DATA
 *)0) {

1665 
p_¥ev
 = 
p_≥nd_d©a
->
PªvPå
;

1666 
p_¥ev
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1667 
p_≥nd_li°
->
TaûPå
 = 
p_¥ev
;

1670 
p_¥ev
 = 
p_≥nd_d©a
->
PªvPå
;

1671 
p_√xt
 = 
p_≥nd_d©a
->
NextPå
;

1672 
p_¥ev
->
NextPå
 = 
p_√xt
;

1673 
p_√xt
->
PªvPå
 = 
p_¥ev
;

1675 
p_≥nd_li°
->
NbrE¡rõs
--;

1676 
p_≥nd_d©a
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1677 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1678 
	}
}

1701 
	$OS_PídObjDñ
 (
OS_PEND_OBJ
 *
p_obj
,

1702 
OS_TCB
 *
p_tcb
,

1703 
CPU_TS
 
ts
)

1705 
p_tcb
->
TaskSèã
) {

1706 
OS_TASK_STATE_RDY
:

1707 
OS_TASK_STATE_DLY
:

1708 
OS_TASK_STATE_SUSPENDED
:

1709 
OS_TASK_STATE_DLY_SUSPENDED
:

1712 
OS_TASK_STATE_PEND
:

1713 
OS_TASK_STATE_PEND_TIMEOUT
:

1714 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1715 
	`OS_PídObjDñ1
(
p_obj
,

1716 
p_tcb
,

1717 
ts
);

1719 #i‡(
OS_MSG_EN
 > 0u)

1720 
p_tcb
->
MsgPå
 = (*)0;

1721 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

1723 
p_tcb
->
TS
 = 
ts
;

1724 
	`OS_PídLi°Remove
(
p_tcb
);

1725 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT
) {

1726 
	`OS_TickLi°Remove
(
p_tcb
);

1728 
	`OS_RdyLi°In£π
(
p_tcb
);

1729 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

1730 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_DEL
;

1731 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1734 
OS_TASK_STATE_PEND_SUSPENDED
:

1735 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1736 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1737 
	`OS_PídObjDñ1
(
p_obj
,

1738 
p_tcb
,

1739 
ts
);

1741 #i‡(
OS_MSG_EN
 > 0u)

1742 
p_tcb
->
MsgPå
 = (*)0;

1743 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

1745 
p_tcb
->
TS
 = 
ts
;

1746 
	`OS_PídLi°Remove
(
p_tcb
);

1747 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
) {

1748 
	`OS_TickLi°Remove
(
p_tcb
);

1750 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

1751 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_DEL
;

1752 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1758 
	}
}

1808 
	$OS_PídObjDñ1
 (
OS_PEND_OBJ
 *
p_obj
,

1809 
OS_TCB
 *
p_tcb
,

1810 
CPU_TS
 
ts
)

1812 
OS_OBJ_QTY
 
n_≥nd_li°
;

1813 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1817 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1818 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1820 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1821 i‡(
p_obj
 =
p_≥nd_d©a
->
PídObjPå
) {

1822 
p_≥nd_d©a
->
RdyObjPå
 = 
p_obj
;

1823 
p_≥nd_d©a
->
RdyTS
 = 
ts
;

1826 
p_≥nd_d©a
++;

1827 
n_≥nd_li°
--;

1829 
	}
}

1857 
	$OS_Po°
 (
OS_PEND_OBJ
 *
p_obj
,

1858 
OS_TCB
 *
p_tcb
,

1859 *
p_void
,

1860 
OS_MSG_SIZE
 
msg_size
,

1861 
CPU_TS
 
ts
)

1863 
p_tcb
->
TaskSèã
) {

1864 
OS_TASK_STATE_RDY
:

1865 
OS_TASK_STATE_DLY
:

1866 
OS_TASK_STATE_SUSPENDED
:

1867 
OS_TASK_STATE_DLY_SUSPENDED
:

1870 
OS_TASK_STATE_PEND
:

1871 
OS_TASK_STATE_PEND_TIMEOUT
:

1872 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1873 
	`OS_Po°1
(
p_obj
,

1874 
p_tcb
,

1875 
p_void
,

1876 
msg_size
,

1877 
ts
);

1879 #i‡(
OS_MSG_EN
 > 0u)

1880 
p_tcb
->
MsgPå
 = 
p_void
;

1881 
p_tcb
->
MsgSize
 = 
msg_size
;

1883 
p_tcb
->
TS
 = 
ts
;

1885 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

1886 
	`OS_PídLi°Remove
(
p_tcb
);

1887 #i‡
OS_CFG_DBG_EN
 > 0u

1888 
	`OS_PídDbgNameRemove
(
p_obj
,

1889 
p_tcb
);

1892 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT
) {

1893 
	`OS_TickLi°Remove
(
p_tcb
);

1895 
	`OS_RdyLi°In£π
(
p_tcb
);

1896 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

1897 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

1898 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1901 
OS_TASK_STATE_PEND_SUSPENDED
:

1902 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1903 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1904 
	`OS_Po°1
(
p_obj
,

1905 
p_tcb
,

1906 
p_void
,

1907 
msg_size
,

1908 
ts
);

1910 #i‡(
OS_MSG_EN
 > 0u)

1911 
p_tcb
->
MsgPå
 = 
p_void
;

1912 
p_tcb
->
MsgSize
 = 
msg_size
;

1914 
p_tcb
->
TS
 = 
ts
;

1916 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

1917 
	`OS_PídLi°Remove
(
p_tcb
);

1918 #i‡
OS_CFG_DBG_EN
 > 0u

1919 
	`OS_PídDbgNameRemove
(
p_obj
,

1920 
p_tcb
);

1923 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
) {

1924 
	`OS_TickLi°Remove
(
p_tcb
);

1926 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

1927 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

1928 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1934 
	}
}

1988 
	$OS_Po°1
 (
OS_PEND_OBJ
 *
p_obj
,

1989 
OS_TCB
 *
p_tcb
,

1990 *
p_void
,

1991 
OS_MSG_SIZE
 
msg_size
,

1992 
CPU_TS
 
ts
)

1994 
OS_OBJ_QTY
 
n_≥nd_li°
;

1995 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1999 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

2000 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

2002 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

2003 i‡(
p_obj
 =
p_≥nd_d©a
->
PídObjPå
) {

2004 
p_≥nd_d©a
->
RdyObjPå
 = 
p_obj
;

2005 
p_≥nd_d©a
->
RdyMsgPå
 = 
p_void
;

2006 
p_≥nd_d©a
->
RdyMsgSize
 = 
msg_size
;

2007 
p_≥nd_d©a
->
RdyTS
 = 
ts
;

2010 
p_≥nd_d©a
++;

2011 
n_≥nd_li°
--;

2013 
	}
}

2058 
	$OS_RdyLi°Inô
 ()

2060 
OS_PRIO
 
i
;

2061 
OS_RDY_LIST
 *
p_rdy_li°
;

2065 
i
 = 0u; i < 
OS_CFG_PRIO_MAX
; i++) {

2066 
p_rdy_li°
 = &
OSRdyLi°
[
i
];

2067 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)0;

2068 
p_rdy_li°
->
HódPå
 = (
OS_TCB
 *)0;

2069 
p_rdy_li°
->
TaûPå
 = (
OS_TCB
 *)0;

2071 
	}
}

2092 
	$OS_RdyLi°In£π
 (
OS_TCB
 *
p_tcb
)

2094 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

2095 i‡(
p_tcb
->
Prio
 =
OSPrioCur
) {

2096 
	`OS_RdyLi°In£πTaû
(
p_tcb
);

2098 
	`OS_RdyLi°In£πHód
(
p_tcb
);

2101 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

2102 
	`TRACE_OS_TASK_READY
(
p_tcb
);

2104 
	}
}

2163 
	$OS_RdyLi°In£πHód
 (
OS_TCB
 *
p_tcb
)

2165 
OS_RDY_LIST
 *
p_rdy_li°
;

2166 
OS_TCB
 *
p_tcb2
;

2170 
p_rdy_li°
 = &
OSRdyLi°
[
p_tcb
->
Prio
];

2171 i‡(
p_rdy_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

2172 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

2173 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2174 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2175 
p_rdy_li°
->
HódPå
 = 
p_tcb
;

2176 
p_rdy_li°
->
TaûPå
 = 
p_tcb
;

2178 
p_rdy_li°
->
NbrE¡rõs
++;

2179 
p_tcb
->
NextPå
 = 
p_rdy_li°
->
HódPå
;

2180 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2181 
p_tcb2
 = 
p_rdy_li°
->
HódPå
;

2182 
p_tcb2
->
PªvPå
 = 
p_tcb
;

2183 
p_rdy_li°
->
HódPå
 = 
p_tcb
;

2185 
	}
}

2244 
	$OS_RdyLi°In£πTaû
 (
OS_TCB
 *
p_tcb
)

2246 
OS_RDY_LIST
 *
p_rdy_li°
;

2247 
OS_TCB
 *
p_tcb2
;

2251 
p_rdy_li°
 = &
OSRdyLi°
[
p_tcb
->
Prio
];

2252 i‡(
p_rdy_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

2253 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

2254 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2255 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2256 
p_rdy_li°
->
HódPå
 = 
p_tcb
;

2257 
p_rdy_li°
->
TaûPå
 = 
p_tcb
;

2259 
p_rdy_li°
->
NbrE¡rõs
++;

2260 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2261 
p_tcb2
 = 
p_rdy_li°
->
TaûPå
;

2262 
p_tcb
->
PªvPå
 = 
p_tcb2
;

2263 
p_tcb2
->
NextPå
 = 
p_tcb
;

2264 
p_rdy_li°
->
TaûPå
 = 
p_tcb
;

2266 
	}
}

2321 
	$OS_RdyLi°MoveHódToTaû
 (
OS_RDY_LIST
 *
p_rdy_li°
)

2323 
OS_TCB
 *
p_tcb1
;

2324 
OS_TCB
 *
p_tcb2
;

2325 
OS_TCB
 *
p_tcb3
;

2329 
p_rdy_li°
->
NbrE¡rõs
) {

2335 
p_tcb1
 = 
p_rdy_li°
->
HódPå
;

2336 
p_tcb2
 = 
p_rdy_li°
->
TaûPå
;

2337 
p_tcb1
->
PªvPå
 = 
p_tcb2
;

2338 
p_tcb1
->
NextPå
 = (
OS_TCB
 *)0;

2339 
p_tcb2
->
PªvPå
 = (
OS_TCB
 *)0;

2340 
p_tcb2
->
NextPå
 = 
p_tcb1
;

2341 
p_rdy_li°
->
HódPå
 = 
p_tcb2
;

2342 
p_rdy_li°
->
TaûPå
 = 
p_tcb1
;

2346 
p_tcb1
 = 
p_rdy_li°
->
HódPå
;

2347 
p_tcb2
 = 
p_rdy_li°
->
TaûPå
;

2348 
p_tcb3
 = 
p_tcb1
->
NextPå
;

2349 
p_tcb3
->
PªvPå
 = (
OS_TCB
 *)0;

2350 
p_tcb1
->
NextPå
 = (
OS_TCB
 *)0;

2351 
p_tcb1
->
PªvPå
 = 
p_tcb2
;

2352 
p_tcb2
->
NextPå
 = 
p_tcb1
;

2353 
p_rdy_li°
->
HódPå
 = 
p_tcb3
;

2354 
p_rdy_li°
->
TaûPå
 = 
p_tcb1
;

2357 
	}
}

2408 
	$OS_RdyLi°Remove
 (
OS_TCB
 *
p_tcb
)

2410 
OS_RDY_LIST
 *
p_rdy_li°
;

2411 
OS_TCB
 *
p_tcb1
;

2412 
OS_TCB
 *
p_tcb2
;

2416 
p_rdy_li°
 = &
OSRdyLi°
[
p_tcb
->
Prio
];

2417 
p_tcb1
 = 
p_tcb
->
PªvPå
;

2418 
p_tcb2
 = 
p_tcb
->
NextPå
;

2419 i‡(
p_tcb1
 =(
OS_TCB
 *)0) {

2420 i‡(
p_tcb2
 =(
OS_TCB
 *)0) {

2421 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)0;

2422 
p_rdy_li°
->
HódPå
 = (
OS_TCB
 *)0;

2423 
p_rdy_li°
->
TaûPå
 = (
OS_TCB
 *)0;

2424 
	`OS_PrioRemove
(
p_tcb
->
Prio
);

2426 
p_rdy_li°
->
NbrE¡rõs
--;

2427 
p_tcb2
->
PªvPå
 = (
OS_TCB
 *)0;

2428 
p_rdy_li°
->
HódPå
 = 
p_tcb2
;

2431 
p_rdy_li°
->
NbrE¡rõs
--;

2432 
p_tcb1
->
NextPå
 = 
p_tcb2
;

2433 i‡(
p_tcb2
 =(
OS_TCB
 *)0) {

2434 
p_rdy_li°
->
TaûPå
 = 
p_tcb1
;

2436 
p_tcb2
->
PªvPå
 = 
p_tcb1
;

2439 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2440 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2442 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

2443 
	`TRACE_OS_TASK_SUSPEND
(
p_tcb
);

2445 
	}
}

2463 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

2464 
	$OS_Sched0
 ()

2466 
	`CPU_SR_ALLOC
();

2470 
	`CPU_INT_DIS
();

2471 
OSPrioHighRdy
 = (
OS_PRIO
)0;

2472 
OSTCBHighRdyPå
 = &
OSI¡QTaskTCB
;

2473 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

2474 
OSTCBHighRdyPå
->
CtxSwCå
++;

2476 
OSTaskCtxSwCå
++;

2477 
	`OS_TASK_SW
();

2478 
	`CPU_INT_EN
();

2479 
	}
}

2504 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

2505 
	$OS_SchedLockTimeMósSèπ
 ()

2507 i‡(
OSSchedLockNe°ögCå
 == 1u) {

2508 
OSSchedLockTimeBegö
 = 
	`CPU_TS_TmrRd
();

2510 
	}
}

2515 
	$OS_SchedLockTimeMósSt›
 ()

2517 
CPU_TS_TMR
 
dñè
;

2520 i‡(
OSSchedLockNe°ögCå
 =(
OS_NESTING_CTR
)0) {

2521 
dñè
 = 
	`CPU_TS_TmrRd
()

2522 - 
OSSchedLockTimeBegö
;

2523 i‡(
OSSchedLockTimeMax
 < 
dñè
) {

2524 
OSSchedLockTimeMax
 = 
dñè
;

2526 i‡(
OSSchedLockTimeMaxCur
 < 
dñè
) {

2527 
OSSchedLockTimeMaxCur
 = 
dñè
;

2530 
	}
}

2550 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

2551 
	$OS_SchedRoundRobö
 (
OS_RDY_LIST
 *
p_rdy_li°
)

2553 
OS_TCB
 *
p_tcb
;

2554 
	`CPU_SR_ALLOC
();

2558 i‡(
OSSchedRoundRoböEn
 !
DEF_TRUE
) {

2562 
	`CPU_CRITICAL_ENTER
();

2563 
p_tcb
 = 
p_rdy_li°
->
HódPå
;

2565 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

2566 
	`CPU_CRITICAL_EXIT
();

2570 i‡(
p_tcb
 =&
OSIdÀTaskTCB
) {

2571 
	`CPU_CRITICAL_EXIT
();

2575 i‡(
p_tcb
->
TimeQu™èCå
 > (
OS_TICK
)0) {

2576 
p_tcb
->
TimeQu™èCå
--;

2579 i‡(
p_tcb
->
TimeQu™èCå
 > (
OS_TICK
)0) {

2580 
	`CPU_CRITICAL_EXIT
();

2584 i‡(
p_rdy_li°
->
NbrE¡rõs
 < (
OS_OBJ_QTY
)2) {

2585 
	`CPU_CRITICAL_EXIT
();

2589 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

2590 
	`CPU_CRITICAL_EXIT
();

2594 
	`OS_RdyLi°MoveHódToTaû
(
p_rdy_li°
);

2595 
p_tcb
 = 
p_rdy_li°
->
HódPå
;

2596 i‡(
p_tcb
->
TimeQu™è
 =(
OS_TICK
)0) {

2597 
p_tcb
->
TimeQu™èCå
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

2599 
p_tcb
->
TimeQu™èCå
 =Ö_tcb->
TimeQu™è
;

2601 
	`CPU_CRITICAL_EXIT
();

2602 
	}
}

2624 
	$OS_TaskBlock
 (
OS_TCB
 *
p_tcb
,

2625 
OS_TICK
 
timeout
)

2627 i‡(
timeout
 > (
OS_TICK
)0) {

2628 
	`OS_TickLi°In£π
(&
OSTickLi°Timeout
, 
p_tcb
, 
timeout
);

2629 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_TIMEOUT
;

2631 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND
;

2633 
	`OS_RdyLi°Remove
(
p_tcb
);

2634 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_dbg.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_dbg__c
 = "$Id: $";

42 
CPU_INT08U
 c⁄° 
	gOSDbg_DbgEn
 = 
OS_CFG_DBG_EN
;

44 #i‡
OS_CFG_DBG_EN
 > 0u

52 
CPU_INT08U
 c⁄° 
	gOSDbg_ArgChkEn
 = 
OS_CFG_ARG_CHK_EN
;

53 
CPU_INT08U
 c⁄° 
	gOSDbg_AµHooksEn
 = 
OS_CFG_APP_HOOKS_EN
;

55 
CPU_INT32U
 c⁄° 
	gOSDbg_Endü¬essTe°
 = 0x12345678LU;

57 
CPU_INT08U
 c⁄° 
	gOSDbg_CÆÀdFromISRChkEn
 = 
OS_CFG_CALLED_FROM_ISR_CHK_EN
;

59 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgEn
 = 
OS_CFG_FLAG_EN
;

60 
OS_FLAG_GRP
 c⁄° 
	gOSDbg_FœgGΩ
 = { 0u };

61 #i‡
OS_CFG_FLAG_EN
 > 0u

62 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgDñEn
 = 
OS_CFG_FLAG_DEL_EN
;

63 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgModeCÃEn
 = 
OS_CFG_FLAG_MODE_CLR_EN
;

64 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgPídAb‹tEn
 = 
OS_CFG_FLAG_PEND_ABORT_EN
;

65 
CPU_INT16U
 c⁄° 
	gOSDbg_FœgGΩSize
 = (
OS_FLAG_GRP
);

66 
CPU_INT16U
 c⁄° 
	gOSDbg_FœgWidth
 = (
OS_FLAGS
);

68 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgDñEn
 = 0u;

69 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgModeCÃEn
 = 0u;

70 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgPídAb‹tEn
 = 0u;

71 
CPU_INT16U
 c⁄° 
	gOSDbg_FœgGΩSize
 = 0u;

72 
CPU_INT16U
 c⁄° 
	gOSDbg_FœgWidth
 = 0u;

75 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

76 
CPU_INT16U
 c⁄° 
	gOSDbg_I¡Q
 = (
OS_INT_Q
);

78 
CPU_INT16U
 c⁄° 
	gOSDbg_I¡Q
 = 0u;

81 
CPU_INT08U
 c⁄° 
	gOSDbg_ISRPo°De„ºedEn
 = 
OS_CFG_ISR_POST_DEFERRED_EN
;

83 
OS_MEM
 c⁄° 
	gOSDbg_Mem
 = { 0u };

84 
CPU_INT08U
 c⁄° 
	gOSDbg_MemEn
 = 
OS_CFG_MEM_EN
;

85 #i‡
OS_CFG_MEM_EN
 > 0u

86 
CPU_INT16U
 c⁄° 
	gOSDbg_MemSize
 = (
OS_MEM
);

88 
CPU_INT16U
 c⁄° 
	gOSDbg_MemSize
 = 0u;

92 #i‡(
OS_MSG_EN
) > 0u

93 
CPU_INT08U
 c⁄° 
	gOSDbg_MsgEn
 = 1u;

94 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgSize
 = (
OS_MSG
);

95 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgPoﬁSize
 = (
OS_MSG_POOL
);

96 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgQSize
 = (
OS_MSG_Q
);

98 
CPU_INT08U
 c⁄° 
	gOSDbg_MsgEn
 = 0u;

99 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgSize
 = 0u;

100 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgPoﬁSize
 = 0u;

101 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgQSize
 = 0u;

105 
OS_MUTEX
 c⁄° 
	gOSDbg_Muãx
 = { 0u };

106 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxEn
 = 
OS_CFG_MUTEX_EN
;

107 #i‡
OS_CFG_MUTEX_EN
 > 0u

108 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxDñEn
 = 
OS_CFG_MUTEX_DEL_EN
;

109 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxPídAb‹tEn
 = 
OS_CFG_MUTEX_PEND_ABORT_EN
;

110 
CPU_INT16U
 c⁄° 
	gOSDbg_MuãxSize
 = (
OS_MUTEX
);

112 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxDñEn
 = 0u;

113 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxPídAb‹tEn
 = 0u;

114 
CPU_INT16U
 c⁄° 
	gOSDbg_MuãxSize
 = 0u;

117 
CPU_INT08U
 c⁄° 
	gOSDbg_ObjTy≥ChkEn
 = 
OS_CFG_OBJ_TYPE_CHK_EN
;

120 
CPU_INT08U
 c⁄° 
	gOSDbg_PídMu…iEn
 = 
OS_CFG_PEND_MULTI_EN
;

121 
CPU_INT16U
 c⁄° 
	gOSDbg_PídD©aSize
 = (
OS_PEND_DATA
);

122 
CPU_INT16U
 c⁄° 
	gOSDbg_PídLi°Size
 = (
OS_PEND_LIST
);

123 
CPU_INT16U
 c⁄° 
	gOSDbg_PídObjSize
 = (
OS_PEND_OBJ
);

126 
CPU_INT16U
 c⁄° 
	gOSDbg_PrioMax
 = 
OS_CFG_PRIO_MAX
;

127 
CPU_INT16U
 c⁄° 
	gOSDbg_PrioTblSize
 = (
OSPrioTbl
);

129 
CPU_INT16U
 c⁄° 
	gOSDbg_PåSize
 = (*);

132 
OS_Q
 c⁄° 
	gOSDbg_Q
 = { 0u };

133 
CPU_INT08U
 c⁄° 
	gOSDbg_QEn
 = 
OS_CFG_Q_EN
;

134 #i‡
OS_CFG_Q_EN
 > 0u

135 
CPU_INT08U
 c⁄° 
	gOSDbg_QDñEn
 = 
OS_CFG_Q_DEL_EN
;

136 
CPU_INT08U
 c⁄° 
	gOSDbg_QFlushEn
 = 
OS_CFG_Q_FLUSH_EN
;

137 
CPU_INT08U
 c⁄° 
	gOSDbg_QPídAb‹tEn
 = 
OS_CFG_Q_PEND_ABORT_EN
;

138 
CPU_INT16U
 c⁄° 
	gOSDbg_QSize
 = (
OS_Q
);

140 
CPU_INT08U
 c⁄° 
	gOSDbg_QDñEn
 = 0u;

141 
CPU_INT08U
 c⁄° 
	gOSDbg_QFlushEn
 = 0u;

142 
CPU_INT08U
 c⁄° 
	gOSDbg_QPídAb‹tEn
 = 0u;

143 
CPU_INT16U
 c⁄° 
	gOSDbg_QSize
 = 0u;

147 
CPU_INT08U
 c⁄° 
	gOSDbg_SchedRoundRoböEn
 = 
OS_CFG_SCHED_ROUND_ROBIN_EN
;

150 
OS_SEM
 c⁄° 
	gOSDbg_Sem
 = { 0u };

151 
CPU_INT08U
 c⁄° 
	gOSDbg_SemEn
 = 
OS_CFG_SEM_EN
;

152 #i‡
OS_CFG_SEM_EN
 > 0u

153 
CPU_INT08U
 c⁄° 
	gOSDbg_SemDñEn
 = 
OS_CFG_SEM_DEL_EN
;

154 
CPU_INT08U
 c⁄° 
	gOSDbg_SemPídAb‹tEn
 = 
OS_CFG_SEM_PEND_ABORT_EN
;

155 
CPU_INT08U
 c⁄° 
	gOSDbg_SemSëEn
 = 
OS_CFG_SEM_SET_EN
;

156 
CPU_INT16U
 c⁄° 
	gOSDbg_SemSize
 = (
OS_SEM
);

158 
CPU_INT08U
 c⁄° 
	gOSDbg_SemDñEn
 = 0u;

159 
CPU_INT08U
 c⁄° 
	gOSDbg_SemPídAb‹tEn
 = 0u;

160 
CPU_INT08U
 c⁄° 
	gOSDbg_SemSëEn
 = 0u;

161 
CPU_INT16U
 c⁄° 
	gOSDbg_SemSize
 = 0u;

165 
CPU_INT16U
 c⁄° 
	gOSDbg_RdyLi°
 = (
OS_RDY_LIST
);

166 
CPU_INT32U
 c⁄° 
	gOSDbg_RdyLi°Size
 = (
OSRdyLi°
);

168 
CPU_INT08U
 c⁄° 
	gOSDbg_StkWidth
 = (
CPU_STK
);

170 
CPU_INT08U
 c⁄° 
	gOSDbg_SètTaskEn
 = 
OS_CFG_STAT_TASK_EN
;

171 
CPU_INT08U
 c⁄° 
	gOSDbg_SètTaskStkChkEn
 = 
OS_CFG_STAT_TASK_STK_CHK_EN
;

173 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskCh™gePrioEn
 = 
OS_CFG_TASK_CHANGE_PRIO_EN
;

174 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskDñEn
 = 
OS_CFG_TASK_DEL_EN
;

175 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskQEn
 = 
OS_CFG_TASK_Q_EN
;

176 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskQPídAb‹tEn
 = 
OS_CFG_TASK_Q_PEND_ABORT_EN
;

177 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskProfûeEn
 = 
OS_CFG_TASK_PROFILE_EN
;

178 
CPU_INT16U
 c⁄° 
	gOSDbg_TaskRegTblSize
 = 
OS_CFG_TASK_REG_TBL_SIZE
;

179 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskSemPídAb‹tEn
 = 
OS_CFG_TASK_SEM_PEND_ABORT_EN
;

180 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskSu•ídEn
 = 
OS_CFG_TASK_SUSPEND_EN
;

183 
CPU_INT16U
 c⁄° 
	gOSDbg_TCBSize
 = (
OS_TCB
);

185 
CPU_INT16U
 c⁄° 
	gOSDbg_TickLi°Size
 = (
OS_TICK_LIST
);

187 
CPU_INT08U
 c⁄° 
	gOSDbg_TimeDlyHMSMEn
 = 
OS_CFG_TIME_DLY_HMSM_EN
;

188 
CPU_INT08U
 c⁄° 
	gOSDbg_TimeDlyResumeEn
 = 
OS_CFG_TIME_DLY_RESUME_EN
;

190 #i‡
deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

191 
CPU_INT16U
 c⁄° 
	gOSDbg_TLS_TblSize
 = 
OS_CFG_TLS_TBL_SIZE
 * (
OS_TLS
);

193 
CPU_INT16U
 c⁄° 
	gOSDbg_TLS_TblSize
 = 0u;

197 
OS_TMR
 c⁄° 
	gOSDbg_Tmr
 = { 0u };

198 
CPU_INT08U
 c⁄° 
	gOSDbg_TmrEn
 = 
OS_CFG_TMR_EN
;

199 #i‡
OS_CFG_TMR_EN
 > 0u

200 
CPU_INT08U
 c⁄° 
	gOSDbg_TmrDñEn
 = 
OS_CFG_TMR_DEL_EN
;

201 
CPU_INT16U
 c⁄° 
	gOSDbg_TmrSize
 = (
OS_TMR
);

203 
CPU_INT08U
 c⁄° 
	gOSDbg_TmrDñEn
 = 0u;

204 
CPU_INT16U
 c⁄° 
	gOSDbg_TmrSize
 = 0u;

207 
CPU_INT16U
 c⁄° 
	gOSDbg_Vîsi⁄Nbr
 = 
OS_VERSION
;

217 
CPU_INT32U
 c⁄° 
	gOSDbg_D©aSize
 = (
OSI¡Ne°ögCå
)

219 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

220 + (
OS_AµTaskCª©eHookPå
)

221 + (
OS_AµTaskDñHookPå
)

222 + (
OS_AµTaskRëu∫HookPå
)

224 + (
OS_AµIdÀTaskHookPå
)

225 + (
OS_AµSètTaskHookPå
)

226 + (
OS_AµTaskSwHookPå
)

227 + (
OS_AµTimeTickHookPå
)

230 + (
OSIdÀTaskCå
)

231 + (
OSIdÀTaskTCB
)

233 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


234 + (
OSI¡DisTimeMax
)

237 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

238 + (
OSI¡QInPå
)

239 + (
OSI¡QOutPå
)

240 + (
OSI¡QNbrE¡rõs
)

241 + (
OSI¡QNbrE¡rõsMax
)

242 + (
OSI¡QOvfCå
)

243 + (
OSI¡QTaskTCB
)

244 + (
OSI¡QTaskTimeMax
)

247 + (
OSRu¬ög
)

249 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


250 + (
OSSa„tyCrôiˇlSèπFœg
)

253 #i‡
OS_CFG_FLAG_EN
 > 0u

254 + (
OSFœgDbgLi°På
)

255 + (
OSFœgQty
)

258 #i‡
OS_CFG_MEM_EN
 > 0u

259 #i‡
OS_CFG_DBG_EN
 > 0u

260 + (
OSMemDbgLi°På
)

262 + (
OSMemQty
)

265 #i‡
OS_MSG_EN
 > 0u

266 + (
OSMsgPoﬁ
)

269 #i‡
OS_CFG_MUTEX_EN
 > 0u

270 #i‡
OS_CFG_DBG_EN
 > 0u

271 + (
OSMuãxDbgLi°På
)

273 + (
OSMuãxQty
)

276 + (
OSPrioCur
)

277 + (
OSPrioHighRdy
)

278 + (
OSPrioSaved
)

279 + (
OSPrioTbl
)

281 #i‡
OS_CFG_Q_EN
 > 0u

282 #i‡
OS_CFG_DBG_EN
 > 0u

283 + (
OSQDbgLi°På
)

285 + (
OSQQty
)

288 + (
OSRdyLi°
)

290 + (
OSSchedLockNe°ögCå
)

292 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

293 + (
OSSchedLockTimeBegö
)

294 + (
OSSchedLockTimeMax
)

295 + (
OSSchedLockTimeMaxCur
)

298 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN


299 + (
OSSchedRoundRoböDÊtTimeQu™è
)

300 + (
OSSchedRoundRoböEn
)

303 #i‡
OS_CFG_SEM_EN
 > 0u

304 #i‡
OS_CFG_DBG_EN
 > 0u

305 + (
OSSemDbgLi°På
)

307 + (
OSSemQty
)

309 + (
OSTaskCtxSwCå
)

310 #i‡
OS_CFG_DBG_EN
 > 0u

311 + (
OSTaskDbgLi°På
)

313 + (
OSTaskQty
)

315 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

316 + (
OSSètRe£tFœg
)

317 + (
OSSètTaskCPUUßge
)

318 + (
OSSètTaskCPUUßgeMax
)

319 + (
OSSètTaskCå
)

320 + (
OSSètTaskCåMax
)

321 + (
OSSètTaskCåRun
)

322 + (
OSSètTaskRdy
)

323 + (
OSSètTaskTCB
)

324 + (
OSSètTaskTimeMax
)

327 + (
OSTickCå
)

328 + (
OSTickTaskTCB
)

329 + (
OSTickTaskTimeMax
)

330 + (
OSTickLi°Dly
)

331 + (
OSTickLi°Timeout
)

333 #i‡
OS_CFG_TMR_EN
 > 0u

334 #i‡
OS_CFG_DBG_EN
 > 0u

335 + (
OSTmrDbgLi°På
)

337 + (
OSTmrLi°E¡rõs
)

338 + (
OSTmrLi°På
)

339 #i‡
OS_CFG_MUTEX_EN
 > 0u

340 + (
OSTmrMuãx
)

342 + (
OSTmrQty
)

343 + (
OSTmrTaskTCB
)

344 + (
OSTmrTaskTimeMax
)

345 + (
OSTmrTickCå
)

346 + (
OSTmrUpd©eC¡
)

347 + (
OSTmrUpd©eCå
)

350 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

351 + (
OSTaskRegNextAvaûID
)

354 + (
OSTCBCurPå
)

355 + (
OSTCBHighRdyPå
);

377 
	$OS_Dbg_Inô
 ()

379 
CPU_INT08U
 c⁄° *
p_ãmp08
;

380 
CPU_INT16U
 c⁄° *
p_ãmp16
;

381 
CPU_INT32U
 c⁄° *
p_ãmp32
;

384 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_DbgEn
;

386 
p_ãmp32
 = (
CPU_INT32U
 c⁄° *)&
OSDbg_D©aSize
;

388 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_ArgChkEn
;

389 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_AµHooksEn
;

391 
p_ãmp32
 = (
CPU_INT32U
 c⁄° *)&
OSDbg_Endü¬essTe°
;

393 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_CÆÀdFromISRChkEn
;

395 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_FœgGΩ
;

396 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_FœgEn
;

397 #i‡
OS_CFG_FLAG_EN
 > 0u

398 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_FœgDñEn
;

399 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_FœgModeCÃEn
;

400 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_FœgPídAb‹tEn
;

401 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_FœgGΩSize
;

402 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_FœgWidth
;

405 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

406 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_I¡Q
;

409 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_ISRPo°De„ºedEn
;

411 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_Mem
;

412 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_MemEn
;

413 #i‡
OS_CFG_MEM_EN
 > 0u

414 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_MemSize
;

417 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_MsgEn
;

418 #i‡(
OS_MSG_EN
) > 0u

419 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_MsgSize
;

420 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_MsgPoﬁSize
;

421 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_MsgQSize
;

424 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_Muãx
;

425 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_MuãxEn
;

426 #i‡(
OS_CFG_MUTEX_EN
) > 0u

427 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_MuãxDñEn
;

428 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_MuãxPídAb‹tEn
;

429 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_MuãxSize
;

432 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_ObjTy≥ChkEn
;

434 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_PídMu…iEn
;

435 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_PídD©aSize
;

436 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_PídLi°Size
;

437 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_PídObjSize
;

439 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_PrioMax
;

440 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_PrioTblSize
;

442 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_PåSize
;

444 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_Q
;

445 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_QEn
;

446 #i‡(
OS_CFG_Q_EN
) > 0u

447 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_QDñEn
;

448 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_QFlushEn
;

449 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_QPídAb‹tEn
;

450 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_QSize
;

453 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_SchedRoundRoböEn
;

455 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_Sem
;

456 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_SemEn
;

457 #i‡(
OS_CFG_SEM_EN
) > 0u

458 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_SemDñEn
;

459 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_SemPídAb‹tEn
;

460 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_SemSëEn
;

461 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_SemSize
;

464 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_RdyLi°
;

465 
p_ãmp32
 = (
CPU_INT32U
 c⁄° *)&
OSDbg_RdyLi°Size
;

467 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_StkWidth
;

469 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_SètTaskEn
;

470 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_SètTaskStkChkEn
;

472 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_TaskCh™gePrioEn
;

473 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_TaskDñEn
;

474 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_TaskQEn
;

475 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_TaskQPídAb‹tEn
;

476 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_TaskProfûeEn
;

477 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_TaskRegTblSize
;

478 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_TaskSemPídAb‹tEn
;

479 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_TaskSu•ídEn
;

481 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_TCBSize
;

483 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_TickLi°Size
;

485 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_TimeDlyHMSMEn
;

486 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_TimeDlyResumeEn
;

489 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_Tmr
;

490 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_TmrEn
;

491 #i‡(
OS_CFG_TMR_EN
) > 0u

492 
p_ãmp08
 = (
CPU_INT08U
 c⁄° *)&
OSDbg_TmrDñEn
;

493 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_TmrSize
;

496 
p_ãmp16
 = (
CPU_INT16U
 c⁄° *)&
OSDbg_Vîsi⁄Nbr
;

498 
p_ãmp08
 =Ö_temp08;

499 
p_ãmp16
 =Ö_temp16;

500 
p_ãmp32
 =Ö_temp32;

501 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_flag.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_Êag__c
 = "$Id: $";

43 #i‡
OS_CFG_FLAG_EN
 > 0u

71 
	$OSFœgCª©e
 (
OS_FLAG_GRP
 *
p_gΩ
,

72 
CPU_CHAR
 *
p_«me
,

73 
OS_FLAGS
 
Êags
,

74 
OS_ERR
 *
p_îr
)

76 
	`CPU_SR_ALLOC
();

80 #ifde‡
OS_SAFETY_CRITICAL


81 i‡(
p_îr
 =(
OS_ERR
 *)0) {

82 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

87 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


88 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

89 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

94 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

95 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

96 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

101 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

102 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

103 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

108 
	`OS_CRITICAL_ENTER
();

109 #i‡
OS_OBJ_TYPE_REQ
 > 0u

110 
p_gΩ
->
Ty≥
 = 
OS_OBJ_TYPE_FLAG
;

112 #i‡
OS_CFG_DBG_EN
 > 0u

113 
p_gΩ
->
NamePå
 = 
p_«me
;

115 ()&
p_«me
;

117 
p_gΩ
->
Fœgs
 = 
Êags
;

118 
p_gΩ
->
TS
 = (
CPU_TS
)0;

119 
	`OS_PídLi°Inô
(&
p_gΩ
->
PídLi°
);

121 #i‡
OS_CFG_DBG_EN
 > 0u

122 
	`OS_FœgDbgLi°Add
(
p_gΩ
);

124 
OSFœgQty
++;

126 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

127 
	`TRACE_OS_FLAG_CREATE
(
p_gΩ
, 
p_«me
);

130 
	`OS_CRITICAL_EXIT_NO_SCHED
();

131 *
p_îr
 = 
OS_ERR_NONE
;

132 
	}
}

166 #i‡
OS_CFG_FLAG_DEL_EN
 > 0u

167 
OS_OBJ_QTY
 
	$OSFœgDñ
 (
OS_FLAG_GRP
 *
p_gΩ
,

168 
OS_OPT
 
›t
,

169 
OS_ERR
 *
p_îr
)

171 
OS_OBJ_QTY
 
˙t
;

172 
OS_OBJ_QTY
 
nbr_èsks
;

173 
OS_PEND_DATA
 *
p_≥nd_d©a
;

174 
OS_PEND_LIST
 *
p_≥nd_li°
;

175 
OS_TCB
 *
p_tcb
;

176 
CPU_TS
 
ts
;

177 
	`CPU_SR_ALLOC
();

181 #ifde‡
OS_SAFETY_CRITICAL


182 i‡(
p_îr
 =(
OS_ERR
 *)0) {

183 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

184  ((
OS_OBJ_QTY
)0);

188 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

189 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

190 *
p_îr
 = 
OS_ERR_DEL_ISR
;

191  ((
OS_OBJ_QTY
)0);

195 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

196 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

197 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

198  ((
OS_OBJ_QTY
)0);

200 
›t
) {

201 
OS_OPT_DEL_NO_PEND
:

202 
OS_OPT_DEL_ALWAYS
:

206 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

207  ((
OS_OBJ_QTY
)0);

211 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

212 i‡(
p_gΩ
->
Ty≥
 !
OS_OBJ_TYPE_FLAG
) {

213 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

214  ((
OS_OBJ_QTY
)0);

217 
	`OS_CRITICAL_ENTER
();

218 
p_≥nd_li°
 = &
p_gΩ
->
PídLi°
;

219 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

220 
nbr_èsks
 = 
˙t
;

221 
›t
) {

222 
OS_OPT_DEL_NO_PEND
:

223 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

224 #i‡
OS_CFG_DBG_EN
 > 0u

225 
	`OS_FœgDbgLi°Remove
(
p_gΩ
);

227 
OSFœgQty
--;

228 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

229 
	`TRACE_OS_FLAG_DEL
(
p_gΩ
);

231 
	`OS_FœgCÃ
(
p_gΩ
);

233 
	`OS_CRITICAL_EXIT
();

235 *
p_îr
 = 
OS_ERR_NONE
;

237 
	`OS_CRITICAL_EXIT
();

238 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

242 
OS_OPT_DEL_ALWAYS
:

243 
ts
 = 
	`OS_TS_GET
();

244 
˙t
 > 0u) {

245 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

246 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

247 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_gΩ
),

248 
p_tcb
,

249 
ts
);

250 
˙t
--;

252 #i‡
OS_CFG_DBG_EN
 > 0u

253 
	`OS_FœgDbgLi°Remove
(
p_gΩ
);

255 
OSFœgQty
--;

256 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

257 
	`TRACE_OS_FLAG_DEL
(
p_gΩ
);

259 
	`OS_FœgCÃ
(
p_gΩ
);

260 
	`OS_CRITICAL_EXIT_NO_SCHED
();

262 
	`OSSched
();

263 *
p_îr
 = 
OS_ERR_NONE
;

267 
	`OS_CRITICAL_EXIT
();

268 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

271  (
nbr_èsks
);

272 
	}
}

334 
OS_FLAGS
 
	$OSFœgPíd
 (
OS_FLAG_GRP
 *
p_gΩ
,

335 
OS_FLAGS
 
Êags
,

336 
OS_TICK
 
timeout
,

337 
OS_OPT
 
›t
,

338 
CPU_TS
 *
p_ts
,

339 
OS_ERR
 *
p_îr
)

341 
CPU_BOOLEAN
 
c⁄sume
;

342 
OS_FLAGS
 
Êags_rdy
;

343 
OS_OPT
 
mode
;

344 
OS_PEND_DATA
 
≥nd_d©a
;

345 
	`CPU_SR_ALLOC
();

349 #ifde‡
OS_SAFETY_CRITICAL


350 i‡(
p_îr
 =(
OS_ERR
 *)0) {

351 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

352 
	`TRACE_OS_FLAG_PEND_FAILED
(
p_gΩ
);

354 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

355  ((
OS_FLAGS
)0);

359 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

360 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

361 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

362 
	`TRACE_OS_FLAG_PEND_FAILED
(
p_gΩ
);

364 *
p_îr
 = 
OS_ERR_PEND_ISR
;

365  ((
OS_FLAGS
)0);

369 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

370 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

371 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

372 
	`TRACE_OS_FLAG_PEND_FAILED
(
p_gΩ
);

374 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

375  ((
OS_FLAGS
)0);

377 
›t
) {

378 
OS_OPT_PEND_FLAG_CLR_ALL
:

379 
OS_OPT_PEND_FLAG_CLR_ANY
:

380 
OS_OPT_PEND_FLAG_SET_ALL
:

381 
OS_OPT_PEND_FLAG_SET_ANY
:

382 
OS_OPT_PEND_FLAG_CLR_ALL
 | 
OS_OPT_PEND_FLAG_CONSUME
:

383 
OS_OPT_PEND_FLAG_CLR_ANY
 | 
OS_OPT_PEND_FLAG_CONSUME
:

384 
OS_OPT_PEND_FLAG_SET_ALL
 | 
OS_OPT_PEND_FLAG_CONSUME
:

385 
OS_OPT_PEND_FLAG_SET_ANY
 | 
OS_OPT_PEND_FLAG_CONSUME
:

386 
OS_OPT_PEND_FLAG_CLR_ALL
 | 
OS_OPT_PEND_NON_BLOCKING
:

387 
OS_OPT_PEND_FLAG_CLR_ANY
 | 
OS_OPT_PEND_NON_BLOCKING
:

388 
OS_OPT_PEND_FLAG_SET_ALL
 | 
OS_OPT_PEND_NON_BLOCKING
:

389 
OS_OPT_PEND_FLAG_SET_ANY
 | 
OS_OPT_PEND_NON_BLOCKING
:

390 
OS_OPT_PEND_FLAG_CLR_ALL
 | 
OS_OPT_PEND_FLAG_CONSUME
 | 
OS_OPT_PEND_NON_BLOCKING
:

391 
OS_OPT_PEND_FLAG_CLR_ANY
 | 
OS_OPT_PEND_FLAG_CONSUME
 | 
OS_OPT_PEND_NON_BLOCKING
:

392 
OS_OPT_PEND_FLAG_SET_ALL
 | 
OS_OPT_PEND_FLAG_CONSUME
 | 
OS_OPT_PEND_NON_BLOCKING
:

393 
OS_OPT_PEND_FLAG_SET_ANY
 | 
OS_OPT_PEND_FLAG_CONSUME
 | 
OS_OPT_PEND_NON_BLOCKING
:

397 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

398 
	`TRACE_OS_FLAG_PEND_FAILED
(
p_gΩ
);

400 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

401  ((
OS_OBJ_QTY
)0);

405 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

406 i‡(
p_gΩ
->
Ty≥
 !
OS_OBJ_TYPE_FLAG
) {

407 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

408 
	`TRACE_OS_FLAG_PEND_FAILED
(
p_gΩ
);

410 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

411  ((
OS_FLAGS
)0);

415 i‡((
›t
 & 
OS_OPT_PEND_FLAG_CONSUME
Ë!(
OS_OPT
)0) {

416 
c⁄sume
 = 
DEF_TRUE
;

418 
c⁄sume
 = 
DEF_FALSE
;

421 i‡(
p_ts
 !(
CPU_TS
 *)0) {

422 *
p_ts
 = (
CPU_TS
)0;

425 
mode
 = 
›t
 & 
OS_OPT_PEND_FLAG_MASK
;

426 
	`CPU_CRITICAL_ENTER
();

427 
mode
) {

428 
OS_OPT_PEND_FLAG_SET_ALL
:

429 
Êags_rdy
 = (
OS_FLAGS
)(
p_gΩ
->
Fœgs
 & 
Êags
);

430 i‡(
Êags_rdy
 =
Êags
) {

431 i‡(
c⁄sume
 =
DEF_TRUE
) {

432 
p_gΩ
->
Fœgs
 &~
Êags_rdy
;

434 
OSTCBCurPå
->
FœgsRdy
 = 
Êags_rdy
;

435 i‡(
p_ts
 !(
CPU_TS
 *)0) {

436 *
p_ts
 = 
p_gΩ
->
TS
;

438 
	`CPU_CRITICAL_EXIT
();

439 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

440 
	`TRACE_OS_FLAG_PEND
(
p_gΩ
);

442 *
p_îr
 = 
OS_ERR_NONE
;

443  (
Êags_rdy
);

445 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

446 
	`CPU_CRITICAL_EXIT
();

447 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

448 
	`TRACE_OS_FLAG_PEND_FAILED
(
p_gΩ
);

450 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

451  ((
OS_FLAGS
)0);

453 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

454 
	`CPU_CRITICAL_EXIT
();

455 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

456 
	`TRACE_OS_FLAG_PEND_FAILED
(
p_gΩ
);

458 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

459  ((
OS_FLAGS
)0);

463 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

464 
	`OS_FœgBlock
(&
≥nd_d©a
,

465 
p_gΩ
,

466 
Êags
,

467 
›t
,

468 
timeout
);

469 
	`OS_CRITICAL_EXIT_NO_SCHED
();

473 
OS_OPT_PEND_FLAG_SET_ANY
:

474 
Êags_rdy
 = (
OS_FLAGS
)(
p_gΩ
->
Fœgs
 & 
Êags
);

475 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

476 i‡(
c⁄sume
 =
DEF_TRUE
) {

477 
p_gΩ
->
Fœgs
 &~
Êags_rdy
;

479 
OSTCBCurPå
->
FœgsRdy
 = 
Êags_rdy
;

480 i‡(
p_ts
 !(
CPU_TS
 *)0) {

481 *
p_ts
 = 
p_gΩ
->
TS
;

483 
	`CPU_CRITICAL_EXIT
();

484 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

485 
	`TRACE_OS_FLAG_PEND
(
p_gΩ
);

487 *
p_îr
 = 
OS_ERR_NONE
;

488  (
Êags_rdy
);

490 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

491 
	`CPU_CRITICAL_EXIT
();

492 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

493  ((
OS_FLAGS
)0);

495 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

496 
	`CPU_CRITICAL_EXIT
();

497 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

498  ((
OS_FLAGS
)0);

502 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

503 
	`OS_FœgBlock
(&
≥nd_d©a
,

504 
p_gΩ
,

505 
Êags
,

506 
›t
,

507 
timeout
);

508 
	`OS_CRITICAL_EXIT_NO_SCHED
();

512 #i‡
OS_CFG_FLAG_MODE_CLR_EN
 > 0u

513 
OS_OPT_PEND_FLAG_CLR_ALL
:

514 
Êags_rdy
 = (
OS_FLAGS
)(~
p_gΩ
->
Fœgs
 & 
Êags
);

515 i‡(
Êags_rdy
 =
Êags
) {

516 i‡(
c⁄sume
 =
DEF_TRUE
) {

517 
p_gΩ
->
Fœgs
 |
Êags_rdy
;

519 
OSTCBCurPå
->
FœgsRdy
 = 
Êags_rdy
;

520 i‡(
p_ts
 !(
CPU_TS
 *)0) {

521 *
p_ts
 = 
p_gΩ
->
TS
;

523 
	`CPU_CRITICAL_EXIT
();

524 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

525 
	`TRACE_OS_FLAG_PEND
(
p_gΩ
);

527 *
p_îr
 = 
OS_ERR_NONE
;

528  (
Êags_rdy
);

530 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

531 
	`CPU_CRITICAL_EXIT
();

532 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

533  ((
OS_FLAGS
)0);

535 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

536 
	`CPU_CRITICAL_EXIT
();

537 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

538  ((
OS_FLAGS
)0);

542 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

543 
	`OS_FœgBlock
(&
≥nd_d©a
,

544 
p_gΩ
,

545 
Êags
,

546 
›t
,

547 
timeout
);

548 
	`OS_CRITICAL_EXIT_NO_SCHED
();

552 
OS_OPT_PEND_FLAG_CLR_ANY
:

553 
Êags_rdy
 = (
OS_FLAGS
)(~
p_gΩ
->
Fœgs
 & 
Êags
);

554 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

555 i‡(
c⁄sume
 =
DEF_TRUE
) {

556 
p_gΩ
->
Fœgs
 |
Êags_rdy
;

558 
OSTCBCurPå
->
FœgsRdy
 = 
Êags_rdy
;

559 i‡(
p_ts
 !(
CPU_TS
 *)0) {

560 *
p_ts
 = 
p_gΩ
->
TS
;

562 
	`CPU_CRITICAL_EXIT
();

563 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

564 
	`TRACE_OS_FLAG_PEND
(
p_gΩ
);

566 *
p_îr
 = 
OS_ERR_NONE
;

567  (
Êags_rdy
);

569 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

570 
	`CPU_CRITICAL_EXIT
();

571 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

572  ((
OS_FLAGS
)0);

574 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

575 
	`CPU_CRITICAL_EXIT
();

576 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

577  ((
OS_FLAGS
)0);

581 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

582 
	`OS_FœgBlock
(&
≥nd_d©a
,

583 
p_gΩ
,

584 
Êags
,

585 
›t
,

586 
timeout
);

587 
	`OS_CRITICAL_EXIT_NO_SCHED
();

593 
	`CPU_CRITICAL_EXIT
();

594 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

595 
	`TRACE_OS_FLAG_PEND_FAILED
(
p_gΩ
);

597 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

598  ((
OS_FLAGS
)0);

600 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

601 
	`TRACE_OS_FLAG_PEND_BLOCK
(
p_gΩ
);

603 
	`OSSched
();

605 
	`CPU_CRITICAL_ENTER
();

606 
OSTCBCurPå
->
PídSètus
) {

607 
OS_STATUS_PEND_OK
:

608 i‡(
p_ts
 !(
CPU_TS
 *)0) {

609 *
p_ts
 = 
OSTCBCurPå
->
TS
;

611 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

612 
	`TRACE_OS_FLAG_PEND
(
p_gΩ
);

614 *
p_îr
 = 
OS_ERR_NONE
;

617 
OS_STATUS_PEND_ABORT
:

618 i‡(
p_ts
 !(
CPU_TS
 *)0) {

619 *
p_ts
 = 
OSTCBCurPå
->
TS
;

621 
	`CPU_CRITICAL_EXIT
();

622 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

623 
	`TRACE_OS_FLAG_PEND_FAILED
(
p_gΩ
);

625 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

628 
OS_STATUS_PEND_TIMEOUT
:

629 i‡(
p_ts
 !(
CPU_TS
 *)0) {

630 *
p_ts
 = (
CPU_TS
 )0;

632 
	`CPU_CRITICAL_EXIT
();

633 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

634 
	`TRACE_OS_FLAG_PEND_FAILED
(
p_gΩ
);

636 *
p_îr
 = 
OS_ERR_TIMEOUT
;

639 
OS_STATUS_PEND_DEL
:

640 i‡(
p_ts
 !(
CPU_TS
 *)0) {

641 *
p_ts
 = 
OSTCBCurPå
->
TS
;

643 
	`CPU_CRITICAL_EXIT
();

644 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

645 
	`TRACE_OS_FLAG_PEND_FAILED
(
p_gΩ
);

647 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

651 
	`CPU_CRITICAL_EXIT
();

652 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

653 
	`TRACE_OS_FLAG_PEND_FAILED
(
p_gΩ
);

655 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

658 i‡(*
p_îr
 !
OS_ERR_NONE
) {

659  ((
OS_FLAGS
)0);

662 
Êags_rdy
 = 
OSTCBCurPå
->
FœgsRdy
;

663 i‡(
c⁄sume
 =
DEF_TRUE
) {

664 
mode
) {

665 
OS_OPT_PEND_FLAG_SET_ALL
:

666 
OS_OPT_PEND_FLAG_SET_ANY
:

667 
p_gΩ
->
Fœgs
 &~
Êags_rdy
;

670 #i‡
OS_CFG_FLAG_MODE_CLR_EN
 > 0u

671 
OS_OPT_PEND_FLAG_CLR_ALL
:

672 
OS_OPT_PEND_FLAG_CLR_ANY
:

673 
p_gΩ
->
Fœgs
 |
Êags_rdy
;

677 
	`CPU_CRITICAL_EXIT
();

678 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

679  ((
OS_FLAGS
)0);

682 
	`CPU_CRITICAL_EXIT
();

683 *
p_îr
 = 
OS_ERR_NONE
;

684  (
Êags_rdy
);

685 
	}
}

721 #i‡
OS_CFG_FLAG_PEND_ABORT_EN
 > 0u

722 
OS_OBJ_QTY
 
	$OSFœgPídAb‹t
 (
OS_FLAG_GRP
 *
p_gΩ
,

723 
OS_OPT
 
›t
,

724 
OS_ERR
 *
p_îr
)

726 
OS_PEND_LIST
 *
p_≥nd_li°
;

727 
OS_TCB
 *
p_tcb
;

728 
CPU_TS
 
ts
;

729 
OS_OBJ_QTY
 
nbr_èsks
;

730 
	`CPU_SR_ALLOC
();

734 #ifde‡
OS_SAFETY_CRITICAL


735 i‡(
p_îr
 =(
OS_ERR
 *)0) {

736 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

737  ((
OS_OBJ_QTY
)0u);

741 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

742 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

743 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

744  ((
OS_OBJ_QTY
)0u);

748 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

749 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

750 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

751  ((
OS_OBJ_QTY
)0u);

753 
›t
) {

754 
OS_OPT_PEND_ABORT_1
:

755 
OS_OPT_PEND_ABORT_ALL
:

756 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

757 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

761 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

762  ((
OS_OBJ_QTY
)0u);

766 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

767 i‡(
p_gΩ
->
Ty≥
 !
OS_OBJ_TYPE_FLAG
) {

768 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

769  ((
OS_OBJ_QTY
)0u);

773 
	`CPU_CRITICAL_ENTER
();

774 
p_≥nd_li°
 = &
p_gΩ
->
PídLi°
;

775 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

776 
	`CPU_CRITICAL_EXIT
();

777 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

778  ((
OS_OBJ_QTY
)0u);

781 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

782 
nbr_èsks
 = 0u;

783 
ts
 = 
	`OS_TS_GET
();

784 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

785 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

786 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_gΩ
),

787 
p_tcb
,

788 
ts
);

789 
nbr_èsks
++;

790 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

794 
	`OS_CRITICAL_EXIT_NO_SCHED
();

796 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

797 
	`OSSched
();

800 *
p_îr
 = 
OS_ERR_NONE
;

801  (
nbr_èsks
);

802 
	}
}

822 
OS_FLAGS
 
	$OSFœgPídGëFœgsRdy
 (
OS_ERR
 *
p_îr
)

824 
OS_FLAGS
 
Êags
;

825 
	`CPU_SR_ALLOC
();

829 #ifde‡
OS_SAFETY_CRITICAL


830 i‡(
p_îr
 =(
OS_ERR
 *)0) {

831 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

832  ((
OS_FLAGS
)0);

836 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

837 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

838 *
p_îr
 = 
OS_ERR_PEND_ISR
;

839  ((
OS_FLAGS
)0);

843 
	`CPU_CRITICAL_ENTER
();

844 
Êags
 = 
OSTCBCurPå
->
FœgsRdy
;

845 
	`CPU_CRITICAL_EXIT
();

846 *
p_îr
 = 
OS_ERR_NONE
;

847  (
Êags
);

848 
	}
}

892 
OS_FLAGS
 
	$OSFœgPo°
 (
OS_FLAG_GRP
 *
p_gΩ
,

893 
OS_FLAGS
 
Êags
,

894 
OS_OPT
 
›t
,

895 
OS_ERR
 *
p_îr
)

897 
OS_FLAGS
 
Êags_cur
;

898 
CPU_TS
 
ts
;

902 #ifde‡
OS_SAFETY_CRITICAL


903 i‡(
p_îr
 =(
OS_ERR
 *)0) {

904 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

905 
	`TRACE_OS_FLAG_POST_FAILED
(
p_gΩ
);

907 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

908  ((
OS_FLAGS
)0);

912 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

913 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

914 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

915 
	`TRACE_OS_FLAG_POST_FAILED
(
p_gΩ
);

917 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

918  ((
OS_FLAGS
)0);

920 
›t
) {

921 
OS_OPT_POST_FLAG_SET
:

922 
OS_OPT_POST_FLAG_CLR
:

923 
OS_OPT_POST_FLAG_SET
 | 
OS_OPT_POST_NO_SCHED
:

924 
OS_OPT_POST_FLAG_CLR
 | 
OS_OPT_POST_NO_SCHED
:

928 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

929 
	`TRACE_OS_FLAG_POST_FAILED
(
p_gΩ
);

931 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

932  ((
OS_FLAGS
)0);

936 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

937 i‡(
p_gΩ
->
Ty≥
 !
OS_OBJ_TYPE_FLAG
) {

938 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

939 
	`TRACE_OS_FLAG_POST_FAILED
(
p_gΩ
);

941 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

942  ((
OS_FLAGS
)0);

946 
ts
 = 
	`OS_TS_GET
();

947 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

948 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

949 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_FLAG
,

950 (*)
p_gΩ
,

952 (
OS_MSG_SIZE
)0,

953 (
OS_FLAGS
 )
Êags
,

954 (
OS_OPT
 )
›t
,

955 (
CPU_TS
 )
ts
,

956 (
OS_ERR
 *)
p_îr
);

957 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

958 
	`TRACE_OS_FLAG_POST
(
p_gΩ
);

960  ((
OS_FLAGS
)0);

964 
Êags_cur
 = 
	`OS_FœgPo°
(
p_gΩ
,

965 
Êags
,

966 
›t
,

967 
ts
,

968 
p_îr
);

970 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

971 
	`TRACE_OS_FLAG_POST
(
p_gΩ
);

974  (
Êags_cur
);

975 
	}
}

1014 
	$OS_FœgBlock
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

1015 
OS_FLAG_GRP
 *
p_gΩ
,

1016 
OS_FLAGS
 
Êags
,

1017 
OS_OPT
 
›t
,

1018 
OS_TICK
 
timeout
)

1020 
OSTCBCurPå
->
FœgsPíd
 = 
Êags
;

1021 
OSTCBCurPå
->
FœgsO±
 = 
›t
;

1022 
OSTCBCurPå
->
FœgsRdy
 = (
OS_FLAGS
)0;

1024 
	`OS_Píd
(
p_≥nd_d©a
,

1025 (
OS_PEND_OBJ
 *)((*)
p_gΩ
),

1026 
OS_TASK_PEND_ON_FLAG
,

1027 
timeout
);

1028 
	}
}

1047 
	$OS_FœgCÃ
 (
OS_FLAG_GRP
 *
p_gΩ
)

1049 
OS_PEND_LIST
 *
p_≥nd_li°
;

1052 #i‡
OS_OBJ_TYPE_REQ
 > 0u

1053 
p_gΩ
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

1055 #i‡
OS_CFG_DBG_EN
 > 0u

1056 
p_gΩ
->
NamePå
 = (
CPU_CHAR
 *)((*)"?FLAG");

1058 
p_gΩ
->
Fœgs
 = (
OS_FLAGS
 )0;

1059 
p_≥nd_li°
 = &
p_gΩ
->
PídLi°
;

1060 
	`OS_PídLi°Inô
(
p_≥nd_li°
);

1061 
	}
}

1081 
	$OS_FœgInô
 (
OS_ERR
 *
p_îr
)

1083 #ifde‡
OS_SAFETY_CRITICAL


1084 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1085 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1090 #i‡
OS_CFG_DBG_EN
 > 0u

1091 
OSFœgDbgLi°På
 = (
OS_FLAG_GRP
 *)0;

1094 
OSFœgQty
 = (
OS_OBJ_QTY
 )0;

1095 *
p_îr
 = 
OS_ERR_NONE
;

1096 
	}
}

1114 #i‡
OS_CFG_DBG_EN
 > 0u

1115 
	$OS_FœgDbgLi°Add
 (
OS_FLAG_GRP
 *
p_gΩ
)

1117 
p_gΩ
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

1118 
p_gΩ
->
DbgPªvPå
 = (
OS_FLAG_GRP
 *)0;

1119 i‡(
OSFœgDbgLi°På
 =(
OS_FLAG_GRP
 *)0) {

1120 
p_gΩ
->
DbgNextPå
 = (
OS_FLAG_GRP
 *)0;

1122 
p_gΩ
->
DbgNextPå
 = 
OSFœgDbgLi°På
;

1123 
OSFœgDbgLi°På
->
DbgPªvPå
 = 
p_gΩ
;

1125 
OSFœgDbgLi°På
 = 
p_gΩ
;

1126 
	}
}

1130 
	$OS_FœgDbgLi°Remove
 (
OS_FLAG_GRP
 *
p_gΩ
)

1132 
OS_FLAG_GRP
 *
p_gΩ_√xt
;

1133 
OS_FLAG_GRP
 *
p_gΩ_¥ev
;

1136 
p_gΩ_¥ev
 = 
p_gΩ
->
DbgPªvPå
;

1137 
p_gΩ_√xt
 = 
p_gΩ
->
DbgNextPå
;

1139 i‡(
p_gΩ_¥ev
 =(
OS_FLAG_GRP
 *)0) {

1140 
OSFœgDbgLi°På
 = 
p_gΩ_√xt
;

1141 i‡(
p_gΩ_√xt
 !(
OS_FLAG_GRP
 *)0) {

1142 
p_gΩ_√xt
->
DbgPªvPå
 = (
OS_FLAG_GRP
 *)0;

1144 
p_gΩ
->
DbgNextPå
 = (
OS_FLAG_GRP
 *)0;

1146 } i‡(
p_gΩ_√xt
 =(
OS_FLAG_GRP
 *)0) {

1147 
p_gΩ_¥ev
->
DbgNextPå
 = (
OS_FLAG_GRP
 *)0;

1148 
p_gΩ
->
DbgPªvPå
 = (
OS_FLAG_GRP
 *)0;

1151 
p_gΩ_¥ev
->
DbgNextPå
 = 
p_gΩ_√xt
;

1152 
p_gΩ_√xt
->
DbgPªvPå
 = 
p_gΩ_¥ev
;

1153 
p_gΩ
->
DbgNextPå
 = (
OS_FLAG_GRP
 *)0;

1154 
p_gΩ
->
DbgPªvPå
 = (
OS_FLAG_GRP
 *)0;

1156 
	}
}

1203 
OS_FLAGS
 
	$OS_FœgPo°
 (
OS_FLAG_GRP
 *
p_gΩ
,

1204 
OS_FLAGS
 
Êags
,

1205 
OS_OPT
 
›t
,

1206 
CPU_TS
 
ts
,

1207 
OS_ERR
 *
p_îr
)

1209 
OS_FLAGS
 
Êags_cur
;

1210 
OS_FLAGS
 
Êags_rdy
;

1211 
OS_OPT
 
mode
;

1212 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1213 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

1214 
OS_PEND_LIST
 *
p_≥nd_li°
;

1215 
OS_TCB
 *
p_tcb
;

1216 
	`CPU_SR_ALLOC
();

1220 
	`CPU_CRITICAL_ENTER
();

1221 
›t
) {

1222 
OS_OPT_POST_FLAG_SET
:

1223 
OS_OPT_POST_FLAG_SET
 | 
OS_OPT_POST_NO_SCHED
:

1224 
p_gΩ
->
Fœgs
 |
Êags
;

1227 
OS_OPT_POST_FLAG_CLR
:

1228 
OS_OPT_POST_FLAG_CLR
 | 
OS_OPT_POST_NO_SCHED
:

1229 
p_gΩ
->
Fœgs
 &~
Êags
;

1233 
	`CPU_CRITICAL_EXIT
();

1234 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1235  ((
OS_FLAGS
)0);

1237 
p_gΩ
->
TS
 = 
ts
;

1238 
p_≥nd_li°
 = &
p_gΩ
->
PídLi°
;

1239 i‡(
p_≥nd_li°
->
NbrE¡rõs
 == 0u) {

1240 
	`CPU_CRITICAL_EXIT
();

1241 *
p_îr
 = 
OS_ERR_NONE
;

1242  (
p_gΩ
->
Fœgs
);

1245 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

1246 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

1247 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

1248 
p_tcb
 !(
OS_TCB
 *)0) {

1249 
p_≥nd_d©a_√xt
 = 
p_≥nd_d©a
->
NextPå
;

1250 
mode
 = 
p_tcb
->
FœgsO±
 & 
OS_OPT_PEND_FLAG_MASK
;

1251 
mode
) {

1252 
OS_OPT_PEND_FLAG_SET_ALL
:

1253 
Êags_rdy
 = (
OS_FLAGS
)(
p_gΩ
->
Fœgs
 & 
p_tcb
->
FœgsPíd
);

1254 i‡(
Êags_rdy
 =
p_tcb
->
FœgsPíd
) {

1255 
	`OS_FœgTaskRdy
(
p_tcb
,

1256 
Êags_rdy
,

1257 
ts
);

1261 
OS_OPT_PEND_FLAG_SET_ANY
:

1262 
Êags_rdy
 = (
OS_FLAGS
)(
p_gΩ
->
Fœgs
 & 
p_tcb
->
FœgsPíd
);

1263 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

1264 
	`OS_FœgTaskRdy
(
p_tcb
,

1265 
Êags_rdy
,

1266 
ts
);

1270 #i‡
OS_CFG_FLAG_MODE_CLR_EN
 > 0u

1271 
OS_OPT_PEND_FLAG_CLR_ALL
:

1272 
Êags_rdy
 = (
OS_FLAGS
)(~
p_gΩ
->
Fœgs
 & 
p_tcb
->
FœgsPíd
);

1273 i‡(
Êags_rdy
 =
p_tcb
->
FœgsPíd
) {

1274 
	`OS_FœgTaskRdy
(
p_tcb
,

1275 
Êags_rdy
,

1276 
ts
);

1280 
OS_OPT_PEND_FLAG_CLR_ANY
:

1281 
Êags_rdy
 = (
OS_FLAGS
)(~
p_gΩ
->
Fœgs
 & 
p_tcb
->
FœgsPíd
);

1282 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

1283 
	`OS_FœgTaskRdy
(
p_tcb
,

1284 
Êags_rdy
,

1285 
ts
);

1290 
	`OS_CRITICAL_EXIT
();

1291 *
p_îr
 = 
OS_ERR_FLAG_PEND_OPT
;

1292  ((
OS_FLAGS
)0);

1294 
p_≥nd_d©a
 = 
p_≥nd_d©a_√xt
;

1295 i‡(
p_≥nd_d©a
 !(
OS_PEND_DATA
 *)0) {

1296 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

1298 
p_tcb
 = (
OS_TCB
 *)0;

1301 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1303 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

1304 
	`OSSched
();

1307 
	`CPU_CRITICAL_ENTER
();

1308 
Êags_cur
 = 
p_gΩ
->
Fœgs
;

1309 
	`CPU_CRITICAL_EXIT
();

1310 *
p_îr
 = 
OS_ERR_NONE
;

1311  (
Êags_cur
);

1312 
	}
}

1335 
	$OS_FœgTaskRdy
 (
OS_TCB
 *
p_tcb
,

1336 
OS_FLAGS
 
Êags_rdy
,

1337 
CPU_TS
 
ts
)

1339 
p_tcb
->
FœgsRdy
 = 
Êags_rdy
;

1340 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

1341 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1342 
p_tcb
->
TS
 = 
ts
;

1343 
p_tcb
->
TaskSèã
) {

1344 
OS_TASK_STATE_RDY
:

1345 
OS_TASK_STATE_DLY
:

1346 
OS_TASK_STATE_DLY_SUSPENDED
:

1347 
OS_TASK_STATE_SUSPENDED
:

1350 
OS_TASK_STATE_PEND
:

1351 
OS_TASK_STATE_PEND_TIMEOUT
:

1352 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT
) {

1353 
	`OS_TickLi°Remove
(
p_tcb
);

1355 
	`OS_RdyLi°In£π
(
p_tcb
);

1356 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

1359 
OS_TASK_STATE_PEND_SUSPENDED
:

1360 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1361 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

1367 
	`OS_PídLi°Remove
(
p_tcb
);

1368 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_int.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_öt__c
 = "$Id: $";

43 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

92 
	$OS_I¡QPo°
 (
OS_OBJ_TYPE
 
ty≥
,

93 *
p_obj
,

94 *
p_void
,

95 
OS_MSG_SIZE
 
msg_size
,

96 
OS_FLAGS
 
Êags
,

97 
OS_OPT
 
›t
,

98 
CPU_TS
 
ts
,

99 
OS_ERR
 *
p_îr
)

101 
	`CPU_SR_ALLOC
();

104 
	`CPU_CRITICAL_ENTER
();

105 i‡(
OSI¡QNbrE¡rõs
 < 
OSCfg_I¡QSize
) {

106 
OSI¡QNbrE¡rõs
++;

108 i‡(
OSI¡QNbrE¡rõsMax
 < 
OSI¡QNbrE¡rõs
) {

109 
OSI¡QNbrE¡rõsMax
 = 
OSI¡QNbrE¡rõs
;

112 
OSI¡QInPå
->
Ty≥
 = 
ty≥
;

113 
OSI¡QInPå
->
ObjPå
 = 
p_obj
;

114 
OSI¡QInPå
->
MsgPå
 = 
p_void
;

115 
OSI¡QInPå
->
MsgSize
 = 
msg_size
;

116 
OSI¡QInPå
->
Fœgs
 = 
Êags
;

117 
OSI¡QInPå
->
O±
 = 
›t
;

118 
OSI¡QInPå
->
TS
 = 
ts
;

120 
OSI¡QInPå
 = OSI¡QInPå->
NextPå
;

122 
OSRdyLi°
[0].
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

123 
OSRdyLi°
[0].
HódPå
 = &
OSI¡QTaskTCB
;

124 
OSRdyLi°
[0].
TaûPå
 = &
OSI¡QTaskTCB
;

125 
	`OS_PrioIn£π
(0u);

126 i‡(
OSPrioCur
 != 0) {

127 
OSPrioSaved
 = 
OSPrioCur
;

130 *
p_îr
 = 
OS_ERR_NONE
;

132 
OSI¡QOvfCå
++;

133 *
p_îr
 = 
OS_ERR_INT_Q_FULL
;

135 
	`CPU_CRITICAL_EXIT
();

136 
	}
}

152 
	$OS_I¡QRePo°
 ()

154 #i‡
OS_CFG_TMR_EN
 > 0u

155 
CPU_TS
 
ts
;

157 
OS_ERR
 
îr
;

160 
OSI¡QOutPå
->
Ty≥
) {

161 
OS_OBJ_TYPE_FLAG
:

162 #i‡
OS_CFG_FLAG_EN
 > 0u

163 ()
	`OS_FœgPo°
((
OS_FLAG_GRP
 *Ë
OSI¡QOutPå
->
ObjPå
,

164 (
OS_FLAGS
 ) 
OSI¡QOutPå
->
Fœgs
,

165 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

166 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

167 (
OS_ERR
 *)&
îr
);

171 
OS_OBJ_TYPE_Q
:

172 #i‡
OS_CFG_Q_EN
 > 0u

173 
	`OS_QPo°
((
OS_Q
 *Ë
OSI¡QOutPå
->
ObjPå
,

174 (*Ë
OSI¡QOutPå
->
MsgPå
,

175 (
OS_MSG_SIZE
Ë
OSI¡QOutPå
->
MsgSize
,

176 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

177 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

178 (
OS_ERR
 *)&
îr
);

182 
OS_OBJ_TYPE_SEM
:

183 #i‡
OS_CFG_SEM_EN
 > 0u

184 ()
	`OS_SemPo°
((
OS_SEM
 *Ë
OSI¡QOutPå
->
ObjPå
,

185 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

186 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

187 (
OS_ERR
 *)&
îr
);

191 
OS_OBJ_TYPE_TASK_MSG
:

192 #i‡
OS_CFG_TASK_Q_EN
 > 0u

193 
	`OS_TaskQPo°
((
OS_TCB
 *Ë
OSI¡QOutPå
->
ObjPå
,

194 (*Ë
OSI¡QOutPå
->
MsgPå
,

195 (
OS_MSG_SIZE
Ë
OSI¡QOutPå
->
MsgSize
,

196 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

197 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

198 (
OS_ERR
 *)&
îr
);

202 
OS_OBJ_TYPE_TASK_RESUME
:

203 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

204 ()
	`OS_TaskResume
((
OS_TCB
 *Ë
OSI¡QOutPå
->
ObjPå
,

205 (
OS_ERR
 *)&
îr
);

209 
OS_OBJ_TYPE_TASK_SIGNAL
:

210 ()
	`OS_TaskSemPo°
((
OS_TCB
 *Ë
OSI¡QOutPå
->
ObjPå
,

211 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

212 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

213 (
OS_ERR
 *)&
îr
);

216 
OS_OBJ_TYPE_TASK_SUSPEND
:

217 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

218 ()
	`OS_TaskSu•íd
((
OS_TCB
 *Ë
OSI¡QOutPå
->
ObjPå
,

219 (
OS_ERR
 *)&
îr
);

223 
OS_OBJ_TYPE_TICK
:

224 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

225 
	`OS_SchedRoundRobö
(&
OSRdyLi°
[
OSPrioSaved
]);

228 ()
	`OS_TaskSemPo°
((
OS_TCB
 *)&
OSTickTaskTCB
,

229 (
OS_OPT
 ) 
OS_OPT_POST_NONE
,

230 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

231 (
OS_ERR
 *)&
îr
);

232 #i‡
OS_CFG_TMR_EN
 > 0u

233 
OSTmrUpd©eCå
--;

234 i‡(
OSTmrUpd©eCå
 =(
OS_CTR
)0u) {

235 
OSTmrUpd©eCå
 = 
OSTmrUpd©eC¡
;

236 
ts
 = 
	`OS_TS_GET
();

237 ()
	`OS_TaskSemPo°
((
OS_TCB
 *)&
OSTmrTaskTCB
,

238 (
OS_OPT
 ) 
OS_OPT_POST_NONE
,

239 (
CPU_TS
 ) 
ts
,

240 (
OS_ERR
 *)&
îr
);

248 
	}
}

264 
	$OS_I¡QTask
 (*
p_¨g
)

266 
CPU_BOOLEAN
 
d⁄e
;

267 
CPU_TS
 
ts_°¨t
;

268 
CPU_TS
 
ts_íd
;

269 
	`CPU_SR_ALLOC
();

273 ()&
p_¨g
;

274 
DEF_ON
) {

275 
d⁄e
 = 
DEF_FALSE
;

276 
d⁄e
 =
DEF_FALSE
) {

277 
	`CPU_CRITICAL_ENTER
();

278 i‡(
OSI¡QNbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

279 
OSRdyLi°
[0].
NbrE¡rõs
 = (
OS_OBJ_QTY
)0u;

280 
OSRdyLi°
[0].
HódPå
 = (
OS_TCB
 *)0;

281 
OSRdyLi°
[0].
TaûPå
 = (
OS_TCB
 *)0;

282 
	`OS_PrioRemove
(0u);

283 
	`CPU_CRITICAL_EXIT
();

284 
	`OSSched
();

285 
d⁄e
 = 
DEF_TRUE
;

287 
	`CPU_CRITICAL_EXIT
();

288 
ts_°¨t
 = 
	`OS_TS_GET
();

289 
	`OS_I¡QRePo°
();

290 
ts_íd
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

291 i‡(
OSI¡QTaskTimeMax
 < 
ts_íd
) {

292 
OSI¡QTaskTimeMax
 = 
ts_íd
;

294 
	`CPU_CRITICAL_ENTER
();

295 
OSI¡QOutPå
 = OSI¡QOutPå->
NextPå
;

296 
OSI¡QNbrE¡rõs
--;

297 
	`CPU_CRITICAL_EXIT
();

301 
	}
}

326 
	$OS_I¡QTaskInô
 (
OS_ERR
 *
p_îr
)

328 
OS_INT_Q
 *
p_öt_q
;

329 
OS_INT_Q
 *
p_öt_q_√xt
;

330 
OS_OBJ_QTY
 
i
;

333 
OSI¡QOvfCå
 = (
OS_QTY
)0u;

335 i‡(
OSCfg_I¡QBa£På
 =(
OS_INT_Q
 *)0) {

336 *
p_îr
 = 
OS_ERR_INT_Q
;

340 i‡(
OSCfg_I¡QSize
 < (
OS_OBJ_QTY
)2u) {

341 *
p_îr
 = 
OS_ERR_INT_Q_SIZE
;

345 
OSI¡QTaskTimeMax
 = (
CPU_TS
)0;

347 
p_öt_q
 = 
OSCfg_I¡QBa£På
;

348 
p_öt_q_√xt
 = 
p_öt_q
;

349 
p_öt_q_√xt
++;

350 
i
 = 0u; i < 
OSCfg_I¡QSize
; i++) {

351 
p_öt_q
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

352 
p_öt_q
->
ObjPå
 = (*)0;

353 
p_öt_q
->
MsgPå
 = (*)0;

354 
p_öt_q
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

355 
p_öt_q
->
Fœgs
 = (
OS_FLAGS
 )0u;

356 
p_öt_q
->
O±
 = (
OS_OPT
 )0u;

357 
p_öt_q
->
NextPå
 = 
p_öt_q_√xt
;

358 
p_öt_q
++;

359 
p_öt_q_√xt
++;

361 
p_öt_q
--;

362 
p_öt_q_√xt
 = 
OSCfg_I¡QBa£På
;

363 
p_öt_q
->
NextPå
 = 
p_öt_q_√xt
;

364 
OSI¡QInPå
 = 
p_öt_q_√xt
;

365 
OSI¡QOutPå
 = 
p_öt_q_√xt
;

366 
OSI¡QNbrE¡rõs
 = (
OS_OBJ_QTY
)0u;

367 
OSI¡QNbrE¡rõsMax
 = (
OS_OBJ_QTY
)0u;

370 i‡(
OSCfg_I¡QTaskStkBa£På
 =(
CPU_STK
 *)0) {

371 *
p_îr
 = 
OS_ERR_INT_Q_STK_INVALID
;

375 i‡(
OSCfg_I¡QTaskStkSize
 < 
OSCfg_StkSizeMö
) {

376 *
p_îr
 = 
OS_ERR_INT_Q_STK_SIZE_INVALID
;

380 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSI¡QTaskTCB
,

381 (
CPU_CHAR
 *)((*)"uC/OS-III ISR Queue Task"),

382 (
OS_TASK_PTR
 )
OS_I¡QTask
,

384 (
OS_PRIO
 )0u,

385 (
CPU_STK
 *)
OSCfg_I¡QTaskStkBa£På
,

386 (
CPU_STK_SIZE
)
OSCfg_I¡QTaskStkLimô
,

387 (
CPU_STK_SIZE
)
OSCfg_I¡QTaskStkSize
,

388 (
OS_MSG_QTY
 )0u,

389 (
OS_TICK
 )0u,

391 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
),

392 (
OS_ERR
 *)
p_îr
);

393 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_mem.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_mem__c
 = "$Id: $";

43 #i‡
OS_CFG_MEM_EN
 > 0u

77 
	$OSMemCª©e
 (
OS_MEM
 *
p_mem
,

78 
CPU_CHAR
 *
p_«me
,

79 *
p_addr
,

80 
OS_MEM_QTY
 
n_blks
,

81 
OS_MEM_SIZE
 
blk_size
,

82 
OS_ERR
 *
p_îr
)

84 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

85 
CPU_DATA
 
Æign_msk
;

87 
OS_MEM_QTY
 
i
;

88 
OS_MEM_QTY
 
lo›s
;

89 
CPU_INT08U
 *
p_blk
;

90 **
p_lök
;

91 
	`CPU_SR_ALLOC
();

95 #ifde‡
OS_SAFETY_CRITICAL


96 i‡(
p_îr
 =(
OS_ERR
 *)0) {

97 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

102 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


103 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

104 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

109 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

110 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

111 *
p_îr
 = 
OS_ERR_MEM_CREATE_ISR
;

116 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

117 i‡(
p_addr
 == (*)0) {

118 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_ADDR
;

121 i‡(
n_blks
 < (
OS_MEM_QTY
)2) {

122 *
p_îr
 = 
OS_ERR_MEM_INVALID_BLKS
;

125 i‡(
blk_size
 < (*)) {

126 *
p_îr
 = 
OS_ERR_MEM_INVALID_SIZE
;

129 
Æign_msk
 = (*) - 1u;

130 i‡(
Æign_msk
 > 0u) {

131 i‡(((
CPU_ADDR
)
p_addr
 & 
Æign_msk
) != 0u){

132 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_ADDR
;

135 i‡((
blk_size
 & 
Æign_msk
) != 0u) {

136 *
p_îr
 = 
OS_ERR_MEM_INVALID_SIZE
;

142 
p_lök
 = (**)
p_addr
;

143 
p_blk
 = (
CPU_INT08U
 *)
p_addr
;

144 
lo›s
 = 
n_blks
 - 1u;

145 
i
 = 0u; i < 
lo›s
; i++) {

146 
p_blk
 +
blk_size
;

147 *
p_lök
 = (*)
p_blk
;

148 
p_lök
 = (**)(*)
p_blk
;

150 *
p_lök
 = (*)0;

152 
	`OS_CRITICAL_ENTER
();

153 #i‡
OS_OBJ_TYPE_REQ
 > 0u

154 
p_mem
->
Ty≥
 = 
OS_OBJ_TYPE_MEM
;

156 #i‡
OS_CFG_DBG_EN
 > 0u

157 
p_mem
->
NamePå
 = 
p_«me
;

159 ()&
p_«me
;

161 
p_mem
->
AddrPå
 = 
p_addr
;

162 
p_mem
->
FªeLi°På
 = 
p_addr
;

163 
p_mem
->
NbrFªe
 = 
n_blks
;

164 
p_mem
->
NbrMax
 = 
n_blks
;

165 
p_mem
->
BlkSize
 = 
blk_size
;

167 #i‡
OS_CFG_DBG_EN
 > 0u

168 
	`OS_MemDbgLi°Add
(
p_mem
);

171 
OSMemQty
++;

173 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

174 
	`TRACE_OS_MEM_CREATE
(
p_mem
, 
p_«me
);

177 
	`OS_CRITICAL_EXIT_NO_SCHED
();

178 *
p_îr
 = 
OS_ERR_NONE
;

179 
	}
}

202 *
	$OSMemGë
 (
OS_MEM
 *
p_mem
,

203 
OS_ERR
 *
p_îr
)

205 *
p_blk
;

206 
	`CPU_SR_ALLOC
();

210 #ifde‡
OS_SAFETY_CRITICAL


211 i‡(
p_îr
 =(
OS_ERR
 *)0) {

212 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

213 
	`TRACE_OS_MEM_GET_FAILED
(
p_mem
);

215 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

220 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

221 i‡(
p_mem
 =(
OS_MEM
 *)0) {

222 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

223 
	`TRACE_OS_MEM_GET_FAILED
(
p_mem
);

225 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_MEM
;

230 
	`CPU_CRITICAL_ENTER
();

231 i‡(
p_mem
->
NbrFªe
 =(
OS_MEM_QTY
)0) {

232 
	`CPU_CRITICAL_EXIT
();

233 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

234 
	`TRACE_OS_MEM_GET_FAILED
(
p_mem
);

236 *
p_îr
 = 
OS_ERR_MEM_NO_FREE_BLKS
;

239 
p_blk
 = 
p_mem
->
FªeLi°På
;

240 
p_mem
->
FªeLi°På
 = *(**)
p_blk
;

241 
p_mem
->
NbrFªe
--;

242 
	`CPU_CRITICAL_EXIT
();

243 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

244 
	`TRACE_OS_MEM_GET
(
p_mem
);

246 *
p_îr
 = 
OS_ERR_NONE
;

247  (
p_blk
);

248 
	}
}

271 
	$OSMemPut
 (
OS_MEM
 *
p_mem
,

272 *
p_blk
,

273 
OS_ERR
 *
p_îr
)

275 
	`CPU_SR_ALLOC
();

279 #ifde‡
OS_SAFETY_CRITICAL


280 i‡(
p_îr
 =(
OS_ERR
 *)0) {

281 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

282 
	`TRACE_OS_MEM_PUT_FAILED
(
p_mem
);

284 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

289 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

290 i‡(
p_mem
 =(
OS_MEM
 *)0) {

291 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

292 
	`TRACE_OS_MEM_PUT_FAILED
(
p_mem
);

294 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_MEM
;

297 i‡(
p_blk
 == (*)0) {

298 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

299 
	`TRACE_OS_MEM_PUT_FAILED
(
p_mem
);

301 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_BLK
;

306 
	`CPU_CRITICAL_ENTER
();

307 i‡(
p_mem
->
NbrFªe
 >p_mem->
NbrMax
) {

308 
	`CPU_CRITICAL_EXIT
();

309 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

310 
	`TRACE_OS_MEM_PUT_FAILED
(
p_mem
);

312 *
p_îr
 = 
OS_ERR_MEM_FULL
;

315 *(**)
p_blk
 = 
p_mem
->
FªeLi°På
;

316 
p_mem
->
FªeLi°På
 = 
p_blk
;

317 
p_mem
->
NbrFªe
++;

318 
	`CPU_CRITICAL_EXIT
();

319 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

320 
	`TRACE_OS_MEM_PUT
(
p_mem
);

322 *
p_îr
 = 
OS_ERR_NONE
;

323 
	}
}

340 #i‡
OS_CFG_DBG_EN
 > 0u

341 
	$OS_MemDbgLi°Add
 (
OS_MEM
 *
p_mem
)

343 
p_mem
->
DbgPªvPå
 = (
OS_MEM
 *)0;

344 i‡(
OSMemDbgLi°På
 =(
OS_MEM
 *)0) {

345 
p_mem
->
DbgNextPå
 = (
OS_MEM
 *)0;

347 
p_mem
->
DbgNextPå
 = 
OSMemDbgLi°På
;

348 
OSMemDbgLi°På
->
DbgPªvPå
 = 
p_mem
;

350 
OSMemDbgLi°På
 = 
p_mem
;

351 
	}
}

370 
	$OS_MemInô
 (
OS_ERR
 *
p_îr
)

372 #ifde‡
OS_SAFETY_CRITICAL


373 i‡(
p_îr
 =(
OS_ERR
 *)0) {

374 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

379 #i‡
OS_CFG_DBG_EN
 > 0u

380 
OSMemDbgLi°På
 = (
OS_MEM
 *)0;

383 
OSMemQty
 = (
OS_OBJ_QTY
)0;

384 *
p_îr
 = 
OS_ERR_NONE
;

385 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_msg.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_msg__c
 = "$Id: $";

43 #i‡
OS_MSG_EN
 > 0u

63 
	$OS_MsgPoﬁInô
 (
OS_ERR
 *
p_îr
)

65 
OS_MSG
 *
p_msg1
;

66 
OS_MSG
 *
p_msg2
;

67 
OS_MSG_QTY
 
i
;

68 
OS_MSG_QTY
 
lo›s
;

72 #ifde‡
OS_SAFETY_CRITICAL


73 i‡(
p_îr
 =(
OS_ERR
 *)0) {

74 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

79 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

80 i‡(
OSCfg_MsgPoﬁBa£På
 =(
OS_MSG
 *)0) {

81 *
p_îr
 = 
OS_ERR_MSG_POOL_NULL_PTR
;

84 i‡(
OSCfg_MsgPoﬁSize
 =(
OS_MSG_QTY
)0) {

85 *
p_îr
 = 
OS_ERR_MSG_POOL_EMPTY
;

90 
p_msg1
 = 
OSCfg_MsgPoﬁBa£På
;

91 
p_msg2
 = 
OSCfg_MsgPoﬁBa£På
;

92 
p_msg2
++;

93 
lo›s
 = 
OSCfg_MsgPoﬁSize
 - 1u;

94 
i
 = 0u; i < 
lo›s
; i++) {

95 
p_msg1
->
NextPå
 = 
p_msg2
;

96 
p_msg1
->
MsgPå
 = (*)0;

97 
p_msg1
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

98 
p_msg1
->
MsgTS
 = (
CPU_TS
 )0u;

99 
p_msg1
++;

100 
p_msg2
++;

102 
p_msg1
->
NextPå
 = (
OS_MSG
 *)0;

103 
p_msg1
->
MsgPå
 = (*)0;

104 
p_msg1
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

105 
p_msg1
->
MsgTS
 = (
CPU_TS
 )0u;

107 
OSMsgPoﬁ
.
NextPå
 = 
OSCfg_MsgPoﬁBa£På
;

108 
OSMsgPoﬁ
.
NbrFªe
 = 
OSCfg_MsgPoﬁSize
;

109 
OSMsgPoﬁ
.
NbrU£d
 = (
OS_MSG_QTY
)0;

110 #i‡
OS_CFG_DBG_EN
 > 0u

111 
OSMsgPoﬁ
.
NbrU£dMax
 = (
OS_MSG_QTY
)0;

113 *
p_îr
 = 
OS_ERR_NONE
;

114 
	}
}

132 
OS_MSG_QTY
 
	$OS_MsgQFªeAŒ
 (
OS_MSG_Q
 *
p_msg_q
)

134 
OS_MSG
 *
p_msg
;

135 
OS_MSG_QTY
 
qty
;

139 
qty
 = 
p_msg_q
->
NbrE¡rõs
;

140 i‡(
p_msg_q
->
NbrE¡rõs
 > (
OS_MSG_QTY
)0) {

141 
p_msg
 = 
p_msg_q
->
InPå
;

142 
p_msg
->
NextPå
 = 
OSMsgPoﬁ
.NextPtr;

143 
OSMsgPoﬁ
.
NextPå
 = 
p_msg_q
->
OutPå
;

144 
OSMsgPoﬁ
.
NbrU£d
 -
p_msg_q
->
NbrE¡rõs
;

145 
OSMsgPoﬁ
.
NbrFªe
 +
p_msg_q
->
NbrE¡rõs
;

146 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)0;

147 #i‡
OS_CFG_DBG_EN
 > 0u

148 
p_msg_q
->
NbrE¡rõsMax
 = (
OS_MSG_QTY
)0;

150 
p_msg_q
->
InPå
 = (
OS_MSG
 *)0;

151 
p_msg_q
->
OutPå
 = (
OS_MSG
 *)0;

153  (
qty
);

154 
	}
}

174 
	$OS_MsgQInô
 (
OS_MSG_Q
 *
p_msg_q
,

175 
OS_MSG_QTY
 
size
)

177 
p_msg_q
->
NbrE¡rõsSize
 = (
OS_MSG_QTY
)
size
;

178 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)0;

179 #i‡
OS_CFG_DBG_EN
 > 0u

180 
p_msg_q
->
NbrE¡rõsMax
 = (
OS_MSG_QTY
)0;

182 
p_msg_q
->
InPå
 = (
OS_MSG
 *)0;

183 
p_msg_q
->
OutPå
 = (
OS_MSG
 *)0;

184 
	}
}

211 *
	$OS_MsgQGë
 (
OS_MSG_Q
 *
p_msg_q
,

212 
OS_MSG_SIZE
 *
p_msg_size
,

213 
CPU_TS
 *
p_ts
,

214 
OS_ERR
 *
p_îr
)

216 
OS_MSG
 *
p_msg
;

217 *
p_void
;

221 #ifde‡
OS_SAFETY_CRITICAL


222 i‡(
p_îr
 =(
OS_ERR
 *)0) {

223 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

228 i‡(
p_msg_q
->
NbrE¡rõs
 =(
OS_MSG_QTY
)0) {

229 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

230 i‡(
p_ts
 !(
CPU_TS
 *)0) {

231 *
p_ts
 = (
CPU_TS
 )0;

233 *
p_îr
 = 
OS_ERR_Q_EMPTY
;

237 
p_msg
 = 
p_msg_q
->
OutPå
;

238 
p_void
 = 
p_msg
->
MsgPå
;

239 *
p_msg_size
 = 
p_msg
->
MsgSize
;

240 i‡(
p_ts
 !(
CPU_TS
 *)0) {

241 *
p_ts
 = 
p_msg
->
MsgTS
;

244 
p_msg_q
->
OutPå
 = 
p_msg
->
NextPå
;

246 i‡(
p_msg_q
->
OutPå
 =(
OS_MSG
 *)0) {

247 
p_msg_q
->
InPå
 = (
OS_MSG
 *)0;

248 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)0;

250 
p_msg_q
->
NbrE¡rõs
--;

253 
p_msg
->
NextPå
 = 
OSMsgPoﬁ
.NextPtr;

254 
OSMsgPoﬁ
.
NextPå
 = 
p_msg
;

255 
OSMsgPoﬁ
.
NbrFªe
++;

256 
OSMsgPoﬁ
.
NbrU£d
--;

258 *
p_îr
 = 
OS_ERR_NONE
;

259  (
p_void
);

260 
	}
}

295 
	$OS_MsgQPut
 (
OS_MSG_Q
 *
p_msg_q
,

296 *
p_void
,

297 
OS_MSG_SIZE
 
msg_size
,

298 
OS_OPT
 
›t
,

299 
CPU_TS
 
ts
,

300 
OS_ERR
 *
p_îr
)

302 
OS_MSG
 *
p_msg
;

303 
OS_MSG
 *
p_msg_ö
;

307 #ifde‡
OS_SAFETY_CRITICAL


308 i‡(
p_îr
 =(
OS_ERR
 *)0) {

309 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

314 i‡(
p_msg_q
->
NbrE¡rõs
 >p_msg_q->
NbrE¡rõsSize
) {

315 *
p_îr
 = 
OS_ERR_Q_MAX
;

319 i‡(
OSMsgPoﬁ
.
NbrFªe
 =(
OS_MSG_QTY
)0) {

320 *
p_îr
 = 
OS_ERR_MSG_POOL_EMPTY
;

324 
p_msg
 = 
OSMsgPoﬁ
.
NextPå
;

325 
OSMsgPoﬁ
.
NextPå
 = 
p_msg
->NextPtr;

326 
OSMsgPoﬁ
.
NbrFªe
--;

327 
OSMsgPoﬁ
.
NbrU£d
++;

329 #i‡
OS_CFG_DBG_EN
 > 0u

330 i‡(
OSMsgPoﬁ
.
NbrU£dMax
 < OSMsgPoﬁ.
NbrU£d
) {

331 
OSMsgPoﬁ
.
NbrU£dMax
 = OSMsgPoﬁ.
NbrU£d
;

335 i‡(
p_msg_q
->
NbrE¡rõs
 =(
OS_MSG_QTY
)0) {

336 
p_msg_q
->
InPå
 = 
p_msg
;

337 
p_msg_q
->
OutPå
 = 
p_msg
;

338 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)1;

339 
p_msg
->
NextPå
 = (
OS_MSG
 *)0;

341 i‡((
›t
 & 
OS_OPT_POST_LIFO
Ë=
OS_OPT_POST_FIFO
) {

342 
p_msg_ö
 = 
p_msg_q
->
InPå
;

343 
p_msg_ö
->
NextPå
 = 
p_msg
;

344 
p_msg_q
->
InPå
 = 
p_msg
;

345 
p_msg
->
NextPå
 = (
OS_MSG
 *)0;

347 
p_msg
->
NextPå
 = 
p_msg_q
->
OutPå
;

348 
p_msg_q
->
OutPå
 = 
p_msg
;

350 
p_msg_q
->
NbrE¡rõs
++;

353 #i‡
OS_CFG_DBG_EN
 > 0u

354 i‡(
p_msg_q
->
NbrE¡rõsMax
 <Ö_msg_q->
NbrE¡rõs
) {

355 
p_msg_q
->
NbrE¡rõsMax
 =Ö_msg_q->
NbrE¡rõs
;

359 
p_msg
->
MsgPå
 = 
p_void
;

360 
p_msg
->
MsgSize
 = 
msg_size
;

361 
p_msg
->
MsgTS
 = 
ts
;

362 *
p_îr
 = 
OS_ERR_NONE
;

363 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_mutex.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_muãx__c
 = "$Id: $";

43 #i‡
OS_CFG_MUTEX_EN
 > 0u

69 
	$OSMuãxCª©e
 (
OS_MUTEX
 *
p_muãx
,

70 
CPU_CHAR
 *
p_«me
,

71 
OS_ERR
 *
p_îr
)

73 
	`CPU_SR_ALLOC
();

77 #ifde‡
OS_SAFETY_CRITICAL


78 i‡(
p_îr
 =(
OS_ERR
 *)0) {

79 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

84 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


85 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

86 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

91 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

92 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

93 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

98 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

99 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

100 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

105 
	`OS_CRITICAL_ENTER
();

106 #i‡
OS_OBJ_TYPE_REQ
 > 0u

107 
p_muãx
->
Ty≥
 = 
OS_OBJ_TYPE_MUTEX
;

109 #i‡
OS_CFG_DBG_EN
 > 0u

110 
p_muãx
->
NamePå
 = 
p_«me
;

112 ()&
p_«me
;

114 
p_muãx
->
Ow√rTCBPå
 = (
OS_TCB
 *)0;

115 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)0;

116 
p_muãx
->
TS
 = (
CPU_TS
 )0;

117 
p_muãx
->
Ow√rOrigöÆPrio
 = 
OS_CFG_PRIO_MAX
;

118 
	`OS_PídLi°Inô
(&
p_muãx
->
PídLi°
);

120 #i‡
OS_CFG_DBG_EN
 > 0u

121 
	`OS_MuãxDbgLi°Add
(
p_muãx
);

124 
OSMuãxQty
++;

126 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

127 
	`TRACE_OS_MUTEX_CREATE
(
p_muãx
, 
p_«me
);

130 
	`OS_CRITICAL_EXIT_NO_SCHED
();

131 *
p_îr
 = 
OS_ERR_NONE
;

132 
	}
}

172 #i‡
OS_CFG_MUTEX_DEL_EN
 > 0u

173 
OS_OBJ_QTY
 
	$OSMuãxDñ
 (
OS_MUTEX
 *
p_muãx
,

174 
OS_OPT
 
›t
,

175 
OS_ERR
 *
p_îr
)

177 
OS_OBJ_QTY
 
˙t
;

178 
OS_OBJ_QTY
 
nbr_èsks
;

179 
OS_PEND_DATA
 *
p_≥nd_d©a
;

180 
OS_PEND_LIST
 *
p_≥nd_li°
;

181 
OS_TCB
 *
p_tcb
;

182 
OS_TCB
 *
p_tcb_ow√r
;

183 
CPU_TS
 
ts
;

184 
	`CPU_SR_ALLOC
();

188 #ifde‡
OS_SAFETY_CRITICAL


189 i‡(
p_îr
 =(
OS_ERR
 *)0) {

190 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

191  ((
OS_OBJ_QTY
)0);

195 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

196 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

197 *
p_îr
 = 
OS_ERR_DEL_ISR
;

198  ((
OS_OBJ_QTY
)0);

202 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

203 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

204 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

205  ((
OS_OBJ_QTY
)0);

207 
›t
) {

208 
OS_OPT_DEL_NO_PEND
:

209 
OS_OPT_DEL_ALWAYS
:

213 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

214  ((
OS_OBJ_QTY
)0);

218 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

219 i‡(
p_muãx
->
Ty≥
 !
OS_OBJ_TYPE_MUTEX
) {

220 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

221  ((
OS_OBJ_QTY
)0);

225 
	`OS_CRITICAL_ENTER
();

226 
p_≥nd_li°
 = &
p_muãx
->
PídLi°
;

227 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

228 
nbr_èsks
 = 
˙t
;

229 
›t
) {

230 
OS_OPT_DEL_NO_PEND
:

231 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

232 #i‡
OS_CFG_DBG_EN
 > 0u

233 
	`OS_MuãxDbgLi°Remove
(
p_muãx
);

235 
OSMuãxQty
--;

236 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

237 
	`TRACE_OS_MUTEX_DEL
(
p_muãx
);

239 
	`OS_MuãxCÃ
(
p_muãx
);

240 
	`OS_CRITICAL_EXIT
();

241 *
p_îr
 = 
OS_ERR_NONE
;

243 
	`OS_CRITICAL_EXIT
();

244 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

248 
OS_OPT_DEL_ALWAYS
:

249 
p_tcb_ow√r
 = 
p_muãx
->
Ow√rTCBPå
;

250 i‡((
p_tcb_ow√r
 !(
OS_TCB
 *)0) &&

251 (
p_tcb_ow√r
->
Prio
 !
p_muãx
->
Ow√rOrigöÆPrio
)) {

252 
p_tcb_ow√r
->
TaskSèã
) {

253 
OS_TASK_STATE_RDY
:

254 
	`OS_RdyLi°Remove
(
p_tcb_ow√r
);

255 
p_tcb_ow√r
->
Prio
 = 
p_muãx
->
Ow√rOrigöÆPrio
;

256 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

257 
	`TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT
(
p_tcb_ow√r
,Ö_tcb_ow√r->
Prio
)

259 
	`OS_PrioIn£π
(
p_tcb_ow√r
->
Prio
);

260 
	`OS_RdyLi°In£πTaû
(
p_tcb_ow√r
);

263 
OS_TASK_STATE_DLY
:

264 
OS_TASK_STATE_SUSPENDED
:

265 
OS_TASK_STATE_DLY_SUSPENDED
:

266 
p_tcb_ow√r
->
Prio
 = 
p_muãx
->
Ow√rOrigöÆPrio
;

267 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

268 
	`TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT
(
p_tcb_ow√r
,Ö_tcb_ow√r->
Prio
)

272 
OS_TASK_STATE_PEND
:

273 
OS_TASK_STATE_PEND_TIMEOUT
:

274 
OS_TASK_STATE_PEND_SUSPENDED
:

275 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

276 
	`OS_PídLi°Ch™gePrio
(
p_tcb_ow√r
,

277 
p_muãx
->
Ow√rOrigöÆPrio
);

278 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

279 
	`TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT
(
p_tcb_ow√r
,Ö_tcb_ow√r->
Prio
)

284 
	`OS_CRITICAL_EXIT
();

285 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

286  ((
OS_OBJ_QTY
)0);

290 
ts
 = 
	`OS_TS_GET
();

291 
˙t
 > 0u) {

292 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

293 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

294 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_muãx
),

295 
p_tcb
,

296 
ts
);

297 
˙t
--;

299 #i‡
OS_CFG_DBG_EN
 > 0u

300 
	`OS_MuãxDbgLi°Remove
(
p_muãx
);

302 
OSMuãxQty
--;

303 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

304 
	`TRACE_OS_MUTEX_DEL
(
p_muãx
);

306 
	`OS_MuãxCÃ
(
p_muãx
);

307 
	`OS_CRITICAL_EXIT_NO_SCHED
();

308 
	`OSSched
();

309 *
p_îr
 = 
OS_ERR_NONE
;

313 
	`OS_CRITICAL_EXIT
();

314 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

317  (
nbr_èsks
);

318 
	}
}

367 
	$OSMuãxPíd
 (
OS_MUTEX
 *
p_muãx
,

368 
OS_TICK
 
timeout
,

369 
OS_OPT
 
›t
,

370 
CPU_TS
 *
p_ts
,

371 
OS_ERR
 *
p_îr
)

373 
OS_PEND_DATA
 
≥nd_d©a
;

374 
OS_TCB
 *
p_tcb
;

375 
	`CPU_SR_ALLOC
();

379 #ifde‡
OS_SAFETY_CRITICAL


380 i‡(
p_îr
 =(
OS_ERR
 *)0) {

381 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

382 
	`TRACE_OS_MUTEX_PEND_FAILED
(
p_muãx
);

384 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

389 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

390 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

391 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

392 
	`TRACE_OS_MUTEX_PEND_FAILED
(
p_muãx
);

394 *
p_îr
 = 
OS_ERR_PEND_ISR
;

399 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

400 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

401 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

402 
	`TRACE_OS_MUTEX_PEND_FAILED
(
p_muãx
);

404 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

407 
›t
) {

408 
OS_OPT_PEND_BLOCKING
:

409 
OS_OPT_PEND_NON_BLOCKING
:

413 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

414 
	`TRACE_OS_MUTEX_PEND_FAILED
(
p_muãx
);

416 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

421 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

422 i‡(
p_muãx
->
Ty≥
 !
OS_OBJ_TYPE_MUTEX
) {

423 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

424 
	`TRACE_OS_MUTEX_PEND_FAILED
(
p_muãx
);

426 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

431 i‡(
p_ts
 !(
CPU_TS
 *)0) {

432 *
p_ts
 = (
CPU_TS
 )0;

435 
	`CPU_CRITICAL_ENTER
();

436 i‡(
p_muãx
->
Ow√rNe°ögCå
 =(
OS_NESTING_CTR
)0) {

437 
p_muãx
->
Ow√rTCBPå
 = 
OSTCBCurPå
;

438 
p_muãx
->
Ow√rOrigöÆPrio
 = 
OSTCBCurPå
->
Prio
;

439 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)1;

440 i‡(
p_ts
 !(
CPU_TS
 *)0) {

441 *
p_ts
 = 
p_muãx
->
TS
;

443 
	`CPU_CRITICAL_EXIT
();

444 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

445 
	`TRACE_OS_MUTEX_PEND
(
p_muãx
);

447 *
p_îr
 = 
OS_ERR_NONE
;

451 i‡(
OSTCBCurPå
 =
p_muãx
->
Ow√rTCBPå
) {

452 
p_muãx
->
Ow√rNe°ögCå
++;

453 i‡(
p_ts
 !(
CPU_TS
 *)0) {

454 *
p_ts
 = 
p_muãx
->
TS
;

456 
	`CPU_CRITICAL_EXIT
();

457 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

458 
	`TRACE_OS_MUTEX_PEND_FAILED
(
p_muãx
);

460 *
p_îr
 = 
OS_ERR_MUTEX_OWNER
;

464 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

465 
	`CPU_CRITICAL_EXIT
();

466 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

467 
	`TRACE_OS_MUTEX_PEND_FAILED
(
p_muãx
);

469 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

472 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

473 
	`CPU_CRITICAL_EXIT
();

474 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

475 
	`TRACE_OS_MUTEX_PEND_FAILED
(
p_muãx
);

477 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

482 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

483 
p_tcb
 = 
p_muãx
->
Ow√rTCBPå
;

484 i‡(
p_tcb
->
Prio
 > 
OSTCBCurPå
->Prio) {

485 
p_tcb
->
TaskSèã
) {

486 
OS_TASK_STATE_RDY
:

487 
	`OS_RdyLi°Remove
(
p_tcb
);

488 
p_tcb
->
Prio
 = 
OSTCBCurPå
->Prio;

489 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

490 
	`TRACE_OS_MUTEX_TASK_PRIO_INHERIT
(
p_tcb
,Ö_tcb->
Prio
);

492 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

493 
	`OS_RdyLi°In£πHód
(
p_tcb
);

496 
OS_TASK_STATE_DLY
:

497 
OS_TASK_STATE_DLY_SUSPENDED
:

498 
OS_TASK_STATE_SUSPENDED
:

499 
p_tcb
->
Prio
 = 
OSTCBCurPå
->Prio;

500 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

501 
	`TRACE_OS_MUTEX_TASK_PRIO_INHERIT
(
p_tcb
,Ö_tcb->
Prio
);

505 
OS_TASK_STATE_PEND
:

506 
OS_TASK_STATE_PEND_TIMEOUT
:

507 
OS_TASK_STATE_PEND_SUSPENDED
:

508 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

509 
	`OS_PídLi°Ch™gePrio
(
p_tcb
,

510 
OSTCBCurPå
->
Prio
);

511 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

512 
	`TRACE_OS_MUTEX_TASK_PRIO_INHERIT
(
p_tcb
,Ö_tcb->
Prio
);

517 
	`OS_CRITICAL_EXIT
();

518 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

523 
	`OS_Píd
(&
≥nd_d©a
,

524 (
OS_PEND_OBJ
 *)((*)
p_muãx
),

525 
OS_TASK_PEND_ON_MUTEX
,

526 
timeout
);

528 
	`OS_CRITICAL_EXIT_NO_SCHED
();

529 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

530 
	`TRACE_OS_MUTEX_PEND_BLOCK
(
p_muãx
);

532 
	`OSSched
();

534 
	`CPU_CRITICAL_ENTER
();

535 
OSTCBCurPå
->
PídSètus
) {

536 
OS_STATUS_PEND_OK
:

537 i‡(
p_ts
 !(
CPU_TS
 *)0) {

538 *
p_ts
 = 
OSTCBCurPå
->
TS
;

540 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

541 
	`TRACE_OS_MUTEX_PEND
(
p_muãx
);

543 *
p_îr
 = 
OS_ERR_NONE
;

546 
OS_STATUS_PEND_ABORT
:

547 i‡(
p_ts
 !(
CPU_TS
 *)0) {

548 *
p_ts
 = 
OSTCBCurPå
->
TS
;

550 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

551 
	`TRACE_OS_MUTEX_PEND_FAILED
(
p_muãx
);

553 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

556 
OS_STATUS_PEND_TIMEOUT
:

557 i‡(
p_ts
 !(
CPU_TS
 *)0) {

558 *
p_ts
 = (
CPU_TS
 )0;

560 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

561 
	`TRACE_OS_MUTEX_PEND_FAILED
(
p_muãx
);

563 *
p_îr
 = 
OS_ERR_TIMEOUT
;

566 
OS_STATUS_PEND_DEL
:

567 i‡(
p_ts
 !(
CPU_TS
 *)0) {

568 *
p_ts
 = 
OSTCBCurPå
->
TS
;

570 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

571 
	`TRACE_OS_MUTEX_PEND_FAILED
(
p_muãx
);

573 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

577 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

578 
	`TRACE_OS_MUTEX_PEND_FAILED
(
p_muãx
);

580 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

583 
	`CPU_CRITICAL_EXIT
();

584 
	}
}

618 #i‡
OS_CFG_MUTEX_PEND_ABORT_EN
 > 0u

619 
OS_OBJ_QTY
 
	$OSMuãxPídAb‹t
 (
OS_MUTEX
 *
p_muãx
,

620 
OS_OPT
 
›t
,

621 
OS_ERR
 *
p_îr
)

623 
OS_PEND_LIST
 *
p_≥nd_li°
;

624 
OS_TCB
 *
p_tcb
;

625 
OS_TCB
 *
p_tcb_ow√r
;

626 
CPU_TS
 
ts
;

627 
OS_OBJ_QTY
 
nbr_èsks
;

628 
OS_PRIO
 
√w_¥io
;

629 
	`CPU_SR_ALLOC
();

633 #ifde‡
OS_SAFETY_CRITICAL


634 i‡(
p_îr
 =(
OS_ERR
 *)0) {

635 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

636  ((
OS_OBJ_QTY
)0u);

640 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

641 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

642 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

643  ((
OS_OBJ_QTY
)0u);

647 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

648 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

649 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

650  ((
OS_OBJ_QTY
)0u);

652 
›t
) {

653 
OS_OPT_PEND_ABORT_1
:

654 
OS_OPT_PEND_ABORT_ALL
:

655 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

656 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

660 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

661  ((
OS_OBJ_QTY
)0u);

665 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

666 i‡(
p_muãx
->
Ty≥
 !
OS_OBJ_TYPE_MUTEX
) {

667 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

668  ((
OS_OBJ_QTY
)0u);

672 
	`CPU_CRITICAL_ENTER
();

673 
p_≥nd_li°
 = &
p_muãx
->
PídLi°
;

674 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

675 
	`CPU_CRITICAL_EXIT
();

676 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

677  ((
OS_OBJ_QTY
)0u);

680 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

681 
nbr_èsks
 = 0u;

682 
ts
 = 
	`OS_TS_GET
();

683 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

684 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

686 
p_tcb_ow√r
 = 
p_muãx
->
Ow√rTCBPå
;

687 
√w_¥io
 = 
p_tcb_ow√r
->
Prio
;

688 i‡((
p_tcb_ow√r
 !(
OS_TCB
 *)0) &&

689 (
p_tcb_ow√r
->
Prio
 !
p_muãx
->
Ow√rOrigöÆPrio
)) {

690 if(
p_≥nd_li°
->
HódPå
->
NextPå
 !(
OS_PEND_DATA
*)0u) {

691 
√w_¥io
 = 
p_≥nd_li°
->
HódPå
->
NextPå
->
TCBPå
->
Prio
;

693 
√w_¥io
 = 
p_muãx
->
Ow√rOrigöÆPrio
;

697 if(
√w_¥io
 !
p_tcb_ow√r
->
Prio
) {

698 
p_tcb_ow√r
->
TaskSèã
) {

699 
OS_TASK_STATE_RDY
:

700 
	`OS_RdyLi°Remove
(
p_tcb_ow√r
);

701 
p_tcb_ow√r
->
Prio
 = 
√w_¥io
;

702 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

703 
	`TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT
(
p_tcb_ow√r
,Ö_tcb_ow√r->
Prio
)

705 
	`OS_PrioIn£π
(
p_tcb_ow√r
->
Prio
);

706 
	`OS_RdyLi°In£πTaû
(
p_tcb_ow√r
);

709 
OS_TASK_STATE_DLY
:

710 
OS_TASK_STATE_SUSPENDED
:

711 
OS_TASK_STATE_DLY_SUSPENDED
:

712 
p_tcb_ow√r
->
Prio
 = 
√w_¥io
;

713 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

714 
	`TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT
(
p_tcb_ow√r
,Ö_tcb_ow√r->
Prio
)

718 
OS_TASK_STATE_PEND
:

719 
OS_TASK_STATE_PEND_TIMEOUT
:

720 
OS_TASK_STATE_PEND_SUSPENDED
:

721 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

722 
	`OS_PídLi°Ch™gePrio
(
p_tcb_ow√r
,

723 
√w_¥io
);

724 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

725 
	`TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT
(
p_tcb_ow√r
,Ö_tcb_ow√r->
Prio
)

730 
	`OS_CRITICAL_EXIT
();

735 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_muãx
),

736 
p_tcb
,

737 
ts
);

738 
nbr_èsks
++;

739 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

743 
	`OS_CRITICAL_EXIT_NO_SCHED
();

745 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

746 
	`OSSched
();

749 *
p_îr
 = 
OS_ERR_NONE
;

750  (
nbr_èsks
);

751 
	}
}

781 
	$OSMuãxPo°
 (
OS_MUTEX
 *
p_muãx
,

782 
OS_OPT
 
›t
,

783 
OS_ERR
 *
p_îr
)

785 
OS_PEND_LIST
 *
p_≥nd_li°
;

786 
OS_TCB
 *
p_tcb
;

787 
CPU_TS
 
ts
;

788 
	`CPU_SR_ALLOC
();

792 #ifde‡
OS_SAFETY_CRITICAL


793 i‡(
p_îr
 =(
OS_ERR
 *)0) {

794 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

795 
	`TRACE_OS_MUTEX_POST_FAILED
(
p_muãx
);

797 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

802 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

803 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

804 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

805 
	`TRACE_OS_MUTEX_POST_FAILED
(
p_muãx
);

807 *
p_îr
 = 
OS_ERR_POST_ISR
;

812 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

813 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

814 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

815 
	`TRACE_OS_MUTEX_POST_FAILED
(
p_muãx
);

817 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

820 
›t
) {

821 
OS_OPT_POST_NONE
:

822 
OS_OPT_POST_NO_SCHED
:

826 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

827 
	`TRACE_OS_MUTEX_POST_FAILED
(
p_muãx
);

829 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

834 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

835 i‡(
p_muãx
->
Ty≥
 !
OS_OBJ_TYPE_MUTEX
) {

836 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

837 
	`TRACE_OS_MUTEX_POST_FAILED
(
p_muãx
);

839 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

844 
	`CPU_CRITICAL_ENTER
();

845 i‡(
OSTCBCurPå
 !
p_muãx
->
Ow√rTCBPå
) {

846 
	`CPU_CRITICAL_EXIT
();

847 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

848 
	`TRACE_OS_MUTEX_POST_FAILED
(
p_muãx
);

850 *
p_îr
 = 
OS_ERR_MUTEX_NOT_OWNER
;

854 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

855 
	`TRACE_OS_MUTEX_POST
(
p_muãx
);

858 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

859 
ts
 = 
	`OS_TS_GET
();

860 
p_muãx
->
TS
 = 
ts
;

861 
p_muãx
->
Ow√rNe°ögCå
--;

862 i‡(
p_muãx
->
Ow√rNe°ögCå
 > (
OS_NESTING_CTR
)0) {

863 
	`OS_CRITICAL_EXIT
();

864 *
p_îr
 = 
OS_ERR_MUTEX_NESTING
;

868 
p_≥nd_li°
 = &
p_muãx
->
PídLi°
;

869 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

870 
p_muãx
->
Ow√rTCBPå
 = (
OS_TCB
 *)0;

871 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)0;

872 
	`OS_CRITICAL_EXIT
();

873 *
p_îr
 = 
OS_ERR_NONE
;

877 i‡(
OSTCBCurPå
->
Prio
 !
p_muãx
->
Ow√rOrigöÆPrio
) {

878 
	`OS_RdyLi°Remove
(
OSTCBCurPå
);

879 
OSTCBCurPå
->
Prio
 = 
p_muãx
->
Ow√rOrigöÆPrio
;

880 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

881 
	`TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT
(
OSTCBCurPå
, OSTCBCurPå->
Prio
);

883 
	`OS_PrioIn£π
(
OSTCBCurPå
->
Prio
);

884 
	`OS_RdyLi°In£πTaû
(
OSTCBCurPå
);

885 
OSPrioCur
 = 
OSTCBCurPå
->
Prio
;

888 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

889 
p_muãx
->
Ow√rTCBPå
 = 
p_tcb
;

890 
p_muãx
->
Ow√rOrigöÆPrio
 = 
p_tcb
->
Prio
;

891 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)1;

893 
	`OS_Po°
((
OS_PEND_OBJ
 *)((*)
p_muãx
),

894 (
OS_TCB
 *)
p_tcb
,

896 (
OS_MSG_SIZE
 )0,

897 (
CPU_TS
 )
ts
);

899 
	`OS_CRITICAL_EXIT_NO_SCHED
();

901 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

902 
	`OSSched
();

905 *
p_îr
 = 
OS_ERR_NONE
;

906 
	}
}

925 
	$OS_MuãxCÃ
 (
OS_MUTEX
 *
p_muãx
)

927 #i‡
OS_OBJ_TYPE_REQ
 > 0u

928 
p_muãx
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

930 #i‡
OS_CFG_DBG_EN
 > 0u

931 
p_muãx
->
NamePå
 = (
CPU_CHAR
 *)((*)"?MUTEX");

933 
p_muãx
->
Ow√rTCBPå
 = (
OS_TCB
 *)0;

934 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)0;

935 
p_muãx
->
TS
 = (
CPU_TS
 )0;

936 
p_muãx
->
Ow√rOrigöÆPrio
 = 
OS_CFG_PRIO_MAX
;

937 
	`OS_PídLi°Inô
(&
p_muãx
->
PídLi°
);

938 
	}
}

956 #i‡
OS_CFG_DBG_EN
 > 0u

957 
	$OS_MuãxDbgLi°Add
 (
OS_MUTEX
 *
p_muãx
)

959 
p_muãx
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

960 
p_muãx
->
DbgPªvPå
 = (
OS_MUTEX
 *)0;

961 i‡(
OSMuãxDbgLi°På
 =(
OS_MUTEX
 *)0) {

962 
p_muãx
->
DbgNextPå
 = (
OS_MUTEX
 *)0;

964 
p_muãx
->
DbgNextPå
 = 
OSMuãxDbgLi°På
;

965 
OSMuãxDbgLi°På
->
DbgPªvPå
 = 
p_muãx
;

967 
OSMuãxDbgLi°På
 = 
p_muãx
;

968 
	}
}

972 
	$OS_MuãxDbgLi°Remove
 (
OS_MUTEX
 *
p_muãx
)

974 
OS_MUTEX
 *
p_muãx_√xt
;

975 
OS_MUTEX
 *
p_muãx_¥ev
;

978 
p_muãx_¥ev
 = 
p_muãx
->
DbgPªvPå
;

979 
p_muãx_√xt
 = 
p_muãx
->
DbgNextPå
;

981 i‡(
p_muãx_¥ev
 =(
OS_MUTEX
 *)0) {

982 
OSMuãxDbgLi°På
 = 
p_muãx_√xt
;

983 i‡(
p_muãx_√xt
 !(
OS_MUTEX
 *)0) {

984 
p_muãx_√xt
->
DbgPªvPå
 = (
OS_MUTEX
 *)0;

986 
p_muãx
->
DbgNextPå
 = (
OS_MUTEX
 *)0;

988 } i‡(
p_muãx_√xt
 =(
OS_MUTEX
 *)0) {

989 
p_muãx_¥ev
->
DbgNextPå
 = (
OS_MUTEX
 *)0;

990 
p_muãx
->
DbgPªvPå
 = (
OS_MUTEX
 *)0;

993 
p_muãx_¥ev
->
DbgNextPå
 = 
p_muãx_√xt
;

994 
p_muãx_√xt
->
DbgPªvPå
 = 
p_muãx_¥ev
;

995 
p_muãx
->
DbgNextPå
 = (
OS_MUTEX
 *)0;

996 
p_muãx
->
DbgPªvPå
 = (
OS_MUTEX
 *)0;

998 
	}
}

1019 
	$OS_MuãxInô
 (
OS_ERR
 *
p_îr
)

1021 #ifde‡
OS_SAFETY_CRITICAL


1022 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1023 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1028 #i‡
OS_CFG_DBG_EN
 > 0u

1029 
OSMuãxDbgLi°På
 = (
OS_MUTEX
 *)0;

1032 
OSMuãxQty
 = (
OS_OBJ_QTY
)0;

1033 *
p_îr
 = 
OS_ERR_NONE
;

1034 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_pend_multi.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_≥nd_mu…i__c
 = "$Id: $";

43 #i‡(((
OS_CFG_Q_EN
 > 0uË|| (
OS_CFG_SEM_EN
 > 0u)Ë&& (
OS_CFG_PEND_MULTI_EN
 > 0u))

123 
OS_OBJ_QTY
 
	$OSPídMu…i
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

124 
OS_OBJ_QTY
 
tbl_size
,

125 
OS_TICK
 
timeout
,

126 
OS_OPT
 
›t
,

127 
OS_ERR
 *
p_îr
)

129 
CPU_BOOLEAN
 
vÆid
;

130 
OS_OBJ_QTY
 
nbr_obj_rdy
;

131 
	`CPU_SR_ALLOC
();

135 #ifde‡
OS_SAFETY_CRITICAL


136 i‡(
p_îr
 =(
OS_ERR
 *)0) {

137 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

138  ((
OS_OBJ_QTY
)0);

142 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

143 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

144 *
p_îr
 = 
OS_ERR_PEND_ISR
;

145  ((
OS_OBJ_QTY
)0);

149 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

150 i‡(
p_≥nd_d©a_tbl
 =(
OS_PEND_DATA
 *)0) {

151 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

152  ((
OS_OBJ_QTY
)0);

154 i‡(
tbl_size
 =(
OS_OBJ_QTY
)0) {

155 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

156  ((
OS_OBJ_QTY
)0);

158 
›t
) {

159 
OS_OPT_PEND_BLOCKING
:

160 
OS_OPT_PEND_NON_BLOCKING
:

164 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

165  ((
OS_OBJ_QTY
)0);

169 
vÆid
 = 
	`OS_PídMu…iVÆid©e
(
p_≥nd_d©a_tbl
,

170 
tbl_size
);

171 i‡(
vÆid
 =
DEF_FALSE
) {

172 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

173  ((
OS_OBJ_QTY
)0);

177 
	`CPU_CRITICAL_ENTER
();

178 
nbr_obj_rdy
 = 
	`OS_PídMu…iGëRdy
(
p_≥nd_d©a_tbl
,

179 
tbl_size
);

180 i‡(
nbr_obj_rdy
 > (
OS_OBJ_QTY
)0) {

181 
	`CPU_CRITICAL_EXIT
();

182 *
p_îr
 = 
OS_ERR_NONE
;

183  ((
OS_OBJ_QTY
)
nbr_obj_rdy
);

186 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

187 
	`CPU_CRITICAL_EXIT
();

188 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

189  ((
OS_OBJ_QTY
)0);

191 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

192 
	`CPU_CRITICAL_EXIT
();

193 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

194  ((
OS_OBJ_QTY
)0);

198 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

200 
	`OS_PídMu…iWaô
(
p_≥nd_d©a_tbl
,

201 
tbl_size
,

202 
timeout
);

204 
	`OS_CRITICAL_EXIT_NO_SCHED
();

206 
	`OSSched
();

208 
	`CPU_CRITICAL_ENTER
();

209 
OSTCBCurPå
->
PídSètus
) {

210 
OS_STATUS_PEND_OK
:

211 *
p_îr
 = 
OS_ERR_NONE
;

214 
OS_STATUS_PEND_ABORT
:

215 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

218 
OS_STATUS_PEND_TIMEOUT
:

219 *
p_îr
 = 
OS_ERR_TIMEOUT
;

222 
OS_STATUS_PEND_DEL
:

223 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

227 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

231 
OSTCBCurPå
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

232 
	`CPU_CRITICAL_EXIT
();

234  ((
OS_OBJ_QTY
)1);

235 
	}
}

256 
OS_OBJ_QTY
 
	$OS_PídMu…iGëRdy
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

257 
OS_OBJ_QTY
 
tbl_size
)

259 
OS_OBJ_QTY
 
i
;

260 
OS_OBJ_QTY
 
nbr_obj_rdy
;

261 #i‡
OS_CFG_Q_EN
 > 0u

262 
OS_ERR
 
îr
;

263 
OS_MSG_SIZE
 
msg_size
;

264 
OS_Q
 *
p_q
;

265 *
p_void
;

266 
CPU_TS
 
ts
;

268 #i‡
OS_CFG_SEM_EN
 > 0u

269 
OS_SEM
 *
p_£m
;

274 
nbr_obj_rdy
 = (
OS_OBJ_QTY
)0;

275 
i
 = 0u; i < 
tbl_size
; i++) {

276 
p_≥nd_d©a_tbl
->
RdyObjPå
 = (
OS_PEND_OBJ
 *)0;

277 
p_≥nd_d©a_tbl
->
RdyMsgPå
 = (*)0;

278 
p_≥nd_d©a_tbl
->
RdyMsgSize
 = (
OS_MSG_SIZE
 )0;

279 
p_≥nd_d©a_tbl
->
RdyTS
 = (
CPU_TS
 )0;

280 
p_≥nd_d©a_tbl
->
NextPå
 = (
OS_PEND_DATA
 *)0;

281 
p_≥nd_d©a_tbl
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

282 
p_≥nd_d©a_tbl
->
TCBPå
 = (
OS_TCB
 *)0;

283 #i‡
OS_CFG_Q_EN
 > 0u

284 
p_q
 = (
OS_Q
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

285 i‡(
p_q
->
Ty≥
 =
OS_OBJ_TYPE_Q
) {

286 
p_void
 = 
	`OS_MsgQGë
(&
p_q
->
MsgQ
,

287 &
msg_size
,

288 &
ts
,

289 &
îr
);

290 i‡(
îr
 =
OS_ERR_NONE
) {

291 
p_≥nd_d©a_tbl
->
RdyObjPå
 =Ö_≥nd_d©a_tbl->
PídObjPå
;

292 
p_≥nd_d©a_tbl
->
RdyMsgPå
 = 
p_void
;

293 
p_≥nd_d©a_tbl
->
RdyMsgSize
 = 
msg_size
;

294 
p_≥nd_d©a_tbl
->
RdyTS
 = 
ts
;

295 
nbr_obj_rdy
++;

300 #i‡
OS_CFG_SEM_EN
 > 0u

301 
p_£m
 = (
OS_SEM
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

302 i‡(
p_£m
->
Ty≥
 =
OS_OBJ_TYPE_SEM
) {

303 i‡(
p_£m
->
Cå
 > 0u) {

304 
p_£m
->
Cå
--;

305 
p_≥nd_d©a_tbl
->
RdyObjPå
 =Ö_≥nd_d©a_tbl->
PídObjPå
;

306 
p_≥nd_d©a_tbl
->
RdyTS
 = 
p_£m
->
TS
;

307 
nbr_obj_rdy
++;

312 
p_≥nd_d©a_tbl
++;

314  (
nbr_obj_rdy
);

315 
	}
}

337 
CPU_BOOLEAN
 
	$OS_PídMu…iVÆid©e
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

338 
OS_OBJ_QTY
 
tbl_size
)

340 
OS_OBJ_QTY
 
i
;

341 
OS_OBJ_QTY
 
˘r
;

342 #i‡
OS_CFG_SEM_EN
 > 0u

343 
OS_SEM
 *
p_£m
;

345 #i‡
OS_CFG_Q_EN
 > 0u

346 
OS_Q
 *
p_q
;

350 
i
 = 0u; i < 
tbl_size
; i++) {

351 i‡(
p_≥nd_d©a_tbl
->
PídObjPå
 =(
OS_PEND_OBJ
 *)0) {

352  (
DEF_FALSE
);

355 
˘r
 = 0u;

356 #i‡
OS_CFG_SEM_EN
 > 0u

357 
p_£m
 = (
OS_SEM
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

358 i‡(
p_£m
->
Ty≥
 =
OS_OBJ_TYPE_SEM
) {

359 
˘r
++;

363 #i‡
OS_CFG_Q_EN
 > 0u

364 
p_q
 = (
OS_Q
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

365 i‡(
p_q
->
Ty≥
 =
OS_OBJ_TYPE_Q
) {

366 
˘r
++;

370 i‡(
˘r
 =(
OS_OBJ_QTY
)0) {

371  (
DEF_FALSE
);

373 
p_≥nd_d©a_tbl
++;

375  (
DEF_TRUE
);

376 
	}
}

399 
	$OS_PídMu…iWaô
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

400 
OS_OBJ_QTY
 
tbl_size
,

401 
OS_TICK
 
timeout
)

403 
OS_OBJ_QTY
 
i
;

404 
OS_PEND_LIST
 *
p_≥nd_li°
;

406 #i‡
OS_CFG_Q_EN
 > 0u

407 
OS_Q
 *
p_q
;

410 #i‡
OS_CFG_SEM_EN
 > 0u

411 
OS_SEM
 *
p_£m
;

416 
OSTCBCurPå
->
PídOn
 = 
OS_TASK_PEND_ON_MULTI
;

417 
OSTCBCurPå
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

418 
OSTCBCurPå
->
PídD©aTblE¡rõs
 = 
tbl_size
;

419 
OSTCBCurPå
->
PídD©aTblPå
 = 
p_≥nd_d©a_tbl
;

421 
	`OS_TaskBlock
(
OSTCBCurPå
,

422 
timeout
);

424 
i
 = 0u; i < 
tbl_size
; i++) {

425 
p_≥nd_d©a_tbl
->
TCBPå
 = 
OSTCBCurPå
;

427 #i‡
OS_CFG_SEM_EN
 > 0u

428 
p_£m
 = (
OS_SEM
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

429 i‡(
p_£m
->
Ty≥
 =
OS_OBJ_TYPE_SEM
) {

430 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

431 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

432 
p_≥nd_d©a_tbl
);

436 #i‡
OS_CFG_Q_EN
 > 0u

437 
p_q
 = (
OS_Q
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

438 i‡(
p_q
->
Ty≥
 =
OS_OBJ_TYPE_Q
) {

439 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

440 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

441 
p_≥nd_d©a_tbl
);

445 
p_≥nd_d©a_tbl
++;

447 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_prio.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_¥io__c
 = "$Id: $";

43 
CPU_DATA
 
	gOSPrioTbl
[
OS_PRIO_TBL_SIZE
];

61 
	$OS_PrioInô
 ()

63 
CPU_DATA
 
i
;

67 
i
 = 0u; i < 
OS_PRIO_TBL_SIZE
; i++) {

68 
OSPrioTbl
[
i
] = (
CPU_DATA
)0;

70 
	}
}

87 
OS_PRIO
 
	$OS_PrioGëHighe°
 ()

89 
CPU_DATA
 *
p_tbl
;

90 
OS_PRIO
 
¥io
;

93 
¥io
 = (
OS_PRIO
)0;

94 
p_tbl
 = &
OSPrioTbl
[0];

95 *
p_tbl
 =(
CPU_DATA
)0) {

96 
¥io
 +
DEF_INT_CPU_NBR_BITS
;

97 
p_tbl
++;

99 
¥io
 +(
OS_PRIO
)
	`CPU_C¡LódZîos
(*
p_tbl
);

100  (
¥io
);

101 
	}
}

117 
	$OS_PrioIn£π
 (
OS_PRIO
 
¥io
)

119 
CPU_DATA
 
bô
;

120 
CPU_DATA
 
bô_nbr
;

121 
OS_PRIO
 
ix
;

124 
ix
 = 
¥io
 / 
DEF_INT_CPU_NBR_BITS
;

125 
bô_nbr
 = (
CPU_DATA
)
¥io
 & (
DEF_INT_CPU_NBR_BITS
 - 1u);

126 
bô
 = 1u;

127 
bô
 <<(
DEF_INT_CPU_NBR_BITS
 - 1uË- 
bô_nbr
;

128 
OSPrioTbl
[
ix
] |
bô
;

129 
	}
}

145 
	$OS_PrioRemove
 (
OS_PRIO
 
¥io
)

147 
CPU_DATA
 
bô
;

148 
CPU_DATA
 
bô_nbr
;

149 
OS_PRIO
 
ix
;

152 
ix
 = 
¥io
 / 
DEF_INT_CPU_NBR_BITS
;

153 
bô_nbr
 = (
CPU_DATA
)
¥io
 & (
DEF_INT_CPU_NBR_BITS
 - 1u);

154 
bô
 = 1u;

155 
bô
 <<(
DEF_INT_CPU_NBR_BITS
 - 1uË- 
bô_nbr
;

156 
OSPrioTbl
[
ix
] &~
bô
;

157 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_q.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_q__c
 = "$Id: $";

43 #i‡
OS_CFG_Q_EN
 > 0u

73 
	$OSQCª©e
 (
OS_Q
 *
p_q
,

74 
CPU_CHAR
 *
p_«me
,

75 
OS_MSG_QTY
 
max_qty
,

76 
OS_ERR
 *
p_îr
)

79 
	`CPU_SR_ALLOC
();

83 #ifde‡
OS_SAFETY_CRITICAL


84 i‡(
p_îr
 =(
OS_ERR
 *)0) {

85 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

90 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


91 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

92 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

97 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

98 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

99 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

104 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

105 i‡(
p_q
 =(
OS_Q
 *)0) {

106 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

109 i‡(
max_qty
 =(
OS_MSG_QTY
)0) {

110 *
p_îr
 = 
OS_ERR_Q_SIZE
;

115 
	`OS_CRITICAL_ENTER
();

116 #i‡
OS_OBJ_TYPE_REQ
 > 0u

117 
p_q
->
Ty≥
 = 
OS_OBJ_TYPE_Q
;

119 #i‡
OS_CFG_DBG_EN
 > 0u

120 
p_q
->
NamePå
 = 
p_«me
;

122 ()&
p_«me
;

124 
	`OS_MsgQInô
(&
p_q
->
MsgQ
,

125 
max_qty
);

126 
	`OS_PídLi°Inô
(&
p_q
->
PídLi°
);

128 #i‡
OS_CFG_DBG_EN
 > 0u

129 
	`OS_QDbgLi°Add
(
p_q
);

131 
OSQQty
++;

132 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

133 
	`TRACE_OS_Q_CREATE
(
p_q
, 
p_«me
);

135 
	`OS_CRITICAL_EXIT_NO_SCHED
();

136 *
p_îr
 = 
OS_ERR_NONE
;

137 
	}
}

174 #i‡
OS_CFG_Q_DEL_EN
 > 0u

175 
OS_OBJ_QTY
 
	$OSQDñ
 (
OS_Q
 *
p_q
,

176 
OS_OPT
 
›t
,

177 
OS_ERR
 *
p_îr
)

179 
OS_OBJ_QTY
 
˙t
;

180 
OS_OBJ_QTY
 
nbr_èsks
;

181 
OS_PEND_DATA
 *
p_≥nd_d©a
;

182 
OS_PEND_LIST
 *
p_≥nd_li°
;

183 
OS_TCB
 *
p_tcb
;

184 
CPU_TS
 
ts
;

185 
	`CPU_SR_ALLOC
();

189 #ifde‡
OS_SAFETY_CRITICAL


190 i‡(
p_îr
 =(
OS_ERR
 *)0) {

191 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

192  ((
OS_OBJ_QTY
)0);

196 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

197 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

198 *
p_îr
 = 
OS_ERR_DEL_ISR
;

199  ((
OS_OBJ_QTY
)0);

203 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

204 i‡(
p_q
 =(
OS_Q
 *)0) {

205 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

206  ((
OS_OBJ_QTY
)0u);

208 
›t
) {

209 
OS_OPT_DEL_NO_PEND
:

210 
OS_OPT_DEL_ALWAYS
:

214 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

215  ((
OS_OBJ_QTY
)0u);

219 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

220 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

221 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

222  ((
OS_OBJ_QTY
)0);

226 
	`CPU_CRITICAL_ENTER
();

227 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

228 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

229 
nbr_èsks
 = 
˙t
;

230 
›t
) {

231 
OS_OPT_DEL_NO_PEND
:

232 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

233 #i‡
OS_CFG_DBG_EN
 > 0u

234 
	`OS_QDbgLi°Remove
(
p_q
);

236 
OSQQty
--;

237 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

238 
	`TRACE_OS_Q_DEL
(
p_q
);

240 
	`OS_QCÃ
(
p_q
);

241 
	`CPU_CRITICAL_EXIT
();

242 *
p_îr
 = 
OS_ERR_NONE
;

244 
	`CPU_CRITICAL_EXIT
();

245 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

249 
OS_OPT_DEL_ALWAYS
:

250 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

251 
ts
 = 
	`OS_TS_GET
();

252 
˙t
 > 0u) {

253 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

254 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

255 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_q
),

256 
p_tcb
,

257 
ts
);

258 
˙t
--;

260 #i‡
OS_CFG_DBG_EN
 > 0u

261 
	`OS_QDbgLi°Remove
(
p_q
);

263 
OSQQty
--;

264 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

265 
	`TRACE_OS_Q_DEL
(
p_q
);

267 
	`OS_QCÃ
(
p_q
);

268 
	`OS_CRITICAL_EXIT_NO_SCHED
();

269 
	`OSSched
();

270 *
p_îr
 = 
OS_ERR_NONE
;

274 
	`CPU_CRITICAL_EXIT
();

275 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

278  (
nbr_èsks
);

279 
	}
}

307 #i‡
OS_CFG_Q_FLUSH_EN
 > 0u

308 
OS_MSG_QTY
 
	$OSQFlush
 (
OS_Q
 *
p_q
,

309 
OS_ERR
 *
p_îr
)

311 
OS_MSG_QTY
 
íåõs
;

312 
	`CPU_SR_ALLOC
();

316 #ifde‡
OS_SAFETY_CRITICAL


317 i‡(
p_îr
 =(
OS_ERR
 *)0) {

318 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

319  ((
OS_MSG_QTY
)0);

323 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

324 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

325 *
p_îr
 = 
OS_ERR_FLUSH_ISR
;

326  ((
OS_MSG_QTY
)0);

330 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

331 i‡(
p_q
 =(
OS_Q
 *)0) {

332 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

333  ((
OS_MSG_QTY
)0);

337 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

338 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

339 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

340  ((
OS_MSG_QTY
)0);

344 
	`OS_CRITICAL_ENTER
();

345 
íåõs
 = 
	`OS_MsgQFªeAŒ
(&
p_q
->
MsgQ
);

346 
	`OS_CRITICAL_EXIT
();

347 *
p_îr
 = 
OS_ERR_NONE
;

348  ((
OS_MSG_QTY
)
íåõs
);

349 
	}
}

398 *
	$OSQPíd
 (
OS_Q
 *
p_q
,

399 
OS_TICK
 
timeout
,

400 
OS_OPT
 
›t
,

401 
OS_MSG_SIZE
 *
p_msg_size
,

402 
CPU_TS
 *
p_ts
,

403 
OS_ERR
 *
p_îr
)

405 
OS_PEND_DATA
 
≥nd_d©a
;

406 *
p_void
;

407 
	`CPU_SR_ALLOC
();

411 #ifde‡
OS_SAFETY_CRITICAL


412 i‡(
p_îr
 =(
OS_ERR
 *)0) {

413 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

414 
	`TRACE_OS_Q_PEND_FAILED
(
p_q
);

416 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

421 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

422 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

423 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

424 
	`TRACE_OS_Q_PEND_FAILED
(
p_q
);

426 *
p_îr
 = 
OS_ERR_PEND_ISR
;

431 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

432 i‡(
p_q
 =(
OS_Q
 *)0) {

433 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

434 
	`TRACE_OS_Q_PEND_FAILED
(
p_q
);

436 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

439 i‡(
p_msg_size
 =(
OS_MSG_SIZE
 *)0) {

440 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

441 
	`TRACE_OS_Q_PEND_FAILED
(
p_q
);

443 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

446 
›t
) {

447 
OS_OPT_PEND_BLOCKING
:

448 
OS_OPT_PEND_NON_BLOCKING
:

452 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

453 
	`TRACE_OS_Q_PEND_FAILED
(
p_q
);

455 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

460 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

461 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

462 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

463 
	`TRACE_OS_Q_PEND_FAILED
(
p_q
);

465 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

470 i‡(
p_ts
 !(
CPU_TS
 *)0) {

471 *
p_ts
 = (
CPU_TS
 )0;

474 
	`CPU_CRITICAL_ENTER
();

475 
p_void
 = 
	`OS_MsgQGë
(&
p_q
->
MsgQ
,

476 
p_msg_size
,

477 
p_ts
,

478 
p_îr
);

479 i‡(*
p_îr
 =
OS_ERR_NONE
) {

480 
	`CPU_CRITICAL_EXIT
();

481 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

482 
	`TRACE_OS_Q_PEND
(
p_q
);

484  (
p_void
);

487 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

488 
	`CPU_CRITICAL_EXIT
();

489 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

490 
	`TRACE_OS_Q_PEND_FAILED
(
p_q
);

492 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

495 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

496 
	`CPU_CRITICAL_EXIT
();

497 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

498 
	`TRACE_OS_Q_PEND_FAILED
(
p_q
);

500 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

505 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

506 
	`OS_Píd
(&
≥nd_d©a
,

507 (
OS_PEND_OBJ
 *)((*)
p_q
),

508 
OS_TASK_PEND_ON_Q
,

509 
timeout
);

510 
	`OS_CRITICAL_EXIT_NO_SCHED
();

511 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

512 
	`TRACE_OS_Q_PEND_BLOCK
(
p_q
);

514 
	`OSSched
();

516 
	`CPU_CRITICAL_ENTER
();

517 
OSTCBCurPå
->
PídSètus
) {

518 
OS_STATUS_PEND_OK
:

519 
p_void
 = 
OSTCBCurPå
->
MsgPå
;

520 *
p_msg_size
 = 
OSTCBCurPå
->
MsgSize
;

521 i‡(
p_ts
 !(
CPU_TS
 *)0) {

522 *
p_ts
 = 
OSTCBCurPå
->
TS
;

524 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

525 
	`TRACE_OS_Q_PEND
(
p_q
);

527 *
p_îr
 = 
OS_ERR_NONE
;

530 
OS_STATUS_PEND_ABORT
:

531 
p_void
 = (*)0;

532 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

533 i‡(
p_ts
 !(
CPU_TS
 *)0) {

534 *
p_ts
 = 
OSTCBCurPå
->
TS
;

536 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

537 
	`TRACE_OS_Q_PEND_FAILED
(
p_q
);

539 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

542 
OS_STATUS_PEND_TIMEOUT
:

543 
p_void
 = (*)0;

544 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

545 i‡(
p_ts
 !(
CPU_TS
 *)0) {

546 *
p_ts
 = (
CPU_TS
 )0;

548 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

549 
	`TRACE_OS_Q_PEND_FAILED
(
p_q
);

551 *
p_îr
 = 
OS_ERR_TIMEOUT
;

554 
OS_STATUS_PEND_DEL
:

555 
p_void
 = (*)0;

556 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

557 i‡(
p_ts
 !(
CPU_TS
 *)0) {

558 *
p_ts
 = 
OSTCBCurPå
->
TS
;

560 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

561 
	`TRACE_OS_Q_PEND_FAILED
(
p_q
);

563 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

567 
p_void
 = (*)0;

568 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

569 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

570 
	`TRACE_OS_Q_PEND_FAILED
(
p_q
);

572 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

575 
	`CPU_CRITICAL_EXIT
();

576  (
p_void
);

577 
	}
}

611 #i‡
OS_CFG_Q_PEND_ABORT_EN
 > 0u

612 
OS_OBJ_QTY
 
	$OSQPídAb‹t
 (
OS_Q
 *
p_q
,

613 
OS_OPT
 
›t
,

614 
OS_ERR
 *
p_îr
)

616 
OS_PEND_LIST
 *
p_≥nd_li°
;

617 
OS_TCB
 *
p_tcb
;

618 
CPU_TS
 
ts
;

619 
OS_OBJ_QTY
 
nbr_èsks
;

620 
	`CPU_SR_ALLOC
();

624 #ifde‡
OS_SAFETY_CRITICAL


625 i‡(
p_îr
 =(
OS_ERR
 *)0) {

626 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

627  ((
OS_OBJ_QTY
)0u);

631 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

632 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

633 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

634  ((
OS_OBJ_QTY
)0u);

638 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

639 i‡(
p_q
 =(
OS_Q
 *)0) {

640 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

641  ((
OS_OBJ_QTY
)0u);

643 
›t
) {

644 
OS_OPT_PEND_ABORT_1
:

645 
OS_OPT_PEND_ABORT_ALL
:

646 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

647 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

651 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

652  ((
OS_OBJ_QTY
)0u);

656 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

657 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

658 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

659  ((
OS_OBJ_QTY
)0u);

663 
	`CPU_CRITICAL_ENTER
();

664 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

665 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

666 
	`CPU_CRITICAL_EXIT
();

667 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

668  ((
OS_OBJ_QTY
)0u);

671 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

672 
nbr_èsks
 = 0u;

673 
ts
 = 
	`OS_TS_GET
();

674 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

675 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

676 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_q
),

677 
p_tcb
,

678 
ts
);

679 
nbr_èsks
++;

680 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

684 
	`OS_CRITICAL_EXIT_NO_SCHED
();

686 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

687 
	`OSSched
();

690 *
p_îr
 = 
OS_ERR_NONE
;

691  (
nbr_èsks
);

692 
	}
}

745 
	$OSQPo°
 (
OS_Q
 *
p_q
,

746 *
p_void
,

747 
OS_MSG_SIZE
 
msg_size
,

748 
OS_OPT
 
›t
,

749 
OS_ERR
 *
p_îr
)

751 
CPU_TS
 
ts
;

755 #ifde‡
OS_SAFETY_CRITICAL


756 i‡(
p_îr
 =(
OS_ERR
 *)0) {

757 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

758 
	`TRACE_OS_Q_POST_FAILED
(
p_q
);

760 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

765 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

766 i‡(
p_q
 =(
OS_Q
 *)0) {

767 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

768 
	`TRACE_OS_Q_POST_FAILED
(
p_q
);

770 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

773 
›t
) {

774 
OS_OPT_POST_FIFO
:

775 
OS_OPT_POST_LIFO
:

776 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_ALL
:

777 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_ALL
:

778 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_NO_SCHED
:

779 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_NO_SCHED
:

780 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_ALL
 | 
OS_OPT_POST_NO_SCHED
:

781 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_ALL
 | 
OS_OPT_POST_NO_SCHED
:

785 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

786 
	`TRACE_OS_Q_POST_FAILED
(
p_q
);

788 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

793 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

794 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

795 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

796 
	`TRACE_OS_Q_POST_FAILED
(
p_q
);

798 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

803 
ts
 = 
	`OS_TS_GET
();

805 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

806 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

807 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_Q
,

808 (*)
p_q
,

809 (*)
p_void
,

810 (
OS_MSG_SIZE
)
msg_size
,

811 (
OS_FLAGS
 )0,

812 (
OS_OPT
 )
›t
,

813 (
CPU_TS
 )
ts
,

814 (
OS_ERR
 *)
p_îr
);

818 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

819 
	`TRACE_OS_Q_POST
(
p_q
);

821 
	`OS_QPo°
(
p_q
,

822 
p_void
,

823 
msg_size
,

824 
›t
,

825 
ts
,

826 
p_îr
);

827 
	}
}

846 
	$OS_QCÃ
 (
OS_Q
 *
p_q
)

848 ()
	`OS_MsgQFªeAŒ
(&
p_q
->
MsgQ
);

849 #i‡
OS_OBJ_TYPE_REQ
 > 0u

850 
p_q
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

852 #i‡
OS_CFG_DBG_EN
 > 0u

853 
p_q
->
NamePå
 = (
CPU_CHAR
 *)((*)"?Q");

855 
	`OS_MsgQInô
(&
p_q
->
MsgQ
,

857 
	`OS_PídLi°Inô
(&
p_q
->
PídLi°
);

858 
	}
}

877 #i‡
OS_CFG_DBG_EN
 > 0u

878 
	$OS_QDbgLi°Add
 (
OS_Q
 *
p_q
)

880 
p_q
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

881 
p_q
->
DbgPªvPå
 = (
OS_Q
 *)0;

882 i‡(
OSQDbgLi°På
 =(
OS_Q
 *)0) {

883 
p_q
->
DbgNextPå
 = (
OS_Q
 *)0;

885 
p_q
->
DbgNextPå
 = 
OSQDbgLi°På
;

886 
OSQDbgLi°På
->
DbgPªvPå
 = 
p_q
;

888 
OSQDbgLi°På
 = 
p_q
;

889 
	}
}

893 
	$OS_QDbgLi°Remove
 (
OS_Q
 *
p_q
)

895 
OS_Q
 *
p_q_√xt
;

896 
OS_Q
 *
p_q_¥ev
;

899 
p_q_¥ev
 = 
p_q
->
DbgPªvPå
;

900 
p_q_√xt
 = 
p_q
->
DbgNextPå
;

902 i‡(
p_q_¥ev
 =(
OS_Q
 *)0) {

903 
OSQDbgLi°På
 = 
p_q_√xt
;

904 i‡(
p_q_√xt
 !(
OS_Q
 *)0) {

905 
p_q_√xt
->
DbgPªvPå
 = (
OS_Q
 *)0;

907 
p_q
->
DbgNextPå
 = (
OS_Q
 *)0;

909 } i‡(
p_q_√xt
 =(
OS_Q
 *)0) {

910 
p_q_¥ev
->
DbgNextPå
 = (
OS_Q
 *)0;

911 
p_q
->
DbgPªvPå
 = (
OS_Q
 *)0;

914 
p_q_¥ev
->
DbgNextPå
 = 
p_q_√xt
;

915 
p_q_√xt
->
DbgPªvPå
 = 
p_q_¥ev
;

916 
p_q
->
DbgNextPå
 = (
OS_Q
 *)0;

917 
p_q
->
DbgPªvPå
 = (
OS_Q
 *)0;

919 
	}
}

940 
	$OS_QInô
 (
OS_ERR
 *
p_îr
)

942 #ifde‡
OS_SAFETY_CRITICAL


943 i‡(
p_îr
 =(
OS_ERR
 *)0) {

944 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

949 #i‡
OS_CFG_DBG_EN
 > 0u

950 
OSQDbgLi°På
 = (
OS_Q
 *)0;

953 
OSQQty
 = (
OS_OBJ_QTY
)0;

954 *
p_îr
 = 
OS_ERR_NONE
;

955 
	}
}

997 
	$OS_QPo°
 (
OS_Q
 *
p_q
,

998 *
p_void
,

999 
OS_MSG_SIZE
 
msg_size
,

1000 
OS_OPT
 
›t
,

1001 
CPU_TS
 
ts
,

1002 
OS_ERR
 *
p_îr
)

1004 
OS_OBJ_QTY
 
˙t
;

1005 
OS_OPT
 
po°_ty≥
;

1006 
OS_PEND_LIST
 *
p_≥nd_li°
;

1007 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1008 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

1009 
OS_TCB
 *
p_tcb
;

1010 
	`CPU_SR_ALLOC
();

1014 
	`OS_CRITICAL_ENTER
();

1015 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

1016 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

1017 i‡((
›t
 & 
OS_OPT_POST_LIFO
Ë=(
OS_OPT
)0) {

1018 
po°_ty≥
 = 
OS_OPT_POST_FIFO
;

1020 
po°_ty≥
 = 
OS_OPT_POST_LIFO
;

1022 
	`OS_MsgQPut
(&
p_q
->
MsgQ
,

1023 
p_void
,

1024 
msg_size
,

1025 
po°_ty≥
,

1026 
ts
,

1027 
p_îr
);

1028 
	`OS_CRITICAL_EXIT
();

1032 i‡((
›t
 & 
OS_OPT_POST_ALL
Ë!(
OS_OPT
)0) {

1033 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

1035 
˙t
 = (
OS_OBJ_QTY
)1;

1037 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

1038 
˙t
 > 0u) {

1039 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

1040 
p_≥nd_d©a_√xt
 = 
p_≥nd_d©a
->
NextPå
;

1041 
	`OS_Po°
((
OS_PEND_OBJ
 *)((*)
p_q
),

1042 
p_tcb
,

1043 
p_void
,

1044 
msg_size
,

1045 
ts
);

1046 
p_≥nd_d©a
 = 
p_≥nd_d©a_√xt
;

1047 
˙t
--;

1049 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1050 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

1051 
	`OSSched
();

1053 *
p_îr
 = 
OS_ERR_NONE
;

1054 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_sem.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_£m__c
 = "$Id: $";

43 #i‡
OS_CFG_SEM_EN
 > 0u

75 
	$OSSemCª©e
 (
OS_SEM
 *
p_£m
,

76 
CPU_CHAR
 *
p_«me
,

77 
OS_SEM_CTR
 
˙t
,

78 
OS_ERR
 *
p_îr
)

80 
	`CPU_SR_ALLOC
();

84 #ifde‡
OS_SAFETY_CRITICAL


85 i‡(
p_îr
 =(
OS_ERR
 *)0) {

86 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

91 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


92 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

93 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

98 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

99 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

100 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

105 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

106 i‡(
p_£m
 =(
OS_SEM
 *)0) {

107 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

112 
	`OS_CRITICAL_ENTER
();

113 #i‡
OS_OBJ_TYPE_REQ
 > 0u

114 
p_£m
->
Ty≥
 = 
OS_OBJ_TYPE_SEM
;

116 
p_£m
->
Cå
 = 
˙t
;

117 
p_£m
->
TS
 = (
CPU_TS
)0;

118 #i‡
OS_CFG_DBG_EN
 > 0u

119 
p_£m
->
NamePå
 = 
p_«me
;

121 ()&
p_«me
;

123 
	`OS_PídLi°Inô
(&
p_£m
->
PídLi°
);

125 #i‡
OS_CFG_DBG_EN
 > 0u

126 
	`OS_SemDbgLi°Add
(
p_£m
);

128 
OSSemQty
++;

130 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

131 
	`TRACE_OS_SEM_CREATE
(
p_£m
, 
p_«me
);

134 
	`OS_CRITICAL_EXIT_NO_SCHED
();

135 *
p_îr
 = 
OS_ERR_NONE
;

136 
	}
}

174 #i‡
OS_CFG_SEM_DEL_EN
 > 0u

175 
OS_OBJ_QTY
 
	$OSSemDñ
 (
OS_SEM
 *
p_£m
,

176 
OS_OPT
 
›t
,

177 
OS_ERR
 *
p_îr
)

179 
OS_OBJ_QTY
 
˙t
;

180 
OS_OBJ_QTY
 
nbr_èsks
;

181 
OS_PEND_DATA
 *
p_≥nd_d©a
;

182 
OS_PEND_LIST
 *
p_≥nd_li°
;

183 
OS_TCB
 *
p_tcb
;

184 
CPU_TS
 
ts
;

185 
	`CPU_SR_ALLOC
();

189 #ifde‡
OS_SAFETY_CRITICAL


190 i‡(
p_îr
 =(
OS_ERR
 *)0) {

191 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

192  ((
OS_OBJ_QTY
)0);

196 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

197 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

198 *
p_îr
 = 
OS_ERR_DEL_ISR
;

199  ((
OS_OBJ_QTY
)0);

203 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

204 i‡(
p_£m
 =(
OS_SEM
 *)0) {

205 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

206  ((
OS_OBJ_QTY
)0);

208 
›t
) {

209 
OS_OPT_DEL_NO_PEND
:

210 
OS_OPT_DEL_ALWAYS
:

214 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

215  ((
OS_OBJ_QTY
)0);

219 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

220 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

221 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

222  ((
OS_OBJ_QTY
)0);

226 
	`CPU_CRITICAL_ENTER
();

227 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

228 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

229 
nbr_èsks
 = 
˙t
;

230 
›t
) {

231 
OS_OPT_DEL_NO_PEND
:

232 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

233 #i‡
OS_CFG_DBG_EN
 > 0u

234 
	`OS_SemDbgLi°Remove
(
p_£m
);

236 
OSSemQty
--;

237 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

238 
	`TRACE_OS_SEM_DEL
(
p_£m
);

240 
	`OS_SemCÃ
(
p_£m
);

241 
	`CPU_CRITICAL_EXIT
();

242 *
p_îr
 = 
OS_ERR_NONE
;

244 
	`CPU_CRITICAL_EXIT
();

245 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

249 
OS_OPT_DEL_ALWAYS
:

250 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

251 
ts
 = 
	`OS_TS_GET
();

252 
˙t
 > 0u) {

253 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

254 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

255 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_£m
),

256 
p_tcb
,

257 
ts
);

258 
˙t
--;

260 #i‡
OS_CFG_DBG_EN
 > 0u

261 
	`OS_SemDbgLi°Remove
(
p_£m
);

263 
OSSemQty
--;

264 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

265 
	`TRACE_OS_SEM_DEL
(
p_£m
);

267 
	`OS_SemCÃ
(
p_£m
);

268 
	`OS_CRITICAL_EXIT_NO_SCHED
();

269 
	`OSSched
();

270 *
p_îr
 = 
OS_ERR_NONE
;

274 
	`CPU_CRITICAL_EXIT
();

275 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

278  ((
OS_OBJ_QTY
)
nbr_èsks
);

279 
	}
}

329 
OS_SEM_CTR
 
	$OSSemPíd
 (
OS_SEM
 *
p_£m
,

330 
OS_TICK
 
timeout
,

331 
OS_OPT
 
›t
,

332 
CPU_TS
 *
p_ts
,

333 
OS_ERR
 *
p_îr
)

335 
OS_SEM_CTR
 
˘r
;

336 
OS_PEND_DATA
 
≥nd_d©a
;

337 
	`CPU_SR_ALLOC
();

341 #ifde‡
OS_SAFETY_CRITICAL


342 i‡(
p_îr
 =(
OS_ERR
 *)0) {

343 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

344 
	`TRACE_OS_SEM_PEND_FAILED
(
p_£m
);

346 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

347  ((
OS_SEM_CTR
)0);

351 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

352 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

353 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

354 
	`TRACE_OS_SEM_PEND_FAILED
(
p_£m
);

356 *
p_îr
 = 
OS_ERR_PEND_ISR
;

357  ((
OS_SEM_CTR
)0);

361 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

362 i‡(
p_£m
 =(
OS_SEM
 *)0) {

363 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

364  ((
OS_SEM_CTR
)0);

366 
›t
) {

367 
OS_OPT_PEND_BLOCKING
:

368 
OS_OPT_PEND_NON_BLOCKING
:

372 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

373 
	`TRACE_OS_SEM_PEND_FAILED
(
p_£m
);

375 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

376  ((
OS_SEM_CTR
)0);

380 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

381 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

382 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

383 
	`TRACE_OS_SEM_PEND_FAILED
(
p_£m
);

385 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

386  ((
OS_SEM_CTR
)0);

390 i‡(
p_ts
 !(
CPU_TS
 *)0) {

391 *
p_ts
 = (
CPU_TS
)0;

393 
	`CPU_CRITICAL_ENTER
();

394 i‡(
p_£m
->
Cå
 > (
OS_SEM_CTR
)0) {

395 
p_£m
->
Cå
--;

396 i‡(
p_ts
 !(
CPU_TS
 *)0) {

397 *
p_ts
 = 
p_£m
->
TS
;

399 
˘r
 = 
p_£m
->
Cå
;

400 
	`CPU_CRITICAL_EXIT
();

401 *
p_îr
 = 
OS_ERR_NONE
;

402 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

403 
	`TRACE_OS_SEM_PEND
(
p_£m
);

405  (
˘r
);

408 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

409 
˘r
 = 
p_£m
->
Cå
;

410 
	`CPU_CRITICAL_EXIT
();

411 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

412 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

413 
	`TRACE_OS_SEM_PEND_FAILED
(
p_£m
);

415  (
˘r
);

417 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

418 
	`CPU_CRITICAL_EXIT
();

419 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

420 
	`TRACE_OS_SEM_PEND_FAILED
(
p_£m
);

422 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

423  ((
OS_SEM_CTR
)0);

427 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

428 
	`OS_Píd
(&
≥nd_d©a
,

429 (
OS_PEND_OBJ
 *)((*)
p_£m
),

430 
OS_TASK_PEND_ON_SEM
,

431 
timeout
);

432 
	`OS_CRITICAL_EXIT_NO_SCHED
();

433 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

434 
	`TRACE_OS_SEM_PEND_BLOCK
(
p_£m
);

436 
	`OSSched
();

438 
	`CPU_CRITICAL_ENTER
();

439 
OSTCBCurPå
->
PídSètus
) {

440 
OS_STATUS_PEND_OK
:

441 i‡(
p_ts
 !(
CPU_TS
 *)0) {

442 *
p_ts
 = 
OSTCBCurPå
->
TS
;

444 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

445 
	`TRACE_OS_SEM_PEND
(
p_£m
);

447 *
p_îr
 = 
OS_ERR_NONE
;

450 
OS_STATUS_PEND_ABORT
:

451 i‡(
p_ts
 !(
CPU_TS
 *)0) {

452 *
p_ts
 = 
OSTCBCurPå
->
TS
;

454 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

455 
	`TRACE_OS_SEM_PEND_FAILED
(
p_£m
);

457 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

460 
OS_STATUS_PEND_TIMEOUT
:

461 i‡(
p_ts
 !(
CPU_TS
 *)0) {

462 *
p_ts
 = (
CPU_TS
 )0;

464 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

465 
	`TRACE_OS_SEM_PEND_FAILED
(
p_£m
);

467 *
p_îr
 = 
OS_ERR_TIMEOUT
;

470 
OS_STATUS_PEND_DEL
:

471 i‡(
p_ts
 !(
CPU_TS
 *)0) {

472 *
p_ts
 = 
OSTCBCurPå
->
TS
;

474 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

475 
	`TRACE_OS_SEM_PEND_FAILED
(
p_£m
);

477 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

481 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

482 
	`TRACE_OS_SEM_PEND_FAILED
(
p_£m
);

484 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

485 
	`CPU_CRITICAL_EXIT
();

486  ((
OS_SEM_CTR
)0);

488 
˘r
 = 
p_£m
->
Cå
;

489 
	`CPU_CRITICAL_EXIT
();

490  (
˘r
);

491 
	}
}

525 #i‡
OS_CFG_SEM_PEND_ABORT_EN
 > 0u

526 
OS_OBJ_QTY
 
	$OSSemPídAb‹t
 (
OS_SEM
 *
p_£m
,

527 
OS_OPT
 
›t
,

528 
OS_ERR
 *
p_îr
)

530 
OS_PEND_LIST
 *
p_≥nd_li°
;

531 
OS_TCB
 *
p_tcb
;

532 
CPU_TS
 
ts
;

533 
OS_OBJ_QTY
 
nbr_èsks
;

534 
	`CPU_SR_ALLOC
();

538 #ifde‡
OS_SAFETY_CRITICAL


539 i‡(
p_îr
 =(
OS_ERR
 *)0) {

540 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

541  ((
OS_OBJ_QTY
)0u);

545 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

546 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

547 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

548  ((
OS_OBJ_QTY
)0u);

552 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

553 i‡(
p_£m
 =(
OS_SEM
 *)0) {

554 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

555  ((
OS_OBJ_QTY
)0u);

557 
›t
) {

558 
OS_OPT_PEND_ABORT_1
:

559 
OS_OPT_PEND_ABORT_ALL
:

560 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

561 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

565 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

566  ((
OS_OBJ_QTY
)0u);

570 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

571 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

572 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

573  ((
OS_OBJ_QTY
)0u);

577 
	`CPU_CRITICAL_ENTER
();

578 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

579 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

580 
	`CPU_CRITICAL_EXIT
();

581 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

582  ((
OS_OBJ_QTY
)0u);

585 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

586 
nbr_èsks
 = 0u;

587 
ts
 = 
	`OS_TS_GET
();

588 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

589 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

590 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_£m
),

591 
p_tcb
,

592 
ts
);

593 
nbr_èsks
++;

594 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

598 
	`OS_CRITICAL_EXIT_NO_SCHED
();

600 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

601 
	`OSSched
();

604 *
p_îr
 = 
OS_ERR_NONE
;

605  (
nbr_èsks
);

606 
	}
}

639 
OS_SEM_CTR
 
	$OSSemPo°
 (
OS_SEM
 *
p_£m
,

640 
OS_OPT
 
›t
,

641 
OS_ERR
 *
p_îr
)

643 
OS_SEM_CTR
 
˘r
;

644 
CPU_TS
 
ts
;

648 #ifde‡
OS_SAFETY_CRITICAL


649 i‡(
p_îr
 =(
OS_ERR
 *)0) {

650 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

651 
	`TRACE_OS_SEM_POST_FAILED
(
p_£m
);

653 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

654  ((
OS_SEM_CTR
)0);

658 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

659 i‡(
p_£m
 =(
OS_SEM
 *)0) {

660 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

661 
	`TRACE_OS_SEM_POST_FAILED
(
p_£m
);

663 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

664  ((
OS_SEM_CTR
)0);

666 
›t
) {

667 
OS_OPT_POST_1
:

668 
OS_OPT_POST_ALL
:

669 
OS_OPT_POST_1
 | 
OS_OPT_POST_NO_SCHED
:

670 
OS_OPT_POST_ALL
 | 
OS_OPT_POST_NO_SCHED
:

674 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

675 
	`TRACE_OS_SEM_POST_FAILED
(
p_£m
);

677 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

678  ((
OS_SEM_CTR
)0u);

682 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

683 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

684 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

685 
	`TRACE_OS_SEM_POST_FAILED
(
p_£m
);

687 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

688  ((
OS_SEM_CTR
)0);

692 
ts
 = 
	`OS_TS_GET
();

694 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

695 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

696 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_SEM
,

697 (*)
p_£m
,

699 (
OS_MSG_SIZE
)0,

700 (
OS_FLAGS
 )0,

701 (
OS_OPT
 )
›t
,

702 (
CPU_TS
 )
ts
,

703 (
OS_ERR
 *)
p_îr
);

704  ((
OS_SEM_CTR
)0);

708 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

709 
	`TRACE_OS_SEM_POST
(
p_£m
);

712 
˘r
 = 
	`OS_SemPo°
(
p_£m
,

713 
›t
,

714 
ts
,

715 
p_îr
);

717  (
˘r
);

718 
	}
}

746 #i‡
OS_CFG_SEM_SET_EN
 > 0u

747 
	$OSSemSë
 (
OS_SEM
 *
p_£m
,

748 
OS_SEM_CTR
 
˙t
,

749 
OS_ERR
 *
p_îr
)

751 
OS_PEND_LIST
 *
p_≥nd_li°
;

752 
	`CPU_SR_ALLOC
();

756 #ifde‡
OS_SAFETY_CRITICAL


757 i‡(
p_îr
 =(
OS_ERR
 *)0) {

758 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

763 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

764 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

765 *
p_îr
 = 
OS_ERR_SET_ISR
;

770 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

771 i‡(
p_£m
 =(
OS_SEM
 *)0) {

772 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

777 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

778 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

779 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

784 *
p_îr
 = 
OS_ERR_NONE
;

785 
	`CPU_CRITICAL_ENTER
();

786 i‡(
p_£m
->
Cå
 > (
OS_SEM_CTR
)0) {

787 
p_£m
->
Cå
 = 
˙t
;

789 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

790 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

791 
p_£m
->
Cå
 = 
˙t
;

793 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

796 
	`CPU_CRITICAL_EXIT
();

797 
	}
}

817 
	$OS_SemCÃ
 (
OS_SEM
 *
p_£m
)

819 #i‡
OS_OBJ_TYPE_REQ
 > 0u

820 
p_£m
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

822 
p_£m
->
Cå
 = (
OS_SEM_CTR
)0;

823 
p_£m
->
TS
 = (
CPU_TS
 )0;

824 #i‡
OS_CFG_DBG_EN
 > 0u

825 
p_£m
->
NamePå
 = (
CPU_CHAR
 *)((*)"?SEM");

827 
	`OS_PídLi°Inô
(&
p_£m
->
PídLi°
);

828 
	}
}

846 #i‡
OS_CFG_DBG_EN
 > 0u

847 
	$OS_SemDbgLi°Add
 (
OS_SEM
 *
p_£m
)

849 
p_£m
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

850 
p_£m
->
DbgPªvPå
 = (
OS_SEM
 *)0;

851 i‡(
OSSemDbgLi°På
 =(
OS_SEM
 *)0) {

852 
p_£m
->
DbgNextPå
 = (
OS_SEM
 *)0;

854 
p_£m
->
DbgNextPå
 = 
OSSemDbgLi°På
;

855 
OSSemDbgLi°På
->
DbgPªvPå
 = 
p_£m
;

857 
OSSemDbgLi°På
 = 
p_£m
;

858 
	}
}

862 
	$OS_SemDbgLi°Remove
 (
OS_SEM
 *
p_£m
)

864 
OS_SEM
 *
p_£m_√xt
;

865 
OS_SEM
 *
p_£m_¥ev
;

868 
p_£m_¥ev
 = 
p_£m
->
DbgPªvPå
;

869 
p_£m_√xt
 = 
p_£m
->
DbgNextPå
;

871 i‡(
p_£m_¥ev
 =(
OS_SEM
 *)0) {

872 
OSSemDbgLi°På
 = 
p_£m_√xt
;

873 i‡(
p_£m_√xt
 !(
OS_SEM
 *)0) {

874 
p_£m_√xt
->
DbgPªvPå
 = (
OS_SEM
 *)0;

876 
p_£m
->
DbgNextPå
 = (
OS_SEM
 *)0;

878 } i‡(
p_£m_√xt
 =(
OS_SEM
 *)0) {

879 
p_£m_¥ev
->
DbgNextPå
 = (
OS_SEM
 *)0;

880 
p_£m
->
DbgPªvPå
 = (
OS_SEM
 *)0;

883 
p_£m_¥ev
->
DbgNextPå
 = 
p_£m_√xt
;

884 
p_£m_√xt
->
DbgPªvPå
 = 
p_£m_¥ev
;

885 
p_£m
->
DbgNextPå
 = (
OS_SEM
 *)0;

886 
p_£m
->
DbgPªvPå
 = (
OS_SEM
 *)0;

888 
	}
}

909 
	$OS_SemInô
 (
OS_ERR
 *
p_îr
)

911 #ifde‡
OS_SAFETY_CRITICAL


912 i‡(
p_îr
 =(
OS_ERR
 *)0) {

913 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

918 #i‡
OS_CFG_DBG_EN
 > 0u

919 
OSSemDbgLi°På
 = (
OS_SEM
 *)0;

922 
OSSemQty
 = (
OS_OBJ_QTY
)0;

923 *
p_îr
 = 
OS_ERR_NONE
;

924 
	}
}

959 
OS_SEM_CTR
 
	$OS_SemPo°
 (
OS_SEM
 *
p_£m
,

960 
OS_OPT
 
›t
,

961 
CPU_TS
 
ts
,

962 
OS_ERR
 *
p_îr
)

964 
OS_OBJ_QTY
 
˙t
;

965 
OS_SEM_CTR
 
˘r
;

966 
OS_PEND_LIST
 *
p_≥nd_li°
;

967 
OS_PEND_DATA
 *
p_≥nd_d©a
;

968 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

969 
OS_TCB
 *
p_tcb
;

970 
	`CPU_SR_ALLOC
();

974 
	`CPU_CRITICAL_ENTER
();

975 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

976 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

977 (
OS_SEM_CTR
)) {

979 i‡(
p_£m
->
Cå
 =
DEF_INT_08U_MAX_VAL
) {

980 
	`CPU_CRITICAL_EXIT
();

981 *
p_îr
 = 
OS_ERR_SEM_OVF
;

982  ((
OS_SEM_CTR
)0);

987 i‡(
p_£m
->
Cå
 =
DEF_INT_16U_MAX_VAL
) {

988 
	`CPU_CRITICAL_EXIT
();

989 *
p_îr
 = 
OS_ERR_SEM_OVF
;

990  ((
OS_SEM_CTR
)0);

995 i‡(
p_£m
->
Cå
 =
DEF_INT_32U_MAX_VAL
) {

996 
	`CPU_CRITICAL_EXIT
();

997 *
p_îr
 = 
OS_ERR_SEM_OVF
;

998  ((
OS_SEM_CTR
)0);

1005 
p_£m
->
Cå
++;

1006 
˘r
 = 
p_£m
->
Cå
;

1007 
p_£m
->
TS
 = 
ts
;

1008 
	`CPU_CRITICAL_EXIT
();

1009 *
p_îr
 = 
OS_ERR_NONE
;

1010  (
˘r
);

1013 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

1014 i‡((
›t
 & 
OS_OPT_POST_ALL
Ë!(
OS_OPT
)0) {

1015 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

1017 
˙t
 = (
OS_OBJ_QTY
)1;

1019 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

1020 
˙t
 > 0u) {

1021 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

1022 
p_≥nd_d©a_√xt
 = 
p_≥nd_d©a
->
NextPå
;

1023 
	`OS_Po°
((
OS_PEND_OBJ
 *)((*)
p_£m
),

1024 
p_tcb
,

1026 (
OS_MSG_SIZE
)0,

1027 
ts
);

1028 
p_≥nd_d©a
 = 
p_≥nd_d©a_√xt
;

1029 
˙t
--;

1031 
˘r
 = 
p_£m
->
Cå
;

1032 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1033 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

1034 
	`OSSched
();

1036 *
p_îr
 = 
OS_ERR_NONE
;

1037  (
˘r
);

1038 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_stat.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_°©__c
 = "$Id: $";

43 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

59 
	$OSSètRe£t
 (
OS_ERR
 *
p_îr
)

61 #i‡(
OS_CFG_DBG_EN
 > 0u)

62 
OS_TCB
 *
p_tcb
;

63 #i‡(
OS_MSG_EN
 > 0u)

64 
OS_MSG_Q
 *
p_msg_q
;

66 #i‡(
OS_CFG_Q_EN
 > 0u)

67 
OS_Q
 *
p_q
;

70 
	`CPU_SR_ALLOC
();

74 #ifde‡
OS_SAFETY_CRITICAL


75 i‡(
p_îr
 =(
OS_ERR
 *)0) {

76 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

81 
	`CPU_CRITICAL_ENTER
();

82 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

83 
OSI¡QTaskTimeMax
 = (
CPU_TS
 )0;

84 
OSI¡QNbrE¡rõsMax
 = (
OS_OBJ_QTY
)0;

87 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

88 
OSSètTaskCPUUßgeMax
 = 0u;

89 
OSSètTaskTimeMax
 = (
CPU_TS
)0;

92 
OSTickTaskTimeMax
 = (
CPU_TS
)0;

94 #i‡
OS_CFG_TMR_EN
 > 0u

95 
OSTmrTaskTimeMax
 = (
CPU_TS
)0;

98 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


99 
OSI¡DisTimeMax
 = (
CPU_TS
)0;

102 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

103 
OSSchedLockTimeMax
 = (
CPU_TS
)0;

106 #i‡((
OS_MSG_EN
 > 0uË&& (
OS_CFG_DBG_EN
 > 0u))

107 
OSMsgPoﬁ
.
NbrU£dMax
 = 0u;

109 
	`CPU_CRITICAL_EXIT
();

111 #i‡
OS_CFG_DBG_EN
 > 0u

112 
	`CPU_CRITICAL_ENTER
();

113 
p_tcb
 = 
OSTaskDbgLi°På
;

114 
	`CPU_CRITICAL_EXIT
();

115 
p_tcb
 !(
OS_TCB
 *)0) {

116 
	`CPU_CRITICAL_ENTER
();

118 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


119 
p_tcb
->
I¡DisTimeMax
 = (
CPU_TS
 )0;

122 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

123 
p_tcb
->
SchedLockTimeMax
 = (
CPU_TS
 )0;

126 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

127 #i‡
OS_CFG_TASK_Q_EN
 > 0u

128 
p_tcb
->
MsgQPídTimeMax
 = (
CPU_TS
 )0;

130 
p_tcb
->
SemPídTimeMax
 = (
CPU_TS
 )0;

131 
p_tcb
->
CtxSwCå
 = (
OS_CTR
 )0;

132 
p_tcb
->
CPUUßge
 = (
OS_CPU_USAGE
)0;

133 
p_tcb
->
CPUUßgeMax
 = (
OS_CPU_USAGE
)0;

134 
p_tcb
->
Cy˛esTŸÆ
 = (
OS_CYCLES
 )0;

135 
p_tcb
->
Cy˛esTŸÆPªv
 = (
OS_CYCLES
 )0;

136 
p_tcb
->
Cy˛esSèπ
 = 
	`OS_TS_GET
();

139 #i‡
OS_CFG_TASK_Q_EN
 > 0u

140 
p_msg_q
 = &
p_tcb
->
MsgQ
;

141 
p_msg_q
->
NbrE¡rõsMax
 = (
OS_MSG_QTY
 )0;

143 
p_tcb
 =Ö_tcb->
DbgNextPå
;

144 
	`CPU_CRITICAL_EXIT
();

148 #i‡(
OS_CFG_Q_EN
 > 0uË&& (
OS_CFG_DBG_EN
 > 0u)

149 
	`CPU_CRITICAL_ENTER
();

150 
p_q
 = 
OSQDbgLi°På
;

151 
	`CPU_CRITICAL_EXIT
();

152 
p_q
 !(
OS_Q
 *)0) {

153 
	`CPU_CRITICAL_ENTER
();

154 
p_msg_q
 = &
p_q
->
MsgQ
;

155 
p_msg_q
->
NbrE¡rõsMax
 = (
OS_MSG_QTY
)0;

156 
p_q
 =Ö_q->
DbgNextPå
;

157 
	`CPU_CRITICAL_EXIT
();

161 
	`OS_TickLi°Re£tPók
();

163 #i‡
OS_CFG_TMR_EN
 > 0u

164 
	`OS_TmrRe£tPók
();

168 *
p_îr
 = 
OS_ERR_NONE
;

169 
	}
}

193 
	$OSSètTaskCPUUßgeInô
 (
OS_ERR
 *
p_îr
)

195 
OS_ERR
 
îr
;

196 
OS_TICK
 
dly
;

197 
	`CPU_SR_ALLOC
();

201 #ifde‡
OS_SAFETY_CRITICAL


202 i‡(
p_îr
 =(
OS_ERR
 *)0) {

203 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

208 #i‡((
OS_CFG_TMR_EN
 > 0uË&& (
OS_CFG_TASK_SUSPEND_EN
 > 0u))

209 
	`OSTaskSu•íd
(&
OSTmrTaskTCB
, &
îr
);

210 i‡(
îr
 !
OS_ERR_NONE
) {

211 *
p_îr
 = 
îr
;

216 
	`OSTimeDly
((
OS_TICK
 )2,

217 (
OS_OPT
 )
OS_OPT_TIME_DLY
,

218 (
OS_ERR
 *)&
îr
);

219 i‡(
îr
 !
OS_ERR_NONE
) {

220 *
p_îr
 = 
îr
;

223 
	`CPU_CRITICAL_ENTER
();

224 
OSSètTaskCå
 = (
OS_TICK
)0;

225 
	`CPU_CRITICAL_EXIT
();

227 
dly
 = (
OS_TICK
)0;

228 i‡(
OSCfg_TickR©e_Hz
 > 
OSCfg_SètTaskR©e_Hz
) {

229 
dly
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / 
OSCfg_SètTaskR©e_Hz
);

231 i‡(
dly
 =(
OS_TICK
)0) {

232 
dly
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / (
OS_RATE_HZ
)10);

235 
	`OSTimeDly
(
dly
,

236 
OS_OPT_TIME_DLY
,

237 &
îr
);

239 #i‡((
OS_CFG_TMR_EN
 > 0uË&& (
OS_CFG_TASK_SUSPEND_EN
 > 0u))

240 
	`OSTaskResume
(&
OSTmrTaskTCB
, &
îr
);

241 i‡(
îr
 !
OS_ERR_NONE
) {

242 *
p_îr
 = 
îr
;

247 
	`CPU_CRITICAL_ENTER
();

248 
OSSètTaskTimeMax
 = (
CPU_TS
)0;

250 
OSSètTaskCåMax
 = 
OSSètTaskCå
;

251 
OSSètTaskRdy
 = 
OS_STATE_RDY
;

252 
	`CPU_CRITICAL_EXIT
();

253 *
p_îr
 = 
OS_ERR_NONE
;

254 
	}
}

283 
	$OS_SètTask
 (*
p_¨g
)

285 #i‡
OS_CFG_DBG_EN
 > 0u

286 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

287 
OS_CPU_USAGE
 
ußge
;

288 
OS_CYCLES
 
cy˛es_tŸÆ
;

289 
OS_CYCLES
 
cy˛es_div
;

290 
OS_CYCLES
 
cy˛es_mu…
;

291 
OS_CYCLES
 
cy˛es_max
;

293 
OS_TCB
 *
p_tcb
;

295 
OS_TICK
 
˘r_max
;

296 
OS_TICK
 
˘r_mu…
;

297 
OS_TICK
 
˘r_div
;

298 
OS_ERR
 
îr
;

299 
OS_TICK
 
dly
;

300 
CPU_TS
 
ts_°¨t
;

301 
CPU_TS
 
ts_íd
;

302 
	`CPU_SR_ALLOC
();

306 ()&
p_¨g
;

307 
OSSètTaskRdy
 !
DEF_TRUE
) {

308 
	`OSTimeDly
(2u * 
OSCfg_SètTaskR©e_Hz
,

309 
OS_OPT_TIME_DLY
,

310 &
îr
);

312 
	`OSSètRe£t
(&
îr
);

314 
dly
 = (
OS_TICK
)0;

315 i‡(
OSCfg_TickR©e_Hz
 > 
OSCfg_SètTaskR©e_Hz
) {

316 
dly
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / 
OSCfg_SètTaskR©e_Hz
);

318 i‡(
dly
 =(
OS_TICK
)0) {

319 
dly
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / (
OS_RATE_HZ
)10);

322 
DEF_ON
) {

323 
ts_°¨t
 = 
	`OS_TS_GET
();

324 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


325 
OSI¡DisTimeMax
 = 
	`CPU_I¡DisMósMaxGë
();

328 
	`CPU_CRITICAL_ENTER
();

329 
OSSètTaskCåRun
 = 
OSSètTaskCå
;

330 
OSSètTaskCå
 = (
OS_TICK
)0;

331 
	`CPU_CRITICAL_EXIT
();

333 i‡(
OSSètTaskCåMax
 > 
OSSètTaskCåRun
) {

334 i‡(
OSSètTaskCåMax
 < 400000u) {

335 
˘r_mu…
 = 10000u;

336 
˘r_div
 = 1u;

337 } i‡(
OSSètTaskCåMax
 < 4000000u) {

338 
˘r_mu…
 = 1000u;

339 
˘r_div
 = 10u;

340 } i‡(
OSSètTaskCåMax
 < 40000000u) {

341 
˘r_mu…
 = 100u;

342 
˘r_div
 = 100u;

343 } i‡(
OSSètTaskCåMax
 < 400000000u) {

344 
˘r_mu…
 = 10u;

345 
˘r_div
 = 1000u;

347 
˘r_mu…
 = 1u;

348 
˘r_div
 = 10000u;

350 
˘r_max
 = 
OSSètTaskCåMax
 / 
˘r_div
;

351 
OSSètTaskCPUUßge
 = (
OS_CPU_USAGE
)((
OS_TICK
)10000u - 
˘r_mu…
 * 
OSSètTaskCåRun
 / 
˘r_max
);

352 i‡(
OSSètTaskCPUUßgeMax
 < 
OSSètTaskCPUUßge
) {

353 
OSSètTaskCPUUßgeMax
 = 
OSSètTaskCPUUßge
;

356 
OSSètTaskCPUUßge
 = (
OS_CPU_USAGE
)10000u;

359 
	`OSSètTaskHook
();

362 #i‡
OS_CFG_DBG_EN
 > 0u

363 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

364 
cy˛es_tŸÆ
 = (
OS_CYCLES
)0;

366 
	`CPU_CRITICAL_ENTER
();

367 
p_tcb
 = 
OSTaskDbgLi°På
;

368 
	`CPU_CRITICAL_EXIT
();

369 
p_tcb
 !(
OS_TCB
 *)0) {

370 
	`OS_CRITICAL_ENTER
();

371 
p_tcb
->
Cy˛esTŸÆPªv
 =Ö_tcb->
Cy˛esTŸÆ
;

372 
p_tcb
->
Cy˛esTŸÆ
 = (
OS_CYCLES
)0;

373 
	`OS_CRITICAL_EXIT
();

375 
cy˛es_tŸÆ
 +
p_tcb
->
Cy˛esTŸÆPªv
;

377 
	`CPU_CRITICAL_ENTER
();

378 
p_tcb
 =Ö_tcb->
DbgNextPå
;

379 
	`CPU_CRITICAL_EXIT
();

384 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

386 i‡(
cy˛es_tŸÆ
 > (
OS_CYCLES
)0u) {

387 i‡(
cy˛es_tŸÆ
 < 400000u) {

388 
cy˛es_mu…
 = 10000u;

389 
cy˛es_div
 = 1u;

390 } i‡(
cy˛es_tŸÆ
 < 4000000u) {

391 
cy˛es_mu…
 = 1000u;

392 
cy˛es_div
 = 10u;

393 } i‡(
cy˛es_tŸÆ
 < 40000000u) {

394 
cy˛es_mu…
 = 100u;

395 
cy˛es_div
 = 100u;

396 } i‡(
cy˛es_tŸÆ
 < 400000000u) {

397 
cy˛es_mu…
 = 10u;

398 
cy˛es_div
 = 1000u;

400 
cy˛es_mu…
 = 1u;

401 
cy˛es_div
 = 10000u;

403 
cy˛es_max
 = 
cy˛es_tŸÆ
 / 
cy˛es_div
;

405 
cy˛es_mu…
 = 0u;

406 
cy˛es_max
 = 1u;

409 
	`CPU_CRITICAL_ENTER
();

410 
p_tcb
 = 
OSTaskDbgLi°På
;

411 
	`CPU_CRITICAL_EXIT
();

412 
p_tcb
 !(
OS_TCB
 *)0) {

413 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

414 
ußge
 = (
OS_CPU_USAGE
)(
cy˛es_mu…
 * 
p_tcb
->
Cy˛esTŸÆPªv
 / 
cy˛es_max
);

415 i‡(
ußge
 > 10000u) {

416 
ußge
 = 10000u;

418 
p_tcb
->
CPUUßge
 = 
ußge
;

419 i‡(
p_tcb
->
CPUUßgeMax
 < 
ußge
) {

420 
p_tcb
->
CPUUßgeMax
 = 
ußge
;

424 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

425 
	`OSTaskStkChk
–
p_tcb
,

426 &
p_tcb
->
StkFªe
,

427 &
p_tcb
->
StkU£d
,

428 &
îr
);

431 
	`CPU_CRITICAL_ENTER
();

432 
p_tcb
 =Ö_tcb->
DbgNextPå
;

433 
	`CPU_CRITICAL_EXIT
();

437 i‡(
OSSètRe£tFœg
 =
DEF_TRUE
) {

438 
OSSètRe£tFœg
 = 
DEF_FALSE
;

439 
	`OSSètRe£t
(&
îr
);

442 
ts_íd
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

443 i‡(
OSSètTaskTimeMax
 < 
ts_íd
) {

444 
OSSètTaskTimeMax
 = 
ts_íd
;

447 
	`OSTimeDly
(
dly
,

448 
OS_OPT_TIME_DLY
,

449 &
îr
);

451 
	}
}

474 
	$OS_SètTaskInô
 (
OS_ERR
 *
p_îr
)

476 #ifde‡
OS_SAFETY_CRITICAL


477 i‡(
p_îr
 =(
OS_ERR
 *)0) {

478 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

483 
OSSètTaskCå
 = (
OS_TICK
)0;

484 
OSSètTaskCåRun
 = (
OS_TICK
)0;

485 
OSSètTaskCåMax
 = (
OS_TICK
)0;

486 
OSSètTaskRdy
 = 
OS_STATE_NOT_RDY
;

487 
OSSètRe£tFœg
 = 
DEF_FALSE
;

490 i‡(
OSCfg_SètTaskStkBa£På
 =(
CPU_STK
 *)0) {

491 *
p_îr
 = 
OS_ERR_STAT_STK_INVALID
;

495 i‡(
OSCfg_SètTaskStkSize
 < 
OSCfg_StkSizeMö
) {

496 *
p_îr
 = 
OS_ERR_STAT_STK_SIZE_INVALID
;

500 i‡(
OSCfg_SètTaskPrio
 >(
OS_CFG_PRIO_MAX
 - 1u)) {

501 *
p_îr
 = 
OS_ERR_STAT_PRIO_INVALID
;

505 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSSètTaskTCB
,

506 (
CPU_CHAR
 *)((*)"uC/OS-III Stat Task"),

507 (
OS_TASK_PTR
 )
OS_SètTask
,

509 (
OS_PRIO
 )
OSCfg_SètTaskPrio
,

510 (
CPU_STK
 *)
OSCfg_SètTaskStkBa£På
,

511 (
CPU_STK_SIZE
)
OSCfg_SètTaskStkLimô
,

512 (
CPU_STK_SIZE
)
OSCfg_SètTaskStkSize
,

513 (
OS_MSG_QTY
 )0,

514 (
OS_TICK
 )0,

516 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
),

517 (
OS_ERR
 *)
p_îr
);

518 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_task.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_èsk__c
 = "$Id: $";

63 #i‡
OS_CFG_TASK_CHANGE_PRIO_EN
 > 0u

64 
	$OSTaskCh™gePrio
 (
OS_TCB
 *
p_tcb
,

65 
OS_PRIO
 
¥io_√w
,

66 
OS_ERR
 *
p_îr
)

68 
CPU_BOOLEAN
 
£lf
;

69 
	`CPU_SR_ALLOC
();

73 #ifde‡
OS_SAFETY_CRITICAL


74 i‡(
p_îr
 =(
OS_ERR
 *)0) {

75 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

80 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

81 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

82 *
p_îr
 = 
OS_ERR_TASK_CHANGE_PRIO_ISR
;

87 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

88 i‡(
¥io_√w
 == 0) {

89 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

94 i‡(
¥io_√w
 >(
OS_CFG_PRIO_MAX
 - 1u)) {

95 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

99 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

100 
	`CPU_CRITICAL_ENTER
();

101 
p_tcb
 = 
OSTCBCurPå
;

102 
	`CPU_CRITICAL_EXIT
();

103 
£lf
 = 
DEF_TRUE
;

105 
£lf
 = 
DEF_FALSE
;

108 
	`OS_CRITICAL_ENTER
();

109 
p_tcb
->
TaskSèã
) {

110 
OS_TASK_STATE_RDY
:

111 
	`OS_RdyLi°Remove
(
p_tcb
);

112 
p_tcb
->
Prio
 = 
¥io_√w
;

113 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

114 i‡(
£lf
 =
DEF_TRUE
) {

115 
	`OS_RdyLi°In£πHód
(
p_tcb
);

117 
	`OS_RdyLi°In£πTaû
(
p_tcb
);

121 
OS_TASK_STATE_DLY
:

122 
OS_TASK_STATE_SUSPENDED
:

123 
OS_TASK_STATE_DLY_SUSPENDED
:

124 
p_tcb
->
Prio
 = 
¥io_√w
;

127 
OS_TASK_STATE_PEND
:

128 
OS_TASK_STATE_PEND_TIMEOUT
:

129 
OS_TASK_STATE_PEND_SUSPENDED
:

130 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

131 
p_tcb
->
PídOn
) {

132 
OS_TASK_PEND_ON_TASK_Q
:

133 
OS_TASK_PEND_ON_TASK_SEM
:

134 
p_tcb
->
Prio
 = 
¥io_√w
;

137 
OS_TASK_PEND_ON_FLAG
:

138 
OS_TASK_PEND_ON_MULTI
:

139 
OS_TASK_PEND_ON_MUTEX
:

140 
OS_TASK_PEND_ON_Q
:

141 
OS_TASK_PEND_ON_SEM
:

142 
	`OS_PídLi°Ch™gePrio
(
p_tcb
,

143 
¥io_√w
);

152 
	`OS_CRITICAL_EXIT
();

153 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

157 
	`OS_CRITICAL_EXIT_NO_SCHED
();

159 
	`OSSched
();

161 *
p_îr
 = 
OS_ERR_NONE
;

162 
	}
}

251 
	$OSTaskCª©e
 (
OS_TCB
 *
p_tcb
,

252 
CPU_CHAR
 *
p_«me
,

253 
OS_TASK_PTR
 
p_èsk
,

254 *
p_¨g
,

255 
OS_PRIO
 
¥io
,

256 
CPU_STK
 *
p_°k_ba£
,

257 
CPU_STK_SIZE
 
°k_limô
,

258 
CPU_STK_SIZE
 
°k_size
,

259 
OS_MSG_QTY
 
q_size
,

260 
OS_TICK
 
time_qu™è
,

261 *
p_ext
,

262 
OS_OPT
 
›t
,

263 
OS_ERR
 *
p_îr
)

265 
CPU_STK_SIZE
 
i
;

266 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

267 
OS_REG_ID
 
ªg_nbr
;

269 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

270 
OS_TLS_ID
 
id
;

273 
CPU_STK
 *
p_•
;

274 
CPU_STK
 *
p_°k_limô
;

275 
	`CPU_SR_ALLOC
();

279 #ifde‡
OS_SAFETY_CRITICAL


280 i‡(
p_îr
 =(
OS_ERR
 *)0) {

281 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

282 
	`TRACE_OS_TASK_CREATE_FAILED
(
p_tcb
);

284 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

289 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


290 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

291 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

292 
	`TRACE_OS_TASK_CREATE_FAILED
(
p_tcb
);

294 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

299 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

300 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

301 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

302 
	`TRACE_OS_TASK_CREATE_FAILED
(
p_tcb
);

304 *
p_îr
 = 
OS_ERR_TASK_CREATE_ISR
;

309 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

310 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

311 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

312 
	`TRACE_OS_TASK_CREATE_FAILED
(
p_tcb
);

314 *
p_îr
 = 
OS_ERR_TCB_INVALID
;

317 i‡(
p_èsk
 =(
OS_TASK_PTR
)0) {

318 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

319 
	`TRACE_OS_TASK_CREATE_FAILED
(
p_tcb
);

321 *
p_îr
 = 
OS_ERR_TASK_INVALID
;

324 i‡(
p_°k_ba£
 =(
CPU_STK
 *)0) {

325 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

326 
	`TRACE_OS_TASK_CREATE_FAILED
(
p_tcb
);

328 *
p_îr
 = 
OS_ERR_STK_INVALID
;

331 i‡(
°k_size
 < 
OSCfg_StkSizeMö
) {

332 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

333 
	`TRACE_OS_TASK_CREATE_FAILED
(
p_tcb
);

335 *
p_îr
 = 
OS_ERR_STK_SIZE_INVALID
;

338 i‡(
°k_limô
 >
°k_size
) {

339 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

340 
	`TRACE_OS_TASK_CREATE_FAILED
(
p_tcb
);

342 *
p_îr
 = 
OS_ERR_STK_LIMIT_INVALID
;

345 i‡(
¥io
 >
OS_CFG_PRIO_MAX
) {

346 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

347 
	`TRACE_OS_TASK_CREATE_FAILED
(
p_tcb
);

349 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

354 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

355 i‡(
¥io
 =(
OS_PRIO
)0) {

356 i‡(
p_tcb
 !&
OSI¡QTaskTCB
) {

357 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

358 
	`TRACE_OS_TASK_CREATE_FAILED
(
p_tcb
);

360 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

366 i‡(
¥io
 =(
OS_CFG_PRIO_MAX
 - 1u)) {

367 i‡(
p_tcb
 !&
OSIdÀTaskTCB
) {

368 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

369 
	`TRACE_OS_TASK_CREATE_FAILED
(
p_tcb
);

371 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

376 
	`OS_TaskInôTCB
(
p_tcb
);

378 *
p_îr
 = 
OS_ERR_NONE
;

380 i‡((
›t
 & 
OS_OPT_TASK_STK_CHK
Ë!(
OS_OPT
)0) {

381 i‡((
›t
 & 
OS_OPT_TASK_STK_CLR
Ë!(
OS_OPT
)0) {

382 
p_•
 = 
p_°k_ba£
;

383 
i
 = 0u; i < 
°k_size
; i++) {

384 *
p_•
 = (
CPU_STK
)0;

385 
p_•
++;

390 #i‡(
CPU_CFG_STK_GROWTH
 =
CPU_STK_GROWTH_HI_TO_LO
)

391 
p_°k_limô
 = 
p_°k_ba£
 + 
°k_limô
;

393 
p_°k_limô
 = 
p_°k_ba£
 + (
°k_size
 - 1uË- 
°k_limô
;

396 
p_•
 = 
	`OSTaskStkInô
(
p_èsk
,

397 
p_¨g
,

398 
p_°k_ba£
,

399 
p_°k_limô
,

400 
°k_size
,

401 
›t
);

404 #i‡
OS_CFG_DBG_EN
 > 0u

405 
p_tcb
->
TaskE¡ryAddr
 = 
p_èsk
;

406 
p_tcb
->
TaskE¡ryArg
 = 
p_¨g
;

409 #i‡
OS_CFG_DBG_EN
 > 0u

410 
p_tcb
->
NamePå
 = 
p_«me
;

412 ()&
p_«me
;

415 
p_tcb
->
Prio
 = 
¥io
;

417 
p_tcb
->
StkPå
 = 
p_•
;

418 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

419 
p_tcb
->
StkLimôPå
 = 
p_°k_limô
;

422 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

423 
p_tcb
->
TimeQu™è
 = 
time_qu™è
;

424 i‡(
time_qu™è
 =(
OS_TICK
)0) {

425 
p_tcb
->
TimeQu™èCå
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

427 
p_tcb
->
TimeQu™èCå
 = 
time_qu™è
;

430 ()&
time_qu™è
;

433 
p_tcb
->
ExtPå
 = 
p_ext
;

434 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

435 
p_tcb
->
StkBa£På
 = 
p_°k_ba£
;

436 
p_tcb
->
StkSize
 = 
°k_size
;

438 
p_tcb
->
O±
 = 
›t
;

440 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

441 
ªg_nbr
 = 0u;Ñeg_nb∏< 
OS_CFG_TASK_REG_TBL_SIZE
;Ñeg_nbr++) {

442 
p_tcb
->
RegTbl
[
ªg_nbr
] = (
OS_REG
)0;

446 #i‡
OS_CFG_TASK_Q_EN
 > 0u

447 
	`OS_MsgQInô
(&
p_tcb
->
MsgQ
,

448 
q_size
);

450 ()&
q_size
;

453 
	`OSTaskCª©eHook
(
p_tcb
);

455 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

456 
	`TRACE_OS_TASK_CREATE
(
p_tcb
);

457 
	`TRACE_OS_TASK_SEM_CREATE
(
p_tcb
, 
p_«me
);

458 
	`TRACE_OS_TASK_MSG_Q_CREATE
(&
p_tcb
->
MsgQ
, 
p_«me
);

461 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

462 
id
 = 0u; id < 
OS_CFG_TLS_TBL_SIZE
; id++) {

463 
p_tcb
->
TLS_Tbl
[
id
] = (
OS_TLS
)0;

465 
	`OS_TLS_TaskCª©e
(
p_tcb
);

468 
	`OS_CRITICAL_ENTER
();

469 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

470 
	`OS_RdyLi°In£πTaû
(
p_tcb
);

472 #i‡
OS_CFG_DBG_EN
 > 0u

473 
	`OS_TaskDbgLi°Add
(
p_tcb
);

476 
OSTaskQty
++;

478 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

479 
	`OS_CRITICAL_EXIT
();

483 
	`OS_CRITICAL_EXIT_NO_SCHED
();

485 
	`OSSched
();

486 
	}
}

513 #i‡
OS_CFG_TASK_DEL_EN
 > 0u

514 
	$OSTaskDñ
 (
OS_TCB
 *
p_tcb
,

515 
OS_ERR
 *
p_îr
)

517 
	`CPU_SR_ALLOC
();

521 #ifde‡
OS_SAFETY_CRITICAL


522 i‡(
p_îr
 =(
OS_ERR
 *)0) {

523 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

528 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

529 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

530 *
p_îr
 = 
OS_ERR_TASK_DEL_ISR
;

535 i‡(
p_tcb
 =&
OSIdÀTaskTCB
) {

536 *
p_îr
 = 
OS_ERR_TASK_DEL_IDLE
;

540 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

541 i‡(
p_tcb
 =&
OSI¡QTaskTCB
) {

542 *
p_îr
 = 
OS_ERR_TASK_DEL_INVALID
;

547 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

548 
	`CPU_CRITICAL_ENTER
();

549 
p_tcb
 = 
OSTCBCurPå
;

550 
	`CPU_CRITICAL_EXIT
();

553 
	`OS_CRITICAL_ENTER
();

554 
p_tcb
->
TaskSèã
) {

555 
OS_TASK_STATE_RDY
:

556 
	`OS_RdyLi°Remove
(
p_tcb
);

559 
OS_TASK_STATE_SUSPENDED
:

562 
OS_TASK_STATE_DLY
:

563 
OS_TASK_STATE_DLY_SUSPENDED
:

564 
	`OS_TickLi°Remove
(
p_tcb
);

567 
OS_TASK_STATE_PEND
:

568 
OS_TASK_STATE_PEND_SUSPENDED
:

569 
OS_TASK_STATE_PEND_TIMEOUT
:

570 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

571 
p_tcb
->
PídOn
) {

572 
OS_TASK_PEND_ON_NOTHING
:

573 
OS_TASK_PEND_ON_TASK_Q
:

574 
OS_TASK_PEND_ON_TASK_SEM
:

577 
OS_TASK_PEND_ON_FLAG
:

578 
OS_TASK_PEND_ON_MULTI
:

579 
OS_TASK_PEND_ON_MUTEX
:

580 
OS_TASK_PEND_ON_Q
:

581 
OS_TASK_PEND_ON_SEM
:

582 
	`OS_PídLi°Remove
(
p_tcb
);

588 i‡((
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT
) ||

589 (
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
)) {

590 
	`OS_TickLi°Remove
(
p_tcb
);

596 
	`OS_CRITICAL_EXIT
();

597 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

601 #i‡
OS_CFG_TASK_Q_EN
 > 0u

602 ()
	`OS_MsgQFªeAŒ
(&
p_tcb
->
MsgQ
);

605 
	`OSTaskDñHook
(
p_tcb
);

607 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

608 
	`OS_TLS_TaskDñ
(
p_tcb
);

611 #i‡
OS_CFG_DBG_EN
 > 0u

612 
	`OS_TaskDbgLi°Remove
(
p_tcb
);

614 
OSTaskQty
--;

615 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

616 
	`TRACE_OS_TASK_DEL
(
p_tcb
);

618 
	`OS_TaskInôTCB
(
p_tcb
);

619 
p_tcb
->
TaskSèã
 = (
OS_STATE
)
OS_TASK_STATE_DEL
;

621 
	`OS_CRITICAL_EXIT_NO_SCHED
();

623 *
p_îr
 = 
OS_ERR_NONE
;

625 
	`OSSched
();

626 
	}
}

653 #i‡
OS_CFG_TASK_Q_EN
 > 0u

654 
OS_MSG_QTY
 
	$OSTaskQFlush
 (
OS_TCB
 *
p_tcb
,

655 
OS_ERR
 *
p_îr
)

657 
OS_MSG_QTY
 
íåõs
;

658 
	`CPU_SR_ALLOC
();

662 #ifde‡
OS_SAFETY_CRITICAL


663 i‡(
p_îr
 =(
OS_ERR
 *)0) {

664 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

665  ((
OS_MSG_QTY
)0);

669 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

670 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

671 *
p_îr
 = 
OS_ERR_FLUSH_ISR
;

672  ((
OS_MSG_QTY
)0);

676 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

677 
	`CPU_CRITICAL_ENTER
();

678 
p_tcb
 = 
OSTCBCurPå
;

679 
	`CPU_CRITICAL_EXIT
();

682 
	`OS_CRITICAL_ENTER
();

683 
íåõs
 = 
	`OS_MsgQFªeAŒ
(&
p_tcb
->
MsgQ
);

684 
	`OS_CRITICAL_EXIT
();

685 *
p_îr
 = 
OS_ERR_NONE
;

686  (
íåõs
);

687 
	}
}

731 #i‡
OS_CFG_TASK_Q_EN
 > 0u

732 *
	$OSTaskQPíd
 (
OS_TICK
 
timeout
,

733 
OS_OPT
 
›t
,

734 
OS_MSG_SIZE
 *
p_msg_size
,

735 
CPU_TS
 *
p_ts
,

736 
OS_ERR
 *
p_îr
)

738 
OS_MSG_Q
 *
p_msg_q
;

739 *
p_void
;

740 
	`CPU_SR_ALLOC
();

744 #ifde‡
OS_SAFETY_CRITICAL


745 i‡(
p_îr
 =(
OS_ERR
 *)0) {

746 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

751 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

752 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

753 *
p_îr
 = 
OS_ERR_PEND_ISR
;

758 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

759 i‡(
p_msg_size
 =(
OS_MSG_SIZE
 *)0) {

760 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

763 
›t
) {

764 
OS_OPT_PEND_BLOCKING
:

765 
OS_OPT_PEND_NON_BLOCKING
:

769 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

774 i‡(
p_ts
 !(
CPU_TS
 *)0) {

775 *
p_ts
 = (
CPU_TS
 )0;

778 
	`CPU_CRITICAL_ENTER
();

779 
p_msg_q
 = &
OSTCBCurPå
->
MsgQ
;

780 
p_void
 = 
	`OS_MsgQGë
(
p_msg_q
,

781 
p_msg_size
,

782 
p_ts
,

783 
p_îr
);

784 i‡(*
p_îr
 =
OS_ERR_NONE
) {

785 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

786 i‡(
p_ts
 !(
CPU_TS
 *)0) {

787 
OSTCBCurPå
->
MsgQPídTime
 = 
	`OS_TS_GET
(Ë- *
p_ts
;

788 i‡(
OSTCBCurPå
->
MsgQPídTimeMax
 < OSTCBCurPå->
MsgQPídTime
) {

789 
OSTCBCurPå
->
MsgQPídTimeMax
 = OSTCBCurPå->
MsgQPídTime
;

793 
	`CPU_CRITICAL_EXIT
();

794 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

795 
	`TRACE_OS_TASK_MSG_Q_PEND
(
p_msg_q
);

797  (
p_void
);

800 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

801 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

802 
	`CPU_CRITICAL_EXIT
();

803 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

804 
	`TRACE_OS_TASK_MSG_Q_PEND_FAILED
(
p_msg_q
);

808 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

809 
	`CPU_CRITICAL_EXIT
();

810 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

811 
	`TRACE_OS_TASK_MSG_Q_PEND_FAILED
(
p_msg_q
);

813 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

818 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

819 
	`OS_Píd
((
OS_PEND_DATA
 *)0,

820 (
OS_PEND_OBJ
 *)0,

821 (
OS_STATE
 )
OS_TASK_PEND_ON_TASK_Q
,

822 (
OS_TICK
 )
timeout
);

823 
	`OS_CRITICAL_EXIT_NO_SCHED
();

824 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

825 
	`TRACE_OS_TASK_MSG_Q_PEND_BLOCK
(
p_msg_q
);

827 
	`OSSched
();

829 
	`CPU_CRITICAL_ENTER
();

830 
OSTCBCurPå
->
PídSètus
) {

831 
OS_STATUS_PEND_OK
:

832 
p_void
 = 
OSTCBCurPå
->
MsgPå
;

833 *
p_msg_size
 = 
OSTCBCurPå
->
MsgSize
;

834 i‡(
p_ts
 !(
CPU_TS
 *)0) {

835 *
p_ts
 = 
OSTCBCurPå
->
TS
;

836 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

837 
OSTCBCurPå
->
MsgQPídTime
 = 
	`OS_TS_GET
(Ë- OSTCBCurPå->
TS
;

838 i‡(
OSTCBCurPå
->
MsgQPídTimeMax
 < OSTCBCurPå->
MsgQPídTime
) {

839 
OSTCBCurPå
->
MsgQPídTimeMax
 = OSTCBCurPå->
MsgQPídTime
;

843 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

844 
	`TRACE_OS_TASK_MSG_Q_PEND
(
p_msg_q
);

846 *
p_îr
 = 
OS_ERR_NONE
;

849 
OS_STATUS_PEND_ABORT
:

850 
p_void
 = (*)0;

851 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

852 i‡(
p_ts
 !(
CPU_TS
 *)0) {

853 *
p_ts
 = (
CPU_TS
 )0;

855 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

856 
	`TRACE_OS_TASK_MSG_Q_PEND_FAILED
(
p_msg_q
);

858 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

861 
OS_STATUS_PEND_TIMEOUT
:

863 
p_void
 = (*)0;

864 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

865 i‡(
p_ts
 !(
CPU_TS
 *)0) {

866 *
p_ts
 = 
OSTCBCurPå
->
TS
;

868 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

869 
	`TRACE_OS_TASK_MSG_Q_PEND_FAILED
(
p_msg_q
);

871 *
p_îr
 = 
OS_ERR_TIMEOUT
;

874 
	`CPU_CRITICAL_EXIT
();

875  (
p_void
);

876 
	}
}

907 #i‡(
OS_CFG_TASK_Q_EN
 > 0uË&& (
OS_CFG_TASK_Q_PEND_ABORT_EN
 > 0u)

908 
CPU_BOOLEAN
 
	$OSTaskQPídAb‹t
 (
OS_TCB
 *
p_tcb
,

909 
OS_OPT
 
›t
,

910 
OS_ERR
 *
p_îr
)

912 
CPU_TS
 
ts
;

913 
	`CPU_SR_ALLOC
();

917 #ifde‡
OS_SAFETY_CRITICAL


918 i‡(
p_îr
 =(
OS_ERR
 *)0) {

919 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

920  (
DEF_FALSE
);

924 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

925 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

926 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

927  (
DEF_FALSE
);

931 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

932 
›t
) {

933 
OS_OPT_POST_NONE
:

934 
OS_OPT_POST_NO_SCHED
:

938 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

939  (
DEF_FALSE
);

943 
	`CPU_CRITICAL_ENTER
();

944 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

945 i‡((
p_tcb
 =(
OS_TCB
 *)0) ||

946 (
p_tcb
 =
OSTCBCurPå
)) {

947 
	`CPU_CRITICAL_EXIT
();

948 *
p_îr
 = 
OS_ERR_PEND_ABORT_SELF
;

949  (
DEF_FALSE
);

953 i‡(
p_tcb
->
PídOn
 !
OS_TASK_PEND_ON_TASK_Q
) {

954 
	`CPU_CRITICAL_EXIT
();

955 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

956  (
DEF_FALSE
);

959 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

960 
ts
 = 
	`OS_TS_GET
();

961 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)0,

962 
p_tcb
,

963 
ts
);

964 
	`OS_CRITICAL_EXIT_NO_SCHED
();

965 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

966 
	`OSSched
();

968 *
p_îr
 = 
OS_ERR_NONE
;

969  (
DEF_TRUE
);

970 
	}
}

1009 #i‡
OS_CFG_TASK_Q_EN
 > 0u

1010 
	$OSTaskQPo°
 (
OS_TCB
 *
p_tcb
,

1011 *
p_void
,

1012 
OS_MSG_SIZE
 
msg_size
,

1013 
OS_OPT
 
›t
,

1014 
OS_ERR
 *
p_îr
)

1016 
CPU_TS
 
ts
;

1020 #ifde‡
OS_SAFETY_CRITICAL


1021 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1022 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1023 
	`TRACE_OS_TASK_MSG_Q_POST_FAILED
(&
p_tcb
->
MsgQ
);

1025 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1030 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1031 
›t
) {

1032 
OS_OPT_POST_FIFO
:

1033 
OS_OPT_POST_LIFO
:

1034 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_NO_SCHED
:

1035 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_NO_SCHED
:

1039 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1040 
	`TRACE_OS_TASK_MSG_Q_POST_FAILED
(&
p_tcb
->
MsgQ
);

1042 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1047 
ts
 = 
	`OS_TS_GET
();

1049 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1050 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1051 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_TASK_MSG
,

1052 (*)
p_tcb
,

1053 (*)
p_void
,

1054 (
OS_MSG_SIZE
)
msg_size
,

1055 (
OS_FLAGS
 )0,

1056 (
OS_OPT
 )
›t
,

1057 (
CPU_TS
 )
ts
,

1058 (
OS_ERR
 *)
p_îr
);

1063 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1064 
	`TRACE_OS_TASK_MSG_Q_POST
(&
p_tcb
->
MsgQ
);

1067 
	`OS_TaskQPo°
(
p_tcb
,

1068 
p_void
,

1069 
msg_size
,

1070 
›t
,

1071 
ts
,

1072 
p_îr
);

1073 
	}
}

1100 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1101 
OS_REG
 
	$OSTaskRegGë
 (
OS_TCB
 *
p_tcb
,

1102 
OS_REG_ID
 
id
,

1103 
OS_ERR
 *
p_îr
)

1105 
OS_REG
 
vÆue
;

1106 
	`CPU_SR_ALLOC
();

1110 #ifde‡
OS_SAFETY_CRITICAL


1111 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1112 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1113  ((
OS_REG
)0);

1117 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1118 i‡(
id
 >
OS_CFG_TASK_REG_TBL_SIZE
) {

1119 *
p_îr
 = 
OS_ERR_REG_ID_INVALID
;

1120  ((
OS_REG
)0);

1124 
	`CPU_CRITICAL_ENTER
();

1125 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1126 
p_tcb
 = 
OSTCBCurPå
;

1128 
vÆue
 = 
p_tcb
->
RegTbl
[
id
];

1129 
	`CPU_CRITICAL_EXIT
();

1130 *
p_îr
 = 
OS_ERR_NONE
;

1131  ((
OS_REG
)
vÆue
);

1132 
	}
}

1153 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1154 
OS_REG_ID
 
	$OSTaskRegGëID
 (
OS_ERR
 *
p_îr
)

1156 
OS_REG_ID
 
id
;

1157 
	`CPU_SR_ALLOC
();

1161 #ifde‡
OS_SAFETY_CRITICAL


1162 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1163 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1164  ((
OS_REG_ID
)
OS_CFG_TASK_REG_TBL_SIZE
);

1168 
	`CPU_CRITICAL_ENTER
();

1169 i‡(
OSTaskRegNextAvaûID
 >
OS_CFG_TASK_REG_TBL_SIZE
) {

1170 *
p_îr
 = 
OS_ERR_NO_MORE_ID_AVAIL
;

1171 
	`CPU_CRITICAL_EXIT
();

1172  ((
OS_REG_ID
)
OS_CFG_TASK_REG_TBL_SIZE
);

1175 
id
 = 
OSTaskRegNextAvaûID
;

1176 
OSTaskRegNextAvaûID
++;

1177 
	`CPU_CRITICAL_EXIT
();

1178 *
p_îr
 = 
OS_ERR_NONE
;

1179  (
id
);

1180 
	}
}

1209 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1210 
	$OSTaskRegSë
 (
OS_TCB
 *
p_tcb
,

1211 
OS_REG_ID
 
id
,

1212 
OS_REG
 
vÆue
,

1213 
OS_ERR
 *
p_îr
)

1215 
	`CPU_SR_ALLOC
();

1219 #ifde‡
OS_SAFETY_CRITICAL


1220 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1221 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1226 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1227 i‡(
id
 >
OS_CFG_TASK_REG_TBL_SIZE
) {

1228 *
p_îr
 = 
OS_ERR_REG_ID_INVALID
;

1233 
	`CPU_CRITICAL_ENTER
();

1234 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1235 
p_tcb
 = 
OSTCBCurPå
;

1237 
p_tcb
->
RegTbl
[
id
] = 
vÆue
;

1238 
	`CPU_CRITICAL_EXIT
();

1239 *
p_îr
 = 
OS_ERR_NONE
;

1240 
	}
}

1265 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1266 
	$OSTaskResume
 (
OS_TCB
 *
p_tcb
,

1267 
OS_ERR
 *
p_îr
)

1269 
	`CPU_SR_ALLOC
();

1273 #ifde‡
OS_SAFETY_CRITICAL


1274 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1275 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1280 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 == 0u) && \

1281 (
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u)

1282 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1283 *
p_îr
 = 
OS_ERR_TASK_RESUME_ISR
;

1289 
	`CPU_CRITICAL_ENTER
();

1290 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1291 i‡((
p_tcb
 =(
OS_TCB
 *)0) ||

1292 (
p_tcb
 =
OSTCBCurPå
)) {

1293 
	`CPU_CRITICAL_EXIT
();

1294 *
p_îr
 = 
OS_ERR_TASK_RESUME_SELF
;

1298 
	`CPU_CRITICAL_EXIT
();

1300 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1301 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1302 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_TASK_RESUME
,

1303 (*)
p_tcb
,

1305 (
OS_MSG_SIZE
)0,

1306 (
OS_FLAGS
 )0,

1307 (
OS_OPT
 )0,

1308 (
CPU_TS
 )0,

1309 (
OS_ERR
 *)
p_îr
);

1314 
	`OS_TaskResume
(
p_tcb
, 
p_îr
);

1316 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1317 
	`TRACE_OS_TASK_RESUME
(
p_tcb
);

1319 
	}
}

1356 
OS_SEM_CTR
 
	$OSTaskSemPíd
 (
OS_TICK
 
timeout
,

1357 
OS_OPT
 
›t
,

1358 
CPU_TS
 *
p_ts
,

1359 
OS_ERR
 *
p_îr
)

1361 
OS_SEM_CTR
 
˘r
;

1362 
	`CPU_SR_ALLOC
();

1366 #ifde‡
OS_SAFETY_CRITICAL


1367 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1368 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1369 
	`TRACE_OS_TASK_SEM_PEND_FAILED
(
OSTCBCurPå
);

1371 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1372  ((
OS_SEM_CTR
)0);

1376 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1377 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1378 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1379 
	`TRACE_OS_TASK_SEM_PEND_FAILED
(
OSTCBCurPå
);

1381 *
p_îr
 = 
OS_ERR_PEND_ISR
;

1382  ((
OS_SEM_CTR
)0);

1386 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1387 
›t
) {

1388 
OS_OPT_PEND_BLOCKING
:

1389 
OS_OPT_PEND_NON_BLOCKING
:

1393 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1394 
	`TRACE_OS_TASK_SEM_PEND_FAILED
(
OSTCBCurPå
);

1396 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1397  ((
OS_SEM_CTR
)0);

1401 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1402 *
p_ts
 = (
CPU_TS
 )0;

1405 
	`CPU_CRITICAL_ENTER
();

1406 i‡(
OSTCBCurPå
->
SemCå
 > (
OS_SEM_CTR
)0) {

1407 
OSTCBCurPå
->
SemCå
--;

1408 
˘r
 = 
OSTCBCurPå
->
SemCå
;

1409 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1410 *
p_ts
 = 
OSTCBCurPå
->
TS
;

1412 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1413 
OSTCBCurPå
->
SemPídTime
 = 
	`OS_TS_GET
(Ë- OSTCBCurPå->
TS
;

1414 i‡(
OSTCBCurPå
->
SemPídTimeMax
 < OSTCBCurPå->
SemPídTime
) {

1415 
OSTCBCurPå
->
SemPídTimeMax
 = OSTCBCurPå->
SemPídTime
;

1418 
	`CPU_CRITICAL_EXIT
();

1419 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1420 
	`TRACE_OS_TASK_SEM_PEND
(
OSTCBCurPå
);

1422 *
p_îr
 = 
OS_ERR_NONE
;

1423  (
˘r
);

1426 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

1427 
	`CPU_CRITICAL_EXIT
();

1428 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

1429 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1430 
	`TRACE_OS_TASK_SEM_PEND_FAILED
(
OSTCBCurPå
);

1432  ((
OS_SEM_CTR
)0);

1434 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

1435 
	`CPU_CRITICAL_EXIT
();

1436 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1437 
	`TRACE_OS_TASK_SEM_PEND_FAILED
(
OSTCBCurPå
);

1439 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

1440  ((
OS_SEM_CTR
)0);

1444 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

1445 
	`OS_Píd
((
OS_PEND_DATA
 *)0,

1446 (
OS_PEND_OBJ
 *)0,

1447 (
OS_STATE
 )
OS_TASK_PEND_ON_TASK_SEM
,

1448 (
OS_TICK
 )
timeout
);

1449 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1450 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1451 
	`TRACE_OS_TASK_SEM_PEND_BLOCK
(
OSTCBCurPå
);

1453 
	`OSSched
();

1455 
	`CPU_CRITICAL_ENTER
();

1456 
OSTCBCurPå
->
PídSètus
) {

1457 
OS_STATUS_PEND_OK
:

1458 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1459 *
p_ts
 = 
OSTCBCurPå
->
TS
;

1460 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1461 
OSTCBCurPå
->
SemPídTime
 = 
	`OS_TS_GET
(Ë- OSTCBCurPå->
TS
;

1462 i‡(
OSTCBCurPå
->
SemPídTimeMax
 < OSTCBCurPå->
SemPídTime
) {

1463 
OSTCBCurPå
->
SemPídTimeMax
 = OSTCBCurPå->
SemPídTime
;

1467 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1468 
	`TRACE_OS_TASK_SEM_PEND
(
OSTCBCurPå
);

1470 *
p_îr
 = 
OS_ERR_NONE
;

1473 
OS_STATUS_PEND_ABORT
:

1474 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1475 *
p_ts
 = 
OSTCBCurPå
->
TS
;

1477 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1478 
	`TRACE_OS_TASK_SEM_PEND_FAILED
(
OSTCBCurPå
);

1480 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

1483 
OS_STATUS_PEND_TIMEOUT
:

1484 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1485 *
p_ts
 = (
CPU_TS
 )0;

1487 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1488 
	`TRACE_OS_TASK_SEM_PEND_FAILED
(
OSTCBCurPå
);

1490 *
p_îr
 = 
OS_ERR_TIMEOUT
;

1494 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1495 
	`TRACE_OS_TASK_SEM_PEND_FAILED
(
OSTCBCurPå
);

1497 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

1500 
˘r
 = 
OSTCBCurPå
->
SemCå
;

1501 
	`CPU_CRITICAL_EXIT
();

1502  (
˘r
);

1503 
	}
}

1534 #i‡
OS_CFG_TASK_SEM_PEND_ABORT_EN
 > 0u

1535 
CPU_BOOLEAN
 
	$OSTaskSemPídAb‹t
 (
OS_TCB
 *
p_tcb
,

1536 
OS_OPT
 
›t
,

1537 
OS_ERR
 *
p_îr
)

1539 
CPU_TS
 
ts
;

1540 
	`CPU_SR_ALLOC
();

1544 #ifde‡
OS_SAFETY_CRITICAL


1545 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1546 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1547  (
DEF_FALSE
);

1551 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1552 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1553 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

1554  (
DEF_FALSE
);

1558 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1559 
›t
) {

1560 
OS_OPT_POST_NONE
:

1561 
OS_OPT_POST_NO_SCHED
:

1565 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1566  (
DEF_FALSE
);

1570 
	`CPU_CRITICAL_ENTER
();

1571 i‡((
p_tcb
 =(
OS_TCB
 *)0) ||

1572 (
p_tcb
 =
OSTCBCurPå
)) {

1573 
	`CPU_CRITICAL_EXIT
();

1574 *
p_îr
 = 
OS_ERR_PEND_ABORT_SELF
;

1575  (
DEF_FALSE
);

1578 i‡(
p_tcb
->
PídOn
 !
OS_TASK_PEND_ON_TASK_SEM
) {

1579 
	`CPU_CRITICAL_EXIT
();

1580 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

1581  (
DEF_FALSE
);

1583 
	`CPU_CRITICAL_EXIT
();

1585 
	`OS_CRITICAL_ENTER
();

1586 
ts
 = 
	`OS_TS_GET
();

1587 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)0,

1588 
p_tcb
,

1589 
ts
);

1590 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1591 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

1592 
	`OSSched
();

1594 *
p_îr
 = 
OS_ERR_NONE
;

1595  (
DEF_TRUE
);

1596 
	}
}

1623 
OS_SEM_CTR
 
	$OSTaskSemPo°
 (
OS_TCB
 *
p_tcb
,

1624 
OS_OPT
 
›t
,

1625 
OS_ERR
 *
p_îr
)

1627 
OS_SEM_CTR
 
˘r
;

1628 
CPU_TS
 
ts
;

1632 #ifde‡
OS_SAFETY_CRITICAL


1633 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1634 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1635 
	`TRACE_OS_TASK_SEM_POST_FAILED
(
p_tcb
);

1637 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1638  ((
OS_SEM_CTR
)0);

1642 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1643 
›t
) {

1644 
OS_OPT_POST_NONE
:

1645 
OS_OPT_POST_NO_SCHED
:

1649 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1650 
	`TRACE_OS_TASK_SEM_POST_FAILED
(
p_tcb
);

1652 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1653  ((
OS_SEM_CTR
)0u);

1657 
ts
 = 
	`OS_TS_GET
();

1659 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1660 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1661 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_TASK_SIGNAL
,

1662 (*)
p_tcb
,

1664 (
OS_MSG_SIZE
)0,

1665 (
OS_FLAGS
 )0,

1666 (
OS_OPT
 )0,

1667 (
CPU_TS
 )
ts
,

1668 (
OS_ERR
 *)
p_îr
);

1669  ((
OS_SEM_CTR
)0);

1673 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

1674 
	`TRACE_OS_TASK_SEM_POST
(
p_tcb
);

1677 
˘r
 = 
	`OS_TaskSemPo°
(
p_tcb
,

1678 
›t
,

1679 
ts
,

1680 
p_îr
);

1682  (
˘r
);

1683 
	}
}

1706 
OS_SEM_CTR
 
	$OSTaskSemSë
 (
OS_TCB
 *
p_tcb
,

1707 
OS_SEM_CTR
 
˙t
,

1708 
OS_ERR
 *
p_îr
)

1710 
OS_SEM_CTR
 
˘r
;

1711 
	`CPU_SR_ALLOC
();

1715 #ifde‡
OS_SAFETY_CRITICAL


1716 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1717 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1718  ((
OS_SEM_CTR
)0);

1722 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1723 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1724 *
p_îr
 = 
OS_ERR_SET_ISR
;

1725  ((
OS_SEM_CTR
)0);

1729 
	`CPU_CRITICAL_ENTER
();

1730 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1731 
p_tcb
 = 
OSTCBCurPå
;

1733 
˘r
 = 
p_tcb
->
SemCå
;

1734 
p_tcb
->
SemCå
 = (
OS_SEM_CTR
)
˙t
;

1735 
	`CPU_CRITICAL_EXIT
();

1736 *
p_îr
 = 
OS_ERR_NONE
;

1737  (
˘r
);

1738 
	}
}

1765 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

1766 
	$OSTaskStkChk
 (
OS_TCB
 *
p_tcb
,

1767 
CPU_STK_SIZE
 *
p_‰ì
,

1768 
CPU_STK_SIZE
 *
p_u£d
,

1769 
OS_ERR
 *
p_îr
)

1771 
CPU_STK_SIZE
 
‰ì_°k
;

1772 
CPU_STK
 *
p_°k
;

1773 
	`CPU_SR_ALLOC
();

1777 #ifde‡
OS_SAFETY_CRITICAL


1778 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1779 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1784 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1785 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1786 *
p_îr
 = 
OS_ERR_TASK_STK_CHK_ISR
;

1791 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1792 i‡(
p_‰ì
 =(
CPU_STK_SIZE
*)0) {

1793 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

1797 i‡(
p_u£d
 =(
CPU_STK_SIZE
*)0) {

1798 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

1803 
	`CPU_CRITICAL_ENTER
();

1804 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1805 
p_tcb
 = 
OSTCBCurPå
;

1808 i‡(
p_tcb
->
StkPå
 =(
CPU_STK
*)0) {

1809 
	`CPU_CRITICAL_EXIT
();

1810 *
p_‰ì
 = (
CPU_STK_SIZE
)0;

1811 *
p_u£d
 = (
CPU_STK_SIZE
)0;

1812 *
p_îr
 = 
OS_ERR_TASK_NOT_EXIST
;

1816 i‡((
p_tcb
->
O±
 & 
OS_OPT_TASK_STK_CHK
Ë=(
OS_OPT
)0) {

1817 
	`CPU_CRITICAL_EXIT
();

1818 *
p_‰ì
 = (
CPU_STK_SIZE
)0;

1819 *
p_u£d
 = (
CPU_STK_SIZE
)0;

1820 *
p_îr
 = 
OS_ERR_TASK_OPT
;

1823 
	`CPU_CRITICAL_EXIT
();

1825 
‰ì_°k
 = 0u;

1826 #i‡
CPU_CFG_STK_GROWTH
 =
CPU_STK_GROWTH_HI_TO_LO


1827 
p_°k
 = 
p_tcb
->
StkBa£På
;

1828 *
p_°k
 =(
CPU_STK
)0) {

1829 
p_°k
++;

1830 
‰ì_°k
++;

1833 
p_°k
 = 
p_tcb
->
StkBa£På
 +Ö_tcb->
StkSize
 - 1u;

1834 *
p_°k
 =(
CPU_STK
)0) {

1835 
‰ì_°k
++;

1836 
p_°k
--;

1839 *
p_‰ì
 = 
‰ì_°k
;

1840 *
p_u£d
 = (
p_tcb
->
StkSize
 - 
‰ì_°k
);

1841 *
p_îr
 = 
OS_ERR_NONE
;

1842 
	}
}

1873 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1874 
	$OSTaskSu•íd
 (
OS_TCB
 *
p_tcb
,

1875 
OS_ERR
 *
p_îr
)

1877 #ifde‡
OS_SAFETY_CRITICAL


1878 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1879 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1884 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 == 0u) && \

1885 (
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u)

1886 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1887 *
p_îr
 = 
OS_ERR_TASK_SUSPEND_ISR
;

1892 i‡(
p_tcb
 =&
OSIdÀTaskTCB
) {

1893 *
p_îr
 = 
OS_ERR_TASK_SUSPEND_IDLE
;

1897 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1898 i‡(
p_tcb
 =&
OSI¡QTaskTCB
) {

1899 *
p_îr
 = 
OS_ERR_TASK_SUSPEND_INT_HANDLER
;

1903 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1904 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_TASK_SUSPEND
,

1905 (*)
p_tcb
,

1907 (
OS_MSG_SIZE
)0,

1908 (
OS_FLAGS
 )0,

1909 (
OS_OPT
 )0,

1910 (
CPU_TS
 )0,

1911 (
OS_ERR
 *)
p_îr
);

1916 
	`OS_TaskSu•íd
(
p_tcb
, 
p_îr
);

1917 
	}
}

1941 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1942 
	$OSTaskTimeQu™èSë
 (
OS_TCB
 *
p_tcb
,

1943 
OS_TICK
 
time_qu™è
,

1944 
OS_ERR
 *
p_îr
)

1946 
	`CPU_SR_ALLOC
();

1950 #ifde‡
OS_SAFETY_CRITICAL


1951 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1952 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1957 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1958 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1959 *
p_îr
 = 
OS_ERR_SET_ISR
;

1964 
	`CPU_CRITICAL_ENTER
();

1965 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1966 
p_tcb
 = 
OSTCBCurPå
;

1969 i‡(
time_qu™è
 == 0u) {

1970 
p_tcb
->
TimeQu™è
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

1972 
p_tcb
->
TimeQu™è
 = 
time_qu™è
;

1974 i‡(
p_tcb
->
TimeQu™è
 >Ö_tcb->
TimeQu™èCå
) {

1975 
p_tcb
->
TimeQu™èCå
 =Ö_tcb->
TimeQu™è
;

1977 
	`CPU_CRITICAL_EXIT
();

1978 *
p_îr
 = 
OS_ERR_NONE
;

1979 
	}
}

1997 #i‡
OS_CFG_DBG_EN
 > 0u

1998 
	$OS_TaskDbgLi°Add
 (
OS_TCB
 *
p_tcb
)

2000 
p_tcb
->
DbgPªvPå
 = (
OS_TCB
 *)0;

2001 i‡(
OSTaskDbgLi°På
 =(
OS_TCB
 *)0) {

2002 
p_tcb
->
DbgNextPå
 = (
OS_TCB
 *)0;

2004 
p_tcb
->
DbgNextPå
 = 
OSTaskDbgLi°På
;

2005 
OSTaskDbgLi°På
->
DbgPªvPå
 = 
p_tcb
;

2007 
OSTaskDbgLi°På
 = 
p_tcb
;

2008 
	}
}

2012 
	$OS_TaskDbgLi°Remove
 (
OS_TCB
 *
p_tcb
)

2014 
OS_TCB
 *
p_tcb_√xt
;

2015 
OS_TCB
 *
p_tcb_¥ev
;

2018 
p_tcb_¥ev
 = 
p_tcb
->
DbgPªvPå
;

2019 
p_tcb_√xt
 = 
p_tcb
->
DbgNextPå
;

2021 i‡(
p_tcb_¥ev
 =(
OS_TCB
 *)0) {

2022 
OSTaskDbgLi°På
 = 
p_tcb_√xt
;

2023 i‡(
p_tcb_√xt
 !(
OS_TCB
 *)0) {

2024 
p_tcb_√xt
->
DbgPªvPå
 = (
OS_TCB
 *)0;

2026 
p_tcb
->
DbgNextPå
 = (
OS_TCB
 *)0;

2028 } i‡(
p_tcb_√xt
 =(
OS_TCB
 *)0) {

2029 
p_tcb_¥ev
->
DbgNextPå
 = (
OS_TCB
 *)0;

2030 
p_tcb
->
DbgPªvPå
 = (
OS_TCB
 *)0;

2033 
p_tcb_¥ev
->
DbgNextPå
 = 
p_tcb_√xt
;

2034 
p_tcb_√xt
->
DbgPªvPå
 = 
p_tcb_¥ev
;

2035 
p_tcb
->
DbgNextPå
 = (
OS_TCB
 *)0;

2036 
p_tcb
->
DbgPªvPå
 = (
OS_TCB
 *)0;

2038 
	}
}

2059 
	$OS_TaskInô
 (
OS_ERR
 *
p_îr
)

2061 #ifde‡
OS_SAFETY_CRITICAL


2062 i‡(
p_îr
 =(
OS_ERR
 *)0) {

2063 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

2068 #i‡
OS_CFG_DBG_EN
 > 0u

2069 
OSTaskDbgLi°På
 = (
OS_TCB
 *)0;

2072 
OSTaskQty
 = (
OS_OBJ_QTY
 )0;

2073 
OSTaskCtxSwCå
 = (
OS_CTX_SW_CTR
)0;

2075 *
p_îr
 = 
OS_ERR_NONE
;

2076 
	}
}

2093 
	$OS_TaskInôTCB
 (
OS_TCB
 *
p_tcb
)

2095 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

2096 
OS_REG_ID
 
ªg_id
;

2098 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

2099 
OS_TLS_ID
 
id
;

2101 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

2102 
CPU_TS
 
ts
;

2106 
p_tcb
->
StkPå
 = (
CPU_STK
 *)0;

2107 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

2108 
p_tcb
->
StkLimôPå
 = (
CPU_STK
 *)0;

2111 
p_tcb
->
ExtPå
 = (*)0;

2113 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2114 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2116 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

2117 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

2118 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)0;

2120 #i‡
OS_CFG_DBG_EN
 > 0u

2121 
p_tcb
->
NamePå
 = (
CPU_CHAR
 *)((*)"?Task");

2124 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

2125 
p_tcb
->
StkBa£På
 = (
CPU_STK
 *)0;

2128 #i‡
OS_CFG_DBG_EN
 > 0u

2129 
p_tcb
->
TaskE¡ryAddr
 = (
OS_TASK_PTR
 )0;

2130 
p_tcb
->
TaskE¡ryArg
 = (*)0;

2133 #i‡(
OS_CFG_PEND_MULTI_EN
 > 0u)

2134 
p_tcb
->
PídD©aTblPå
 = (
OS_PEND_DATA
 *)0;

2135 
p_tcb
->
PídD©aTblE¡rõs
 = (
OS_OBJ_QTY
 )0u;

2138 
p_tcb
->
TS
 = (
CPU_TS
 )0u;

2140 #i‡(
OS_MSG_EN
 > 0u)

2141 
p_tcb
->
MsgPå
 = (*)0;

2142 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
 )0u;

2145 #i‡
OS_CFG_TASK_Q_EN
 > 0u

2146 
	`OS_MsgQInô
(&
p_tcb
->
MsgQ
,

2147 (
OS_MSG_QTY
)0u);

2148 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

2149 
p_tcb
->
MsgQPídTime
 = (
CPU_TS
 )0u;

2150 
p_tcb
->
MsgQPídTimeMax
 = (
CPU_TS
 )0u;

2154 #i‡
OS_CFG_FLAG_EN
 > 0u

2155 
p_tcb
->
FœgsPíd
 = (
OS_FLAGS
 )0u;

2156 
p_tcb
->
FœgsO±
 = (
OS_OPT
 )0u;

2157 
p_tcb
->
FœgsRdy
 = (
OS_FLAGS
 )0u;

2160 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

2161 
ªg_id
 = 0u;Ñeg_id < 
OS_CFG_TASK_REG_TBL_SIZE
;Ñeg_id++) {

2162 
p_tcb
->
RegTbl
[
ªg_id
] = (
OS_REG
)0u;

2166 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

2167 
id
 = 0u; id < 
OS_CFG_TLS_TBL_SIZE
; id++) {

2168 
p_tcb
->
TLS_Tbl
[
id
] = (
OS_TLS
)0;

2172 
p_tcb
->
SemCå
 = (
OS_SEM_CTR
 )0u;

2173 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

2174 
p_tcb
->
SemPídTime
 = (
CPU_TS
 )0u;

2175 
p_tcb
->
SemPídTimeMax
 = (
CPU_TS
 )0u;

2178 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

2179 
p_tcb
->
StkSize
 = (
CPU_STK_SIZE
 )0u;

2183 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

2184 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
 )0u;

2187 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

2188 
p_tcb
->
StkFªe
 = (
CPU_STK_SIZE
 )0u;

2189 
p_tcb
->
StkU£d
 = (
CPU_STK_SIZE
 )0u;

2192 
p_tcb
->
O±
 = (
OS_OPT
 )0u;

2194 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

2195 
p_tcb
->
TickCåPªv
 = (
OS_TICK
 )0u;

2197 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

2198 
p_tcb
->
TimeQu™è
 = (
OS_TICK
 )0u;

2199 
p_tcb
->
TimeQu™èCå
 = (
OS_TICK
 )0u;

2202 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

2203 
p_tcb
->
CPUUßge
 = (
OS_CPU_USAGE
 )0u;

2204 
p_tcb
->
CPUUßgeMax
 = (
OS_CPU_USAGE
 )0u;

2205 
p_tcb
->
CtxSwCå
 = (
OS_CTX_SW_CTR
 )0u;

2206 
p_tcb
->
Cy˛esDñè
 = (
CPU_TS
 )0u;

2207 
ts
 = 
	`OS_TS_GET
();

2208 
p_tcb
->
Cy˛esSèπ
 = 
ts
;

2209 
p_tcb
->
Cy˛esTŸÆ
 = (
OS_CYCLES
 )0u;

2211 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


2212 
p_tcb
->
I¡DisTimeMax
 = (
CPU_TS
 )0u;

2214 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

2215 
p_tcb
->
SchedLockTimeMax
 = (
CPU_TS
 )0u;

2218 
p_tcb
->
PídOn
 = (
OS_STATE
 )
OS_TASK_PEND_ON_NOTHING
;

2219 
p_tcb
->
PídSètus
 = (
OS_STATUS
 )
OS_STATUS_PEND_OK
;

2220 
p_tcb
->
TaskSèã
 = (
OS_STATE
 )
OS_TASK_STATE_RDY
;

2222 
p_tcb
->
Prio
 = (
OS_PRIO
 )
OS_PRIO_INIT
;

2224 #i‡
OS_CFG_DBG_EN
 > 0u

2225 
p_tcb
->
DbgPªvPå
 = (
OS_TCB
 *)0;

2226 
p_tcb
->
DbgNextPå
 = (
OS_TCB
 *)0;

2227 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

2229 
	}
}

2273 #i‡
OS_CFG_TASK_Q_EN
 > 0u

2274 
	$OS_TaskQPo°
 (
OS_TCB
 *
p_tcb
,

2275 *
p_void
,

2276 
OS_MSG_SIZE
 
msg_size
,

2277 
OS_OPT
 
›t
,

2278 
CPU_TS
 
ts
,

2279 
OS_ERR
 *
p_îr
)

2281 
	`CPU_SR_ALLOC
();

2285 *
p_îr
 = 
OS_ERR_NONE
;

2286 
	`OS_CRITICAL_ENTER
();

2287 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

2288 
p_tcb
 = 
OSTCBCurPå
;

2290 
p_tcb
->
TaskSèã
) {

2291 
OS_TASK_STATE_RDY
:

2292 
OS_TASK_STATE_DLY
:

2293 
OS_TASK_STATE_SUSPENDED
:

2294 
OS_TASK_STATE_DLY_SUSPENDED
:

2295 
	`OS_MsgQPut
(&
p_tcb
->
MsgQ
,

2296 
p_void
,

2297 
msg_size
,

2298 
›t
,

2299 
ts
,

2300 
p_îr
);

2301 
	`OS_CRITICAL_EXIT
();

2304 
OS_TASK_STATE_PEND
:

2305 
OS_TASK_STATE_PEND_TIMEOUT
:

2306 
OS_TASK_STATE_PEND_SUSPENDED
:

2307 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

2308 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_TASK_Q
) {

2309 
	`OS_Po°
((
OS_PEND_OBJ
 *)0,

2310 
p_tcb
,

2311 
p_void
,

2312 
msg_size
,

2313 
ts
);

2314 
	`OS_CRITICAL_EXIT_NO_SCHED
();

2315 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

2316 
	`OSSched
();

2319 
	`OS_MsgQPut
(&
p_tcb
->
MsgQ
,

2320 
p_void
,

2321 
msg_size
,

2322 
›t
,

2323 
ts
,

2324 
p_îr
);

2325 
	`OS_CRITICAL_EXIT
();

2330 
	`OS_CRITICAL_EXIT
();

2331 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

2334 
	}
}

2361 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

2362 
	$OS_TaskResume
 (
OS_TCB
 *
p_tcb
,

2363 
OS_ERR
 *
p_îr
)

2365 
	`CPU_SR_ALLOC
();

2368 
	`CPU_CRITICAL_ENTER
();

2369 *
p_îr
 = 
OS_ERR_NONE
;

2370 
p_tcb
->
TaskSèã
) {

2371 
OS_TASK_STATE_RDY
:

2372 
OS_TASK_STATE_DLY
:

2373 
OS_TASK_STATE_PEND
:

2374 
OS_TASK_STATE_PEND_TIMEOUT
:

2375 
	`CPU_CRITICAL_EXIT
();

2376 *
p_îr
 = 
OS_ERR_TASK_NOT_SUSPENDED
;

2379 
OS_TASK_STATE_SUSPENDED
:

2380 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

2381 
p_tcb
->
Su•ídCå
--;

2382 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

2383 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

2384 
	`OS_RdyLi°In£π
(
p_tcb
);

2386 
	`OS_CRITICAL_EXIT_NO_SCHED
();

2389 
OS_TASK_STATE_DLY_SUSPENDED
:

2390 
p_tcb
->
Su•ídCå
--;

2391 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

2392 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_DLY
;

2394 
	`CPU_CRITICAL_EXIT
();

2397 
OS_TASK_STATE_PEND_SUSPENDED
:

2398 
p_tcb
->
Su•ídCå
--;

2399 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

2400 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND
;

2402 
	`CPU_CRITICAL_EXIT
();

2405 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

2406 
p_tcb
->
Su•ídCå
--;

2407 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

2408 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_TIMEOUT
;

2410 
	`CPU_CRITICAL_EXIT
();

2414 
	`CPU_CRITICAL_EXIT
();

2415 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

2419 
	`OSSched
();

2420 
	}
}

2439 
	$OS_TaskRëu∫
 ()

2441 
OS_ERR
 
îr
;

2445 
	`OSTaskRëu∫Hook
(
OSTCBCurPå
);

2446 #i‡
OS_CFG_TASK_DEL_EN
 > 0u

2447 
	`OSTaskDñ
((
OS_TCB
 *)0,

2448 (
OS_ERR
 *)&
îr
);

2451 
	`OSTimeDly
((
OS_TICK
 )
OSCfg_TickR©e_Hz
,

2452 (
OS_OPT
 )
OS_OPT_TIME_DLY
,

2453 (
OS_ERR
 *)&
îr
);

2456 
	}
}

2489 
OS_SEM_CTR
 
	$OS_TaskSemPo°
 (
OS_TCB
 *
p_tcb
,

2490 
OS_OPT
 
›t
,

2491 
CPU_TS
 
ts
,

2492 
OS_ERR
 *
p_îr
)

2494 
OS_SEM_CTR
 
˘r
;

2495 
	`CPU_SR_ALLOC
();

2499 
	`OS_CRITICAL_ENTER
();

2500 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

2501 
p_tcb
 = 
OSTCBCurPå
;

2503 
p_tcb
->
TS
 = 
ts
;

2504 *
p_îr
 = 
OS_ERR_NONE
;

2505 
p_tcb
->
TaskSèã
) {

2506 
OS_TASK_STATE_RDY
:

2507 
OS_TASK_STATE_DLY
:

2508 
OS_TASK_STATE_SUSPENDED
:

2509 
OS_TASK_STATE_DLY_SUSPENDED
:

2510 (
OS_SEM_CTR
)) {

2512 i‡(
p_tcb
->
SemCå
 =
DEF_INT_08U_MAX_VAL
) {

2513 
	`OS_CRITICAL_EXIT
();

2514 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2515  ((
OS_SEM_CTR
)0);

2520 i‡(
p_tcb
->
SemCå
 =
DEF_INT_16U_MAX_VAL
) {

2521 
	`OS_CRITICAL_EXIT
();

2522 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2523  ((
OS_SEM_CTR
)0);

2528 i‡(
p_tcb
->
SemCå
 =
DEF_INT_32U_MAX_VAL
) {

2529 
	`OS_CRITICAL_EXIT
();

2530 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2531  ((
OS_SEM_CTR
)0);

2538 
p_tcb
->
SemCå
++;

2539 
˘r
 = 
p_tcb
->
SemCå
;

2540 
	`OS_CRITICAL_EXIT
();

2543 
OS_TASK_STATE_PEND
:

2544 
OS_TASK_STATE_PEND_TIMEOUT
:

2545 
OS_TASK_STATE_PEND_SUSPENDED
:

2546 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

2547 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_TASK_SEM
) {

2548 
	`OS_Po°
((
OS_PEND_OBJ
 *)0,

2549 (
OS_TCB
 *)
p_tcb
,

2551 (
OS_MSG_SIZE
 )0u,

2552 (
CPU_TS
 )
ts
);

2553 
˘r
 = 
p_tcb
->
SemCå
;

2554 
	`OS_CRITICAL_EXIT_NO_SCHED
();

2555 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

2556 
	`OSSched
();

2559 (
OS_SEM_CTR
)) {

2561 i‡(
p_tcb
->
SemCå
 =
DEF_INT_08U_MAX_VAL
) {

2562 
	`OS_CRITICAL_EXIT
();

2563 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2564  ((
OS_SEM_CTR
)0);

2569 i‡(
p_tcb
->
SemCå
 =
DEF_INT_16U_MAX_VAL
) {

2570 
	`OS_CRITICAL_EXIT
();

2571 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2572  ((
OS_SEM_CTR
)0);

2577 i‡(
p_tcb
->
SemCå
 =
DEF_INT_32U_MAX_VAL
) {

2578 
	`OS_CRITICAL_EXIT
();

2579 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2580  ((
OS_SEM_CTR
)0);

2587 
p_tcb
->
SemCå
++;

2588 
˘r
 = 
p_tcb
->
SemCå
;

2589 
	`OS_CRITICAL_EXIT
();

2594 
	`OS_CRITICAL_EXIT
();

2595 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

2596 
˘r
 = (
OS_SEM_CTR
)0;

2599  (
˘r
);

2600 
	}
}

2632 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

2633 
	$OS_TaskSu•íd
 (
OS_TCB
 *
p_tcb
,

2634 
OS_ERR
 *
p_îr
)

2636 
	`CPU_SR_ALLOC
();

2640 
	`CPU_CRITICAL_ENTER
();

2641 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

2642 
p_tcb
 = 
OSTCBCurPå
;

2645 i‡(
p_tcb
 =
OSTCBCurPå
) {

2646 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

2647 
	`CPU_CRITICAL_EXIT
();

2648 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

2653 *
p_îr
 = 
OS_ERR_NONE
;

2654 
p_tcb
->
TaskSèã
) {

2655 
OS_TASK_STATE_RDY
:

2656 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

2657 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

2658 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

2659 
	`OS_RdyLi°Remove
(
p_tcb
);

2660 
	`OS_CRITICAL_EXIT_NO_SCHED
();

2663 
OS_TASK_STATE_DLY
:

2664 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_DLY_SUSPENDED
;

2665 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

2666 
	`CPU_CRITICAL_EXIT
();

2669 
OS_TASK_STATE_PEND
:

2670 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_SUSPENDED
;

2671 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

2672 
	`CPU_CRITICAL_EXIT
();

2675 
OS_TASK_STATE_PEND_TIMEOUT
:

2676 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
;

2677 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

2678 
	`CPU_CRITICAL_EXIT
();

2681 
OS_TASK_STATE_SUSPENDED
:

2682 
OS_TASK_STATE_DLY_SUSPENDED
:

2683 
OS_TASK_STATE_PEND_SUSPENDED
:

2684 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

2685 
p_tcb
->
Su•ídCå
++;

2686 
	`CPU_CRITICAL_EXIT
();

2690 
	`CPU_CRITICAL_EXIT
();

2691 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

2695 
	`OSSched
();

2696 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_tick.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_tick__c
 = "$Id: $";

48 
CPU_TS
 
OS_TickLi°Upd©eDly
 ();

49 
CPU_TS
 
OS_TickLi°Upd©eTimeout
 ();

65 
	$OS_TickTask
 (*
p_¨g
)

67 
OS_ERR
 
îr
;

68 
CPU_TS
 
ts
;

69 
CPU_TS
 
ts_dñè
;

70 
CPU_TS
 
ts_dñè_dly
;

71 
CPU_TS
 
ts_dñè_timeout
;

72 
	`CPU_SR_ALLOC
();

80 ()&
p_¨g
;

82 
DEF_ON
) {

83 ()
	`OSTaskSemPíd
((
OS_TICK
 )0,

84 (
OS_OPT
 )
OS_OPT_PEND_BLOCKING
,

85 (
CPU_TS
 *)&
ts
,

86 (
OS_ERR
 *)&
îr
);

87 i‡(
îr
 =
OS_ERR_NONE
) {

88 i‡(
OSRu¬ög
 =
OS_STATE_OS_RUNNING
) {

89 
	`OS_CRITICAL_ENTER
();

90 
OSTickCå
++;

91 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

92 
	`TRACE_OS_TICK_INCREMENT
(
OSTickCå
);

94 
	`OS_CRITICAL_EXIT
();

95 
ts_dñè_dly
 = 
	`OS_TickLi°Upd©eDly
();

96 
ts_dñè_timeout
 = 
	`OS_TickLi°Upd©eTimeout
();

97 
ts_dñè
 = 
ts_dñè_dly
 + 
ts_dñè_timeout
;

98 i‡(
OSTickTaskTimeMax
 < 
ts_dñè
) {

99 
OSTickTaskTimeMax
 = 
ts_dñè
;

104 
	}
}

127 
	$OS_TickTaskInô
 (
OS_ERR
 *
p_îr
)

129 #ifde‡
OS_SAFETY_CRITICAL


130 i‡(
p_îr
 =(
OS_ERR
 *)0) {

131 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

136 
OSTickCå
 = (
OS_TICK
)0u;

138 
OSTickLi°Dly
.
TCB_På
 = (
OS_TCB
 *)0;

139 
OSTickLi°Timeout
.
TCB_På
 = (
OS_TCB
 *)0;

141 #i‡
OS_CFG_DBG_EN
 > 0u

142 
OSTickLi°Dly
.
NbrE¡rõs
 = (
OS_OBJ_QTY
)0;

143 
OSTickLi°Dly
.
NbrUpd©ed
 = (
OS_OBJ_QTY
)0;

145 
OSTickLi°Timeout
.
NbrE¡rõs
 = (
OS_OBJ_QTY
)0;

146 
OSTickLi°Timeout
.
NbrUpd©ed
 = (
OS_OBJ_QTY
)0;

150 i‡(
OSCfg_TickTaskStkBa£På
 =(
CPU_STK
 *)0) {

151 *
p_îr
 = 
OS_ERR_TICK_STK_INVALID
;

155 i‡(
OSCfg_TickTaskStkSize
 < 
OSCfg_StkSizeMö
) {

156 *
p_îr
 = 
OS_ERR_TICK_STK_SIZE_INVALID
;

160 i‡(
OSCfg_TickTaskPrio
 >(
OS_CFG_PRIO_MAX
 - 1u)) {

161 *
p_îr
 = 
OS_ERR_TICK_PRIO_INVALID
;

165 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSTickTaskTCB
,

166 (
CPU_CHAR
 *)((*)"uC/OS-III Tick Task"),

167 (
OS_TASK_PTR
 )
OS_TickTask
,

169 (
OS_PRIO
 )
OSCfg_TickTaskPrio
,

170 (
CPU_STK
 *)
OSCfg_TickTaskStkBa£På
,

171 (
CPU_STK_SIZE
)
OSCfg_TickTaskStkLimô
,

172 (
CPU_STK_SIZE
)
OSCfg_TickTaskStkSize
,

173 (
OS_MSG_QTY
 )0u,

174 (
OS_TICK
 )0u,

176 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
 | 
OS_OPT_TASK_NO_TLS
),

177 (
OS_ERR
 *)
p_îr
);

178 
	}
}

198 
	$OS_TickLi°In£π
 (
OS_TICK_LIST
 *
p_li°
,

199 
OS_TCB
 *
p_tcb
,

200 
OS_TICK
 
time
)

202 
OS_TCB
 *
p_tcb1
;

203 
OS_TCB
 *
p_tcb2
;

204 
OS_TICK
 
ªmaö
;

207 i‡(
p_li°
->
TCB_På
 =(
OS_TCB
 *)0) {

208 
p_tcb
->
TickRemaö
 = 
time
;

209 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

210 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

211 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)
p_li°
;

212 
p_li°
->
TCB_På
 = 
p_tcb
;

213 #i‡
OS_CFG_DBG_EN
 > 0u

214 
p_li°
->
NbrE¡rõs
 = 1u;

217 
p_tcb1
 = 
p_li°
->
TCB_På
;

218 
p_tcb2
 = 
p_li°
->
TCB_På
;

219 
ªmaö
 = 
time
;

220 
p_tcb2
 !(
OS_TCB
 *)0) {

221 i‡(
ªmaö
 <
p_tcb2
->
TickRemaö
) {

222 i‡(
p_tcb2
->
TickPªvPå
 =(
OS_TCB
 *)0) {

223 
p_tcb
->
TickRemaö
 = 
ªmaö
;

224 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

225 
p_tcb
->
TickNextPå
 = 
p_tcb2
;

226 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)
p_li°
;

227 
p_tcb2
->
TickRemaö
 -
ªmaö
;

228 
p_tcb2
->
TickPªvPå
 = 
p_tcb
;

229 
p_li°
->
TCB_På
 = 
p_tcb
;

230 #i‡
OS_CFG_DBG_EN
 > 0u

231 
p_li°
->
NbrE¡rõs
++;

234 
p_tcb1
 = 
p_tcb2
->
TickPªvPå
;

235 
p_tcb
->
TickRemaö
 = 
ªmaö
;

236 
p_tcb
->
TickPªvPå
 = 
p_tcb1
;

237 
p_tcb
->
TickNextPå
 = 
p_tcb2
;

238 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)
p_li°
;

239 
p_tcb2
->
TickRemaö
 -
ªmaö
;

240 
p_tcb2
->
TickPªvPå
 = 
p_tcb
;

241 
p_tcb1
->
TickNextPå
 = 
p_tcb
;

242 #i‡
OS_CFG_DBG_EN
 > 0u

243 
p_li°
->
NbrE¡rõs
++;

248 
ªmaö
 -
p_tcb2
->
TickRemaö
;

249 
p_tcb1
 = 
p_tcb2
;

250 
p_tcb2
 =Ö_tcb2->
TickNextPå
;

253 
p_tcb
->
TickRemaö
 = 
ªmaö
;

254 
p_tcb
->
TickPªvPå
 = 
p_tcb1
;

255 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

256 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)
p_li°
;

257 
p_tcb1
->
TickNextPå
 = 
p_tcb
;

258 #i‡
OS_CFG_DBG_EN
 > 0u

259 
p_li°
->
NbrE¡rõs
++;

262 
	}
}

301 
	$OS_TickLi°In£πDly
 (
OS_TCB
 *
p_tcb
,

302 
OS_TICK
 
time
,

303 
OS_OPT
 
›t
,

304 
OS_ERR
 *
p_îr
)

306 
OS_TICK
 
ªmaö
;

310 i‡(
›t
 =
OS_OPT_TIME_MATCH
) {

311 
ªmaö
 = 
time
 - 
OSTickCå
;

312 i‡((
ªmaö
 > 
OS_TICK_TH_RDY
) ||

313 (
ªmaö
 =(
OS_TICK
)0u)) {

314 
p_tcb
->
TickRemaö
 = (
OS_TICK
)0u;

315 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

319 } i‡(
›t
 =
OS_OPT_TIME_PERIODIC
) {

320 i‡((
OSTickCå
 - 
p_tcb
->
TickCåPªv
Ë> 
time
) {

321 
ªmaö
 = 
time
;

322 
p_tcb
->
TickCåPªv
 = 
OSTickCå
 + 
time
;

324 
ªmaö
 = 
time
 - (
OSTickCå
 - 
p_tcb
->
TickCåPªv
);

325 i‡((
ªmaö
 > 
OS_TICK_TH_RDY
) ||

326 (
ªmaö
 =(
OS_TICK
)0u)) {

327 
p_tcb
->
TickCåPªv
 +
time
 +Åimê* ((
OSTickCå
 -Ö_tcb->TickCtrPrev) /Åime);

328 
p_tcb
->
TickRemaö
 = (
OS_TICK
)0u;

329 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

332 
p_tcb
->
TickCåPªv
 +
time
;

335 } i‡(
time
 > (
OS_TICK
)0u) {

336 
ªmaö
 = 
time
;

339 
p_tcb
->
TickRemaö
 = (
OS_TICK
)0u;

340 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

344 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_DLY
;

345 
	`OS_TickLi°In£π
(&
OSTickLi°Dly
, 
p_tcb
, 
ªmaö
);

347 *
p_îr
 = 
OS_ERR_NONE
;

348 
	}
}

367 
	$OS_TickLi°Remove
 (
OS_TCB
 *
p_tcb
)

369 
OS_TICK_LIST
 *
p_li°
;

370 
OS_TCB
 *
p_tcb1
;

371 
OS_TCB
 *
p_tcb2
;

374 
p_li°
 = (
OS_TICK_LIST
 *)
p_tcb
->
TickLi°På
;

375 
p_tcb1
 = 
p_tcb
->
TickPªvPå
;

376 
p_tcb2
 = 
p_tcb
->
TickNextPå
;

377 i‡(
p_tcb1
 =(
OS_TCB
 *)0) {

378 i‡(
p_tcb2
 =(
OS_TCB
 *)0) {

379 
p_li°
->
TCB_På
 = (
OS_TCB
 *)0;

380 #i‡
OS_CFG_DBG_EN
 > 0u

381 
p_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
 )0u;

383 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

384 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)0;

386 
p_tcb2
->
TickPªvPå
 = (
OS_TCB
 *)0;

387 
p_tcb2
->
TickRemaö
 +
p_tcb
->TickRemain;

388 
p_li°
->
TCB_På
 = 
p_tcb2
;

389 #i‡
OS_CFG_DBG_EN
 > 0u

390 
p_li°
->
NbrE¡rõs
--;

392 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

393 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

394 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)0;

397 
p_tcb1
->
TickNextPå
 = 
p_tcb2
;

398 i‡(
p_tcb2
 !(
OS_TCB
 *)0) {

399 
p_tcb2
->
TickPªvPå
 = 
p_tcb1
;

400 
p_tcb2
->
TickRemaö
 +
p_tcb
->TickRemain;

402 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

403 #i‡
OS_CFG_DBG_EN
 > 0u

404 
p_li°
->
NbrE¡rõs
--;

406 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

407 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

408 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)0;

410 
	}
}

426 
	$OS_TickLi°Re£tPók
 ()

428 #i‡
OS_CFG_DBG_EN
 > 0u

430 
	}
}

446 
CPU_TS
 
	$OS_TickLi°Upd©eDly
 ()

448 
OS_TCB
 *
p_tcb
;

449 
OS_TICK_LIST
 *
p_li°
;

450 
CPU_TS
 
ts_°¨t
;

451 
CPU_TS
 
ts_dñè_dly
;

452 #i‡
OS_CFG_DBG_EN
 > 0u

453 
OS_OBJ_QTY
 
nbr_upd©ed
;

455 
	`CPU_SR_ALLOC
();

459 
	`OS_CRITICAL_ENTER
();

460 
ts_°¨t
 = 
	`OS_TS_GET
();

461 #i‡
OS_CFG_DBG_EN
 > 0u

462 
nbr_upd©ed
 = (
OS_OBJ_QTY
)0u;

464 
p_li°
 = &
OSTickLi°Dly
;

465 
p_tcb
 = 
p_li°
->
TCB_På
;

466 i‡(
p_tcb
 !(
OS_TCB
 *)0) {

467 
p_tcb
->
TickRemaö
--;

468 
p_tcb
->
TickRemaö
 == 0u) {

469 #i‡
OS_CFG_DBG_EN
 > 0u

470 
nbr_upd©ed
++;

472 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_DLY
) {

473 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

474 
	`OS_RdyLi°In£π
(
p_tcb
);

475 } i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_DLY_SUSPENDED
) {

476 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

479 
p_li°
->
TCB_På
 = 
p_tcb
->
TickNextPå
;

480 
p_tcb
 = 
p_li°
->
TCB_På
;

481 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

482 #i‡
OS_CFG_DBG_EN
 > 0u

483 
p_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)0u;

487 #i‡
OS_CFG_DBG_EN
 > 0u

488 
p_li°
->
NbrE¡rõs
--;

490 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

494 #i‡
OS_CFG_DBG_EN
 > 0u

495 
p_li°
->
NbrUpd©ed
 = 
nbr_upd©ed
;

497 
ts_dñè_dly
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

498 
	`OS_CRITICAL_EXIT
();

500  (
ts_dñè_dly
);

501 
	}
}

518 
CPU_TS
 
	$OS_TickLi°Upd©eTimeout
 ()

520 
OS_TCB
 *
p_tcb
;

521 
OS_TICK_LIST
 *
p_li°
;

522 
CPU_TS
 
ts_°¨t
;

523 
CPU_TS
 
ts_dñè_timeout
;

524 #i‡
OS_CFG_DBG_EN
 > 0u

525 
OS_OBJ_QTY
 
nbr_upd©ed
;

527 
	`CPU_SR_ALLOC
();

531 
	`OS_CRITICAL_ENTER
();

532 
ts_°¨t
 = 
	`OS_TS_GET
();

533 #i‡
OS_CFG_DBG_EN
 > 0u

534 
nbr_upd©ed
 = (
OS_OBJ_QTY
)0u;

536 
p_li°
 = &
OSTickLi°Timeout
;

537 
p_tcb
 = 
p_li°
->
TCB_På
;

538 i‡(
p_tcb
 !(
OS_TCB
 *)0) {

539 
p_tcb
->
TickRemaö
--;

540 
p_tcb
->
TickRemaö
 == 0u) {

541 #i‡
OS_CFG_DBG_EN
 > 0u

542 
nbr_upd©ed
++;

544 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT
) {

545 #i‡(
OS_MSG_EN
 > 0u)

546 
p_tcb
->
MsgPå
 = (*)0;

547 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

549 
p_tcb
->
TS
 = 
	`OS_TS_GET
();

550 
	`OS_PídLi°Remove
(
p_tcb
);

551 
	`OS_RdyLi°In£π
(
p_tcb
);

552 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

553 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_TIMEOUT
;

554 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

555 } i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
) {

556 #i‡(
OS_MSG_EN
 > 0u)

557 
p_tcb
->
MsgPå
 = (*)0;

558 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

560 
p_tcb
->
TS
 = 
	`OS_TS_GET
();

561 
	`OS_PídLi°Remove
(
p_tcb
);

562 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

563 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_TIMEOUT
;

564 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

566 
p_li°
->
TCB_På
 = 
p_tcb
->
TickNextPå
;

567 
p_tcb
 = 
p_li°
->
TCB_På
;

568 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

569 #i‡
OS_CFG_DBG_EN
 > 0u

570 
p_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)0u;

574 #i‡
OS_CFG_DBG_EN
 > 0u

575 
p_li°
->
NbrE¡rõs
--;

577 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

581 #i‡
OS_CFG_DBG_EN
 > 0u

582 
p_li°
->
NbrUpd©ed
 = 
nbr_upd©ed
;

584 
ts_dñè_timeout
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

585 
	`OS_CRITICAL_EXIT
();

587  (
ts_dñè_timeout
);

588 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_time.c

35 
	#MICRIUM_SOURCE


	)

36 
	~"os.h
"

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_time__c
 = "$Id: $";

82 
	$OSTimeDly
 (
OS_TICK
 
dly
,

83 
OS_OPT
 
›t
,

84 
OS_ERR
 *
p_îr
)

86 
	`CPU_SR_ALLOC
();

90 #ifde‡
OS_SAFETY_CRITICAL


91 i‡(
p_îr
 =(
OS_ERR
 *)0) {

92 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

97 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

98 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

99 *
p_îr
 = 
OS_ERR_TIME_DLY_ISR
;

104 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0u) {

105 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

109 
›t
) {

110 
OS_OPT_TIME_DLY
:

111 
OS_OPT_TIME_TIMEOUT
:

112 
OS_OPT_TIME_PERIODIC
:

113 i‡(
dly
 =(
OS_TICK
)0u) {

114 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

119 
OS_OPT_TIME_MATCH
:

123 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

127 
	`OS_CRITICAL_ENTER
();

128 
	`OS_TickLi°In£πDly
(
OSTCBCurPå
,

129 
dly
,

130 
›t
,

131 
p_îr
);

132 i‡(*
p_îr
 !
OS_ERR_NONE
) {

133 
	`OS_CRITICAL_EXIT_NO_SCHED
();

136 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

137 
	`TRACE_OS_TASK_DLY
(
dly
);

139 
	`OS_RdyLi°Remove
(
OSTCBCurPå
);

140 
	`OS_CRITICAL_EXIT_NO_SCHED
();

141 
	`OSSched
();

142 *
p_îr
 = 
OS_ERR_NONE
;

143 
	}
}

203 #i‡
OS_CFG_TIME_DLY_HMSM_EN
 > 0u

204 
	$OSTimeDlyHMSM
 (
CPU_INT16U
 
hours
,

205 
CPU_INT16U
 
möuãs
,

206 
CPU_INT16U
 
£c⁄ds
,

207 
CPU_INT32U
 
mûli
,

208 
OS_OPT
 
›t
,

209 
OS_ERR
 *
p_îr
)

211 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

212 
CPU_BOOLEAN
 
›t_övÆid
;

213 
CPU_BOOLEAN
 
›t_n⁄_°ri˘
;

215 
OS_OPT
 
›t_time
;

216 
OS_RATE_HZ
 
tick_øã
;

217 
OS_TICK
 
ticks
;

218 
	`CPU_SR_ALLOC
();

222 #ifde‡
OS_SAFETY_CRITICAL


223 i‡(
p_îr
 =(
OS_ERR
 *)0) {

224 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

229 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

230 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

231 *
p_îr
 = 
OS_ERR_TIME_DLY_ISR
;

236 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0u) {

237 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

241 
›t_time
 = 
›t
 & 
OS_OPT_TIME_MASK
;

242 
›t_time
) {

243 
OS_OPT_TIME_DLY
:

244 
OS_OPT_TIME_TIMEOUT
:

245 
OS_OPT_TIME_PERIODIC
:

246 i‡(
mûli
 =(
CPU_INT32U
)0u) {

247 i‡(
£c⁄ds
 =(
CPU_INT16U
)0u) {

248 i‡(
möuãs
 =(
CPU_INT16U
)0u) {

249 i‡(
hours
 =(
CPU_INT16U
)0u) {

250 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

258 
OS_OPT_TIME_MATCH
:

262 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

266 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

267 
›t_övÆid
 = 
	`DEF_BIT_IS_SET_ANY
(
›t
, ~
OS_OPT_TIME_OPTS_MASK
);

268 i‡(
›t_övÆid
 =
DEF_YES
) {

269 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

273 
›t_n⁄_°ri˘
 = 
	`DEF_BIT_IS_SET
(
›t
, 
OS_OPT_TIME_HMSM_NON_STRICT
);

274 i‡(
›t_n⁄_°ri˘
 !
DEF_YES
) {

275 i‡(
mûli
 > (
CPU_INT32U
)999u) {

276 *
p_îr
 = 
OS_ERR_TIME_INVALID_MILLISECONDS
;

279 i‡(
£c⁄ds
 > (
CPU_INT16U
)59u) {

280 *
p_îr
 = 
OS_ERR_TIME_INVALID_SECONDS
;

283 i‡(
möuãs
 > (
CPU_INT16U
)59u) {

284 *
p_îr
 = 
OS_ERR_TIME_INVALID_MINUTES
;

287 i‡(
hours
 > (
CPU_INT16U
)99u) {

288 *
p_îr
 = 
OS_ERR_TIME_INVALID_HOURS
;

292 i‡(
möuãs
 > (
CPU_INT16U
)9999u) {

293 *
p_îr
 = 
OS_ERR_TIME_INVALID_MINUTES
;

296 i‡(
hours
 > (
CPU_INT16U
)999u) {

297 *
p_îr
 = 
OS_ERR_TIME_INVALID_HOURS
;

305 
tick_øã
 = 
OSCfg_TickR©e_Hz
;

306 
ticks
 = ((
OS_TICK
)
hours
 * (OS_TICK)3600u + (OS_TICK)
möuãs
 * (OS_TICK)60u + (OS_TICK)
£c⁄ds
Ë* 
tick_øã


307 + (
tick_øã
 * ((
OS_TICK
)
mûli
 + (OS_TICK)500u /Åick_rate)) / (OS_TICK)1000u;

309 i‡(
ticks
 > (
OS_TICK
)0u) {

310 
	`OS_CRITICAL_ENTER
();

311 
	`OS_TickLi°In£πDly
(
OSTCBCurPå
,

312 
ticks
,

313 
›t_time
,

314 
p_îr
);

315 i‡(*
p_îr
 !
OS_ERR_NONE
) {

316 
	`OS_CRITICAL_EXIT_NO_SCHED
();

319 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

320 
	`TRACE_OS_TASK_DLY
(
ticks
);

322 
	`OS_RdyLi°Remove
(
OSTCBCurPå
);

323 
	`OS_CRITICAL_EXIT_NO_SCHED
();

324 
	`OSSched
();

325 *
p_îr
 = 
OS_ERR_NONE
;

327 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

329 
	}
}

354 #i‡
OS_CFG_TIME_DLY_RESUME_EN
 > 0u

355 
	$OSTimeDlyResume
 (
OS_TCB
 *
p_tcb
,

356 
OS_ERR
 *
p_îr
)

358 
	`CPU_SR_ALLOC
();

362 #ifde‡
OS_SAFETY_CRITICAL


363 i‡(
p_îr
 =(
OS_ERR
 *)0) {

364 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

369 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

370 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

371 *
p_îr
 = 
OS_ERR_TIME_DLY_RESUME_ISR
;

376 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

377 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

378 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

383 
	`CPU_CRITICAL_ENTER
();

384 i‡(
p_tcb
 =
OSTCBCurPå
) {

385 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

386 
	`CPU_CRITICAL_EXIT
();

390 
p_tcb
->
TaskSèã
) {

391 
OS_TASK_STATE_RDY
:

392 
	`CPU_CRITICAL_EXIT
();

393 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

396 
OS_TASK_STATE_DLY
:

397 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

398 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

399 
	`OS_TickLi°Remove
(
p_tcb
);

400 
	`OS_RdyLi°In£π
(
p_tcb
);

401 
	`OS_CRITICAL_EXIT_NO_SCHED
();

402 *
p_îr
 = 
OS_ERR_NONE
;

405 
OS_TASK_STATE_PEND
:

406 
	`CPU_CRITICAL_EXIT
();

407 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

410 
OS_TASK_STATE_PEND_TIMEOUT
:

411 
	`CPU_CRITICAL_EXIT
();

412 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

415 
OS_TASK_STATE_SUSPENDED
:

416 
	`CPU_CRITICAL_EXIT
();

417 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

420 
OS_TASK_STATE_DLY_SUSPENDED
:

421 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

422 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

423 
	`OS_TickLi°Remove
(
p_tcb
);

424 
	`OS_CRITICAL_EXIT_NO_SCHED
();

425 *
p_îr
 = 
OS_ERR_TASK_SUSPENDED
;

428 
OS_TASK_STATE_PEND_SUSPENDED
:

429 
	`CPU_CRITICAL_EXIT
();

430 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

433 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

434 
	`CPU_CRITICAL_EXIT
();

435 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

439 
	`CPU_CRITICAL_EXIT
();

440 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

444 
	`OSSched
();

445 
	}
}

463 
OS_TICK
 
	$OSTimeGë
 (
OS_ERR
 *
p_îr
)

465 
OS_TICK
 
ticks
;

466 
	`CPU_SR_ALLOC
();

470 #ifde‡
OS_SAFETY_CRITICAL


471 i‡(
p_îr
 =(
OS_ERR
 *)0) {

472 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

473  ((
OS_TICK
)0);

477 
	`CPU_CRITICAL_ENTER
();

478 
ticks
 = 
OSTickCå
;

479 
	`CPU_CRITICAL_EXIT
();

480 *
p_îr
 = 
OS_ERR_NONE
;

481  (
ticks
);

482 
	}
}

500 
	$OSTimeSë
 (
OS_TICK
 
ticks
,

501 
OS_ERR
 *
p_îr
)

503 
	`CPU_SR_ALLOC
();

507 #ifde‡
OS_SAFETY_CRITICAL


508 i‡(
p_îr
 =(
OS_ERR
 *)0) {

509 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

514 
	`CPU_CRITICAL_ENTER
();

515 
OSTickCå
 = 
ticks
;

516 
	`CPU_CRITICAL_EXIT
();

517 *
p_îr
 = 
OS_ERR_NONE
;

518 
	}
}

534 
	$OSTimeTick
 ()

536 
OS_ERR
 
îr
;

537 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

538 
CPU_TS
 
ts
;

542 
	`OSTimeTickHook
();

544 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

546 
ts
 = 
	`OS_TS_GET
();

547 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
Ë
OS_OBJ_TYPE_TICK
,

548 (*)&
OSRdyLi°
[
OSPrioCur
],

550 (
OS_MSG_SIZE
) 0u,

551 (
OS_FLAGS
 ) 0u,

552 (
OS_OPT
 ) 0u,

553 (
CPU_TS
 ) 
ts
,

554 (
OS_ERR
 *)&
îr
);

558 ()
	`OSTaskSemPo°
((
OS_TCB
 *)&
OSTickTaskTCB
,

559 (
OS_OPT
 ) 
OS_OPT_POST_NONE
,

560 (
OS_ERR
 *)&
îr
);

563 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

564 
	`OS_SchedRoundRobö
(&
OSRdyLi°
[
OSPrioCur
]);

567 #i‡
OS_CFG_TMR_EN
 > 0u

568 
OSTmrUpd©eCå
--;

569 i‡(
OSTmrUpd©eCå
 =(
OS_CTR
)0u) {

570 
OSTmrUpd©eCå
 = 
OSTmrUpd©eC¡
;

571 
	`OSTaskSemPo°
((
OS_TCB
 *)&
OSTmrTaskTCB
,

572 (
OS_OPT
 ) 
OS_OPT_POST_NONE
,

573 (
OS_ERR
 *)&
îr
);

578 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_tmr.c

35 
	#MICRIUM_SOURCE


	)

36 
	~<os.h
>

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_tmr__c
 = "$Id: $";

43 #i‡
OS_CFG_TMR_EN
 > 0u

50 
	#OS_OPT_LINK_DLY
 (
OS_OPT
)(0u)

	)

51 
	#OS_OPT_LINK_PERIODIC
 (
OS_OPT
)(1u)

	)

59 
OS_TmrLock
 ();

60 
OS_TmrU∆ock
 ();

115 
	$OSTmrCª©e
 (
OS_TMR
 *
p_tmr
,

116 
CPU_CHAR
 *
p_«me
,

117 
OS_TICK
 
dly
,

118 
OS_TICK
 
≥riod
,

119 
OS_OPT
 
›t
,

120 
OS_TMR_CALLBACK_PTR
 
p_ˇŒback
,

121 *
p_ˇŒback_¨g
,

122 
OS_ERR
 *
p_îr
)

124 #ifde‡
OS_SAFETY_CRITICAL


125 i‡(
p_îr
 =(
OS_ERR
 *)0) {

126 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

131 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


132 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

133 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

138 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

139 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

140 *
p_îr
 = 
OS_ERR_TMR_ISR
;

145 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

146 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

147 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

151 
›t
) {

152 
OS_OPT_TMR_PERIODIC
:

153 i‡(
≥riod
 =(
OS_TICK
)0) {

154 *
p_îr
 = 
OS_ERR_TMR_INVALID_PERIOD
;

159 
OS_OPT_TMR_ONE_SHOT
:

160 i‡(
dly
 =(
OS_TICK
)0) {

161 *
p_îr
 = 
OS_ERR_TMR_INVALID_DLY
;

167 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

172 
	`OS_TmrLock
();

174 
p_tmr
->
Sèã
 = (
OS_STATE
 )
OS_TMR_STATE_STOPPED
;

175 #i‡
OS_OBJ_TYPE_REQ
 > 0u

176 
p_tmr
->
Ty≥
 = (
OS_OBJ_TYPE
 )
OS_OBJ_TYPE_TMR
;

178 #i‡
OS_CFG_DBG_EN
 > 0u

179 
p_tmr
->
NamePå
 = (
CPU_CHAR
 *)
p_«me
;

181 ()&
p_«me
;

183 
p_tmr
->
Dly
 = (
OS_TICK
 )
dly
;

184 
p_tmr
->
Remaö
 = (
OS_TICK
 )0;

185 
p_tmr
->
Pîiod
 = (
OS_TICK
 )
≥riod
;

186 
p_tmr
->
O±
 = (
OS_OPT
 )
›t
;

187 
p_tmr
->
CÆlbackPå
 = (
OS_TMR_CALLBACK_PTR
)
p_ˇŒback
;

188 
p_tmr
->
CÆlbackPåArg
 = (*)
p_ˇŒback_¨g
;

189 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

190 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

192 #i‡
OS_CFG_DBG_EN
 > 0u

193 
	`OS_TmrDbgLi°Add
(
p_tmr
);

195 
OSTmrQty
++;

197 
	`OS_TmrU∆ock
();

198 *
p_îr
 = 
OS_ERR_NONE
;

199 
	}
}

224 #i‡
OS_CFG_TMR_DEL_EN
 > 0u

225 
CPU_BOOLEAN
 
	$OSTmrDñ
 (
OS_TMR
 *
p_tmr
,

226 
OS_ERR
 *
p_îr
)

228 
CPU_BOOLEAN
 
suc˚ss
;

232 #ifde‡
OS_SAFETY_CRITICAL


233 i‡(
p_îr
 =(
OS_ERR
 *)0) {

234 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

235  (
DEF_FALSE
);

239 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

240 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

241 *
p_îr
 = 
OS_ERR_TMR_ISR
;

242  (
DEF_FALSE
);

246 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

247 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

248 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

249  (
DEF_FALSE
);

253 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

254 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

255 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

256  (
DEF_FALSE
);

260 
	`OS_TmrLock
();

262 #i‡
OS_CFG_DBG_EN
 > 0u

263 
	`OS_TmrDbgLi°Remove
(
p_tmr
);

266 
p_tmr
->
Sèã
) {

267 
OS_TMR_STATE_RUNNING
:

268 
	`OS_TmrU∆ök
(
p_tmr
);

269 
	`OS_TmrCÃ
(
p_tmr
);

270 
	`OS_TmrU∆ock
();

271 
OSTmrQty
--;

272 *
p_îr
 = 
OS_ERR_NONE
;

273 
suc˚ss
 = 
DEF_TRUE
;

276 
OS_TMR_STATE_STOPPED
:

277 
OS_TMR_STATE_COMPLETED
:

278 
	`OS_TmrCÃ
(
p_tmr
);

279 
	`OS_TmrU∆ock
();

280 
OSTmrQty
--;

281 *
p_îr
 = 
OS_ERR_NONE
;

282 
suc˚ss
 = 
DEF_TRUE
;

285 
OS_TMR_STATE_UNUSED
:

286 
	`OS_TmrU∆ock
();

287 *
p_îr
 = 
OS_ERR_TMR_INACTIVE
;

288 
suc˚ss
 = 
DEF_FALSE
;

292 
	`OS_TmrU∆ock
();

293 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

294 
suc˚ss
 = 
DEF_FALSE
;

297  (
suc˚ss
);

298 
	}
}

325 
OS_TICK
 
	$OSTmrRemaöGë
 (
OS_TMR
 *
p_tmr
,

326 
OS_ERR
 *
p_îr
)

328 
OS_TICK
 
ªmaö
;

329 
OS_ERR
 
îr
;

333 #ifde‡
OS_SAFETY_CRITICAL


334 i‡(
p_îr
 =(
OS_ERR
 *)0) {

335 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

336  ((
OS_TICK
)0);

340 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

341 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

342 *
p_îr
 = 
OS_ERR_TMR_ISR
;

343  ((
OS_TICK
)0);

347 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

348 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

349 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

350  ((
OS_TICK
)0);

354 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

355 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

356 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

357  ((
OS_TICK
)0);

361 
	`OSSchedLock
(&
îr
);

362 ()&
îr
;

364 
p_tmr
->
Sèã
) {

365 
OS_TMR_STATE_RUNNING
:

366 
ªmaö
 = 
p_tmr
->
Remaö
;

367 *
p_îr
 = 
OS_ERR_NONE
;

370 
OS_TMR_STATE_STOPPED
:

371 i‡(
p_tmr
->
O±
 =
OS_OPT_TMR_PERIODIC
) {

372 i‡(
p_tmr
->
Dly
 == 0u) {

373 
ªmaö
 = 
p_tmr
->
Pîiod
;

375 
ªmaö
 = 
p_tmr
->
Dly
;

378 
ªmaö
 = 
p_tmr
->
Dly
;

380 *
p_îr
 = 
OS_ERR_NONE
;

383 
OS_TMR_STATE_COMPLETED
:

384 *
p_îr
 = 
OS_ERR_NONE
;

385 
ªmaö
 = (
OS_TICK
)0;

388 
OS_TMR_STATE_UNUSED
:

389 *
p_îr
 = 
OS_ERR_TMR_INACTIVE
;

390 
ªmaö
 = (
OS_TICK
)0;

394 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

395 
ªmaö
 = (
OS_TICK
)0;

399 
	`OSSchedU∆ock
(&
îr
);

400 ()&
îr
;

402  (
ªmaö
);

403 
	}
}

433 
CPU_BOOLEAN
 
	$OSTmrSèπ
 (
OS_TMR
 *
p_tmr
,

434 
OS_ERR
 *
p_îr
)

436 
OS_TMR
 *
p_√xt
;

437 
CPU_BOOLEAN
 
suc˚ss
;

438 
	`CPU_SR_ALLOC
();

442 #ifde‡
OS_SAFETY_CRITICAL


443 i‡(
p_îr
 =(
OS_ERR
 *)0) {

444 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

445  (
DEF_FALSE
);

449 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

450 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

451 *
p_îr
 = 
OS_ERR_TMR_ISR
;

452  (
DEF_FALSE
);

456 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

457 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

458 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

459  (
DEF_FALSE
);

463 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

464 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

465 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

466  (
DEF_FALSE
);

470 
p_tmr
->
Sèã
) {

471 
OS_TMR_STATE_RUNNING
:

472 
	`CPU_CRITICAL_ENTER
();

473 
p_tmr
->
Remaö
 =Ö_tmr->
Dly
;

474 
	`CPU_CRITICAL_EXIT
();

475 *
p_îr
 = 
OS_ERR_NONE
;

476 
suc˚ss
 = 
DEF_TRUE
;

479 
OS_TMR_STATE_STOPPED
:

480 
OS_TMR_STATE_COMPLETED
:

481 
	`OS_TmrLock
();

482 
p_tmr
->
Sèã
 = 
OS_TMR_STATE_RUNNING
;

483 i‡(
p_tmr
->
Dly
 =(
OS_TICK
)0) {

484 
p_tmr
->
Remaö
 =Ö_tmr->
Pîiod
;

486 
p_tmr
->
Remaö
 =Ö_tmr->
Dly
;

488 i‡(
OSTmrLi°På
 =(
OS_TMR
 *)0) {

489 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

490 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

491 
OSTmrLi°På
 = 
p_tmr
;

492 
OSTmrLi°E¡rõs
 = 1u;

494 
p_√xt
 = 
OSTmrLi°På
;

495 
p_tmr
->
NextPå
 = 
OSTmrLi°På
;

496 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

497 
p_√xt
->
PªvPå
 = 
p_tmr
;

498 
OSTmrLi°På
 = 
p_tmr
;

499 
OSTmrLi°E¡rõs
++;

501 
	`OS_TmrU∆ock
();

502 *
p_îr
 = 
OS_ERR_NONE
;

503 
suc˚ss
 = 
DEF_TRUE
;

506 
OS_TMR_STATE_UNUSED
:

507 *
p_îr
 = 
OS_ERR_TMR_INACTIVE
;

508 
suc˚ss
 = 
DEF_FALSE
;

512 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

513 
suc˚ss
 = 
DEF_FALSE
;

516  (
suc˚ss
);

517 
	}
}

545 
OS_STATE
 
	$OSTmrSèãGë
 (
OS_TMR
 *
p_tmr
,

546 
OS_ERR
 *
p_îr
)

548 
OS_STATE
 
°©e
;

552 #ifde‡
OS_SAFETY_CRITICAL


553 i‡(
p_îr
 =(
OS_ERR
 *)0) {

554 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

555  (
OS_TMR_STATE_UNUSED
);

559 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

560 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

561 *
p_îr
 = 
OS_ERR_TMR_ISR
;

562  (
OS_TMR_STATE_UNUSED
);

566 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

567 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

568 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

569  (
OS_TMR_STATE_UNUSED
);

573 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

574 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

575 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

576  (
OS_TMR_STATE_UNUSED
);

580 
°©e
 = 
p_tmr
->
Sèã
;

581 
°©e
) {

582 
OS_TMR_STATE_UNUSED
:

583 
OS_TMR_STATE_STOPPED
:

584 
OS_TMR_STATE_COMPLETED
:

585 
OS_TMR_STATE_RUNNING
:

586 *
p_îr
 = 
OS_ERR_NONE
;

590 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

593  (
°©e
);

594 
	}
}

633 
CPU_BOOLEAN
 
	$OSTmrSt›
 (
OS_TMR
 *
p_tmr
,

634 
OS_OPT
 
›t
,

635 *
p_ˇŒback_¨g
,

636 
OS_ERR
 *
p_îr
)

638 
OS_TMR_CALLBACK_PTR
 
p_‚˘
;

639 
CPU_BOOLEAN
 
suc˚ss
;

643 #ifde‡
OS_SAFETY_CRITICAL


644 i‡(
p_îr
 =(
OS_ERR
 *)0) {

645 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

646  (
DEF_FALSE
);

650 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

651 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

652 *
p_îr
 = 
OS_ERR_TMR_ISR
;

653  (
DEF_FALSE
);

657 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

658 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

659 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

660  (
DEF_FALSE
);

664 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

665 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

666 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

667  (
DEF_FALSE
);

671 
p_tmr
->
Sèã
) {

672 
OS_TMR_STATE_RUNNING
:

673 
	`OS_TmrLock
();

674 
	`OS_TmrU∆ök
(
p_tmr
);

675 *
p_îr
 = 
OS_ERR_NONE
;

676 
›t
) {

677 
OS_OPT_TMR_CALLBACK
:

678 
p_‚˘
 = 
p_tmr
->
CÆlbackPå
;

679 i‡(
p_‚˘
 !(
OS_TMR_CALLBACK_PTR
)0) {

680 (*
p_‚˘
)((*)
p_tmr
,Ö_tmr->
CÆlbackPåArg
);

682 *
p_îr
 = 
OS_ERR_TMR_NO_CALLBACK
;

686 
OS_OPT_TMR_CALLBACK_ARG
:

687 
p_‚˘
 = 
p_tmr
->
CÆlbackPå
;

688 i‡(
p_‚˘
 !(
OS_TMR_CALLBACK_PTR
)0) {

689 (*
p_‚˘
)((*)
p_tmr
, 
p_ˇŒback_¨g
);

691 *
p_îr
 = 
OS_ERR_TMR_NO_CALLBACK
;

695 
OS_OPT_TMR_NONE
:

699 
	`OS_TmrU∆ock
();

700 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

701  (
DEF_FALSE
);

703 
	`OS_TmrU∆ock
();

704 
suc˚ss
 = 
DEF_TRUE
;

707 
OS_TMR_STATE_COMPLETED
:

708 
OS_TMR_STATE_STOPPED
:

709 *
p_îr
 = 
OS_ERR_TMR_STOPPED
;

710 
suc˚ss
 = 
DEF_TRUE
;

713 
OS_TMR_STATE_UNUSED
:

714 *
p_îr
 = 
OS_ERR_TMR_INACTIVE
;

715 
suc˚ss
 = 
DEF_FALSE
;

719 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

720 
suc˚ss
 = 
DEF_FALSE
;

723  (
suc˚ss
);

724 
	}
}

742 
	$OS_TmrCÃ
 (
OS_TMR
 *
p_tmr
)

744 
p_tmr
->
Sèã
 = 
OS_TMR_STATE_UNUSED
;

745 #i‡
OS_OBJ_TYPE_REQ
 > 0u

746 
p_tmr
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

748 #i‡
OS_CFG_DBG_EN
 > 0u

749 
p_tmr
->
NamePå
 = (
CPU_CHAR
 *)((*)"?TMR");

751 
p_tmr
->
Dly
 = (
OS_TICK
 )0;

752 
p_tmr
->
Remaö
 = (
OS_TICK
 )0;

753 
p_tmr
->
Pîiod
 = (
OS_TICK
 )0;

754 
p_tmr
->
O±
 = (
OS_OPT
 )0;

755 
p_tmr
->
CÆlbackPå
 = (
OS_TMR_CALLBACK_PTR
)0;

756 
p_tmr
->
CÆlbackPåArg
 = (*)0;

757 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

758 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

759 
	}
}

777 #i‡
OS_CFG_DBG_EN
 > 0u

778 
	$OS_TmrDbgLi°Add
 (
OS_TMR
 *
p_tmr
)

780 
p_tmr
->
DbgPªvPå
 = (
OS_TMR
 *)0;

781 i‡(
OSTmrDbgLi°På
 =(
OS_TMR
 *)0) {

782 
p_tmr
->
DbgNextPå
 = (
OS_TMR
 *)0;

784 
p_tmr
->
DbgNextPå
 = 
OSTmrDbgLi°På
;

785 
OSTmrDbgLi°På
->
DbgPªvPå
 = 
p_tmr
;

787 
OSTmrDbgLi°På
 = 
p_tmr
;

788 
	}
}

792 
	$OS_TmrDbgLi°Remove
 (
OS_TMR
 *
p_tmr
)

794 
OS_TMR
 *
p_tmr_√xt
;

795 
OS_TMR
 *
p_tmr_¥ev
;

798 
p_tmr_¥ev
 = 
p_tmr
->
DbgPªvPå
;

799 
p_tmr_√xt
 = 
p_tmr
->
DbgNextPå
;

801 i‡(
p_tmr_¥ev
 =(
OS_TMR
 *)0) {

802 
OSTmrDbgLi°På
 = 
p_tmr_√xt
;

803 i‡(
p_tmr_√xt
 !(
OS_TMR
 *)0) {

804 
p_tmr_√xt
->
DbgPªvPå
 = (
OS_TMR
 *)0;

806 
p_tmr
->
DbgNextPå
 = (
OS_TMR
 *)0;

808 } i‡(
p_tmr_√xt
 =(
OS_TMR
 *)0) {

809 
p_tmr_¥ev
->
DbgNextPå
 = (
OS_TMR
 *)0;

810 
p_tmr
->
DbgPªvPå
 = (
OS_TMR
 *)0;

813 
p_tmr_¥ev
->
DbgNextPå
 = 
p_tmr_√xt
;

814 
p_tmr_√xt
->
DbgPªvPå
 = 
p_tmr_¥ev
;

815 
p_tmr
->
DbgNextPå
 = (
OS_TMR
 *)0;

816 
p_tmr
->
DbgPªvPå
 = (
OS_TMR
 *)0;

818 
	}
}

842 
	$OS_TmrInô
 (
OS_ERR
 *
p_îr
)

844 #ifde‡
OS_SAFETY_CRITICAL


845 i‡(
p_îr
 =(
OS_ERR
 *)0) {

846 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

851 #i‡
OS_CFG_DBG_EN
 > 0u

852 
OSTmrDbgLi°På
 = (
OS_TMR
 *)0;

855 
OSTmrLi°På
 = (
OS_TMR
 *)0;

856 
OSTmrLi°E¡rõs
 = 0u;

858 i‡(
OSCfg_TmrTaskR©e_Hz
 > (
OS_RATE_HZ
)0) {

859 
OSTmrUpd©eC¡
 = 
OSCfg_TickR©e_Hz
 / 
OSCfg_TmrTaskR©e_Hz
;

861 
OSTmrUpd©eC¡
 = 
OSCfg_TickR©e_Hz
 / (
OS_RATE_HZ
)10;

863 
OSTmrUpd©eCå
 = 
OSTmrUpd©eC¡
;

865 
OSTmrTickCå
 = (
OS_TICK
)0;

867 
OSTmrTaskTimeMax
 = (
CPU_TS
)0;

869 #i‡ 
OS_CFG_MUTEX_EN
 > 0u

870 
	`OSMuãxCª©e
(&
OSTmrMuãx
,

872 
p_îr
);

873 i‡(*
p_îr
 !
OS_ERR_NONE
) {

879 i‡(
OSCfg_TmrTaskStkBa£På
 =(
CPU_STK
*)0) {

880 *
p_îr
 = 
OS_ERR_TMR_STK_INVALID
;

884 i‡(
OSCfg_TmrTaskStkSize
 < 
OSCfg_StkSizeMö
) {

885 *
p_îr
 = 
OS_ERR_TMR_STK_SIZE_INVALID
;

889 i‡(
OSCfg_TmrTaskPrio
 >(
OS_CFG_PRIO_MAX
 - 1u)) {

890 *
p_îr
 = 
OS_ERR_TMR_PRIO_INVALID
;

894 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSTmrTaskTCB
,

895 (
CPU_CHAR
 *)((*)"uC/OS-III Timer Task"),

896 (
OS_TASK_PTR
 )
OS_TmrTask
,

898 (
OS_PRIO
 )
OSCfg_TmrTaskPrio
,

899 (
CPU_STK
 *)
OSCfg_TmrTaskStkBa£På
,

900 (
CPU_STK_SIZE
)
OSCfg_TmrTaskStkLimô
,

901 (
CPU_STK_SIZE
)
OSCfg_TmrTaskStkSize
,

902 (
OS_MSG_QTY
 )0,

903 (
OS_TICK
 )0,

905 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
 | 
OS_OPT_TASK_NO_TLS
),

906 (
OS_ERR
 *)
p_îr
);

907 
	}
}

924 
	$OS_TmrRe£tPók
 ()

926 
	}
}

944 
	$OS_TmrU∆ök
 (
OS_TMR
 *
p_tmr
)

946 
OS_TMR
 *
p_tmr1
;

947 
OS_TMR
 *
p_tmr2
;

951 i‡(
OSTmrLi°På
 =
p_tmr
) {

952 
p_tmr1
 = (
OS_TMR
 *)
p_tmr
->
NextPå
;

953 
OSTmrLi°På
 = (
OS_TMR
 *)
p_tmr1
;

954 i‡(
p_tmr1
 !(
OS_TMR
 *)0) {

955 
p_tmr1
->
PªvPå
 = (
OS_TMR
 *)0;

958 
p_tmr1
 = (
OS_TMR
 *)
p_tmr
->
PªvPå
;

959 
p_tmr2
 = (
OS_TMR
 *)
p_tmr
->
NextPå
;

960 
p_tmr1
->
NextPå
 = 
p_tmr2
;

961 i‡(
p_tmr2
 !(
OS_TMR
 *)0) {

962 
p_tmr2
->
PªvPå
 = (
OS_TMR
 *)
p_tmr1
;

965 
p_tmr
->
Sèã
 = 
OS_TMR_STATE_STOPPED
;

966 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

967 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

968 
OSTmrLi°E¡rõs
--;

969 
	}
}

986 
	$OS_TmrTask
 (*
p_¨g
)

988 
OS_ERR
 
îr
;

989 
OS_TMR_CALLBACK_PTR
 
p_‚˘
;

990 
OS_TMR
 *
p_tmr
;

991 
OS_TMR
 *
p_tmr_√xt
;

992 
CPU_TS
 
ts
;

993 
CPU_TS
 
ts_°¨t
;

994 
CPU_TS
 
ts_dñè
;

998 ()&
p_¨g
;

999 
DEF_ON
) {

1000 ()
	`OSTaskSemPíd
((
OS_TICK
 )0,

1001 (
OS_OPT
 )
OS_OPT_PEND_BLOCKING
,

1002 (
CPU_TS
 *)&
ts
,

1003 (
OS_ERR
 *)&
îr
);

1006 
	`OS_TmrLock
();

1007 
ts_°¨t
 = 
	`OS_TS_GET
();

1008 
OSTmrTickCå
++;

1009 
p_tmr
 = 
OSTmrLi°På
;

1010 
p_tmr
 !(
OS_TMR
 *)0) {

1011 
	`OSSchedLock
(&
îr
);

1012 ()&
îr
;

1013 
p_tmr_√xt
 = 
p_tmr
->
NextPå
;

1014 
p_tmr
->
Remaö
--;

1015 i‡(
p_tmr
->
Remaö
 == 0) {

1016 i‡(
p_tmr
->
O±
 =
OS_OPT_TMR_PERIODIC
) {

1017 
p_tmr
->
Remaö
 =Ö_tmr->
Pîiod
;

1019 
	`OS_TmrU∆ök
(
p_tmr
);

1020 
p_tmr
->
Sèã
 = 
OS_TMR_STATE_COMPLETED
;

1022 
p_‚˘
 = 
p_tmr
->
CÆlbackPå
;

1023 i‡(
p_‚˘
 !(
OS_TMR_CALLBACK_PTR
)0) {

1024 (*
p_‚˘
)((*)
p_tmr
,

1025 
p_tmr
->
CÆlbackPåArg
);

1028 
p_tmr
 = 
p_tmr_√xt
;

1029 
	`OSSchedU∆ock
(&
îr
);

1030 ()&
îr
;

1033 
ts_dñè
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

1034 
	`OS_TmrU∆ock
();

1036 i‡(
OSTmrTaskTimeMax
 < 
ts_dñè
) {

1037 
OSTmrTaskTimeMax
 = 
ts_dñè
;

1040 
	}
}

1059 
	$OS_TmrLock
 ()

1061 
OS_ERR
 
îr
;

1062 #i‡
OS_CFG_MUTEX_EN
 > 0u

1063 
CPU_TS
 
ts
;

1066 
	`OSMuãxPíd
(&
OSTmrMuãx
,

1068 
OS_OPT_PEND_BLOCKING
,

1069 &
ts
,

1070 &
îr
);

1072 
	`OSSchedLock
(&
îr
);

1074 ()&
îr
;

1075 
	}
}

1080 
	$OS_TmrU∆ock
 ()

1082 
OS_ERR
 
îr
;

1085 #i‡
OS_CFG_MUTEX_EN
 > 0u

1086 
	`OSMuãxPo°
(&
OSTmrMuãx
,

1087 
OS_OPT_POST_NONE
,

1088 &
îr
);

1090 
	`OSSchedU∆ock
(&
îr
);

1092 ()&
îr
;

1093 
	}
}

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_type.h

33 #i‚de‡ 
OS_TYPE_H


34 
	#OS_TYPE_H


	)

36 #ifde‡ 
VSC_INCLUDE_H_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_ty≥__h
 = "$Id: $";

50 
CPU_INT16U
 
	tOS_CPU_USAGE
;

52 
CPU_INT32U
 
	tOS_CTR
;

54 
CPU_INT32U
 
	tOS_CTX_SW_CTR
;

56 
CPU_INT32U
 
	tOS_CYCLES
;

58 
CPU_INT32U
 
	tOS_FLAGS
;

60 
CPU_INT32U
 
	tOS_IDLE_CTR
;

62 
CPU_INT16U
 
	tOS_MEM_QTY
;

63 
CPU_INT16U
 
	tOS_MEM_SIZE
;

65 
CPU_INT16U
 
	tOS_MSG_QTY
;

66 
CPU_INT16U
 
	tOS_MSG_SIZE
;

68 
CPU_INT08U
 
	tOS_NESTING_CTR
;

70 
CPU_INT16U
 
	tOS_OBJ_QTY
;

71 
CPU_INT32U
 
	tOS_OBJ_TYPE
;

73 
CPU_INT16U
 
	tOS_OPT
;

75 
CPU_INT08U
 
	tOS_PRIO
;

77 
CPU_INT16U
 
	tOS_QTY
;

79 
CPU_INT32U
 
	tOS_RATE_HZ
;

81 
CPU_INT32U
 
	tOS_REG
;

82 
CPU_INT08U
 
	tOS_REG_ID
;

84 
CPU_INT32U
 
	tOS_SEM_CTR
;

86 
CPU_INT08U
 
	tOS_STATE
;

88 
CPU_INT08U
 
	tOS_STATUS
;

90 
CPU_INT32U
 
	tOS_TICK
;

	@LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_var.c

35 
	#OS_GLOBALS


	)

37 
	#MICRIUM_SOURCE


	)

38 
	~"os.h
"

40 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


41 c⁄° 
CPU_CHAR
 *
	gos_v¨__c
 = "$Id: $";

	@
1
.
0
125
9723
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/board/board.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/board/board.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/board/board_api.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/board/retarget.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/chip.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/clock_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/clock_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/cmsis.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/error_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/fmc_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/ioswm_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/ioswm_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/lpc_types.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/swm_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/syscon_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/syscon_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/common/chip/sysinit_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/acmp/acmp_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/acmp/acmp_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/adc/adc_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/adc/adc_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/crc/crc_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/crc/crc_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/dma/dma_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/dma/dma_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/gpio/gpio_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/gpio/gpio_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/i2c/i2c_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/i2c/i2c_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/iap/iap.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/iap/iap.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/inmux/inmux_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/mrt/mrt_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/mrt/stopwatch.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/mrt/stopwatch.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/peri_driver.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/pinint/pinint_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/pinint/pinint_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/pmu/pmu_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/pmu/pmu_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/rom/rom_i2c_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/rom/rom_pwr_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/rom/rom_uart_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/rom/romapi_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/sctimer/sct_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/sctimer/sct_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/sctimer/sct_pwm_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/sctimer/sct_pwm_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/spi/spi_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/spi/spi_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/uart/ring_buffer.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/uart/ring_buffer.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/uart/uart_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/uart/uart_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/wkt/wkt_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/wkt/wkt_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/wwdt/wwdt_8xx.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/NXP/peri_driver/wwdt/wwdt_8xx.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/OS/uCOS-III/bsp_os.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/OS/uCOS-III/bsp_os.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_at24.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_at24.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_i2c.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_i2c.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_int.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_ser.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/bsp_ser.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/BSP/cpu_bsp.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/KeilMDK/RTE/RTE_Components.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/app.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/app_cfg.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/bsp_cfg.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/cpu_cfg.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/includes.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/lib_cfg.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/os_app_hooks.c
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/os_app_hooks.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/os_cfg.h
LPC824Lite-uCOS-III-2/Micrium/Examples/NXP/LPC824Lite/OS3/os_cfg_app.h
LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/ARM-Cortex-M0/IAR/cpu.h
LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/ARM-Cortex-M0/IAR/cpu_c.c
LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/ARM-Cortex-M0/RealView/cpu.h
LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/ARM-Cortex-M0/RealView/cpu_c.c
LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/ARM-Cortex-M4/RealView/cpu.h
LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/ARM-Cortex-M4/RealView/cpu_c.c
LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/cpu_core.c
LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/cpu_core.h
LPC824Lite-uCOS-III-2/Micrium/Software/uC-CPU/cpu_def.h
LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_ascii.c
LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_ascii.h
LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_def.h
LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_math.c
LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_math.h
LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_mem.c
LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_mem.h
LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_str.c
LPC824Lite-uCOS-III-2/Micrium/Software/uC-LIB/lib_str.h
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Ports/ARM-Cortex-M0/Generic/IAR/os_cpu.h
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Ports/ARM-Cortex-M0/Generic/IAR/os_cpu_c.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Ports/ARM-Cortex-M0/Generic/RealView/os_cpu.h
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Ports/ARM-Cortex-M0/Generic/RealView/os_cpu_c.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Ports/ARM-Cortex-M4/Generic/RealView/os_cpu.h
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Ports/ARM-Cortex-M4/Generic/RealView/os_cpu_c.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os.h
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_cfg_app.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_core.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_dbg.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_flag.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_int.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_mem.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_msg.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_mutex.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_pend_multi.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_prio.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_q.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_sem.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_stat.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_task.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_tick.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_time.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_tmr.c
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_type.h
LPC824Lite-uCOS-III-2/Micrium/Software/uCOS-III/Source/os_var.c
